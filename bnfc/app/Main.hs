-- Program to test parser, automatically generated by BNF Converter.

module Main where

import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import Control.Monad      ( when )

import Text.Pretty.Simple
import qualified Data.Text.Lazy as T
import LexL    ( Token )
import ParL    ( pTops, myLexer )
import SkelL   ()
import PrintL  ( printTree )
import AbsL    ( Tops(..), Rule(..), RuleBody(..), MatchVars(..), Toplevels(..) )
import LayoutL ( resolveLayout )
import ToGraphViz
import L4
import ToGF (bnfc2str)
import PGF (PGF, readPGF)

type Err = Either String
type ParseFun a = [Token] -> Err a

myLLexer = resolveLayout True . myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> PGF -> ParseFun Tops -> FilePath -> IO ()
runFile v gr p f = putStrLn f >> readFile f >>= run v gr p

run :: Verbosity -> PGF -> ParseFun Tops -> String -> IO ()
run v gr p s = case p ts of
    Left s -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      putStrV v $ show ts
      putStrLn s
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      showTree gr v tree

      exitSuccess
  where
  ts = myLLexer s


showTree :: PGF -> Int -> Tops -> IO ()
showTree gr v tree0
 = let tree = rewriteTree tree0 in do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ T.unpack (pShowNoColor tree)
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree
      putStrV v $ "\n[In English]\n\n" ++ bnfc2str gr tree
      let ruleList = getRules tree
      putStrV v $ "\n[Just the Names]\n\n" ++ (unlines $ showRuleName <$> ruleList)
      putStrV v $ "\n[Dictionary of Name to Rule]\n\n" ++ (T.unpack (pShow $ nameList ruleList))
      putStrV v $ "\n[Rule to Exit]\n\n" ++ (T.unpack (pShow $ (\r -> (showRuleName r, ruleExits r)) <$> ruleList))
      putStrV v $ "\n[As Graph]\n\n"
      printGraph ruleList
      putStrV v $ "\n[As Dotfile]\n\n"
      putStrLn $ showDot ruleList
      writeFile "graph.dot" (showDot ruleList)


rewriteTree :: Tops -> Tops
rewriteTree (Toplevel tops) = Toplevel $ do
  (ToplevelsRule r@(Rule rdef rname asof metalimb rulebody)) <- tops
  ToplevelsRule <$> case rulebody of
    RMatch mvs -> do
      (MatchVars23 innerRule) <- mvs
      rewrite innerRule
    otherwise -> rewrite r


usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  gr <- readPGF "src-l4/Top.pgf"
  case args of
    ["--help"] -> usage
    [] -> getContents >>= run 2 gr pTops
    "-s":fs -> mapM_ (runFile 0 gr pTops) fs
    fs -> mapM_ (runFile 2 gr pTops) fs
