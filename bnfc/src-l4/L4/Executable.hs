-- Program to test parser, automatically generated by BNF Converter.

module L4.Executable where

import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import Control.Monad      ( when )
import Options.Applicative.Simple

import Text.Pretty.Simple
import Data.Maybe (isJust)
import qualified Data.Text.Lazy as T
import LexL    ( Token )
import ParL    ( pTops, myLexer )
import SkelL   ()
import PrintL  ( printTree )
import AbsL    ( Tops(..), Rule(..), RuleBody(..), MatchVars(..), Toplevels(..) )
import LayoutL ( resolveLayout )
import ToGraphViz
import L4
import ToGF (bnfc2str)
import PGF (PGF, readPGF)


type Err = Either String
type ParseFun a = [Token] -> Err a

myLLexer = resolveLayout True . myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> PGF -> ParseFun Tops -> InputOpts -> FilePath -> IO ()
runFile v gr p inOpt f = putStrLn f >> readFile f >>= run v gr p inOpt

run :: Verbosity -> PGF -> ParseFun Tops -> InputOpts -> String -> IO ()
run v gr p inOpt s = case p ts of
    Left notTree -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      putStrV v $ show ts
      putStrLn notTree
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      showTree inOpt gr v tree

      exitSuccess
  where
  ts = myLLexer s


simpleParseTree :: String  -> Err Tops
simpleParseTree = pTops . myLLexer

prettyPrintParseTree :: String -> Either String T.Text
prettyPrintParseTree = fmap pShowNoColor . simpleParseTree

showTree :: InputOpts -> PGF -> Int -> Tops -> IO ()
showTree inOpts gr v tree0
 = let tree = rewriteTree tree0 
       ruleList = getRules tree 
       wantAll f = (allOutputs inOpts || f inOpts)
    in do
    when (wantAll ast) (do
      -- ast output
      printMsg "Abstract Syntax" $ T.unpack (pShowNoColor tree)
      printMsg "Linearized tree" $ printTree tree
                              ) >>
      when (wantAll dot) (do
        -- dotfile output 
        printMsg "As Dotfile" ""
        putStrLn $ showDot ruleList
        writeFile "graph.dot" (showDot ruleList)
                                ) >>
        when (wantAll json) (do
          -- json output
          printMsg "As Json" ""
          return ()
                                   ) >>
          when (wantAll png) (do
            -- png output
            printMsg "As Graph" ""
            printGraph ruleList
                                    ) >>
            when (wantAll (isJust . gfOut)) (do
              -- gf output currently only in ENG
              printMsg "In English" $ bnfc2str gr tree
                                        )
      ---- not quite sure what this is for, gotta ask andreas
        --printMsg "Just the Names" $ unlines $ showRuleName <$> ruleList
        --printMsg "Dictionary of Name to Rule" $ T.unpack (pShow $ nameList ruleList)
        --printMsg "Rule to Exit" $ T.unpack (pShow $ (\r -> (showRuleName r, ruleExits r)) <$> ruleList)
  where
    printMsg msg result = putStrV v $ "\n[" ++ msg ++ "]\n\n" ++ result


rewriteTree :: Tops -> Tops
rewriteTree (Toplevel tops) = Toplevel $ do
  (ToplevelsRule r@(Rule rdef rname asof metalimb rulebody)) <- tops
  ToplevelsRule <$> case rulebody of
    RMatch mvs -> do
      (MatchRule innerRule) <- mvs
      rewrite innerRule
    otherwise -> rewrite r


data InputOpts = InputOpts 
  { allOutputs  :: Bool
  , dot         :: Bool
  , ast         :: Bool
  , json        :: Bool
  , png         :: Bool
  , gfOut       :: Maybe String
  , silent      :: Bool
  , files       :: Maybe String
  } deriving Show


optsParse :: Parser InputOpts
optsParse = InputOpts <$>
      switch 
        ( long "all"
       <> short 'a'
       <> help "Generates all possible output formats (natLang defaults to EN)" )
  <*> switch 
        ( long "dot"
       <> help "Enables graphviz DOT language output" )
  <*> switch
        ( long "ast"
       <> help "Enables AST output" )
  <*> switch
        ( long "json"
       <> help "Enables JSON output" )
  <*> switch
        ( long "png"
       <> help "Enables PNG output" )
  <*> optional (strOption 
        ( long "gf" 
       <> help "Generates NLG output in chosen lanugage" 
       <> metavar "<language>" ))
  <*> switch
        ( long "silent"
       <> short 's'
       <> help "Enables silent output" )
  <*> optional (strOption 
        ( long "files"
       <> metavar "<filenames>"
       <> help "Files to be processed" ))


main :: IO ()
main = do 
  (opts, ()) <- simpleOptions "VERSION x.xx.x"
                              "l4 - a parser for the l4 language"
                              "\n\nThis is a sample description"
                              optsParse
                              empty
                              
  let vb = if silent opts then 0 else 2
  gr <- readPGF "src-l4/Top.pgf"
  case files opts of 
    Just fs -> print fs
      -- mapM_ (runFile 2 gr pTops) fs
    Nothing -> getContents >>= run vb gr pTops opts  



--main :: IO ()
--main = do
  --args <- getArgs
  --gr <- readPGF "src-l4/Top.pgf"
  --case args of
    --["--help"] -> usage
    --[]     --"-s":fs -> mapM_ (runFile 0 gr pTops) fs
    --fs -> mapM_ (runFile 2 gr pTops) fs
