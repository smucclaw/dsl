strict digraph deps {
  node [colorscheme=set312, style=filled];

   subgraph cluster_1 {
     label = "src/LS/Lib.hs";
     "vvlookup" [label= "vvlookup", color=1];
     "stanzaAsStream" [label= "stanzaAsStream", color=1];
     "splitPilcrows" [label= "splitPilcrows", color=1];
     "semicolonBetweenRules" [label= "semicolonBetweenRules", color=1];
     "rewriteDitto" [label= "rewriteDitto", color=1];
     "renderStream" [label= "renderStream", color=1];
     "printStream" [label= "printStream", color=1];
     "preambleRelPred" [label= "preambleRelPred", color=1];
     "preambleBoolStructP" [label= "preambleBoolStructP", color=1];
     "permutationsReg" [label= "permutationsReg", color=1];
     "parseRules" [label= "parseRules", color=1];
     "pad" [label= "pad", color=1];
     "pVarDefn" [label= "pVarDefn", color=1];
     "pTypeDeclaration" [label= "pTypeDeclaration", color=1];
     "pToplevel" [label= "pToplevel", color=1];
     "pTemporal" [label= "pTemporal", color=1];
     "pScenarioRule" [label= "pScenarioRule", color=1];
     "pRulesOnly" [label= "pRulesOnly", color=1];
     "pRulesAndNotRules" [label= "pRulesAndNotRules", color=1];
     "pRules" [label= "pRules", color=1];
     "pRule" [label= "pRule", color=1];
     "pRenderStream" [label= "pRenderStream", color=1];
     "pRegRuleSugary" [label= "pRegRuleSugary", color=1];
     "pRegRuleNormal" [label= "pRegRuleNormal", color=1];
     "pRegRule" [label= "pRegRule", color=1];
     "pPreamble" [label= "pPreamble", color=1];
     "pOrGroup" [label= "pOrGroup", color=1];
     "pNotElement" [label= "pNotElement", color=1];
     "pNotARule" [label= "pNotARule", color=1];
     "pNestedBool" [label= "pNestedBool", color=1];
     "pLeafVal" [label= "pLeafVal", color=1];
     "pHornHead2" [label= "pHornHead2", color=1];
     "pHornClause2" [label= "pHornClause2", color=1];
     "pHornBody2" [label= "pHornBody2", color=1];
     "pHenceLest" [label= "pHenceLest", color=1];
     "pGivens" [label= "pGivens", color=1];
     "pExpect" [label= "pExpect", color=1];
     "pElement" [label= "pElement", color=1];
     "pDoAction" [label= "pDoAction", color=1];
     "pDT" [label= "pDT", color=1];
     "pDA" [label= "pDA", color=1];
     "pAtomicElement" [label= "pAtomicElement", color=1];
     "pAndGroup" [label= "pAndGroup", color=1];
     "pActor" [label= "pActor", color=1];
     "pAction" [label= "pAction", color=1];
     "mkRBfromDT" [label= "mkRBfromDT", color=1];
     "mkRBfromDA" [label= "mkRBfromDA", color=1];
     "indentedDummySing" [label= "indentedDummySing", color=1];
     "hornlikeAsElement" [label= "hornlikeAsElement", color=1];
     "glueLineNumbers" [label= "glueLineNumbers", color=1];
     "getStanzas" [label= "getStanzas", color=1];
     "getConfig" [label= "getConfig", color=1];
     "getChunks" [label= "getChunks", color=1];
     "firstAndLast" [label= "firstAndLast", color=1];
     "extractLines" [label= "extractLines", color=1];
     "exprP" [label= "exprP", color=1];
     "exampleStreams" [label= "exampleStreams", color=1];
     "exampleStream" [label= "exampleStream", color=1];
     "equalizeLines" [label= "equalizeLines", color=1];
     "dumpRules" [label= "dumpRules", color=1];
     "dummySing" [label= "dummySing", color=1];
     "dBoolStructP" [label= "dBoolStructP", color=1];
     "asCSV" [label= "asCSV", color=1];
     "asBoxes" [label= "asBoxes", color=1];
     "anything" [label= "anything", color=1];
   }

   subgraph cluster_2 {
     label = "src/LS/RelationalPredicates.hs";
     "writeTypically" [label= "writeTypically", color=2];
     "whenIf" [label= "whenIf", color=2];
     "whenCase" [label= "whenCase", color=2];
     "unLeaf" [label= "unLeaf", color=2];
     "typically" [label= "typically", color=2];
     "tok2rel" [label= "tok2rel", color=2];
     "slTypedMulti" [label= "slTypedMulti", color=2];
     "slTypeSig" [label= "slTypeSig", color=2];
     "slRelPred" [label= "slRelPred", color=2];
     "slParamText" [label= "slParamText", color=2];
     "slOneOf" [label= "slOneOf", color=2];
     "slKeyValuesAka" [label= "slKeyValuesAka", color=2];
     "slKeyValues" [label= "slKeyValues", color=2];
     "slAKA" [label= "slAKA", color=2];
     "rpSameNextLineWhen" [label= "rpSameNextLineWhen", color=2];
     "rpParamTextWithTypesig" [label= "rpParamTextWithTypesig", color=2];
     "rpMT" [label= "rpMT", color=2];
     "rpLeafVal" [label= "rpLeafVal", color=2];
     "rpHornlikeAsElement" [label= "rpHornlikeAsElement", color=2];
     "rpConstraint" [label= "rpConstraint", color=2];
     "rpConstitutiveAsElement" [label= "rpConstitutiveAsElement", color=2];
     "rpBoolStructR" [label= "rpBoolStructR", color=2];
     "pt2typesigs" [label= "pt2typesigs", color=2];
     "preambleParamText" [label= "preambleParamText", color=2];
     "preambleBoolStructR" [label= "preambleBoolStructR", color=2];
     "permutationsCon" [label= "permutationsCon", color=2];
     "partitionExistentials" [label= "partitionExistentials", color=2];
     "pTypeSig" [label= "pTypeSig", color=2];
     "pTreeSomeWords" [label= "pTreeSomeWords", color=2];
     "pTreeOneWord" [label= "pTreeOneWord", color=2];
     "pSingleTermAka" [label= "pSingleTermAka", color=2];
     "pSingleTerm" [label= "pSingleTerm", color=2];
     "pRelationalPredicate" [label= "pRelationalPredicate", color=2];
     "pRelPred" [label= "pRelPred", color=2];
     "pParamText\'" [label= "pParamText\'", color=2];
     "pParamTextSameDepthOK" [label= "pParamTextSameDepthOK", color=2];
     "pParamTextMustIndent" [label= "pParamTextMustIndent", color=2];
     "pParamText" [label= "pParamText", color=2];
     "pPTree" [label= "pPTree", color=2];
     "pPTParens" [label= "pPTParens", color=2];
     "pOneOf" [label= "pOneOf", color=2];
     "pNameParens" [label= "pNameParens", color=2];
     "pMultiTermAka" [label= "pMultiTermAka", color=2];
     "pKeyValuesAka" [label= "pKeyValuesAka", color=2];
     "pKeyValues" [label= "pKeyValues", color=2];
     "pHornlike\'" [label= "pHornlike\'", color=2];
     "pHornlike" [label= "pHornlike", color=2];
     "pConstitutiveRule" [label= "pConstitutiveRule", color=2];
     "pBoolStructPT" [label= "pBoolStructPT", color=2];
     "pBoolConnector" [label= "pBoolConnector", color=2];
     "pBSR" [label= "pBSR", color=2];
     "pAKA" [label= "pAKA", color=2];
     "nestedHorn" [label= "nestedHorn", color=2];
     "mustNestHorn" [label= "mustNestHorn", color=2];
     "mergePBRS" [label= "mergePBRS", color=2];
     "meansIsWhose" [label= "meansIsWhose", color=2];
     "meansIs" [label= "meansIs", color=2];
     "hc2preds" [label= "hc2preds", color=2];
     "hasTypeSig" [label= "hasTypeSig", color=2];
     "getSrcRef" [label= "getSrcRef", color=2];
     "getBSR" [label= "getBSR", color=2];
     "c2hornlike" [label= "c2hornlike", color=2];
     "bsr2pt" [label= "bsr2pt", color=2];
     "addneg" [label= "addneg", color=2];
     "aaLeavesFilter" [label= "aaLeavesFilter", color=2];
     "aaLeaves" [label= "aaLeaves", color=2];
   }

"aaLeaves" -> "aaLeavesFilter";
"aaLeavesFilter" -> "aaLeavesFilter";
"asCSV" -> "equalizeLines";
"asCSV" -> "rewriteDitto";
"dBoolStructP" -> "pParamText";
"dumpRules" -> "parseRules";
"equalizeLines" -> "pad";
"exampleStream" -> "asCSV";
"exampleStream" -> "getStanzas";
"exampleStream" -> "stanzaAsStream";
"exampleStreams" -> "asCSV";
"exampleStreams" -> "getStanzas";
"exampleStreams" -> "stanzaAsStream";
"exprP" -> "pParamText";
"getStanzas" -> "getChunks";
"getStanzas" -> "splitPilcrows";
"glueLineNumbers" -> "glueLineNumbers";
"mustNestHorn" -> "getSrcRef";
"nestedHorn" -> "mustNestHorn";
"pAKA" -> "slAKA";
"pAction" -> "pParamText";
"pActor" -> "pNameParens";
"pActor" -> "pPreamble";
"pAndGroup" -> "pOrGroup";
"pAtomicElement" -> "pLeafVal";
"pAtomicElement" -> "pNestedBool";
"pAtomicElement" -> "pNotElement";
"pBSR" -> "pRelPred";
"pBoolStructPT" -> "pParamText";
"pConstitutiveRule" -> "addneg";
"pConstitutiveRule" -> "mergePBRS";
"pConstitutiveRule" -> "pNameParens";
"pConstitutiveRule" -> "permutationsCon";
"pDA" -> "dBoolStructP";
"pDT" -> "pTemporal";
"pDoAction" -> "preambleBoolStructP";
"pElement" -> "hornlikeAsElement";
"pElement" -> "pAtomicElement";
"pElement" -> "pHornlike";
"pExpect" -> "pBSR";
"pExpect" -> "rpSameNextLineWhen";
"pGivens" -> "pRelationalPredicate";
"pHenceLest" -> "pRegRule";
"pHornBody2" -> "pBSR";
"pHornClause2" -> "pHornBody2";
"pHornClause2" -> "pHornHead2";
"pHornHead2" -> "pRelationalPredicate";
"pHornlike" -> "pHornlike\'";
"pHornlike\'" -> "preambleParamText";
"pHornlike\'" -> "rpSameNextLineWhen";
"pHornlike\'" -> "whenCase";
"pKeyValues" -> "slKeyValues";
"pKeyValuesAka" -> "slKeyValuesAka";
"pLeafVal" -> "pParamText";
"pMultiTermAka" -> "pAKA";
"pNameParens" -> "pMultiTermAka";
"pNestedBool" -> "dBoolStructP";
"pNestedBool" -> "pBoolConnector";
"pNestedBool" -> "pLeafVal";
"pNotElement" -> "pElement";
"pOneOf" -> "pParamText";
"pOrGroup" -> "pElement";
"pPTParens" -> "pAKA";
"pPTParens" -> "slParamText";
"pPTree" -> "pTreeOneWord";
"pPTree" -> "pTreeSomeWords";
"pParamText" -> "pParamTextSameDepthOK";
"pParamTextMustIndent" -> "pParamText\'";
"pParamTextSameDepthOK" -> "pParamText\'";
"pParamText\'" -> "pKeyValuesAka";
"pRegRule" -> "pRegRuleNormal";
"pRegRule" -> "pRegRuleSugary";
"pRegRuleNormal" -> "addneg";
"pRegRuleNormal" -> "mergePBRS";
"pRegRuleNormal" -> "pActor";
"pRegRuleNormal" -> "pHenceLest";
"pRegRuleNormal" -> "permutationsReg";
"pRegRuleNormal" -> "preambleBoolStructR";
"pRegRuleSugary" -> "addneg";
"pRegRuleSugary" -> "mergePBRS";
"pRegRuleSugary" -> "pHenceLest";
"pRegRuleSugary" -> "permutationsReg";
"pRelPred" -> "slRelPred";
"pRelationalPredicate" -> "pRelPred";
"pRenderStream" -> "renderStream";
"pRule" -> "c2hornlike";
"pRule" -> "pConstitutiveRule";
"pRule" -> "pHornlike";
"pRule" -> "pRegRule";
"pRule" -> "pScenarioRule";
"pRule" -> "pTypeDeclaration";
"pRule" -> "pVarDefn";
"pRules" -> "pRulesOnly";
"pRulesAndNotRules" -> "pNotARule";
"pRulesAndNotRules" -> "pRule";
"pRulesAndNotRules" -> "pRules";
"pRulesOnly" -> "pRule";
"pRulesOnly" -> "semicolonBetweenRules";
"pScenarioRule" -> "pExpect";
"pScenarioRule" -> "pGivens";
"pSingleTerm" -> "pTypeSig";
"pSingleTermAka" -> "pAKA";
"pSingleTermAka" -> "slTypedMulti";
"pToplevel" -> "pRules";
"pTreeOneWord" -> "pPTree";
"pTreeOneWord" -> "pSingleTermAka";
"pTreeSomeWords" -> "pKeyValuesAka";
"pTreeSomeWords" -> "pMultiTermAka";
"pTreeSomeWords" -> "pPTree";
"pTypeDeclaration" -> "pOneOf";
"pTypeDeclaration" -> "preambleParamText";
"pTypeDeclaration" -> "slKeyValuesAka";
"pTypeSig" -> "pOneOf";
"pVarDefn" -> "pKeyValuesAka";
"pVarDefn" -> "pParamTextMustIndent";
"pVarDefn" -> "preambleParamText";
"pVarDefn" -> "whenCase";
"parseRules" -> "exampleStreams";
"parseRules" -> "getConfig";
"parseRules" -> "pToplevel";
"parseRules" -> "printStream";
"partitionExistentials" -> "hasTypeSig";
"partitionExistentials" -> "hc2preds";
"permutationsCon" -> "preambleBoolStructR";
"permutationsCon" -> "preambleParamText";
"permutationsReg" -> "mkRBfromDA";
"permutationsReg" -> "mkRBfromDT";
"permutationsReg" -> "pDA";
"permutationsReg" -> "pDT";
"permutationsReg" -> "pDoAction";
"permutationsReg" -> "pHornlike\'";
"permutationsReg" -> "pTemporal";
"permutationsReg" -> "preambleBoolStructR";
"permutationsReg" -> "preambleParamText";
"preambleBoolStructP" -> "dBoolStructP";
"preambleBoolStructR" -> "pBSR";
"preambleParamText" -> "pParamText";
"preambleRelPred" -> "pRelationalPredicate";
"printStream" -> "renderStream";
"rpBoolStructR" -> "pBSR";
"rpBoolStructR" -> "tok2rel";
"rpConstraint" -> "meansIs";
"rpConstraint" -> "nestedHorn";
"rpConstraint" -> "pBSR";
"rpConstraint" -> "tok2rel";
"rpLeafVal" -> "pRelationalPredicate";
"rpMT" -> "slAKA";
"rpParamTextWithTypesig" -> "hasTypeSig";
"rpParamTextWithTypesig" -> "slParamText";
"rpSameNextLineWhen" -> "slRelPred";
"rpSameNextLineWhen" -> "whenCase";
"slAKA" -> "getSrcRef";
"slAKA" -> "meansIs";
"slAKA" -> "nestedHorn";
"slAKA" -> "pBSR";
"slAKA" -> "typically";
"slAKA" -> "writeTypically";
"slKeyValues" -> "meansIsWhose";
"slKeyValues" -> "nestedHorn";
"slKeyValues" -> "pBSR";
"slKeyValues" -> "slTypeSig";
"slKeyValuesAka" -> "slAKA";
"slKeyValuesAka" -> "slKeyValues";
"slOneOf" -> "pParamText";
"slParamText" -> "slTypedMulti";
"slRelPred" -> "meansIsWhose";
"slRelPred" -> "mustNestHorn";
"slRelPred" -> "pBSR";
"slRelPred" -> "rpBoolStructR";
"slRelPred" -> "rpConstraint";
"slRelPred" -> "rpMT";
"slRelPred" -> "rpParamTextWithTypesig";
"slTypeSig" -> "slOneOf";
"slTypedMulti" -> "slTypeSig";
"slTypedMulti" -> "typically";
"slTypedMulti" -> "writeTypically";
"whenCase" -> "pBSR";
"whenCase" -> "whenIf";
"writeTypically" -> "getSrcRef";
}
