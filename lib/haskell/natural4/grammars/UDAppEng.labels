-------------------------------------------------------------------
-- Exceptions and special cases, when UD structure doesn't match GF

-- To handle "my hovercraft": i_Pron is not by default parsed as Det
#auxfun PossSgNP_ pron cn : Pron -> CN -> NP = DetCN (DetQuant (PossPron pron) NumSg) cn ; nmod:poss[PronType=Prs] head[Number=Sing]
#auxfun PossPlNP_ pron cn : Pron -> CN -> NP = DetCN (DetQuant (PossPron pron) NumPl) cn ; nmod:poss[PronType=Prs] head[Number=Plur]
#disable PossPron

-- my 5 hovercrafts
#auxfun PossNumSgNP_ pron num cn : Pron -> Num -> CN -> NP = DetCN (DetQuant (PossPron pron) num) cn ; nmod:poss[PronType=Prs] nummod head[Number=Sing]
#auxfun PossNumPlNP_ pron num cn : Pron -> Num -> CN -> NP = DetCN (DetQuant (PossPron pron) num) cn ; nmod:poss[PronType=Prs] nummod head[Number=Plur]

-- [my mother's]:Quant
#auxfun GenNP_ np gen : NP -> Gen -> Quant = GenNP np ; head case
#disable GenNP

-- recovering a "root case nmod" misparsed as "root mark acl", e.g day of mourning:
-- "mourning" is analysed as verb, even though it should be noun, and "of" is analysed as conjunction, should be adposition.
-- We do it in two steps:
-- 1) Create a fake type for the result of "of mourning"
-- 2) Connect "day" to that result of that fake type

-- Step 1: create a result of this fake type NmodMisparsedAsAcl, give it a value that is actually a nmod
#auxfun OfMourning_ of mourn : Prep -> VP -> NmodMisparsedAsAcl = nmod_ of_Prep (GerundNP mourn) ; mark[LEMMA=of] head[VerbForm=Ger]

-- Step 2: connect the nmod with the fake type NmodMisparsedAsAcl to a CN.
-- NB. the label must be aclâ€”this is critical! the whole point is that udpipe has mistakenly applied the acl relation,
-- so if we want to recover the proper relation, we must match acl in the auxfun.
#auxfun DayOfMourning_ day of_mourning : NP -> NmodMisparsedAsAcl -> UDS = root_nmod (rootN_ day) of_mourning ; head acl

-- [my mother's]:Quant [hovercraft]:CN
#auxfun DetCNSgNmod_ quant cn : Quant -> CN -> NP = DetCN (DetQuant quant NumSg) cn ; nmod:poss[POS=NOUN] head[Number=Sing]
#auxfun DetCNPlNmod_ quant cn : Quant -> CN -> NP = DetCN (DetQuant quant NumPl) cn ; nmod:poss[POS=NOUN] head[Number=Plur]

-- [Sylvia's]:Quant [hovercraft]:CN
#auxfun DetCNSgPNmod_ quant cn : Quant -> CN -> NP = DetCN (DetQuant quant NumSg) cn ; nmod:poss[POS=PROPN] head[Number=Sing]
#auxfun DetCNPlPNmod_ quant cn : Quant -> CN -> NP = DetCN (DetQuant quant NumPl) cn ; nmod:poss[POS=PROPN] head[Number=Plur]

-- [my mother's]:Quant [5]:Num [hovercrafts]:CN
#auxfun DetCNNumNmod_ quant num cn : Quant -> Num -> CN -> NP = DetCN (DetQuant quant num) cn ; nmod:poss[POS=NOUN] nummod head

-- [Sylvia's]:Quant [500]:Num [hovercraft]:CN
#auxfun DetCNNumPNmod_ quant num cn : Quant -> Num -> CN -> NP = DetCN (DetQuant quant num) cn ; nmod:poss[POS=PROPN] nummod head

-- [one]:NP that processes data
#auxfun CardNP_ card : Card -> root = rootN_ (DetNP (DetQuant IndefArt (NumCard card))) ; head

-- #auxfun PossGenmodSgNP_ np cn : NP -> CN -> NP = GenModNP NumSg np cn ; nmod:poss head[Number=Sing]
-- #auxfun PossGenmodSgPl_ np cn : NP -> CN -> NP = GenModNP NumPl np cn ; nmod:poss head[Number=Plur]

-- disable plurals as mass terms
#auxfun MassNP_sg cn : CN -> NP = MassNP        cn ; head[Number=Sing]
#auxfun DetCN_aPl cn : CN -> NP = DetCN aPl_Det cn ; head[Number=Plur]
#disable MassNP aPl_Det NumPl

-- use aSg_Det just to fit in with the rest. This is just an aesthetic choice, shorter tree than DetQuant IndefArt NumSg
#auxfun DetCN_a_ det cn : Det -> CN -> NP = DetCN aSg_Det cn ; det[LEMMA=a] head
#auxfun DetCN_an_ det cn : Det -> CN -> NP = DetCN aSg_Det cn ; det[FORM=an] head

-- Correct number agreement with the*_Det
#auxfun DetCN_theSg det cn : Det -> CN -> NP = DetCN theSg_Det cn ; det[LEMMA=the] head[Number=Sing]
#auxfun DetCN_thePl det cn : Det -> CN -> NP = DetCN thePl_Det cn ; det[LEMMA=the] head[Number=Plur]
#disable theSg_Det thePl_Det

-- Allow determiners with words that are erroneously parsed as PN
#auxfun DefPN_ the pn : Det -> PN -> NP = DefPN pn ; det[LEMMA=the] head
#auxfun IndefPN_ the pn : Det -> PN -> NP = IndefPN pn ; det[LEMMA=a] head
#disable DefPN IndefPN

#auxfun DetCN_anySg det cn : Det -> CN -> NP = DetCN anySg_Det cn ; det[LEMMA=any] head[Number=Sing]
#auxfun DetCN_anyPl det cn : Det -> CN -> NP = DetCN anyPl_Det cn ; det[LEMMA=any] head[Number=Plur]
#disable anyPl_Det anySg_Det

#auxfun DetDAP_anySg_ det ap : Det -> AP -> DAP = AdjDAP (DetDAP anySg_Det) ap ; det[LEMMA=any] head

#auxfun DetCN_someSg det cn : Det -> CN -> NP = DetCN someSg_Det cn ; det[LEMMA=some] head[Number=Sing]
#auxfun DetCN_somePl det cn : Det -> CN -> NP = DetCN somePl_Det cn ; det[LEMMA=some] head[Number=Plur]
#disable somePl_Det someSg_Det

-- #auxfun PrepNP_theSg prep det cn : Prep -> Det -> CN -> NP = PrepNP prep (DetCN the_Det cn) ; case det head[Number=Sing]
-- #auxfun PrepNP_thePl prep det cn : Prep -> Det -> CN -> NP = PrepNP prep (DetCN thePl_Det cn) ; case det head[Number=Plur]

#auxfun PrepN_ doubt in : N -> Prep -> NP = PrepNP in (MassNP (UseN doubt)) ; head case

-- ** don't use ImpVP if there's no [Mood=Imp] **
#auxfun UttImpSg_Pos vp : VP -> Utt = UttImpSg PPos (ImpVP vp) ; head[Mood=Imp]
#auxfun UttImpSg_Neg do neg vp : Do -> Neg -> VP -> Utt = UttImpSg PNeg (ImpVP vp) ; aux[VerbForm=Inf] advmod head[VerbForm=Inf]
#disable ImpVP

#auxfun PositA_ a : A -> AP = PositA a ; head[Degree=Pos]
#auxfun UseComparA_ a : A -> AP = UseComparA a ; head[Degree=Cmp]
#auxfun SuperlA_ a : A -> AP = AdjOrd (OrdSuperl a) ; head[Degree=Sup]
#disable UseComparA OrdSuperl AdjOrd

#auxfun ExtAdvS_ adv comma s : Adv -> Conj -> S -> S = ExtAdvS adv s ; advmod punct[LEMMA=\,] head
-- s is the head (i ate cake)

-- I ate the cake , smiling
ExtAdvS i_ate_cake_S smiling_Adv

-- I ate the cake smiling
AdvS i_ate_cake_S smiling_Adv

ExtAdvS : S -> Adv -> S ;
   AdvS : S -> Adv -> S ;


lincat Adv, S = {s : Str} ;

ExtAdvS sent adv = {s = sent.s ++ "," ++ adv.s} ;
   AdvS sent adv = {s = sent.s ++        adv.s} ;


-- NOT like this:
-- ExtAdvS : S -> Punct -> Adv -> S ;
-- ExtAdvS sent comma adv = {s = sent.s ++ comma.s ++ adv.s} ;

-- ** handle parentheses

#auxfun UDSInParentheses_ uds lrb rrb : UDS ->  Adv -> Adv -> UDS = uds ; head punct[LEMMA=\(] punct[LEMMA=\)]

-----------------------
-- Inari's additions --
-----------------------

#disable StrN StrPN StrA StrAP StrCard StrNum StrSymb

#disable pot1 pot2 pot3 pot4 pot1to19

-- Some multiwords
-- ** more than **
#auxfun MoreThan_ more than : Adv -> Prep -> Quant = more_than_Quant ; head[LEMMA=more] fixed[LEMMA=than]

#auxfun XorMore_ card or more : Card -> Conj -> Adv -> Det = XorMore card ; head fixed[LEMMA=or] fixed[FORM=more]
#disable XorMore

-- ** at least **
#auxfun AtLeast_ at least : Adv -> AdA -> AdN = at_least_AdN ; case[LEMMA=at] head[LEMMA=least]
#auxfun InAccordanceWith_ in accordance with : Prep -> N -> Prep -> Prep = in_accordance_with_Prep ; head[LEMMA=in] fixed[LEMMA=accordance] fixed[LEMMA=with]

-- ** 5 people **
#auxfun NumCN_ num cn : Card -> CN -> NP = DetCN (DetQuant IndefArt (NumCard num)) cn ; nummod head

-- Word order stuff
-- to prevent "portion of a building separated by walls" becoming "portion separated by walls of a building"
#auxfun NmodAclPart_ portion each ofBuilding sepByWalls : CN -> Det -> Adv -> VP -> NP = DetCN each (PPartCN_acl_ (AdvCN portion ofBuilding) sepByWalls) ; head det nmod acl[Tense=Past|VerbForm=Part]
#auxfun NmodAclPres_ portion each ofBuilding sepByWalls : CN -> Det -> Adv -> VP -> NP = DetCN each (PPresCN_acl_ (AdvCN portion ofBuilding) sepByWalls) ; head det nmod acl[VerbForm=Part]
#auxfun NmodAmod_ provision the ofThisCode applicable : CN -> Det -> Adv -> AP -> NP = DetCN the (AdjCN applicable (AdvCN provision ofThisCode)) ; head det nmod amod
-- recognise "Section 10" as an apposition

-- Label variants of various
-- This relation is nmod head, and default AdNum is advmod head
#auxfun AdNumNmod_ atLeast five : AdN -> Card -> Card = AdNum atLeast five ; nmod head

-- This relation is head advmod, and default DetQuant is head nummod
#auxfun DetQuantAdvmod_ moreThan five : Quant -> Num -> Det = DetQuant moreThan five ; advmod head

-- This relation is nummod head, and default DetCN is det head
#auxfun DetCNNummod_ moreThan5 people : Det -> CN -> NP = DetCN moreThan5 people ; nummod head


-- ** acl & amod for participles **
-- [personal data]:CN [stored in electronic formats]:acl
#auxfun PPartCN_acl_ cn vp : CN -> VP -> CN = AdjCN (PastPartAP vp) cn ; head acl[Tense=Past|VerbForm=Part]

-- [data breach]:CN [affecting 500 people]:acl
#auxfun PPresCN_acl_ cn vp : CN -> VP -> CN = AdjCN (PresPartAP vp) cn ; head acl[VerbForm=Ger]

-- [qualifying]:amod [person]:CN
#auxfun PPresCN_amod_ cn vp : CN -> VP -> CN = AdjCN (PresPartAP vp) cn ; head amod[VerbForm=Ger]

-- [qualified]:amod [person]:CN
#auxfun PPartCN_amod_ cn vp : CN -> VP -> CN = AdjCN (PastPartAP vp) cn ; head amod[Tense=Past|VerbForm=Part]

-- [person]:CN [complying]:xcomp
#auxfun PPresCN_xcomp_ cn vp : CN -> VP -> CN = AdjCN (PresPartAP vp) cn ; head xcomp[Tense=Pres|VerbForm=Part]

-- [is]:cop [gone]:V
-- something is tagged as ADJ in UD, but parsed as V in GF, so we match a V that has morpho tags associated with ADJ, and then turn it into AP
#auxfun BePastPartAP_ is gone : cop -> V -> AP = PastPartAP (UseV gone) ; cop head[Degree=Pos]

#disable PresPartAP PastPartAP

-- The construction "whose X" in the RGL is done using Extend.GenRP

-- GenRP NumSg (UseN dog_N) -- "whose dog"
-- (the person) [whose dog]:RP (barks)
-- Version with RGL RP
#auxfun GenRP_Sg_ dog whose : CN -> RP -> RP = GenRP NumSg dog ; head[Number=Sing] nmod:poss[Poss=Yes]
#auxfun GenRP_Pl_ dog whose : CN -> RP -> RP = GenRP NumPl dog ; head[Number=Plur] nmod:poss[Poss=Yes]

#disable GenRP

-- only allow CompoundCN for stuff like "unlimited area buildings"
#auxfun FakeCN_ unlimited area : AP -> CN -> FakeCN = AdjCN unlimited area ; amod head
#auxfun CompoundCN_ unlimarea buildings : FakeCN -> N -> N = CompoundCN unlimarea buildings ; compound head

#disable CompoundCN

-- the person [who is affected]:RS
--#auxfun PassRelPres_ affected who is : V -> RP -> auxPass -> RS = UseRCl (TTAnt TPres ASimul) PPos (RelVP who (PassV affected)) ; head[Voice=Pass] nsubj:pass aux:pass[Tense=Pres]

-- â€¦ [who was affected]:RS
#auxfun PassRelPast_ affected who was : V -> RP -> auxPass -> RS = UseRCl (TTAnt TPast ASimul) PPos (RelVP who (PassV affected)) ; head[Voice=Pass] nsubj:pass aux:pass[Tense=Past]

-- â€¦ [who has been affected]:RS
#auxfun PassRelPart_ affected who has been : V -> RP -> aux -> auxPass -> RS = UseRCl (TTAnt TPres AAnter) PPos (RelVP who (PassV affected)) ; head[Voice=Pass] nsubj:pass aux[Tense=Pres] aux:pass[VerbForm=Part]

-- the data [which is stored in electronic formats]:RS
--#auxfun PassRelOblPres_ stored which is in_formats : V -> RP -> auxPass -> Adv -> RS = UseRCl (TTAnt TPres ASimul) PPos (RelVP which (AdvVP (PassV stored) in_formats)) ; head[Voice=Pass] nsubj:pass aux:pass obl

-- [which has been stored in electronic formats]:RS
#auxfun PassRelOblPart_ stored which has been in_formats : V -> RP -> aux -> auxPass -> Adv -> RS = UseRCl (TTAnt TPres AAnter) PPos (RelVP which (AdvVP (PassV stored) in_formats)) ; head[Voice=Pass] nsubj:pass aux[Tense=Pres] aux:pass[VerbForm=Part] obl

-- Agents handled with special functions

-- Auxiliary category ByPP to store our agent: it's an obl introduced by a prep with form "by"
#auxfun ByPP_ by breach : Prep -> NP -> ByPP = breach ; case[FORM=by] head

-- [is affected by the breach]:VP
#auxfun PassVAgent_ affected is breach : V -> auxPass -> ByPP -> VP = PassVAgent affected breach ; head[Voice=Pass] aux:pass obl -- TODO: don't throw away tense of auxPass

-- the person [whose data is affected by the breach]:RS
#auxfun PassRelClAgent_ affected whose_data is breach : V -> RP -> auxPass -> ByPP -> RS = UseRCl (TTAnt TPres ASimul) PPos (RelVP whose_data (PassVAgent affected breach)) ; head[Voice=Pass] nsubj:pass aux:pass[Tense=Pres] obl

-- [is affected by the breach]:AP
#auxfun PastPartAgentAP_ affected breach : VP -> ByPP -> AP = PastPartAgentAP affected breach ; head[Tense=Past|VerbForm=Part] obl

-- disabled, because they can only fire with ByPP
#disable PassVAgent PastPartAgentAP


-- be notified -- TODO: is this rule used on its own?
-- Alternative is to turn VP into passive in all UDApp sentence pattern funs that have auxPass, subjPass etc.
-- and then apply PassV in NLG.hs whenever an auxPass is found in the sentence
-- TODO investigate: which one is more reliable in udpipe, [Voice=Pass] morpho analysis or aux:pass relation
-- if former, use auxfun PassV_, if latter, probably better to use the alternative.
#auxfun PassV_ v : V -> VP = PassV v ; head[Voice=Pass]

#disable PassV

-- attach RCl to a NP
-- everyone who is affected
#auxfun RelNP_ np rs : NP -> RS -> NP = RelNP np rs ; head acl:relcl


-- ** obl **
-- stored [in electronic formats]:obl
-- default for AdvVP is head advmod, this is for head obl (i.e. Adv made by PrepNP)
#auxfun OblVP_ vp adv : VP -> Adv -> VP = AdvVP vp adv ; head obl
#disable AdvVP


-- ** progressive **
-- ProgrVP needs to be allowed in different places. This is probably going to be a long list.
#auxfun RelVPGerund_aux_ processing that is : VP -> RP -> aux -> RS = UseRCl (TTAnt TPres ASimul) PPos (RelVP that (ProgrVP processing)) ; head[Tense=Pres|VerbForm=Part] nsubj aux

#auxfun RelVPGerund_cop_ processing that is : VP -> RP -> aux -> RS = UseRCl (TTAnt TPres ASimul) PPos (RelVP that (ProgrVP processing)) ; head[Tense=Pres|VerbForm=Part] nsubj cop

#disable ProgrVP GerundNP CompNP
-- GerundNP causes loops with CompNP

-- NB: we don't want this currently, because we add the gerund in UDExt.
-- If UDExt changes, then uncomment this.
-- #auxfun ProgrVP_ becoming : V -> VP = ProgrVP (UseV becoming) ; head[VerbForm=Ger]

#auxfun aclGerund_   uds : UDS -> acl = aclUDSgerund_   uds ; head[VerbForm=Ger]
#auxfun aclPastPart_ uds : UDS -> acl = aclUDSpastpart_ uds ; head[Tense=Past|VerbForm=Part]
#auxfun aclFinite_   uds : UDS -> acl = aclUDS_         uds ; head[VerbForm=Fin]
#disable aclUDSgerund_ aclUDS_ aclUDSpastpart_

-- ** ExtAdvNP **
#auxfun ExtAdvNP_ adv comma np : Adv -> Conj -> S -> S = ExtAdvNP np adv ; advmod punct[LEMMA=\,] head
#disable ExtAdvNP

-- the data breach occurs
#auxfun theDataBreachOccursXmas_ the data breach occurs nmod : Det -> N -> N -> VP -> Adv -> UDS = root_nsubj_obl (rootV_ occurs) (nsubj_ (DetCN the (UseN (CompoundN data breach)))) (obl_ nmod) ; det compound compound head[Number=Plur] nmod

-- the data breach occurs
#auxfun theDatasBreachOccursXmas_ the_data breach occurs nmod : Quant -> N -> VP -> Adv -> UDS = root_nsubj_obl (rootV_ occurs) (nsubj_ (DetCN (DetQuant the_data NumSg) (UseN (breach)))) (obl_ nmod) ; nmod:poss compound head[Number=Plur] nmod


-----------------
-- Handling lists
-- This has to be repeated for every category

-- ** Generic, only used inside other macros **
-- Pair_a_b = (a -> b -> r) -> r
#auxfun MkPair_ a b handler : a -> b -> ab2r -> r = handler a b ; head dummy nonexistent
#auxfun UsePair_ handler pair : ab2r -> Pair_a_b -> r = pair handler ; head dummy
-- Triple_a_b_c = (a -> b -> r) -> r
#auxfun MkTriple_ a b c handler : a -> b -> c -> abc2r -> r = handler a b c ; head dummy nonexistent nope
#auxfun UseTriple_ handler triple : abc2r -> Triple_a_b_c -> r = triple handler ; head dummy

-- ** AP **
-- fluffy and cute
#auxfun CommaAP_ ap comma : AP -> Conj -> APComma =  ap ; head punct[LEMMA=\,]

-- Pattern match, and the corresponding continuation-based syntax
-- #auxfun AndCutePatternMatch_ and cute : Conj -> AP -> AP2AP = MkAP2AP and cute ; cc head
#auxfun AndCuteCont_ and cute : Conj -> AP -> Pair_Conj_AP = MkPair_ and cute ; cc head

-- #auxfun AP2_ small (MkAP2AP and cute) : AP -> AP2AP -> AP = ConjAP and (BaseAP small cute)) ; head conj
#auxfun AP2_ small andCute : AP -> Pair_Conj_AP -> AP = UsePair_ (AP2_helper_ small) andCute ; head conj
#auxfun AP2_helper_ small and cute :  AP -> Conj -> AP -> AP = ConjAP and (BaseAP small cute) ; head dummy nonexistent

-- #auxfun APBaseComma_ small fluffy (MkAP2AP and cute)  : AP -> APComma -> AP2AP -> ConjListAP = ConjConsAP and small (BaseAP fluffy cute) ; head conj conj
#auxfun APBaseComma_ small fluffy andCute : AP -> APComma -> Pair_Conj_AP -> ConjListAP = UsePair_ (APBaseComma_helper_ small fluffy) andCute ; head conj conj
#auxfun APBaseComma_helper_ small fluffy and cute : AP -> APComma -> Conj -> AP -> ConjListAP = MkTriple_ and small (BaseAP fluffy cute) ; head dummy dummy

-- #auxfun ConjListToAP2_ (ConjConsAP and small furryFluffyCute) : ConjListAP -> AP = ConjAP and (ConsAP small furryFluffyCute) ; head
#auxfun ConjListToAP2_ and_small_furryFluffyCute : ConjListAP -> AP = UseTriple_ ConjListToAP2_helper_ and_small_furryFluffyCute ; head
#auxfun ConjListToAP2_helper_ and small furryFluffyCute : Conj -> AP -> ListAP -> AP = ConjAP and (ConsAP small furryFluffyCute) ; notreal head dummy

-- #auxfun APAddComma_ furry (ConjConsAP and small fluffyAndCute)  : APComma -> ConjListAP -> ConjListAP = ConjConsAP and small (ConsAP furry fluffyAndCute) ; conj head
#auxfun APAddComma_ furry and_small_fluffyCute  : APComma -> ConjListAP -> ConjListAP = UseTriple_ (APAddComma_helper_ furry) and_small_fluffyCute ; conj head
#auxfun APAddComma_helper_ furry and small fluffyCute : APComma -> Conj -> AP -> ListAP -> ConjListAP = MkTriple_ and small (ConsAP furry fluffyCute) ; dummy head

-- ** NP **
-- cat, horse, capybara and dog
#auxfun CommaNP_ np comma : NP -> Conj -> NPComma = np ; head punct[LEMMA=\,]

#auxfun AndDogPair_ and dog : Conj -> NP -> Pair_Conj_NP = MkPair_ and dog ; cc head

#auxfun NP2_ cat andDog : NP -> Pair_Conj_NP -> NP = UsePair_ (NP2_helper_ cat) andDog ; head conj
#auxfun NP2_helper_ cat and dog :  NP -> Conj -> NP -> NP = ConjNP and (BaseNP cat dog) ; head dummy nonexistent

-- type PrefixNP = ListNP -> ListNP

#auxfun Compose_ f g x : b2c -> a2b -> a -> c = f (g x) ; head dummy dummy

#auxfun NPListHead_ cat : NP -> PrefixNP = ConsNP cat ; head

#auxfun NPAddComma_ cat horse : PrefixNP -> NPComma -> PrefixNP = Compose_ cat (ConsNP horse) ; head conj

#auxfun NPCompleteList_ catHorse capybara and_dog : PrefixNP -> NPComma -> Pair_Conj_NP -> NP = UsePair_ (NPCompleteList_helper_ catHorse capybara) and_dog ; head conj conj
#auxfun NPCompleteList_helper_ catHorse capybara and dog : PrefixNP -> NPComma -> Conj -> NP -> NP = ConjNP and (catHorse (BaseNP capybara dog)) ; head dummy dummy dummy

-- ** Adv **
#auxfun CommaAdv_ Adv comma : Adv -> Conj -> AdvComma = Adv ; head punct[LEMMA=\,]

#auxfun AndAdvPair_ and dog : Conj -> Adv -> Pair_Conj_Adv = MkPair_ and dog ; cc head

#auxfun Adv2_ cat andDog : Adv -> Pair_Conj_Adv -> Adv = UsePair_ (Adv2_helper_ cat) andDog ; head conj
#auxfun Adv2_helper_ cat and dog :  Adv -> Conj -> Adv -> Adv = ConjAdv and (BaseAdv cat dog) ; head dummy nonexistent

-- type PrefixAdv = ListAdv -> ListAdv

#auxfun AdvListHead_ cat : Adv -> PrefixAdv = ConsAdv cat ; head

#auxfun AdvAddComma_ cat horse : PrefixAdv -> AdvComma -> PrefixAdv = Compose_ cat (ConsAdv horse) ; head conj

#auxfun AdvCompleteList_ catHorse capybara and_dog : PrefixAdv -> AdvComma -> Pair_Conj_Adv -> Adv = UsePair_ (AdvCompleteList_helper_ catHorse capybara) and_dog ; head conj conj
#auxfun AdvCompleteList_helper_ catHorse capybara and dog : PrefixAdv -> AdvComma -> Conj -> Adv -> Adv = ConjAdv and (catHorse (BaseAdv capybara dog)) ; head dummy dummy dummy

-- ** CN **
#auxfun CommaCN_ cn comma : CN -> Conj -> CNComma = cn ; head punct[LEMMA=\,]

#auxfun AndCNPair_ and dog : Conj -> CN -> Pair_Conj_CN = MkPair_ and dog ; cc head

#auxfun CN2_ cat andDog : CN -> Pair_Conj_CN -> CN = UsePair_ (CN2_helper_ cat) andDog ; head conj
#auxfun CN2_helper_ cat and dog :  CN -> Conj -> CN -> CN = ConjCN and (BaseCN cat dog) ; head dummy nonexistent

-- type PrefixCN = ListCN -> ListCN

#auxfun CNListHead_ cat : CN -> PrefixCN = ConsCN cat ; head

#auxfun CNAddComma_ cat horse : PrefixCN -> CNComma -> PrefixCN = Compose_ cat (ConsCN horse) ; head conj

#auxfun CNCompleteList_ catHorse capybara and_dog : PrefixCN -> CNComma -> Pair_Conj_CN -> CN = UsePair_ (CNCompleteList_helper_ catHorse capybara) and_dog ; head conj conj
#auxfun CNCompleteList_helper_ catHorse capybara and dog : PrefixCN -> CNComma -> Conj -> CN -> CN = ConjCN and (catHorse (BaseCN capybara dog)) ; head dummy dummy dummy

-- ** Prep **
#auxfun CommaPrep_ prep comma : Prep -> Conj -> PrepComma = prep ; head punct[LEMMA=\,]

#auxfun AndPrepPair_ and dog : Conj -> Prep -> Pair_Conj_Prep = MkPair_ and dog ; cc head

#auxfun Prep2_ cat andDog : Prep -> Pair_Conj_Prep -> Prep = UsePair_ (Prep2_helper_ cat) andDog ; head conj
#auxfun Prep2_helper_ cat and dog :  Prep -> Conj -> Prep -> Prep = ConjPrep and (BasePrep cat dog) ; head dummy nonexistent

-- type PrefixPrep = ListPrep -> ListPrep

#auxfun PrepListHead_ cat : Prep -> PrefixPrep = ConsPrep cat ; head

#auxfun PrepAddComma_ cat horse : PrefixPrep -> PrepComma -> PrefixPrep = Compose_ cat (ConsPrep horse) ; head conj

#auxfun PrepCompleteList_ catHorse capybara and_dog : PrefixPrep -> PrepComma -> Pair_Conj_Prep -> Prep = UsePair_ (PrepCompleteList_helper_ catHorse capybara) and_dog ; head conj conj
#auxfun PrepCompleteList_helper_ catHorse capybara and dog : PrefixPrep -> PrepComma -> Conj -> Prep -> Prep = ConjPrep and (catHorse (BasePrep capybara dog)) ; head dummy dummy dummy

-- ** VP **
#auxfun CommaVP_ VP comma : VP -> Conj -> VPComma = VP ; head punct[LEMMA=\,]

#auxfun AndVPPair_ and sleeps : Conj -> VP -> Pair_Conj_VP = MkPair_ and sleeps ; cc head

#auxfun VP2_ eats andSleeps : VP -> Pair_Conj_VP -> VP = UsePair_ (VP2_helper_ eats) andSleeps ; head conj
#auxfun VP2_helper_ eats and sleeps :  VP -> Conj -> VP -> VP = ConjVP and (BaseVP eats sleeps) ; head dummy nonexistent

-- type PrefixVP = ListVP -> ListVP

#auxfun VPListHead_ eats : VP -> PrefixVP = ConsVP eats ; head

#auxfun VPAddComma_ eats shoots : PrefixVP -> VPComma -> PrefixVP = Compose_ eats (ConsVP shoots) ; head conj

#auxfun VPCompleteList_ eatsShoots leaves and_sleeps : PrefixVP -> VPComma -> Pair_Conj_VP -> VP = UsePair_ (VPCompleteList_helper_ eatsShoots leaves) and_sleeps ; head conj conj
#auxfun VPCompleteList_helper_ eatsShoots leaves and sleeps : PrefixVP -> VPComma -> Conj -> VP -> VP = ConjVP and (eatsShoots (BaseVP leaves sleeps)) ; head dummy dummy dummy