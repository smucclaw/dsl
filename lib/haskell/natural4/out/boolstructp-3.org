* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/PDPA/boolstructp-3/")

* Tokens
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "sharpen knives" Expecting: (                            :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "sharpen knives" Expecting: EVENTUALLY        :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON               :4_2:Other "shar:
pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                    :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                                   :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token    :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS            :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN          :EOF:
******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                                :EOF:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                           :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                                  :4_1:May:
pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON                 :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                              :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling pParamText                                                                             :4_2:GoDeeper:
********* / pParamText                                                                                           :4_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :4_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :4_2:GoDeeper:
************ / slAKA                                                                                          :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / slAKA base                                                                                 :4_2:GoDeeper:
*************** / slKeyValues                                                                              :4_2:GoDeeper:
**************** / $*|                                                                                    :4_2:GoDeeper:
***************** / someSL                                                                               :4_2:GoDeeper:
****************** / pNumAsText                                                                         :4_2:GoDeeper:
pNumAsText> IN: ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :4_2:GoDeeper:
someSL> IN: ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
slKeyValues> IN: ( "sharpen knives" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :4_2:GoDeeper:
slAKA base> IN: ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
slAKA> IN: ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
pKeyValuesAka> IN: ( "sharpen knives" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=27:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :4_2:GoDeeper:
pParamText> IN: ( "sharpen knives" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=27:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :4_2:GoDeeper:
pAction calling pParamText> IN: ( "sharpen knives" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=27:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :4_2:GoDeeper:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=27:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :4_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=27:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :4_1:May:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=30:
permutationsReg> unexpected end of input
permutationsReg> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=30:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=30:
pRegRule> unexpected end of input
pRegRule> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, any token, or §

*** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: § GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=30:
pRule> unexpected end of input
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected end of input Expecting: EOL regulative rule                                  :1_1:Every:
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "sharpen knives" Expecting: (                            :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "sharpen knives" Expecting: EVENTUALLY        :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON               :4_2:Other "shar:
pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                    :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                                   :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token    :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS            :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN          :EOF:
******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                                :EOF:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                           :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                                  :4_1:May:
pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON                 :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                              :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling pParamText                                                                             :4_2:GoDeeper:
********* / pParamText                                                                                           :4_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :4_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :4_2:GoDeeper:
************ / slAKA                                                                                          :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / slAKA base                                                                                 :4_2:GoDeeper:
*************** / slKeyValues                                                                              :4_2:GoDeeper:
**************** / $*|                                                                                    :4_2:GoDeeper:
***************** / someSL                                                                               :4_2:GoDeeper:
****************** / pNumAsText                                                                         :4_2:GoDeeper:
pNumAsText> IN: ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :4_2:GoDeeper:
someSL> IN: ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
slKeyValues> IN: ( "sharpen knives" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :4_2:GoDeeper:
slAKA base> IN: ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
slAKA> IN: ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
pKeyValuesAka> IN: ( "sharpen knives" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=27:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :4_2:GoDeeper:
pParamText> IN: ( "sharpen knives" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=27:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :4_2:GoDeeper:
pAction calling pParamText> IN: ( "sharpen knives" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=27:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :4_2:GoDeeper:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=27:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :4_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=27:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :4_1:May:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=30:
permutationsReg> unexpected end of input
permutationsReg> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=30:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=30:
pRegRule> unexpected end of input
pRegRule> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, any token, or §

*** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: § GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=30:
pRule> unexpected end of input
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected end of input Expecting: EOL regulative rule                                  :1_1:Every:
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "sharpen knives" Expecting: (                            :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "sharpen knives" Expecting: EVENTUALLY        :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON               :4_2:Other "shar:
pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                    :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                                   :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token    :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS            :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN          :EOF:
******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                                :EOF:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                           :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                                  :4_1:May:
pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON                 :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                              :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling pParamText                                                                             :4_2:GoDeeper:
********* / pParamText                                                                                           :4_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :4_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :4_2:GoDeeper:
************ / slAKA                                                                                          :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / slAKA base                                                                                 :4_2:GoDeeper:
*************** / slKeyValues                                                                              :4_2:GoDeeper:
**************** / $*|                                                                                    :4_2:GoDeeper:
***************** / someSL                                                                               :4_2:GoDeeper:
****************** / pNumAsText                                                                         :4_2:GoDeeper:
pNumAsText> IN: ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :4_2:GoDeeper:
someSL> IN: ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
slKeyValues> IN: ( "sharpen knives" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :4_2:GoDeeper:
slAKA base> IN: ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
slAKA> IN: ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
pKeyValuesAka> IN: ( "sharpen knives" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=27:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :4_2:GoDeeper:
pParamText> IN: ( "sharpen knives" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=27:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :4_2:GoDeeper:
pAction calling pParamText> IN: ( "sharpen knives" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=27:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :4_2:GoDeeper:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=27:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :4_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=27:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :4_1:May:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=30:
permutationsReg> unexpected end of input
permutationsReg> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=30:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=30:
pRegRule> unexpected end of input
pRegRule> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, any token, or §

*** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: § GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=30:
pRule> unexpected end of input
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected end of input Expecting: EOL regulative rule                                  :1_1:Every:
EVERY ( "person" ) WHO
    (
        ( "is"
            ( "immortal"
                ( TYPICALLY ( "false" ) )
            )
        ) OR
        ( "has" ( "health insurance" ) )
    ) MAY ( "sharpen knives" )
** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pDT                                                                                                     :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******** \ $>| has returned DMay                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "shar:
|>>/recurse> IN: "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected "sharpen knives"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "sharpen knives" Expecting: (                            :4_2:Other "shar:
********** / |>>/base                                                                                            :4_2:Other "shar:
*********** / pTemporal/eventually                                                                              :4_2:Other "shar:
pTemporal/eventually> IN: "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected "sharpen knives"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "sharpen knives" Expecting: EVENTUALLY        :4_2:Other "shar:
*********** / pTemporal/specifically                                                                            :4_2:Other "shar:
************ / $>|                                                                                             :4_2:Other "shar:
$>|> IN: "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected "sharpen knives"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON               :4_2:Other "shar:
pTemporal/specifically> IN: "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected "sharpen knives"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "sharpen knives" Expecting: BEFORE AFTER BY ON :4_2:Other "shar:
*********** / pTemporal/vaguely                                                                                 :4_2:Other "shar:
pTemporal/vaguely> IN: "sharpen knives" )
pTemporal/vaguely> MATCH (COK): "sharpen knives"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sharpen knives"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sharpen knives")          :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                     :1_2:UnDeeper:
|>>/base> IN: "sharpen knives" )
|>>/base> MATCH (COK): "sharpen knives"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),0)          :1_2:UnDeeper:
|>>/recurse> IN: ( "sharpen knives" )
|>>/recurse> MATCH (COK): ( "sharpen knives"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)         :1_2:UnDeeper:
|>| calling $>>> IN: ( "sharpen knives" )
|>| calling $>>> MATCH (COK): ( "sharpen knives"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sharpen knives")),1)       :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MAY ( "sharpen knives" )
pDT> MATCH (COK): MAY ( "sharpen knives" )
pDT> VALUE: ((DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives")),[])

******* \ pDT has returned (DMay,Just (TemporalConstraint TVague (Just 0) "sharpen knives"))                    :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=30:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                    :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                                   :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=30:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token    :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=30:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=30:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=30:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS            :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=30:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN          :EOF:
******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=30:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                                :EOF:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=30:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( ( "is" ( "immortal" ( T <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( ( "is" ( "immortal" ( TYPICALLY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( ( "is" ( "immortal" ( <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                                :2_3:GoDeeper:
**************** / manyIndentation/leaf?                                                                    :2_3:GoDeeper:
***************** / ppp inner                                                                              :2_3:GoDeeper:
****************** / expression                                                                           :2_3:GoDeeper:
******************* / termIndent p                                                                       :2_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :2_3:GoDeeper:
********************* > |<|                                                                            :2_3:GoDeeper:
********************* > |<* starting                                                                   :2_3:GoDeeper:
********************* / $*|                                                                            :2_3:GoDeeper:
********************** / someSL                                                                       :2_3:GoDeeper:
*********************** / pNumAsText                                                                 :2_3:GoDeeper:
pNumAsText> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :2_3:GoDeeper:
someSL> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :2_3:GoDeeper:
$*|> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :2_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :2_3:GoDeeper:
********************** / someIndentation                                                              :2_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :2_3:Other "is":
*********************** / manyIndentation/leaf?                                                       :2_3:Other "is":
************************ / ppp inner                                                                 :2_3:Other "is":
************************* / expression                                                              :2_3:Other "is":
************************** / termIndent p                                                          :2_3:Other "is":
*************************** / term p/1a:label ends directly above next line                       :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
***************************** / pNumAsText                                                         :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number      :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (CERR): "is" ( "immortal"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************** \ !Consumed Error: $*|: Unexpected ( Expecting: other text or number   :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "immortal"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / matching EOL                                                         :2_5:GoDeeper:
matching EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected (
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ( Expecting: EOL         :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "immortal"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: EOL :2_5:GoDeeper:
*************************** / term p/1c:label ends to the right of line below                     :2_3:Other "is":
**************************** > |<|                                                               :2_3:Other "is":
**************************** > |<* starting                                                      :2_3:Other "is":
**************************** / $*|                                                               :2_3:Other "is":
***************************** / someSL                                                          :2_3:Other "is":
****************************** / pNumAsText                                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

***************************** \ someSL has returned (["is","immortal"],1)                          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

**************************** \ $*| has returned (["is","immortal"],1)                               :2_5:GoDeeper:
**************************** / |<*/parent                                                           :2_5:GoDeeper:
***************************** > |<*/recurse                                                        :2_5:GoDeeper:
***************************** / |<*/base                                                           :2_5:GoDeeper:
****************************** / ppp inner                                                        :2_5:GoDeeper:
******************************* / expression                                                     :2_5:GoDeeper:
******************************** / termIndent p                                                 :2_5:GoDeeper:
********************************* / term p/1a:label ends directly above next line              :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1a:label ends directly above next line> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL   :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/1c:label ends to the right of line below            :2_5:GoDeeper:
********************************** > |<|                                                      :2_5:GoDeeper:
********************************** > |<* starting                                             :2_5:GoDeeper:
********************************** / $*|                                                      :2_5:GoDeeper:
*********************************** / someSL                                                 :2_5:GoDeeper:
************************************ / pNumAsText                                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
********************************* / term p/notLabelTerm                                        :2_5:GoDeeper:
********************************** / term p/2:someIndentation expr p                          :2_5:GoDeeper:
*********************************** / someIndentation                                        :2_5:GoDeeper:
************************************ / myindented-GoDeeper                                  :2_5:GoDeeper:
myindented-GoDeeper> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************ \ myindented-GoDeeper has returned GoDeeper             :2_5:Typically:
************************************ / manyIndentation/leaf?                                 :2_5:Typically:
************************************* / ppp inner                                           :2_5:Typically:
************************************** / expression                                        :2_5:Typically:
*************************************** / termIndent p                                    :2_5:Typically:
**************************************** / term p/1a:label ends directly above next line :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1a:label ends directly above next line> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected TYPICALLY
term p/1a:label ends directly above next line> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1b:label ends to the left of line below, with EOL :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1b:label ends to the left of line below, with EOL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected TYPICALLY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/1c:label ends to the right of line below :2_5:Typically:
***************************************** > |<|                                         :2_5:Typically:
***************************************** > |<* starting                                :2_5:Typically:
***************************************** / $*|                                         :2_5:Typically:
****************************************** / someSL                                    :2_5:Typically:
******************************************* / pNumAsText                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting other text or number

**************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
**************************************** / term p/notLabelTerm                           :2_5:Typically:
***************************************** / term p/2:someIndentation expr p             :2_5:Typically:
****************************************** / someIndentation                           :2_5:Typically:
******************************************* / myindented-GoDeeper                     :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

******************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

****************************************** \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
term p/2:someIndentation expr p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (

***************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
***************************************** / term p/3:plain p                            :2_5:Typically:
****************************************** / pRelPred                                  :2_5:Typically:
******************************************* / slRelPred                               :2_5:Typically:
******************************************** / nested simpleHorn                     :2_5:Typically:
********************************************* > |^|                                 :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
nested simpleHorn> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting other text or number

******************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPConstraint                          :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPConstraint> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting other text or number

******************************************** \ !Unconsumed Error: RPConstraint: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPBoolStructR                         :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slMultiTerm                       :2_5:Typically:
*********************************************** / someSL                          :2_5:Typically:
************************************************ / pNumAsText                    :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPBoolStructR> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting other text or number

******************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
******************************************** / RPMT                                  :2_5:Typically:
********************************************* / $*|                                 :2_5:Typically:
********************************************** / slAKA                             :2_5:Typically:
*********************************************** / $*|                             :2_5:Typically:
************************************************ / slAKA base                    :2_5:Typically:
************************************************* / slMultiTerm                 :2_5:Typically:
************************************************** / someSL                    :2_5:Typically:
*************************************************** / pNumAsText              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*************************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected TYPICALLY
someSL> expecting other text or number

************************************************** \ !Unconsumed Error: someSL: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slMultiTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected TYPICALLY
slMultiTerm> expecting other text or number

************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected TYPICALLY
slAKA base> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA base: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slAKA> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected TYPICALLY
slAKA> expecting other text or number

********************************************** \ !Unconsumed Error: slAKA: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting other text or number

********************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
RPMT> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected TYPICALLY
RPMT> expecting other text or number

******************************************** \ !Unconsumed Error: RPMT: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
slRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected TYPICALLY
slRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: slRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
pRelPred> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected TYPICALLY
pRelPred> expecting other text or number

****************************************** \ !Unconsumed Error: pRelPred: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/3:plain p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected TYPICALLY
term p/3:plain p> expecting other text or number

***************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected TYPICALLY Expecting: other text or number :2_5:Typically:
term p/notLabelTerm> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting ( or term

**************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( term :2_5:Typically:
termIndent p> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, other text or number, or term

*************************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( other text or number term :2_5:Typically:
expression> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

************************************** \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
ppp inner> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

************************************* \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:Typically:
************************************* / withPrePost                                         :2_5:Typically:
************************************** > |<* starting                                      :2_5:Typically:
************************************** / $*|                                               :2_5:Typically:
*************************************** / pre part                                        :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
withPrePost> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting ( or Other text

************************************* \ !Unconsumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
************************************* / $*|                                                 :2_5:Typically:
************************************** / pre part                                          :2_5:Typically:
pre part> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting ( or Other text

************************************** \ !Unconsumed Error: pre part: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
$*|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting ( or Other text

************************************* \ !Unconsumed Error: $*|: Unexpected TYPICALLY Expecting: ( Other text :2_5:Typically:
manyIndentation/leaf?> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=11:
manyIndentation/leaf?> unexpected TYPICALLY
manyIndentation/leaf?> expecting (, Other text, or expression

************************************ \ !Unconsumed Error: manyIndentation/leaf?: Unexpected TYPICALLY Expecting: ( ( Other text expression :2_5:Typically:
************************************ / manyIndentation/deeper; calling someIndentation       :2_5:Typically:
************************************* / someIndentation                                     :2_5:Typically:
************************************** / myindented-GoDeeper                               :2_5:Typically:
myindented-GoDeeper> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected TYPICALLY
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
manyIndentation/deeper; calling someIndentation> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=11:
manyIndentation/deeper; calling someIndentation> unexpected TYPICALLY
manyIndentation/deeper; calling someIndentation> expecting (

************************************ \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
someIndentation> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected TYPICALLY
someIndentation> expecting (, Other text, or expression

*********************************** \ !Consumed Error: someIndentation: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
term p/2:someIndentation expr p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/2:someIndentation expr p> MATCH (CERR): (
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected TYPICALLY
term p/2:someIndentation expr p> expecting (, Other text, or expression

********************************** \ !Consumed Error: term p/2:someIndentation expr p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:Typically:
********************************** / term p/3:plain p                                         :2_5:GoDeeper:
*********************************** / pRelPred                                               :2_5:GoDeeper:
************************************ / slRelPred                                            :2_5:GoDeeper:
************************************* / nested simpleHorn                                  :2_5:GoDeeper:
************************************** > |^|                                              :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
nested simpleHorn> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPConstraint                                       :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPConstraint> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPBoolStructR                                      :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slMultiTerm                                    :2_5:GoDeeper:
**************************************** / someSL                                       :2_5:GoDeeper:
***************************************** / pNumAsText                                 :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPBoolStructR> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
************************************* / RPMT                                               :2_5:GoDeeper:
************************************** / $*|                                              :2_5:GoDeeper:
*************************************** / slAKA                                          :2_5:GoDeeper:
**************************************** / $*|                                          :2_5:GoDeeper:
***************************************** / slAKA base                                 :2_5:GoDeeper:
****************************************** / slMultiTerm                              :2_5:GoDeeper:
******************************************* / someSL                                 :2_5:GoDeeper:
******************************************** / pNumAsText                           :2_5:GoDeeper:
pNumAsText> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :2_5:GoDeeper:
someSL> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slMultiTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slAKA> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected (
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
RPMT> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected (
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
slRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected (
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
pRelPred> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/3:plain p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected (
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ( Expecting: other text or number :2_5:GoDeeper:
term p/notLabelTerm> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected TYPICALLY
term p/notLabelTerm> expecting (, Other text, or expression

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
termIndent p> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected TYPICALLY
termIndent p> expecting (, Other text, or expression

******************************** \ !Unconsumed Error: termIndent p: Unexpected TYPICALLY Expecting: ( ( ( Other text expression :2_5:GoDeeper:
expression> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected TYPICALLY
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
ppp inner> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected TYPICALLY
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected TYPICALLY Expecting: expression :2_5:GoDeeper:
****************************** / withPrePost                                                      :2_5:GoDeeper:
******************************* > |<* starting                                                   :2_5:GoDeeper:
******************************* / $*|                                                            :2_5:GoDeeper:
******************************** / pre part                                                     :2_5:GoDeeper:
********************************* / aboveNextLineKeyword                                        :2_5:Typically:
********************************** / expectUnDeepers                                           :2_5:Typically:
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************** \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
********************************* > /*= lookAhead failed, delegating to plain /+=               :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************** \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
withPrePost> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
withPrePost> MATCH (CERR): (
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected TYPICALLY
withPrePost> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: withPrePost: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
****************************** / $*|                                                              :2_5:GoDeeper:
******************************* / pre part                                                       :2_5:GoDeeper:
******************************** / aboveNextLineKeyword                                          :2_5:Typically:
********************************* / expectUnDeepers                                             :2_5:Typically:
********************************** / pNumAsText                                                :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
expectUnDeepers> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
expectUnDeepers> MATCH (EERR): <EMPTY>
expectUnDeepers> ERROR:
expectUnDeepers> offset=11:
expectUnDeepers> unexpected TYPICALLY
expectUnDeepers> expecting (, ), or other text or number

********************************* \ !Unconsumed Error: expectUnDeepers: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
aboveNextLineKeyword> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
aboveNextLineKeyword> MATCH (EERR): <EMPTY>
aboveNextLineKeyword> ERROR:
aboveNextLineKeyword> offset=11:
aboveNextLineKeyword> unexpected TYPICALLY
aboveNextLineKeyword> expecting (, ), or other text or number

******************************** \ !Unconsumed Error: aboveNextLineKeyword: Unexpected TYPICALLY Expecting: ( ) other text or number :2_5:Typically:
******************************** > /*= lookAhead failed, delegating to plain /+=                 :2_5:Typically:
pre part> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
pre part> MATCH (CERR): (
pre part> ERROR:
pre part> offset=11:
pre part> unexpected TYPICALLY
pre part> expecting (, ), Other text, or other text or number

******************************* \ !Consumed Error: pre part: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
$*|> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
$*|> MATCH (CERR): (
$*|> ERROR:
$*|> offset=11:
$*|> unexpected TYPICALLY
$*|> expecting (, ), Other text, or other text or number

****************************** \ !Consumed Error: $*|: Unexpected TYPICALLY Expecting: ( ) ( Other text other text or number :2_5:Typically:
|<*/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/base> MATCH (CERR): (
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected TYPICALLY
|<*/base> expecting (, ), Other text, expression, or other text or number

***************************** \ !Consumed Error: |<*/base: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
|<*/parent> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|<*/parent> MATCH (CERR): (
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected TYPICALLY
|<*/parent> expecting (, ), Other text, expression, or other text or number

**************************** \ !Consumed Error: |<*/parent: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
term p/1c:label ends to the right of line below> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "immortal" (
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected TYPICALLY
term p/1c:label ends to the right of line below> expecting (, ), Other text, expression, or other text or number

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected TYPICALLY Expecting: ( ) ( ) ( ( Other text expression other text or number :2_5:Typically:
*************************** / term p/notLabelTerm                                                 :2_3:Other "is":
**************************** / term p/2:someIndentation expr p                                   :2_3:Other "is":
***************************** / someIndentation                                                 :2_3:Other "is":
****************************** / myindented-GoDeeper                                           :2_3:Other "is":
myindented-GoDeeper> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: ( :2_3:Other "is":
someIndentation> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "is"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: ( :2_3:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :2_3:Other "is":
**************************** / term p/3:plain p                                                  :2_3:Other "is":
***************************** / pRelPred                                                        :2_3:Other "is":
****************************** / slRelPred                                                     :2_3:Other "is":
******************************* / nested simpleHorn                                           :2_3:Other "is":
******************************** > |^|                                                       :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |^| deeps                                                    :2_5:GoDeeper:
|^| deeps> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

******************************** \ |^| deeps has returned ([()],1)                               :2_5:Typically:
nested simpleHorn> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
nested simpleHorn> MATCH (CERR): "is" ( "immortal" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected TYPICALLY
nested simpleHorn> expecting ( or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected TYPICALLY Expecting: MEANS ( :2_5:Typically:
******************************* / RPConstraint                                                :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPConstraint> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPConstraint> MATCH (CERR): "is" ( "immortal"
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected TYPICALLY
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPBoolStructR                                               :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slMultiTerm                                             :2_3:Other "is":
********************************** / someSL                                                :2_3:Other "is":
*********************************** / pNumAsText                                              :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

********************************** \ someSL has returned (["is","immortal"],1)                :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

********************************* \ slMultiTerm has returned (["is","immortal"],1)             :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

******************************** \ $*| has returned (["is","immortal"],1)                       :2_5:GoDeeper:
******************************** / |>| calling $>>                                              :2_5:GoDeeper:
********************************* / |>>/recurse                                                :2_5:GoDeeper:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:Typically:
********************************* / |>>/base                                                   :2_5:GoDeeper:
|>>/base> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN == :2_5:GoDeeper:
|>| calling $>>> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=11:
|>| calling $>>> unexpected TYPICALLY
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
RPBoolStructR> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPBoolStructR> MATCH (CERR): "is" ( "immortal"
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected TYPICALLY
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected TYPICALLY Expecting: IS < <= > >= IN NOT IN == ( :2_5:GoDeeper:
******************************* / RPMT                                                        :2_3:Other "is":
******************************** / $*|                                                       :2_3:Other "is":
********************************* / slAKA                                                   :2_3:Other "is":
********************************** / $*|                                                   :2_3:Other "is":
*********************************** / slAKA base                                          :2_3:Other "is":
************************************ / slMultiTerm                                       :2_3:Other "is":
************************************* / someSL                                          :2_3:Other "is":
************************************** / pNumAsText                                        :2_5:Typically:
pNumAsText> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected TYPICALLY
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected TYPICALLY Expecting: number :2_5:Typically:
someSL> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
someSL> MATCH (COK): "is" ( "immortal"
someSL> VALUE: ((["is","immortal"],1),[])

************************************* \ someSL has returned (["is","immortal"],1)          :2_5:GoDeeper:
slMultiTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slMultiTerm> MATCH (COK): "is" ( "immortal"
slMultiTerm> VALUE: ((["is","immortal"],1),[])

************************************ \ slMultiTerm has returned (["is","immortal"],1)       :2_5:GoDeeper:
slAKA base> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA base> MATCH (COK): "is" ( "immortal"
slAKA base> VALUE: ((["is","immortal"],1),[])

*********************************** \ slAKA base has returned (["is","immortal"],1)          :2_5:GoDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal"
$*|> VALUE: ((["is","immortal"],1),[])

********************************** \ $*| has returned (["is","immortal"],1)                   :2_5:GoDeeper:
********************************** / |>>/recurse                                              :2_5:GoDeeper:
*********************************** / |>>/recurse                                             :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
*********************************** / |>>/base                                                :2_5:Typically:
************************************ / slAKA optional akapart                                :2_5:Typically:
************************************* / |?| optional something                              :2_5:Typically:
************************************** / |>>/recurse                                       :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************** / |>>/base                                          :2_5:Typically:
*************************************** / PAKA/akapart                                    :2_5:Typically:
**************************************** / $>|                                           :2_5:Typically:
***************************************** / Aka Token                                   :2_5:Typically:
Aka Token> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=11:
Aka Token> unexpected TYPICALLY
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=11:
$>|> unexpected TYPICALLY
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
PAKA/akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=11:
PAKA/akapart> unexpected TYPICALLY
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=11:
|>>/base> unexpected TYPICALLY
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected TYPICALLY Expecting: AKA :2_5:Typically:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)     :2_5:Typically:
slAKA optional akapart> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)       :2_5:Typically:
************************************ > |>>/base got Nothing                                  :2_5:Typically:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                       :2_5:Typically:
|>>/recurse> IN: ( TYPICALLY ( "false" ) ) ) ) OR ( "has" <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********************************** \ |>>/recurse has returned (Nothing,1)                      :2_5:Typically:
********************************** / |>>/recurse                                               :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
********************************** / |>>/base                                                  :2_5:Typically:
*********************************** / slAKA optional typically                                :2_5:Typically:
************************************ / |?| optional something                                :2_5:Typically:
************************************* / |>>/recurse                                         :2_5:Typically:
|>>/recurse> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected TYPICALLY
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected TYPICALLY Expecting: ( :2_5:Typically:
************************************* / |>>/base                                            :2_5:Typically:
************************************** / typically                                         :2_5:Typically:
*************************************** / $>|                                             :2_5:Typically:
$>|> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
$>|> MATCH (COK): TYPICALLY
$>|> VALUE: (Typically,[])

*************************************** \ $>| has returned Typically                       :2_6:GoDeeper:
*************************************** / |>>/recurse                                      :2_6:GoDeeper:
**************************************** / |>>/recurse                                     :2_6:Other "fals:
|>>/recurse> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "false"
|>>/recurse> expecting (

**************************************** \ !Unconsumed Error: |>>/recurse: Unexpected "false" Expecting: ( :2_6:Other "fals:
**************************************** / |>>/base                                        :2_6:Other "fals:
***************************************** / slMultiTerm                                   :2_6:Other "fals:
****************************************** / someSL                                      :2_6:Other "fals:
someSL> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
someSL> MATCH (COK): "false"
someSL> VALUE: ((["false"],0),[])

****************************************** \ someSL has returned (["false"],0)      :3_3:UnDeeper:
slMultiTerm> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
slMultiTerm> MATCH (COK): "false"
slMultiTerm> VALUE: ((["false"],0),[])

***************************************** \ slMultiTerm has returned (["false"],0)   :3_3:UnDeeper:
***************************************** > |>>/base got ["false"]                   :3_3:UnDeeper:
|>>/base> IN: "false" ) ) ) ) OR ( "has" ( "health ins <…>
|>>/base> MATCH (COK): "false"
|>>/base> VALUE: ((["false"],0),[])

**************************************** \ |>>/base has returned (["false"],0)        :3_3:UnDeeper:
|>>/recurse> IN: ( "false" ) ) ) ) OR ( "has" ( "health i <…>
|>>/recurse> MATCH (COK): ( "false"
|>>/recurse> VALUE: ((["false"],1),[])

*************************************** \ |>>/recurse has returned (["false"],1)       :3_3:UnDeeper:
typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
typically> MATCH (COK): TYPICALLY ( "false"
typically> VALUE: ((["false"],1),[])

************************************** \ typically has returned (["false"],1)           :3_3:UnDeeper:
************************************** > |>>/base got ["false"]                         :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((["false"],1),[])

************************************* \ |>>/base has returned (["false"],1)              :3_3:UnDeeper:
|?| optional something> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|?| optional something> MATCH (COK): TYPICALLY ( "false"
|?| optional something> VALUE: ((Just ["false"],1),[])

************************************ \ |?| optional something has returned (Just ["false"],1) :3_3:UnDeeper:
slAKA optional typically> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
slAKA optional typically> MATCH (COK): TYPICALLY ( "false"
slAKA optional typically> VALUE: ((Just ["false"],1),[])

*********************************** \ slAKA optional typically has returned (Just ["false"],1) :3_3:UnDeeper:
*********************************** > |>>/base got Just ["false"]                          :3_3:UnDeeper:
|>>/base> IN: TYPICALLY ( "false" ) ) ) ) OR ( "has" ( <…>
|>>/base> MATCH (COK): TYPICALLY ( "false"
|>>/base> VALUE: ((Just ["false"],1),[])

********************************** \ |>>/base has returned (Just ["false"],1)               :3_3:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :3_3:UnDeeper:
********************************** > pAKA: entityalias = Nothing                            :3_3:UnDeeper:
slAKA> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slAKA> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slAKA> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************************* \ slAKA has returned (["is","immortal"],3)                 :3_3:UnDeeper:
$*|> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
$*|> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
$*|> VALUE: ((["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************** \ $*| has returned (["is","immortal"],3)                     :3_3:UnDeeper:
RPMT> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
RPMT> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
RPMT> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************************* \ RPMT has returned (RPMT ["is","immortal"],3)                 :3_3:UnDeeper:
slRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
slRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"
slRelPred> VALUE: ((RPMT ["is","immortal"],3),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************************** \ slRelPred has returned (RPMT ["is","immortal"],3)              :3_3:UnDeeper:
****************************** / undeepers                                                      :3_3:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers :3_3:UnDeeper:
******************************* > sameLine: success!                                                 :3_6:UnDeeper:
undeepers> IN: ) ) ) ) OR ( "has" ( "health insurance"  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                            :3_6:UnDeeper:
pRelPred> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
pRelPred> VALUE: (RPMT ["is","immortal"],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************************** \ pRelPred has returned RPMT ["is","immortal"]                           :3_6:UnDeeper:
term p/3:plain p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["is","immortal"])            :3_6:UnDeeper:
term p/notLabelTerm> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])           :3_6:UnDeeper:
termIndent p> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************** \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                    :3_6:UnDeeper:
************************** / binary(Or)                                                                   :3_6:UnDeeper:
binary(Or)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_6:UnDeeper:
************************** / binary(And)                                                                  :3_6:UnDeeper:
binary(And)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_6:UnDeeper:
************************** / binary(SetLess)                                                              :3_6:UnDeeper:
binary(SetLess)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_6:UnDeeper:
************************** / binary(SetPlus)                                                              :3_6:UnDeeper:
binary(SetPlus)> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_6:UnDeeper:
expression> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
expression> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************* \ expression has returned MyLeaf (RPMT ["is","immortal"])                        :3_6:UnDeeper:
ppp inner> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************************ \ ppp inner has returned MyLeaf (RPMT ["is","immortal"])                           :3_6:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "immortal" ( TYPICALLY ( "false"  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","immortal"])                 :3_6:UnDeeper:
*********************** / myindented-UnDeeper                                                                :3_6:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "has" ( "health insurance" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                 :3_2:Or:
someIndentation> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************** \ someIndentation has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
term p/2:someIndentation expr p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","immortal"])  :3_2:Or:
term p/notLabelTerm> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","immortal"])                :3_2:Or:
termIndent p> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is","immortal"]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","immortal"])                         :3_2:Or:
******************* / binary(Or)                                                                        :3_2:Or:
binary(Or)> IN: OR ( "has" ( "health insurance" ) ) ) MA <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************* \ binary(Or) has returned Or                                                         :3_3:GoDeeper:
******************* / termIndent p                                                                       :3_3:GoDeeper:
******************** / term p/1a:label ends directly above next line                                    :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                         :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/1c:label ends to the right of line below                                  :3_3:GoDeeper:
********************* > |<|                                                                            :3_3:GoDeeper:
********************* > |<* starting                                                                   :3_3:GoDeeper:
********************* / $*|                                                                            :3_3:GoDeeper:
********************** / someSL                                                                       :3_3:GoDeeper:
*********************** / pNumAsText                                                                 :3_3:GoDeeper:
pNumAsText> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

*********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_3:GoDeeper:
someSL> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_3:GoDeeper:
$*|> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************** / term p/notLabelTerm                                                              :3_3:GoDeeper:
********************* / term p/2:someIndentation expr p                                                :3_3:GoDeeper:
********************** / someIndentation                                                              :3_3:GoDeeper:
*********************** / myindented-GoDeeper                                                        :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********************** \ myindented-GoDeeper has returned GoDeeper                                   :3_3:Other "has":
*********************** / manyIndentation/leaf?                                                       :3_3:Other "has":
************************ / ppp inner                                                                 :3_3:Other "has":
************************* / expression                                                              :3_3:Other "has":
************************** / termIndent p                                                          :3_3:Other "has":
*************************** / term p/1a:label ends directly above next line                       :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (CERR): "has" ( "health insurance"
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or other text or number

**************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "has" ( "health insurance"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

*************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
*************************** / term p/1b:label ends to the left of line below, with EOL            :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / matching EOL                                                     :4_2:UnDeeper:
matching EOL> IN: ) ) ) MAY ( "sharpen knives" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=23:
matching EOL> unexpected )
matching EOL> expecting EOL

**************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "has" ( "health insurance"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

*************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
*************************** / term p/1c:label ends to the right of line below                     :3_3:Other "has":
**************************** > |<|                                                               :3_3:Other "has":
**************************** > |<* starting                                                      :3_3:Other "has":
**************************** / $*|                                                               :3_3:Other "has":
***************************** / someSL                                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

***************************** \ someSL has returned (["has","health insurance"],1)             :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

**************************** \ $*| has returned (["has","health insurance"],1)                  :4_2:UnDeeper:
**************************** / |<*/parent                                                       :4_2:UnDeeper:
***************************** > |<*/recurse                                                    :4_2:UnDeeper:
***************************** / ppp inner                                                   :4_1:May:
****************************** / expression                                                :4_1:May:
******************************* / termIndent p                                            :4_1:May:
******************************** / term p/1a:label ends directly above next line         :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1a:label ends directly above next line> IN: MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected MAY
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1b:label ends to the left of line below, with EOL> IN: MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected MAY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/1c:label ends to the right of line below       :4_1:May:
********************************* > |<|                                                 :4_1:May:
********************************* > |<* starting                                        :4_1:May:
********************************* / $*|                                                 :4_1:May:
********************************** / someSL                                            :4_1:May:
*********************************** / pNumAsText                                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
term p/1c:label ends to the right of line below> IN: MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: other text or number :4_1:May:
******************************** / term p/notLabelTerm                                   :4_1:May:
********************************* / term p/2:someIndentation expr p                     :4_1:May:
********************************** / someIndentation                                   :4_1:May:
*********************************** / myindented-GoDeeper                             :4_1:May:
myindented-GoDeeper> IN: MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: ( :4_1:May:
someIndentation> IN: MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected MAY
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: ( :4_1:May:
term p/2:someIndentation expr p> IN: MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected MAY
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MAY Expecting: ( :4_1:May:
********************************* / term p/3:plain p                                    :4_1:May:
********************************** / pRelPred                                          :4_1:May:
*********************************** / slRelPred                                       :4_1:May:
************************************ / nested simpleHorn                             :4_1:May:
************************************* > |^|                                         :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
nested simpleHorn> IN: MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPConstraint                                  :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPConstraint> IN: MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected MAY
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPBoolStructR                                 :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slMultiTerm                               :4_1:May:
*************************************** / someSL                                  :4_1:May:
**************************************** / pNumAsText                            :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPBoolStructR> IN: MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected MAY
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected MAY Expecting: other text or number :4_1:May:
************************************ / RPMT                                          :4_1:May:
************************************* / $*|                                         :4_1:May:
************************************** / slAKA                                     :4_1:May:
*************************************** / $*|                                     :4_1:May:
**************************************** / slAKA base                            :4_1:May:
***************************************** / slMultiTerm                         :4_1:May:
****************************************** / someSL                            :4_1:May:
******************************************* / pNumAsText                      :4_1:May:
pNumAsText> IN: MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected MAY
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected MAY Expecting: number :4_1:May:
someSL> IN: MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected MAY
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected MAY Expecting: other text or number :4_1:May:
slMultiTerm> IN: MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected MAY
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA base> IN: MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected MAY
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
slAKA> IN: MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected MAY
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected MAY Expecting: other text or number :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected MAY Expecting: other text or number :4_1:May:
RPMT> IN: MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected MAY
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected MAY Expecting: other text or number :4_1:May:
slRelPred> IN: MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected MAY
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
pRelPred> IN: MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected MAY
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected MAY Expecting: other text or number :4_1:May:
term p/3:plain p> IN: MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected MAY
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MAY Expecting: other text or number :4_1:May:
term p/notLabelTerm> IN: MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected MAY
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MAY Expecting: ( term :4_1:May:
termIndent p> IN: MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected MAY
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected MAY Expecting: ( other text or number term :4_1:May:
expression> IN: MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected MAY
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected MAY Expecting: expression :4_1:May:
ppp inner> IN: MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected MAY
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected MAY Expecting: expression :4_1:May:
***************************** / withPrePost                                                 :4_1:May:
****************************** > |<* starting                                              :4_1:May:
****************************** / $*|                                                       :4_1:May:
******************************* / pre part                                                :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
withPrePost> IN: MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected MAY
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / $*|                                                         :4_1:May:
****************************** / pre part                                                  :4_1:May:
pre part> IN: MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected MAY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected MAY Expecting: ( Other text :4_1:May:
$*|> IN: MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected MAY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected MAY Expecting: ( Other text :4_1:May:
***************************** / |<*/base                                                       :4_2:UnDeeper:
****************************** / ppp inner                                                    :4_2:UnDeeper:
******************************* / expression                                                 :4_2:UnDeeper:
******************************** / termIndent p                                             :4_2:UnDeeper:
********************************* / term p/1a:label ends directly above next line          :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MAY ( "sharpen knives" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MAY ( "sharpen knives" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/1c:label ends to the right of line below        :4_2:UnDeeper:
********************************** > |<|                                                  :4_2:UnDeeper:
********************************** > |<* starting                                         :4_2:UnDeeper:
********************************** / $*|                                                  :4_2:UnDeeper:
*********************************** / someSL                                             :4_2:UnDeeper:
************************************ / pNumAsText                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MAY ( "sharpen knives" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
********************************* / term p/notLabelTerm                                    :4_2:UnDeeper:
********************************** / term p/2:someIndentation expr p                      :4_2:UnDeeper:
*********************************** / someIndentation                                    :4_2:UnDeeper:
************************************ / myindented-GoDeeper                              :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MAY ( "sharpen knives" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MAY ( "sharpen knives" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected )
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MAY ( "sharpen knives" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=23:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / term p/3:plain p                                     :4_2:UnDeeper:
*********************************** / pRelPred                                           :4_2:UnDeeper:
************************************ / slRelPred                                        :4_2:UnDeeper:
************************************* / nested simpleHorn                              :4_2:UnDeeper:
************************************** > |^|                                          :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MAY ( "sharpen knives" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=23:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPConstraint                                   :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MAY ( "sharpen knives" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPBoolStructR                                  :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slMultiTerm                                :4_2:UnDeeper:
**************************************** / someSL                                   :4_2:UnDeeper:
***************************************** / pNumAsText                             :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MAY ( "sharpen knives" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************* / RPMT                                           :4_2:UnDeeper:
************************************** / $*|                                          :4_2:UnDeeper:
*************************************** / slAKA                                      :4_2:UnDeeper:
**************************************** / $*|                                      :4_2:UnDeeper:
***************************************** / slAKA base                             :4_2:UnDeeper:
****************************************** / slMultiTerm                          :4_2:UnDeeper:
******************************************* / someSL                             :4_2:UnDeeper:
******************************************** / pNumAsText                       :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MAY ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MAY ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected )
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MAY ( "sharpen knives" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=23:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MAY ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=23:
slAKA base> unexpected )
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MAY ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=23:
slAKA> unexpected )
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MAY ( "sharpen knives" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=23:
RPMT> unexpected )
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MAY ( "sharpen knives" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=23:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MAY ( "sharpen knives" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=23:
pRelPred> unexpected )
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MAY ( "sharpen knives" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=23:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MAY ( "sharpen knives" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=23:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MAY ( "sharpen knives" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=23:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MAY ( "sharpen knives" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=23:
expression> unexpected )
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) ) MAY ( "sharpen knives" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=23:
ppp inner> unexpected )
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
****************************** / withPrePost                                                  :4_2:UnDeeper:
******************************* > |<* starting                                               :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / pre part                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) ) MAY ( "sharpen knives" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=23:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) ) MAY ( "sharpen knives" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=23:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) ) MAY ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
|<*/base> IN: ) ) ) MAY ( "sharpen knives" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=23:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

***************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MAY ( "sharpen knives" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected MAY
|<*/parent> expecting (, ), Other text, or expression

**************************** \ !Unconsumed Error: |<*/parent: Unexpected MAY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "has" ( "health insurance"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected MAY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

*************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MAY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
*************************** / term p/notLabelTerm                                                 :3_3:Other "has":
**************************** / term p/2:someIndentation expr p                                   :3_3:Other "has":
***************************** / someIndentation                                                 :3_3:Other "has":
****************************** / myindented-GoDeeper                                           :3_3:Other "has":
myindented-GoDeeper> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "has"
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "has" Expecting: ( :3_3:Other "has":
someIndentation> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "has"
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected "has" Expecting: ( :3_3:Other "has":
term p/2:someIndentation expr p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "has"
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "has" Expecting: ( :3_3:Other "has":
**************************** / term p/3:plain p                                                  :3_3:Other "has":
***************************** / pRelPred                                                        :3_3:Other "has":
****************************** / slRelPred                                                     :3_3:Other "has":
******************************* / nested simpleHorn                                           :3_3:Other "has":
******************************** > |^|                                                       :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |^| deeps                                                :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MAY ( "sharpen knives" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************** \ |^| deeps has returned ([(),(),()],-3)                :4_1:May:
nested simpleHorn> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
nested simpleHorn> MATCH (CERR): "has" ( "health insurance" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected MAY
nested simpleHorn> expecting ) or MEANS

******************************* \ !Consumed Error: nested simpleHorn: Unexpected MAY Expecting: MEANS ) :4_1:May:
******************************* / RPConstraint                                                :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPConstraint> MATCH (CERR): "has" ( "health insurance"
RPConstraint> ERROR:
RPConstraint> offset=23:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPBoolStructR                                               :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slMultiTerm                                             :3_3:Other "has":
********************************** / someSL                                                :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

********************************** \ someSL has returned (["has","health insurance"],1)   :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

********************************* \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
******************************** / |>| calling $>>                                          :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MAY ( "sharpen knives" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=23:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPBoolStructR> MATCH (CERR): "has" ( "health insurance"
RPBoolStructR> ERROR:
RPBoolStructR> offset=23:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
******************************* / RPMT                                                        :3_3:Other "has":
******************************** / $*|                                                       :3_3:Other "has":
********************************* / slAKA                                                   :3_3:Other "has":
********************************** / $*|                                                   :3_3:Other "has":
*********************************** / slAKA base                                          :3_3:Other "has":
************************************ / slMultiTerm                                       :3_3:Other "has":
************************************* / someSL                                          :3_3:Other "has":
someSL> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
someSL> MATCH (COK): "has" ( "health insurance"
someSL> VALUE: ((["has","health insurance"],1),[])

************************************* \ someSL has returned (["has","health insurance"],1) :4_2:UnDeeper:
slMultiTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slMultiTerm> MATCH (COK): "has" ( "health insurance"
slMultiTerm> VALUE: ((["has","health insurance"],1),[])

************************************ \ slMultiTerm has returned (["has","health insurance"],1) :4_2:UnDeeper:
slAKA base> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA base> MATCH (COK): "has" ( "health insurance"
slAKA base> VALUE: ((["has","health insurance"],1),[])

*********************************** \ slAKA base has returned (["has","health insurance"],1) :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

********************************** \ $*| has returned (["has","health insurance"],1)      :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional akapart                             :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / PAKA/akapart                                 :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
**************************************** / Aka Token                                :4_2:UnDeeper:
Aka Token> IN: ) ) ) MAY ( "sharpen knives" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=23:
Aka Token> unexpected )
Aka Token> expecting AKA

**************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting AKA

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MAY ( "sharpen knives" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=23:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional akapart has returned (Nothing,0)    :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** / |>>/recurse                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************** / |>>/base                                             :4_2:UnDeeper:
*********************************** / slAKA optional typically                           :4_2:UnDeeper:
************************************ / |?| optional something                           :4_2:UnDeeper:
************************************* / |>>/recurse                                    :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MAY ( "sharpen knives" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=23:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************* / |>>/base                                       :4_2:UnDeeper:
************************************** / typically                                    :4_2:UnDeeper:
*************************************** / $>|                                        :4_2:UnDeeper:
$>|> IN: ) ) ) MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected )
$>|> expecting TYPICALLY

*************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MAY ( "sharpen knives" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=23:
typically> unexpected )
typically> expecting TYPICALLY

************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=23:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MAY ( "sharpen knives" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************ \ |?| optional something has returned (Nothing,0)  :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MAY ( "sharpen knives" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*********************************** \ slAKA optional typically has returned (Nothing,0)  :4_2:UnDeeper:
*********************************** > |>>/base got Nothing                               :4_2:UnDeeper:
|>>/base> IN: ) ) ) MAY ( "sharpen knives" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************** \ |>>/base has returned (Nothing,0)                    :4_2:UnDeeper:
********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************** > pAKA: entityalias = Nothing                          :4_2:UnDeeper:
slAKA> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slAKA> MATCH (COK): "has" ( "health insurance"
slAKA> VALUE: ((["has","health insurance"],1),[])

********************************* \ slAKA has returned (["has","health insurance"],1)      :4_2:UnDeeper:
$*|> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
$*|> MATCH (COK): "has" ( "health insurance"
$*|> VALUE: ((["has","health insurance"],1),[])

******************************** \ $*| has returned (["has","health insurance"],1)          :4_2:UnDeeper:
RPMT> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
RPMT> MATCH (COK): "has" ( "health insurance"
RPMT> VALUE: ((RPMT ["has","health insurance"],1),[])

******************************* \ RPMT has returned (RPMT ["has","health insurance"],1)      :4_2:UnDeeper:
slRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
slRelPred> MATCH (COK): "has" ( "health insurance"
slRelPred> VALUE: ((RPMT ["has","health insurance"],1),[])

****************************** \ slRelPred has returned (RPMT ["has","health insurance"],1)   :4_2:UnDeeper:
****************************** / undeepers                                                    :4_2:UnDeeper:
******************************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_2:UnDeeper:
******************************* > sameLine: success!                                           :4_3:UnDeeper:
undeepers> IN: ) ) ) MAY ( "sharpen knives" )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************************** \ undeepers has returned ()                                      :4_3:UnDeeper:
pRelPred> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
pRelPred> MATCH (COK): "has" ( "health insurance" )
pRelPred> VALUE: (RPMT ["has","health insurance"],[])

***************************** \ pRelPred has returned RPMT ["has","health insurance"]            :4_3:UnDeeper:
term p/3:plain p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/3:plain p> MATCH (COK): "has" ( "health insurance" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

**************************** \ term p/3:plain p has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
term p/notLabelTerm> MATCH (COK): "has" ( "health insurance" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"]) :4_3:UnDeeper:
termIndent p> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
termIndent p> MATCH (COK): "has" ( "health insurance" )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************** \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])     :4_3:UnDeeper:
************************** / binary(Or)                                                             :4_3:UnDeeper:
binary(Or)> IN: ) ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=24:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_3:UnDeeper:
************************** / binary(And)                                                            :4_3:UnDeeper:
binary(And)> IN: ) ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=24:
binary(And)> unexpected )
binary(And)> expecting AND

************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_3:UnDeeper:
************************** / binary(SetLess)                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=24:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_3:UnDeeper:
************************** / binary(SetPlus)                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=24:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_3:UnDeeper:
expression> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
expression> MATCH (COK): "has" ( "health insurance" )
expression> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************* \ expression has returned MyLeaf (RPMT ["has","health insurance"])         :4_3:UnDeeper:
ppp inner> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
ppp inner> MATCH (COK): "has" ( "health insurance" )
ppp inner> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

************************ \ ppp inner has returned MyLeaf (RPMT ["has","health insurance"])            :4_3:UnDeeper:
manyIndentation/leaf?> IN: "has" ( "health insurance" ) ) ) MAY ( " <…>
manyIndentation/leaf?> MATCH (COK): "has" ( "health insurance" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

*********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["has","health insurance"])  :4_3:UnDeeper:
*********************** / myindented-UnDeeper                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_4:UnDeeper:
someIndentation> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
someIndentation> MATCH (COK): ( "has" ( "health insurance" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************** \ someIndentation has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "has" ( "health insurance" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

********************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["has","health insurance"]) :4_4:UnDeeper:
term p/notLabelTerm> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
term p/notLabelTerm> MATCH (COK): ( "has" ( "health insurance" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["has","health insurance"])            :4_4:UnDeeper:
termIndent p> IN: ( "has" ( "health insurance" ) ) ) MAY ( <…>
termIndent p> MATCH (COK): ( "has" ( "health insurance" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["has","health insurance"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["has","health insurance"])                     :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

****************** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
ppp inner> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

***************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
manyIndentation/leaf?> IN: ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> MATCH (COK): ( "is" ( "immortal" ( TYPICALLY ( "false <…>
manyIndentation/leaf?> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

**************** \ manyIndentation/leaf? has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "sharpen knives" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:May:
someIndentation> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
someIndentation> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*************** \ someIndentation has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/2:someIndentation expr p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/2:someIndentation expr p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************** \ term p/2:someIndentation expr p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
term p/notLabelTerm> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
term p/notLabelTerm> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************* \ term p/notLabelTerm has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
termIndent p> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
termIndent p> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

************ \ termIndent p has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
************ / binary(Or)                                                                                    :4_1:May:
binary(Or)> IN: MAY ( "sharpen knives" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected MAY
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MAY Expecting: OR                                   :4_1:May:
************ / binary(And)                                                                                   :4_1:May:
binary(And)> IN: MAY ( "sharpen knives" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected MAY
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MAY Expecting: AND                                 :4_1:May:
************ / binary(SetLess)                                                                               :4_1:May:
binary(SetLess)> IN: MAY ( "sharpen knives" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected MAY
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MAY Expecting: LESS                            :4_1:May:
************ / binary(SetPlus)                                                                               :4_1:May:
binary(SetPlus)> IN: MAY ( "sharpen knives" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected MAY
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MAY Expecting: PLUS                            :4_1:May:
expression> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

*********** \ expression has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
ppp inner> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********** \ ppp inner has returned MyAny [MyLeaf (RPMT ["is","immortal"]),MyLeaf (RPMT ["has","health insurance"])] :4_1:May:
pBSR> IN: ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> MATCH (COK): ( ( "is" ( "immortal" ( TYPICALLY ( "fal <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])],[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

********* \ pBSR has returned Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])] :4_1:May:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
manyIndentation/leaf?> IN: WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> MATCH (COK): WHO ( ( "is" ( "immortal" ( TYPICALLY (  <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]),[DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}])

******* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]) :4_1:May:
******* / WHERE                                                                                                   :4_1:May:
WHERE> IN: MAY ( "sharpen knives" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=26:
WHERE> unexpected MAY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                               :4_1:May:
******* / preambleParamText:[Having]                                                                              :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                              :4_1:May:
preambleParamText:[Having]> IN: MAY ( "sharpen knives" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=26:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING                         :4_1:May:
******* / preambleParamText:[Given]                                                                               :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                               :4_1:May:
preambleParamText:[Given]> IN: MAY ( "sharpen knives" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=26:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                           :4_1:May:
******* / preambleParamText:[Upon]                                                                                :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                                :4_1:May:
preambleParamText:[Upon]> IN: MAY ( "sharpen knives" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=26:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                             :4_1:May:
******* / preambleBoolStructR [Unless]                                                                            :4_1:May:
preambleBoolStructR [Unless]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=26:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS                       :4_1:May:
******* / preambleBoolStructR [When,If]                                                                           :4_1:May:
preambleBoolStructR [When,If]> IN: MAY ( "sharpen knives" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=26:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN                     :4_1:May:
******* / pTemporal/eventually                                                                                    :4_1:May:
pTemporal/eventually> IN: MAY ( "sharpen knives" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                           :4_1:May:
******* / pTemporal/specifically                                                                                  :4_1:May:
******** / $>|                                                                                                   :4_1:May:
$>|> IN: MAY ( "sharpen knives" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                                  :4_1:May:
pTemporal/specifically> IN: MAY ( "sharpen knives" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=26:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON                 :4_1:May:
******* / pTemporal/vaguely                                                                                       :4_1:May:
pTemporal/vaguely> IN: MAY ( "sharpen knives" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=26:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                              :4_1:May:
******* / pDA                                                                                                     :4_1:May:
******** / pAction calling pParamText                                                                             :4_2:GoDeeper:
********* / pParamText                                                                                           :4_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :4_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :4_2:GoDeeper:
************ / slAKA                                                                                          :4_2:GoDeeper:
************* / $*|                                                                                          :4_2:GoDeeper:
************** / slAKA base                                                                                 :4_2:GoDeeper:
*************** / slKeyValues                                                                              :4_2:GoDeeper:
**************** / $*|                                                                                    :4_2:GoDeeper:
***************** / someSL                                                                               :4_2:GoDeeper:
****************** / pNumAsText                                                                         :4_2:GoDeeper:
pNumAsText> IN: ( "sharpen knives" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :4_2:GoDeeper:
someSL> IN: ( "sharpen knives" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
slKeyValues> IN: ( "sharpen knives" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=27:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :4_2:GoDeeper:
slAKA base> IN: ( "sharpen knives" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :4_2:GoDeeper:
$*|> IN: ( "sharpen knives" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
slAKA> IN: ( "sharpen knives" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :4_2:GoDeeper:
pKeyValuesAka> IN: ( "sharpen knives" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=27:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :4_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sharpen knives" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=27:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :4_2:GoDeeper:
pParamText> IN: ( "sharpen knives" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=27:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :4_2:GoDeeper:
pAction calling pParamText> IN: ( "sharpen knives" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=27:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :4_2:GoDeeper:
pDA> IN: MAY ( "sharpen knives" )
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=27:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :4_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=27:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :4_1:May:
permutationsReg> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=30:
permutationsReg> unexpected end of input
permutationsReg> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=30:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=30:
pRegRule> unexpected end of input
pRegRule> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, any token, or §

*** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: § GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( ( "is" ( "immor <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=30:
pRule> unexpected end of input
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected end of input Expecting: EOL regulative rule                                  :1_1:Every:
Loading env

Parser tests
  PDPA
    boolstructp-3 FAILED [1]
    boolstructp-3 FAILED [2]
Loaded env
    boolstructp-3 FAILED [3]
    boolstructp-3 FAILED [4]

Failures:

  test/Spec.hs:1470:7: 
  1) Parser tests, PDPA, boolstructp-3
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), rkeyword = REvery, who = Just (Any Nothing [Leaf (RPMT ["is","immortal"]),Leaf (RPMT ["has","health insurance"])]), cond = Nothing, deontic = DMay, action = Leaf (("sharpen knives" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefTypically {name = ["is","immortal"], defaults = [RPConstraint ["is","immortal"] RPis ["false"]], srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 3, version = Nothing})}]]
       but parsing failed with error:
       1:2:
       unexpected end of input
       expecting EOL or regulative rule
       
       EVERY   ✳ person                                                      
       WHO                      is    immortal           TYPICALLY   false   
               OR               has   health insurance                       
       MAY     sharpen knives                                                
       
       
       Stream:
       EVERY "✳"
           ( "✳" "person" ) WHO
           (
               ( "is"
                   ( "immortal"
                       ( TYPICALLY ( "false" ) )
                   )
               ) OR
               ( "has" ( "health insurance" ) )
           ) MAY
           ( "sharpen knives" "✳" )

  To rerun use: --match "/Parser tests/PDPA/boolstructp-3/"

  test/Spec.hs:1493:7: 
  2) Parser tests, PDPA, boolstructp-3
       expected: [[["person","has","health insurance"]]]
       but parsing failed with error:
       1:2:
       unexpected end of input
       expecting EOL or regulative rule
       
       EVERY   ✳ person                                                      
       WHO                      is    immortal           TYPICALLY   false   
               OR               has   health insurance                       
       MAY     sharpen knives                                                
       
       
       Stream:
       EVERY "✳"
           ( "✳" "person" ) WHO
           (
               ( "is"
                   ( "immortal"
                       ( TYPICALLY ( "false" ) )
                   )
               ) OR
               ( "has" ( "health insurance" ) )
           ) MAY
           ( "sharpen knives" "✳" )

  To rerun use: --match "/Parser tests/PDPA/boolstructp-3/"

  test/Spec.hs:1496:7: 
  3) Parser tests, PDPA, boolstructp-3
       expected: [[["person","is","immortal"],["person","has","health insurance"]]]
       but parsing failed with error:
       1:2:
       unexpected end of input
       expecting EOL or regulative rule
       
       EVERY   ✳ person                                                      
       WHO                      is    immortal           TYPICALLY   false   
               OR               has   health insurance                       
       MAY     sharpen knives                                                
       
       
       Stream:
       EVERY "✳"
           ( "✳" "person" ) WHO
           (
               ( "is"
                   ( "immortal"
                       ( TYPICALLY ( "false" ) )
                   )
               ) OR
               ( "has" ( "health insurance" ) )
           ) MAY
           ( "sharpen knives" "✳" )

  To rerun use: --match "/Parser tests/PDPA/boolstructp-3/"

  test/Spec.hs:1500:7: 
  4) Parser tests, PDPA, boolstructp-3
       expected: [[["Does the person have health insurance?"],["Is the person immortal?"]]]
       but parsing failed with error:
       1:2:
       unexpected end of input
       expecting EOL or regulative rule
       
       EVERY   ✳ person                                                      
       WHO                      is    immortal           TYPICALLY   false   
               OR               has   health insurance                       
       MAY     sharpen knives                                                
       
       
       Stream:
       EVERY "✳"
           ( "✳" "person" ) WHO
           (
               ( "is"
                   ( "immortal"
                       ( TYPICALLY ( "false" ) )
                   )
               ) OR
               ( "has" ( "health insurance" ) )
           ) MAY
           ( "sharpen knives" "✳" )

  To rerun use: --match "/Parser tests/PDPA/boolstructp-3/"

Randomized with seed 556287310

Finished in 2.2857 seconds
4 examples, 4 failures

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

