* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/megaparsing/indented-1/")

* Tokens
( EVERY ( "person" ) WHO ( "walks" ) OR ( "runs" ) OR ( "eats" ) OR
    ( ( "drinks" ) AND ( "swallows" ) ) MUST DO ( "sing" )
)
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                              :1_2:GoDeeper:
*** / pRegRule                                                                                                         :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / pRegRuleSugary                                                                                                 :1_2:GoDeeper:
***** / someDeep                                                                                                     :1_2:GoDeeper:
****** / someDeep first part calls base directly                                                                    :1_2:GoDeeper:
someDeep first part calls base directly> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text             :1_2:GoDeeper:
someDeep> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected (
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                              :1_2:GoDeeper:
pRegRuleSugary> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected ( Expecting: Other text                                          :1_2:GoDeeper:
**** / pRegRuleNormal                                                                                                 :1_2:GoDeeper:
***** / permutationsReg                                                                                              :1_2:GoDeeper:
****** / regulative permutation with deontic-temporal                                                               :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :1_2:GoDeeper:
preambleParamText:[Having]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :1_2:GoDeeper:
******* / pDT                                                                                                      :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: MUST MAY SHANT                                         :1_2:GoDeeper:
pDT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected (
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected ( Expecting: MUST MAY SHANT                                           :1_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :1_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=0:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :1_2:GoDeeper:
******* / pDoAction/Do                                                                                             :1_2:GoDeeper:
pDoAction/Do> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=0:
pDoAction/Do> unexpected (
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected ( Expecting: DO                                              :1_2:GoDeeper:
regulative permutation with deontic-temporal> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=0:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :1_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                 :1_2:GoDeeper:
******* / WHERE                                                                                                    :1_2:GoDeeper:
WHERE> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :1_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :1_2:GoDeeper:
preambleParamText:[Having]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :1_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :1_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :1_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :1_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :1_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :1_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :1_2:GoDeeper:
******* / pTemporal/eventually                                                                                     :1_2:GoDeeper:
pTemporal/eventually> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected (
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected ( Expecting: EVENTUALLY                              :1_2:GoDeeper:
******* / pTemporal/specifically                                                                                   :1_2:GoDeeper:
******** / $>|                                                                                                    :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: BEFORE AFTER BY ON                                     :1_2:GoDeeper:
pTemporal/specifically> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected (
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected ( Expecting: BEFORE AFTER BY ON                    :1_2:GoDeeper:
******* / pTemporal/vaguely                                                                                        :1_2:GoDeeper:
pTemporal/vaguely> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected (
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected ( Expecting: Other text                                 :1_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :1_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=0:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :1_2:GoDeeper:
******* / pDA                                                                                                      :1_2:GoDeeper:
pDA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=0:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                           :1_2:GoDeeper:
regulative permutation with deontic-action> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=0:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: BEFORE AFTER BY ON GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT EVENTUALLY UNLESS IF WHEN Other text :1_2:GoDeeper:
permutationsReg> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=0:
permutationsReg> unexpected (
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :1_2:GoDeeper:
pRegRuleNormal> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=0:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :1_2:GoDeeper:
pRegRule> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=0:
pRegRule> unexpected (
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: MUST MAY SHANT § BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO FULFILLED BREACH EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :1_2:GoDeeper:
*** / pTypeDefinition                                                                                                  :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / pHornlike/uponLimb                                                                                             :1_2:GoDeeper:
***** / preambleParamText:[Upon]                                                                                     :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                       :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                    :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                            :1_2:GoDeeper:
**** / pHornlike/givenLimb                                                                                            :1_2:GoDeeper:
***** / preambleParamText:[Given]                                                                                    :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                      :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                  :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                          :1_2:GoDeeper:
pTypeDefinition> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected (
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected ( Expecting: § GIVEN UPON DEFINE                                 :1_2:GoDeeper:
*** / pConstitutiveRule                                                                                                :1_2:GoDeeper:
**** / pRuleLabel                                                                                                     :1_2:GoDeeper:
***** / $>|                                                                                                          :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                           :1_2:GoDeeper:
pRuleLabel> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                      :1_2:GoDeeper:
**** / calling myindented pNameParens                                                                                 :1_2:GoDeeper:
***** / manyIndentation/leaf?                                                                                        :1_2:GoDeeper:
****** / pMultiTermAka                                                                                              :1_2:GoDeeper:
******* / pAKA                                                                                                     :1_2:GoDeeper:
******** / slAKA                                                                                                  :1_2:GoDeeper:
********* / $*|                                                                                                  :1_2:GoDeeper:
********** / slAKA base                                                                                         :1_2:GoDeeper:
*********** / slMultiTerm                                                                                      :1_2:GoDeeper:
************ / someSL                                                                                         :1_2:GoDeeper:
************* / pNumAsText                                                                                   :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                 :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                                 :1_2:GoDeeper:
pAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected (
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected ( Expecting: other text or number                                    :1_2:GoDeeper:
pMultiTermAka> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected (
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
***** / manyIndentation/deeper; calling someIndentation                                                              :1_2:GoDeeper:
****** / someIndentation                                                                                            :1_2:GoDeeper:
******* / myindented-GoDeeper                                                                                      :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented-GoDeeper has returned GoDeeper                                                                 :1_2:Every:
******* / manyIndentation/leaf?                                                                                     :1_2:Every:
******** / pMultiTermAka                                                                                           :1_2:Every:
********* / pAKA                                                                                                  :1_2:Every:
********** / slAKA                                                                                               :1_2:Every:
*********** / $*|                                                                                               :1_2:Every:
************ / slAKA base                                                                                      :1_2:Every:
************* / slMultiTerm                                                                                   :1_2:Every:
************** / someSL                                                                                      :1_2:Every:
*************** / pNumAsText                                                                                :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************ \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                          :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

********** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                          :1_2:Every:
pAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=1:
pAKA> unexpected EVERY
pAKA> expecting other text or number

********* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                             :1_2:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=1:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

******** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_2:Every:
******* / manyIndentation/deeper; calling someIndentation                                                           :1_2:Every:
******** / someIndentation                                                                                         :1_2:Every:
********* / myindented-GoDeeper                                                                                   :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

****** \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                        :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
calling myindented pNameParens> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=1:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number          :1_2:GoDeeper:
pConstitutiveRule> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=1:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                      :1_2:GoDeeper:
*** / pScenarioRule                                                                                                    :1_2:GoDeeper:
pScenarioRule> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected (
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected ( Expecting: SCENARIO                                               :1_2:GoDeeper:
*** / pHornlike                                                                                                        :1_2:GoDeeper:
**** / pSrcRef                                                                                                        :1_2:GoDeeper:
***** / pRuleLabel                                                                                                   :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                         :1_2:GoDeeper:
pRuleLabel> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                    :1_2:GoDeeper:
pSrcRef> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})) :1_2:GoDeeper:
**** / pHornlike / permute                                                                                            :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: OTHERWISE IF WHEN MEANS                                 :1_2:GoDeeper:
***** / pHornlike/uponLimb                                                                                           :1_2:GoDeeper:
****** / preambleParamText:[Upon]                                                                                   :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                     :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                  :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                          :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: OTHERWISE IF WHEN MEANS                                 :1_2:GoDeeper:
***** / pHornlike/givenLimb                                                                                          :1_2:GoDeeper:
****** / preambleParamText:[Given]                                                                                  :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                    :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                        :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: OTHERWISE IF WHEN MEANS                                 :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                      :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                      :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:GoDeeper:
***** / pHornlike/givenLimb                                                                                          :1_2:GoDeeper:
****** / preambleParamText:[Given]                                                                                  :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                    :1_2:GoDeeper:
preambleParamText:[Given]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                                :1_2:GoDeeper:
pHornlike/givenLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected (
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected ( Expecting: GIVEN                                        :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: OTHERWISE IF WHEN MEANS                                 :1_2:GoDeeper:
***** / pHornlike/uponLimb                                                                                           :1_2:GoDeeper:
****** / preambleParamText:[Upon]                                                                                   :1_2:GoDeeper:
******* / $>|                                                                                                      :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                     :1_2:GoDeeper:
preambleParamText:[Upon]> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                  :1_2:GoDeeper:
pHornlike/uponLimb> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected (
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected ( Expecting: UPON                                          :1_2:GoDeeper:
***** / whenCase                                                                                                     :1_2:GoDeeper:
****** / whenMeansIf                                                                                                :1_2:GoDeeper:
whenMeansIf> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected (
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected ( Expecting: IF WHEN MEANS                                      :1_2:GoDeeper:
****** / Otherwise                                                                                                  :1_2:GoDeeper:
Otherwise> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected (
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected ( Expecting: OTHERWISE                                            :1_2:GoDeeper:
whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected (
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected ( Expecting: OTHERWISE IF WHEN MEANS                                 :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                      :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                      :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:GoDeeper:
***** / pHornlike/ambitious                                                                                          :1_2:GoDeeper:
****** / $>|                                                                                                        :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected ( Expecting: DEFINE DECIDE                                              :1_2:GoDeeper:
pHornlike/ambitious> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected (
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected ( Expecting: DEFINE DECIDE                                :1_2:GoDeeper:
***** / pHornlike/someStructure                                                                                      :1_2:GoDeeper:
****** / manyIndentation/leaf?                                                                                      :1_2:GoDeeper:
******* / relPredNextlineWhen                                                                                      :1_2:GoDeeper:
******** / pRelPred optIndentedTuple whenCase                                                                     :1_2:GoDeeper:
********* / optIndentedTuple                                                                                     :1_2:GoDeeper:
********** / optIndented                                                                                        :1_2:GoDeeper:
*********** / pRelPred                                                                                         :1_2:GoDeeper:
************ / slRelPred                                                                                      :1_2:GoDeeper:
************* / nested simpleHorn                                                                            :1_2:GoDeeper:
************** > |^|                                                                                        :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number           :1_2:GoDeeper:
************* / RPConstraint                                                                                 :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
************* / RPBoolStructR                                                                                :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number               :1_2:GoDeeper:
************* / RPMT                                                                                         :1_2:GoDeeper:
************** / $*|                                                                                        :1_2:GoDeeper:
*************** / slAKA                                                                                    :1_2:GoDeeper:
**************** / $*|                                                                                    :1_2:GoDeeper:
***************** / slAKA base                                                                           :1_2:GoDeeper:
****************** / slMultiTerm                                                                        :1_2:GoDeeper:
******************* / someSL                                                                           :1_2:GoDeeper:
******************** / pNumAsText                                                                     :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number       :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number          :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
pRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected (
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected ( Expecting: other text or number                        :1_2:GoDeeper:
optIndented> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected (
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected ( Expecting: other text or number                       :1_2:GoDeeper:
optIndentedTuple> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected (
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected ( Expecting: other text or number                    :1_2:GoDeeper:
pRelPred optIndentedTuple whenCase> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected (
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected ( Expecting: other text or number    :1_2:GoDeeper:
relPredNextlineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected (
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
******* / relPredSamelineWhen                                                                                      :1_2:GoDeeper:
******** / $*|                                                                                                    :1_2:GoDeeper:
********* / slRelPred                                                                                            :1_2:GoDeeper:
********** / nested simpleHorn                                                                                  :1_2:GoDeeper:
*********** > |^|                                                                                              :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
nested simpleHorn> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected (
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected ( Expecting: other text or number                 :1_2:GoDeeper:
********** / RPConstraint                                                                                       :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPConstraint> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected (
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
********** / RPBoolStructR                                                                                      :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slMultiTerm                                                                                    :1_2:GoDeeper:
************* / someSL                                                                                       :1_2:GoDeeper:
************** / pNumAsText                                                                                 :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                              :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                      :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number                   :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPBoolStructR> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected (
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
********** / RPMT                                                                                               :1_2:GoDeeper:
*********** / $*|                                                                                              :1_2:GoDeeper:
************ / slAKA                                                                                          :1_2:GoDeeper:
************* / $*|                                                                                          :1_2:GoDeeper:
************** / slAKA base                                                                                 :1_2:GoDeeper:
*************** / slMultiTerm                                                                              :1_2:GoDeeper:
**************** / someSL                                                                                 :1_2:GoDeeper:
***************** / pNumAsText                                                                           :1_2:GoDeeper:
pNumAsText> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :1_2:GoDeeper:
someSL> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
slMultiTerm> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected (
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected ( Expecting: other text or number             :1_2:GoDeeper:
slAKA base> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
slAKA> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :1_2:GoDeeper:
RPMT> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected (
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected ( Expecting: other text or number                              :1_2:GoDeeper:
slRelPred> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected (
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected ( Expecting: other text or number                           :1_2:GoDeeper:
$*|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected (
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                                   :1_2:GoDeeper:
relPredSamelineWhen> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected (
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
manyIndentation/leaf?> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number                     :1_2:GoDeeper:
****** / manyIndentation/deeper; calling someIndentation                                                            :1_2:GoDeeper:
******* / someIndentation                                                                                          :1_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting ( or other text or number

******* \ !Consumed Error: someIndentation: Unexpected EVERY Expecting: ( other text or number                      :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting ( or other text or number

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: ( other text or number :1_2:GoDeeper:
pHornlike/someStructure> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:GoDeeper:
pHornlike / permute> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=1:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, UPON, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: GIVEN UPON ( DEFINE DECIDE other text or number :1_2:GoDeeper:
pHornlike> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=1:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, UPON, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: § GIVEN UPON ( DEFINE DECIDE other text or number     :1_2:GoDeeper:
*** / pRuleLabel                                                                                                       :1_2:GoDeeper:
**** / $>|                                                                                                            :1_2:GoDeeper:
$>|> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected (
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                             :1_2:GoDeeper:
pRuleLabel> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected (
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                                        :1_2:GoDeeper:
*** / pRule: unwrapping indentation and recursing                                                                      :1_2:GoDeeper:
**** / myindented-GoDeeper                                                                                            :1_2:GoDeeper:
myindented-GoDeeper> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**** \ myindented-GoDeeper has returned GoDeeper                                                                       :1_2:Every:
**** / pRule                                                                                                           :1_2:Every:
***** / pRegRule                                                                                                      :1_2:Every:
****** / pRuleLabel                                                                                                  :1_2:Every:
******* / $>|                                                                                                       :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting §

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_2:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=1:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

****** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_2:Every:
****** / pRegRuleSugary                                                                                              :1_2:Every:
******* / someDeep                                                                                                  :1_2:Every:
******** / someDeep first part calls base directly                                                                 :1_2:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=1:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

******** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text      :1_2:Every:
someDeep> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=1:
someDeep> unexpected EVERY
someDeep> expecting Other text

******* \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                       :1_2:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=1:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

****** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                   :1_2:Every:
****** / pRegRuleNormal                                                                                              :1_2:Every:
******* / permutationsReg                                                                                           :1_2:Every:
******** / regulative permutation with deontic-temporal                                                            :1_2:Every:
********* / WHERE                                                                                                 :1_2:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=1:
WHERE> unexpected EVERY
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                           :1_2:Every:
********* / preambleParamText:[Having]                                                                            :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                          :1_2:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=1:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                     :1_2:Every:
********* / preambleParamText:[Given]                                                                             :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                           :1_2:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=1:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                       :1_2:Every:
********* / preambleParamText:[Upon]                                                                              :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                            :1_2:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=1:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                         :1_2:Every:
********* / preambleBoolStructR [Unless]                                                                          :1_2:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=1:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                   :1_2:Every:
********* / preambleBoolStructR [When,If]                                                                         :1_2:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=1:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                 :1_2:Every:
********* / pDT                                                                                                   :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                  :1_2:Every:
pDT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=1:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

********* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_2:Every:
********* / pActor [REvery,RParty,RTokAll]                                                                        :1_2:Every:
********** / someIndentation                                                                                      :1_3:GoDeeper:
*********** / myindented-GoDeeper                                                                                :1_3:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) OR ( "runs" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                           :1_3:Other "pers:
*********** / manyIndentation/leaf?                                                                               :1_3:Other "pers:
************ / pMultiTermAka                                                                                     :1_3:Other "pers:
************* / pAKA                                                                                            :1_3:Other "pers:
************** / slAKA                                                                                         :1_3:Other "pers:
*************** / $*|                                                                                         :1_3:Other "pers:
**************** / slAKA base                                                                                :1_3:Other "pers:
***************** / slMultiTerm                                                                             :1_3:Other "pers:
****************** / someSL                                                                                :1_3:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

****************** \ someSL has returned (["person"],0)                                                     :2_3:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

***************** \ slMultiTerm has returned (["person"],0)                                                  :2_3:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

**************** \ slAKA base has returned (["person"],0)                                                     :2_3:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

*************** \ $*| has returned (["person"],0)                                                              :2_3:UnDeeper:
*************** / |>>/recurse                                                                                  :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :2_3:UnDeeper:
*************** / |>>/base                                                                                     :2_3:UnDeeper:
**************** / slAKA optional akapart                                                                     :2_3:UnDeeper:
***************** / |?| optional something                                                                   :2_3:UnDeeper:
****************** / |>>/recurse                                                                            :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_3:UnDeeper:
****************** / |>>/base                                                                               :2_3:UnDeeper:
******************* / PAKA/akapart                                                                         :2_3:UnDeeper:
******************** / $>|                                                                                :2_3:UnDeeper:
********************* / Aka Token                                                                        :2_3:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=4:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                        :2_3:UnDeeper:
$>|> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                :2_3:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=4:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                         :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=4:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                               :2_3:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :2_3:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                            :2_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :2_3:UnDeeper:
*************** / |>>/recurse                                                                                  :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :2_3:UnDeeper:
*************** / |>>/base                                                                                     :2_3:UnDeeper:
**************** / slAKA optional typically                                                                   :2_3:UnDeeper:
***************** / |?| optional something                                                                   :2_3:UnDeeper:
****************** / |>>/recurse                                                                            :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_3:UnDeeper:
****************** / |>>/base                                                                               :2_3:UnDeeper:
******************* / typically                                                                            :2_3:UnDeeper:
******************** / $>|                                                                                :2_3:UnDeeper:
$>|> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                          :2_3:UnDeeper:
typically> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=4:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                      :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=4:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                         :2_3:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :2_3:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                          :2_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :2_3:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                               :2_3:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                  :2_3:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************** \ slAKA has returned (["person"],0)                                                              :2_3:UnDeeper:
************** / undeepers                                                                                      :2_3:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                       :2_3:UnDeeper:
*************** > sameLine: success!                                                                           :2_3:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                      :2_3:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

************* \ pAKA has returned ["person"]                                                                     :2_3:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

************ \ pMultiTermAka has returned ["person"]                                                              :2_3:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

*********** \ manyIndentation/leaf? has returned ["person"]                                                        :2_3:UnDeeper:
*********** / myindented-UnDeeper                                                                                  :2_3:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented-UnDeeper has returned UnDeeper                                                         :2_2:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) OR ( "runs" <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

********** \ someIndentation has returned ["person"]                                                             :2_2:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

********* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))            :2_2:Who:
********* / manyIndentation/leaf?                                                                                 :2_2:Who:
********** / preambleBoolStructR [Who,Which,Whose]                                                               :2_2:Who:
*********** / pBSR                                                                                               :2_3:GoDeeper:
************ / ppp inner                                                                                        :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / termIndent p                                                                                 :2_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :2_3:GoDeeper:
**************** > |<|                                                                                      :2_3:GoDeeper:
**************** > |<* starting                                                                             :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :2_3:Other "walk:
****************** / manyIndentation/leaf?                                                                 :2_3:Other "walk:
******************* / ppp inner                                                                           :2_3:Other "walk:
******************** / expression                                                                        :2_3:Other "walk:
********************* / termIndent p                                                                    :2_3:Other "walk:
********************** / term p/1a:label ends directly above next line                                 :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
************************ / pNumAsText                                                                 :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :3_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*********************** \ $*| has returned (["walks"],0)                                               :3_3:UnDeeper:
*********************** / matching EOL                                                                 :3_3:UnDeeper:
matching EOL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=8:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :3_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :2_3:Other "walk:
*********************** > |<|                                                                         :2_3:Other "walk:
*********************** > |<* starting                                                                :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*********************** \ $*| has returned (["walks"],0)                                               :3_3:UnDeeper:
*********************** / |<*/parent                                                                   :3_3:UnDeeper:
************************ > |<*/recurse                                                                :3_3:UnDeeper:
************************ / ppp inner                                                               :3_2:Or:
************************* / expression                                                            :3_2:Or:
************************** / termIndent p                                                        :3_2:Or:
*************************** / term p/1a:label ends directly above next line                     :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :3_2:Or:
**************************** > |<|                                                             :3_2:Or:
**************************** > |<* starting                                                    :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/notLabelTerm                                               :3_2:Or:
**************************** / term p/2:someIndentation expr p                                 :3_2:Or:
***************************** / someIndentation                                               :3_2:Or:
****************************** / myindented-GoDeeper                                         :3_2:Or:
myindented-GoDeeper> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=9:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :3_2:Or:
someIndentation> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :3_2:Or:
term p/2:someIndentation expr p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :3_2:Or:
**************************** / term p/3:plain p                                                :3_2:Or:
***************************** / pRelPred                                                      :3_2:Or:
****************************** / slRelPred                                                   :3_2:Or:
******************************* / nested simpleHorn                                         :3_2:Or:
******************************** > |^|                                                     :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
nested simpleHorn> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPConstraint                                              :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPConstraint> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPBoolStructR                                             :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPBoolStructR> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPMT                                                      :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slAKA                                                 :3_2:Or:
********************************** / $*|                                                 :3_2:Or:
*********************************** / slAKA base                                        :3_2:Or:
************************************ / slMultiTerm                                     :3_2:Or:
************************************* / someSL                                        :3_2:Or:
************************************** / pNumAsText                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
slAKA base> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
slAKA> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPMT> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=9:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :3_2:Or:
slRelPred> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=9:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :3_2:Or:
pRelPred> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=9:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :3_2:Or:
term p/3:plain p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :3_2:Or:
term p/notLabelTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :3_2:Or:
termIndent p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=9:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :3_2:Or:
expression> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :3_2:Or:
ppp inner> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=9:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :3_2:Or:
************************ / withPrePost                                                             :3_2:Or:
************************* > |<* starting                                                          :3_2:Or:
************************* / $*|                                                                   :3_2:Or:
************************** / pre part                                                            :3_2:Or:
pre part> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=9:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :3_2:Or:
withPrePost> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :3_2:Or:
************************ / $*|                                                                     :3_2:Or:
************************* / pre part                                                              :3_2:Or:
pre part> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=9:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :3_2:Or:
************************ / |<*/base                                                                   :3_3:UnDeeper:
************************* / ppp inner                                                                :3_3:UnDeeper:
************************** / expression                                                             :3_3:UnDeeper:
*************************** / termIndent p                                                         :3_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :3_3:UnDeeper:
***************************** > |<|                                                              :3_3:UnDeeper:
***************************** > |<* starting                                                     :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :3_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :3_3:UnDeeper:
****************************** / someIndentation                                                :3_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :3_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_3:UnDeeper:
someIndentation> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_3:UnDeeper:
***************************** / term p/3:plain p                                                 :3_3:UnDeeper:
****************************** / pRelPred                                                       :3_3:UnDeeper:
******************************* / slRelPred                                                    :3_3:UnDeeper:
******************************** / nested simpleHorn                                          :3_3:UnDeeper:
********************************* > |^|                                                      :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPConstraint                                               :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPConstraint> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPBoolStructR                                              :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPMT                                                       :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slAKA                                                  :3_3:UnDeeper:
*********************************** / $*|                                                  :3_3:UnDeeper:
************************************ / slAKA base                                         :3_3:UnDeeper:
************************************* / slMultiTerm                                      :3_3:UnDeeper:
************************************** / someSL                                         :3_3:UnDeeper:
*************************************** / pNumAsText                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slAKA base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slAKA> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPMT> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slRelPred> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
pRelPred> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_3:UnDeeper:
termIndent p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_3:UnDeeper:
expression> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :3_3:UnDeeper:
ppp inner> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :3_3:UnDeeper:
************************* / withPrePost                                                              :3_3:UnDeeper:
************************** > |<* starting                                                           :3_3:UnDeeper:
************************** / $*|                                                                    :3_3:UnDeeper:
*************************** / pre part                                                             :3_3:UnDeeper:
pre part> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :3_3:UnDeeper:
withPrePost> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :3_3:UnDeeper:
************************* / $*|                                                                      :3_3:UnDeeper:
************************** / pre part                                                               :3_3:UnDeeper:
pre part> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_3:UnDeeper:
|<*/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_3:UnDeeper:
|<*/parent> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=9:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :3_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :3_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "walk:
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "walk:
************************ / someIndentation                                                           :2_3:Other "walk:
************************* / myindented-GoDeeper                                                     :2_3:Other "walk:
myindented-GoDeeper> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: ( :2_3:Other "walk:
someIndentation> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "walks"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (       :2_3:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_3:Other "walk:
*********************** / term p/3:plain p                                                            :2_3:Other "walk:
************************ / pRelPred                                                                  :2_3:Other "walk:
************************* / slRelPred                                                               :2_3:Other "walk:
************************** / nested simpleHorn                                                     :2_3:Other "walk:
*************************** > |^|                                                                 :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |^| deeps                                                            :3_3:UnDeeper:
|^| deeps> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :3_2:Or:
nested simpleHorn> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :3_2:Or:
************************** / RPConstraint                                                          :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |>| calling $>>                                                      :3_3:UnDeeper:
**************************** / |>>/recurse                                                        :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_3:UnDeeper:
**************************** / |>>/base                                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
RPConstraint> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |>| calling $>>                                                      :3_3:UnDeeper:
**************************** / |>>/recurse                                                        :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_3:UnDeeper:
**************************** / |>>/base                                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
RPBoolStructR> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
************************** / RPMT                                                                  :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slAKA                                                             :2_3:Other "walk:
***************************** / $*|                                                             :2_3:Other "walk:
****************************** / slAKA base                                                    :2_3:Other "walk:
******************************* / slMultiTerm                                                 :2_3:Other "walk:
******************************** / someSL                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

******************************** \ someSL has returned (["walks"],0)                          :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

******************************* \ slMultiTerm has returned (["walks"],0)                       :3_3:UnDeeper:
slAKA base> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

****************************** \ slAKA base has returned (["walks"],0)                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

***************************** \ $*| has returned (["walks"],0)                                   :3_3:UnDeeper:
***************************** / |>>/recurse                                                      :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :3_3:UnDeeper:
***************************** / |>>/base                                                         :3_3:UnDeeper:
****************************** / slAKA optional akapart                                         :3_3:UnDeeper:
******************************* / |?| optional something                                       :3_3:UnDeeper:
******************************** / |>>/recurse                                                :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_3:UnDeeper:
******************************** / |>>/base                                                   :3_3:UnDeeper:
********************************* / PAKA/akapart                                             :3_3:UnDeeper:
********************************** / $>|                                                    :3_3:UnDeeper:
*********************************** / Aka Token                                            :3_3:UnDeeper:
Aka Token> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=8:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_3:UnDeeper:
$>|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :3_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=8:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :3_3:UnDeeper:
|?| optional something> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :3_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :3_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :3_3:UnDeeper:
***************************** / |>>/recurse                                                      :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :3_3:UnDeeper:
***************************** / |>>/base                                                         :3_3:UnDeeper:
****************************** / slAKA optional typically                                       :3_3:UnDeeper:
******************************* / |?| optional something                                       :3_3:UnDeeper:
******************************** / |>>/recurse                                                :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_3:UnDeeper:
******************************** / |>>/base                                                   :3_3:UnDeeper:
********************************* / typically                                                :3_3:UnDeeper:
********************************** / $>|                                                    :3_3:UnDeeper:
$>|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
typically> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
|?| optional something> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :3_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :3_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
slAKA> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

**************************** \ slAKA has returned (["walks"],0)                                   :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
RPMT> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************** \ RPMT has returned (RPMT ["walks"],0)                                   :3_3:UnDeeper:
slRelPred> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

************************* \ slRelPred has returned (RPMT ["walks"],0)                                :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                     :3_3:UnDeeper:
undeepers> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :3_3:UnDeeper:
pRelPred> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

************************ \ pRelPred has returned RPMT ["walks"]                                       :3_3:UnDeeper:
term p/3:plain p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                        :3_3:UnDeeper:
term p/notLabelTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                       :3_3:UnDeeper:
termIndent p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :3_3:UnDeeper:
********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=8:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :3_3:UnDeeper:
********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=8:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :3_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=8:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :3_3:UnDeeper:
expression> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ expression has returned MyLeaf (RPMT ["walks"])                                    :3_3:UnDeeper:
ppp inner> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["walks"])                                       :3_3:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                             :3_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :3_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :3_2:Or:
someIndentation> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                  :3_2:Or:
term p/2:someIndentation expr p> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                    :3_2:Or:
term p/notLabelTerm> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                  :3_2:Or:
termIndent p> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["walks"])                                           :3_2:Or:
************** / binary(Or)                                                                                  :3_2:Or:
binary(Or)> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :3_3:GoDeeper:
************** / termIndent p                                                                                 :3_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :3_3:GoDeeper:
**************** > |<|                                                                                      :3_3:GoDeeper:
**************** > |<* starting                                                                             :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :3_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :3_3:GoDeeper:
***************** / someIndentation                                                                        :3_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :3_3:Other "runs:
****************** / manyIndentation/leaf?                                                                 :3_3:Other "runs:
******************* / ppp inner                                                                           :3_3:Other "runs:
******************** / expression                                                                        :3_3:Other "runs:
********************* / termIndent p                                                                    :3_3:Other "runs:
********************** / term p/1a:label ends directly above next line                                 :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
************************ / pNumAsText                                                                 :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (CERR): "runs"
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1a:label ends directly above next line> MATCH (CERR): "runs"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*********************** \ $*| has returned (["runs"],0)                                                :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
matching EOL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=12:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "runs"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :3_3:Other "runs:
*********************** > |<|                                                                         :3_3:Other "runs:
*********************** > |<* starting                                                                :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*********************** \ $*| has returned (["runs"],0)                                                :4_3:UnDeeper:
*********************** / |<*/parent                                                                   :4_3:UnDeeper:
************************ > |<*/recurse                                                                :4_3:UnDeeper:
************************ / ppp inner                                                               :4_2:Or:
************************* / expression                                                            :4_2:Or:
************************** / termIndent p                                                        :4_2:Or:
*************************** / term p/1a:label ends directly above next line                     :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :4_2:Or:
**************************** > |<|                                                             :4_2:Or:
**************************** > |<* starting                                                    :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/notLabelTerm                                               :4_2:Or:
**************************** / term p/2:someIndentation expr p                                 :4_2:Or:
***************************** / someIndentation                                               :4_2:Or:
****************************** / myindented-GoDeeper                                         :4_2:Or:
myindented-GoDeeper> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :4_2:Or:
someIndentation> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :4_2:Or:
term p/2:someIndentation expr p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :4_2:Or:
**************************** / term p/3:plain p                                                :4_2:Or:
***************************** / pRelPred                                                      :4_2:Or:
****************************** / slRelPred                                                   :4_2:Or:
******************************* / nested simpleHorn                                         :4_2:Or:
******************************** > |^|                                                     :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
nested simpleHorn> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPConstraint                                              :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPConstraint> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPBoolStructR                                             :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPBoolStructR> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPMT                                                      :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slAKA                                                 :4_2:Or:
********************************** / $*|                                                 :4_2:Or:
*********************************** / slAKA base                                        :4_2:Or:
************************************ / slMultiTerm                                     :4_2:Or:
************************************* / someSL                                        :4_2:Or:
************************************** / pNumAsText                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
slAKA base> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
slAKA> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPMT> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :4_2:Or:
slRelPred> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :4_2:Or:
pRelPred> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :4_2:Or:
term p/3:plain p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :4_2:Or:
term p/notLabelTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :4_2:Or:
termIndent p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=13:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :4_2:Or:
expression> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :4_2:Or:
ppp inner> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :4_2:Or:
************************ / withPrePost                                                             :4_2:Or:
************************* > |<* starting                                                          :4_2:Or:
************************* / $*|                                                                   :4_2:Or:
************************** / pre part                                                            :4_2:Or:
pre part> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :4_2:Or:
withPrePost> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=13:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :4_2:Or:
************************ / $*|                                                                     :4_2:Or:
************************* / pre part                                                              :4_2:Or:
pre part> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :4_2:Or:
************************ / |<*/base                                                                   :4_3:UnDeeper:
************************* / ppp inner                                                                :4_3:UnDeeper:
************************** / expression                                                             :4_3:UnDeeper:
*************************** / termIndent p                                                         :4_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :4_3:UnDeeper:
***************************** > |<|                                                              :4_3:UnDeeper:
***************************** > |<* starting                                                     :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :4_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :4_3:UnDeeper:
****************************** / someIndentation                                                :4_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :4_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=12:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_3:UnDeeper:
someIndentation> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_3:UnDeeper:
***************************** / term p/3:plain p                                                 :4_3:UnDeeper:
****************************** / pRelPred                                                       :4_3:UnDeeper:
******************************* / slRelPred                                                    :4_3:UnDeeper:
******************************** / nested simpleHorn                                          :4_3:UnDeeper:
********************************* > |^|                                                      :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=12:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPConstraint                                               :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPConstraint> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=12:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPBoolStructR                                              :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=12:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPMT                                                       :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slAKA                                                  :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / slAKA base                                         :4_3:UnDeeper:
************************************* / slMultiTerm                                      :4_3:UnDeeper:
************************************** / someSL                                         :4_3:UnDeeper:
*************************************** / pNumAsText                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=12:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=12:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPMT> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=12:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slRelPred> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=12:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
pRelPred> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=12:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=12:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=12:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_3:UnDeeper:
termIndent p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=12:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_3:UnDeeper:
expression> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=12:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :4_3:UnDeeper:
ppp inner> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=12:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :4_3:UnDeeper:
************************* / withPrePost                                                              :4_3:UnDeeper:
************************** > |<* starting                                                           :4_3:UnDeeper:
************************** / $*|                                                                    :4_3:UnDeeper:
*************************** / pre part                                                             :4_3:UnDeeper:
pre part> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=12:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :4_3:UnDeeper:
withPrePost> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=12:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :4_3:UnDeeper:
************************* / $*|                                                                      :4_3:UnDeeper:
************************** / pre part                                                               :4_3:UnDeeper:
pre part> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=12:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :4_3:UnDeeper:
|<*/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=12:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_3:UnDeeper:
|<*/parent> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=13:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "runs"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "runs:
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "runs:
************************ / someIndentation                                                           :3_3:Other "runs:
************************* / myindented-GoDeeper                                                     :3_3:Other "runs:
myindented-GoDeeper> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected "runs"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "runs" Expecting: (  :3_3:Other "runs:
someIndentation> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected "runs"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "runs" Expecting: (        :3_3:Other "runs:
term p/2:someIndentation expr p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected "runs"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "runs" Expecting: ( :3_3:Other "runs:
*********************** / term p/3:plain p                                                            :3_3:Other "runs:
************************ / pRelPred                                                                  :3_3:Other "runs:
************************* / slRelPred                                                               :3_3:Other "runs:
************************** / nested simpleHorn                                                     :3_3:Other "runs:
*************************** > |^|                                                                 :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |^| deeps                                                            :4_3:UnDeeper:
|^| deeps> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :4_2:Or:
nested simpleHorn> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
nested simpleHorn> MATCH (CERR): "runs" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :4_2:Or:
************************** / RPConstraint                                                          :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |>| calling $>>                                                      :4_3:UnDeeper:
**************************** / |>>/recurse                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_3:UnDeeper:
**************************** / |>>/base                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=12:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPConstraint> MATCH (CERR): "runs"
RPConstraint> ERROR:
RPConstraint> offset=12:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |>| calling $>>                                                      :4_3:UnDeeper:
**************************** / |>>/recurse                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_3:UnDeeper:
**************************** / |>>/base                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=12:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPBoolStructR> MATCH (CERR): "runs"
RPBoolStructR> ERROR:
RPBoolStructR> offset=12:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slAKA                                                             :3_3:Other "runs:
***************************** / $*|                                                             :3_3:Other "runs:
****************************** / slAKA base                                                    :3_3:Other "runs:
******************************* / slMultiTerm                                                 :3_3:Other "runs:
******************************** / someSL                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

******************************** \ someSL has returned (["runs"],0)                           :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

******************************* \ slMultiTerm has returned (["runs"],0)                        :4_3:UnDeeper:
slAKA base> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slAKA base> MATCH (COK): "runs"
slAKA base> VALUE: ((["runs"],0),[])

****************************** \ slAKA base has returned (["runs"],0)                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

***************************** \ $*| has returned (["runs"],0)                                    :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / slAKA optional akapart                                         :4_3:UnDeeper:
******************************* / |?| optional something                                       :4_3:UnDeeper:
******************************** / |>>/recurse                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :4_3:UnDeeper:
******************************** / |>>/base                                                   :4_3:UnDeeper:
********************************* / PAKA/akapart                                             :4_3:UnDeeper:
********************************** / $>|                                                    :4_3:UnDeeper:
*********************************** / Aka Token                                            :4_3:UnDeeper:
Aka Token> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=12:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_3:UnDeeper:
$>|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :4_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=12:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :4_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :4_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / slAKA optional typically                                       :4_3:UnDeeper:
******************************* / |?| optional something                                       :4_3:UnDeeper:
******************************** / |>>/recurse                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :4_3:UnDeeper:
******************************** / |>>/base                                                   :4_3:UnDeeper:
********************************* / typically                                                :4_3:UnDeeper:
********************************** / $>|                                                    :4_3:UnDeeper:
$>|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
typically> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=12:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :4_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :4_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :4_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :4_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :4_3:UnDeeper:
slAKA> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slAKA> MATCH (COK): "runs"
slAKA> VALUE: ((["runs"],0),[])

**************************** \ slAKA has returned (["runs"],0)                                    :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
RPMT> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPMT> MATCH (COK): "runs"
RPMT> VALUE: ((RPMT ["runs"],0),[])

************************** \ RPMT has returned (RPMT ["runs"],0)                                    :4_3:UnDeeper:
slRelPred> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slRelPred> MATCH (COK): "runs"
slRelPred> VALUE: ((RPMT ["runs"],0),[])

************************* \ slRelPred has returned (RPMT ["runs"],0)                                 :4_3:UnDeeper:
************************* / undeepers                                                                :4_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_3:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
undeepers> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
pRelPred> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
pRelPred> MATCH (COK): "runs"
pRelPred> VALUE: (RPMT ["runs"],[])

************************ \ pRelPred has returned RPMT ["runs"]                                        :4_3:UnDeeper:
term p/3:plain p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/3:plain p> MATCH (COK): "runs"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["runs"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["runs"])                         :4_3:UnDeeper:
term p/notLabelTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/notLabelTerm> MATCH (COK): "runs"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["runs"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["runs"])                        :4_3:UnDeeper:
termIndent p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
termIndent p> MATCH (COK): "runs"
termIndent p> VALUE: (MyLeaf (RPMT ["runs"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["runs"])                                 :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
binary(Or)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
binary(And)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :4_3:UnDeeper:
expression> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
expression> MATCH (COK): "runs"
expression> VALUE: (MyLeaf (RPMT ["runs"]),[])

******************** \ expression has returned MyLeaf (RPMT ["runs"])                                     :4_3:UnDeeper:
ppp inner> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
ppp inner> MATCH (COK): "runs"
ppp inner> VALUE: (MyLeaf (RPMT ["runs"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["runs"])                                        :4_3:UnDeeper:
manyIndentation/leaf?> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
manyIndentation/leaf?> MATCH (COK): "runs"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["runs"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["runs"])                              :4_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :4_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :4_2:Or:
someIndentation> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someIndentation> MATCH (COK): ( "runs" )
someIndentation> VALUE: (MyLeaf (RPMT ["runs"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["runs"])                                   :4_2:Or:
term p/2:someIndentation expr p> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/2:someIndentation expr p> MATCH (COK): ( "runs" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["runs"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["runs"])                     :4_2:Or:
term p/notLabelTerm> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/notLabelTerm> MATCH (COK): ( "runs" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["runs"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["runs"])                                   :4_2:Or:
termIndent p> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
termIndent p> MATCH (COK): ( "runs" )
termIndent p> VALUE: (MyLeaf (RPMT ["runs"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["runs"])                                            :4_2:Or:
************** / binary(Or)                                                                                  :4_2:Or:
binary(Or)> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :4_3:GoDeeper:
************** / termIndent p                                                                                 :4_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :4_3:GoDeeper:
**************** > |<|                                                                                      :4_3:GoDeeper:
**************** > |<* starting                                                                             :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :4_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :4_3:GoDeeper:
***************** / someIndentation                                                                        :4_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :4_3:Other "eats:
****************** / manyIndentation/leaf?                                                                 :4_3:Other "eats:
******************* / ppp inner                                                                           :4_3:Other "eats:
******************** / expression                                                                        :4_3:Other "eats:
********************* / termIndent p                                                                    :4_3:Other "eats:
********************** / term p/1a:label ends directly above next line                                 :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
************************ / pNumAsText                                                                 :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*********************** \ $*| has returned (["eats"],0)                                                :5_3:UnDeeper:
*********************** / matching EOL                                                                 :5_3:UnDeeper:
matching EOL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=16:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :4_3:Other "eats:
*********************** > |<|                                                                         :4_3:Other "eats:
*********************** > |<* starting                                                                :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*********************** \ $*| has returned (["eats"],0)                                                :5_3:UnDeeper:
*********************** / |<*/parent                                                                   :5_3:UnDeeper:
************************ > |<*/recurse                                                                :5_3:UnDeeper:
************************ / ppp inner                                                               :5_2:Or:
************************* / expression                                                            :5_2:Or:
************************** / termIndent p                                                        :5_2:Or:
*************************** / term p/1a:label ends directly above next line                     :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :5_2:Or:
**************************** > |<|                                                             :5_2:Or:
**************************** > |<* starting                                                    :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/notLabelTerm                                               :5_2:Or:
**************************** / term p/2:someIndentation expr p                                 :5_2:Or:
***************************** / someIndentation                                               :5_2:Or:
****************************** / myindented-GoDeeper                                         :5_2:Or:
myindented-GoDeeper> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
**************************** / term p/3:plain p                                                :5_2:Or:
***************************** / pRelPred                                                      :5_2:Or:
****************************** / slRelPred                                                   :5_2:Or:
******************************* / nested simpleHorn                                         :5_2:Or:
******************************** > |^|                                                     :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPConstraint                                              :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPBoolStructR                                             :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPMT                                                      :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slAKA                                                 :5_2:Or:
********************************** / $*|                                                 :5_2:Or:
*********************************** / slAKA base                                        :5_2:Or:
************************************ / slMultiTerm                                     :5_2:Or:
************************************* / someSL                                        :5_2:Or:
************************************** / pNumAsText                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :5_2:Or:
ppp inner> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :5_2:Or:
************************ / withPrePost                                                             :5_2:Or:
************************* > |<* starting                                                          :5_2:Or:
************************* / $*|                                                                   :5_2:Or:
************************** / pre part                                                            :5_2:Or:
pre part> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :5_2:Or:
withPrePost> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :5_2:Or:
************************ / $*|                                                                     :5_2:Or:
************************* / pre part                                                              :5_2:Or:
pre part> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :5_2:Or:
************************ / |<*/base                                                                   :5_3:UnDeeper:
************************* / ppp inner                                                                :5_3:UnDeeper:
************************** / expression                                                             :5_3:UnDeeper:
*************************** / termIndent p                                                         :5_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :5_3:UnDeeper:
***************************** > |<|                                                              :5_3:UnDeeper:
***************************** > |<* starting                                                     :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :5_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :5_3:UnDeeper:
****************************** / someIndentation                                                :5_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=16:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
***************************** / term p/3:plain p                                                 :5_3:UnDeeper:
****************************** / pRelPred                                                       :5_3:UnDeeper:
******************************* / slRelPred                                                    :5_3:UnDeeper:
******************************** / nested simpleHorn                                          :5_3:UnDeeper:
********************************* > |^|                                                      :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=16:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPConstraint                                               :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=16:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPBoolStructR                                              :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=16:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPMT                                                       :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slAKA                                                  :5_3:UnDeeper:
*********************************** / $*|                                                  :5_3:UnDeeper:
************************************ / slAKA base                                         :5_3:UnDeeper:
************************************* / slMultiTerm                                      :5_3:UnDeeper:
************************************** / someSL                                         :5_3:UnDeeper:
*************************************** / pNumAsText                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=16:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=16:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=16:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=16:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=16:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=16:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=16:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=16:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=16:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :5_3:UnDeeper:
ppp inner> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=16:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :5_3:UnDeeper:
************************* / withPrePost                                                              :5_3:UnDeeper:
************************** > |<* starting                                                           :5_3:UnDeeper:
************************** / $*|                                                                    :5_3:UnDeeper:
*************************** / pre part                                                             :5_3:UnDeeper:
pre part> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=16:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :5_3:UnDeeper:
withPrePost> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=16:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :5_3:UnDeeper:
************************* / $*|                                                                      :5_3:UnDeeper:
************************** / pre part                                                               :5_3:UnDeeper:
pre part> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=16:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :5_3:UnDeeper:
|<*/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=16:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=17:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :4_3:Other "eats:
*********************** / term p/2:someIndentation expr p                                             :4_3:Other "eats:
************************ / someIndentation                                                           :4_3:Other "eats:
************************* / myindented-GoDeeper                                                     :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: (  :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: (        :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
*********************** / term p/3:plain p                                                            :4_3:Other "eats:
************************ / pRelPred                                                                  :4_3:Other "eats:
************************* / slRelPred                                                               :4_3:Other "eats:
************************** / nested simpleHorn                                                     :4_3:Other "eats:
*************************** > |^|                                                                 :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |^| deeps                                                            :5_3:UnDeeper:
|^| deeps> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
************************** / RPConstraint                                                          :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |>| calling $>>                                                      :5_3:UnDeeper:
**************************** / |>>/recurse                                                        :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_3:UnDeeper:
**************************** / |>>/base                                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=16:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=16:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
************************** / RPBoolStructR                                                         :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |>| calling $>>                                                      :5_3:UnDeeper:
**************************** / |>>/recurse                                                        :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_3:UnDeeper:
**************************** / |>>/base                                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=16:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=16:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
************************** / RPMT                                                                  :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slAKA                                                             :4_3:Other "eats:
***************************** / $*|                                                             :4_3:Other "eats:
****************************** / slAKA base                                                    :4_3:Other "eats:
******************************* / slMultiTerm                                                 :4_3:Other "eats:
******************************** / someSL                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************** \ someSL has returned (["eats"],0)                           :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

******************************* \ slMultiTerm has returned (["eats"],0)                        :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

****************************** \ slAKA base has returned (["eats"],0)                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************** \ $*| has returned (["eats"],0)                                    :5_3:UnDeeper:
***************************** / |>>/recurse                                                      :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :5_3:UnDeeper:
***************************** / |>>/base                                                         :5_3:UnDeeper:
****************************** / slAKA optional akapart                                         :5_3:UnDeeper:
******************************* / |?| optional something                                       :5_3:UnDeeper:
******************************** / |>>/recurse                                                :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :5_3:UnDeeper:
******************************** / |>>/base                                                   :5_3:UnDeeper:
********************************* / PAKA/akapart                                             :5_3:UnDeeper:
********************************** / $>|                                                    :5_3:UnDeeper:
*********************************** / Aka Token                                            :5_3:UnDeeper:
Aka Token> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=16:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=16:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=16:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :5_3:UnDeeper:
|?| optional something> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :5_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :5_3:UnDeeper:
***************************** / |>>/recurse                                                      :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :5_3:UnDeeper:
***************************** / |>>/base                                                         :5_3:UnDeeper:
****************************** / slAKA optional typically                                       :5_3:UnDeeper:
******************************* / |?| optional something                                       :5_3:UnDeeper:
******************************** / |>>/recurse                                                :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :5_3:UnDeeper:
******************************** / |>>/base                                                   :5_3:UnDeeper:
********************************* / typically                                                :5_3:UnDeeper:
********************************** / $>|                                                    :5_3:UnDeeper:
$>|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=16:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=16:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :5_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :5_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :5_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

**************************** \ slAKA has returned (["eats"],0)                                    :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

************************** \ RPMT has returned (RPMT ["eats"],0)                                    :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

************************* \ slRelPred has returned (RPMT ["eats"],0)                                 :5_3:UnDeeper:
************************* / undeepers                                                                :5_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
************************** > sameLine: success!                                                     :5_3:UnDeeper:
undeepers> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************ \ pRelPred has returned RPMT ["eats"]                                        :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["eats"])                         :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])                        :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["eats"])                                 :5_3:UnDeeper:
********************* / binary(Or)                                                                       :5_3:UnDeeper:
binary(Or)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :5_3:UnDeeper:
********************* / binary(And)                                                                      :5_3:UnDeeper:
binary(And)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :5_3:UnDeeper:
********************* / binary(SetLess)                                                                  :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :5_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :5_3:UnDeeper:
expression> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************** \ expression has returned MyLeaf (RPMT ["eats"])                                     :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["eats"])                                        :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])                              :5_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["eats"])                                   :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"])                     :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])                                   :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                                            :5_2:Or:
************** / binary(Or)                                                                                  :5_2:Or:
binary(Or)> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :5_3:GoDeeper:
************** / termIndent p                                                                                 :5_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :5_3:GoDeeper:
**************** > |<|                                                                                      :5_3:GoDeeper:
**************** > |<* starting                                                                             :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :5_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :5_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                              :5_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :5_4:GoDeeper:
******************* / ppp inner                                                                            :5_4:GoDeeper:
******************** / expression                                                                         :5_4:GoDeeper:
********************* / termIndent p                                                                     :5_4:GoDeeper:
********************** / term p/1a:label ends directly above next line                                  :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                       :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/1c:label ends to the right of line below                                :5_4:GoDeeper:
*********************** > |<|                                                                          :5_4:GoDeeper:
*********************** > |<* starting                                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented-GoDeeper                                                      :5_4:GoDeeper:
myindented-GoDeeper> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented-GoDeeper has returned GoDeeper                                 :5_4:Other "drin:
************************* / manyIndentation/leaf?                                                     :5_4:Other "drin:
************************** / ppp inner                                                               :5_4:Other "drin:
*************************** / expression                                                            :5_4:Other "drin:
**************************** / termIndent p                                                        :5_4:Other "drin:
***************************** / term p/1a:label ends directly above next line                     :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
******************************* / pNumAsText                                                     :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (CERR): "drinks"
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or other text or number

****************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "drinks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

***************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_4:UnDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL          :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

****************************** \ $*| has returned (["drinks"],0)                                  :6_4:UnDeeper:
****************************** / matching EOL                                                     :6_4:UnDeeper:
matching EOL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=21:
matching EOL> unexpected )
matching EOL> expecting EOL

****************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :6_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "drinks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

***************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_4:UnDeeper:
***************************** / term p/1c:label ends to the right of line below                   :5_4:Other "drin:
****************************** > |<|                                                             :5_4:Other "drin:
****************************** > |<* starting                                                    :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

****************************** \ $*| has returned (["drinks"],0)                                  :6_4:UnDeeper:
****************************** / |<*/parent                                                       :6_4:UnDeeper:
******************************* > |<*/recurse                                                    :6_4:UnDeeper:
******************************* / ppp inner                                                   :6_3:And:
******************************** / expression                                                :6_3:And:
********************************* / termIndent p                                            :6_3:And:
********************************** / term p/1a:label ends directly above next line         :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1a:label ends directly above next line> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=22:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/1b:label ends to the left of line below, with EOL :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=22:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/1c:label ends to the right of line below       :6_3:And:
*********************************** > |<|                                                 :6_3:And:
*********************************** > |<* starting                                        :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1c:label ends to the right of line below> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/notLabelTerm                                   :6_3:And:
*********************************** / term p/2:someIndentation expr p                     :6_3:And:
************************************ / someIndentation                                   :6_3:And:
************************************* / myindented-GoDeeper                             :6_3:And:
myindented-GoDeeper> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=22:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :6_3:And:
someIndentation> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected AND
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :6_3:And:
term p/2:someIndentation expr p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :6_3:And:
*********************************** / term p/3:plain p                                    :6_3:And:
************************************ / pRelPred                                          :6_3:And:
************************************* / slRelPred                                       :6_3:And:
************************************** / nested simpleHorn                             :6_3:And:
*************************************** > |^|                                         :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
nested simpleHorn> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPConstraint                                  :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPConstraint> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPBoolStructR                                 :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPBoolStructR> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPMT                                          :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slAKA                                     :6_3:And:
***************************************** / $*|                                     :6_3:And:
****************************************** / slAKA base                            :6_3:And:
******************************************* / slMultiTerm                         :6_3:And:
******************************************** / someSL                            :6_3:And:
********************************************* / pNumAsText                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
slAKA base> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected AND
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
slAKA> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected AND
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPMT> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected AND
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :6_3:And:
slRelPred> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected AND
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :6_3:And:
pRelPred> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected AND
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :6_3:And:
term p/3:plain p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=22:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :6_3:And:
term p/notLabelTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=22:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :6_3:And:
termIndent p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=22:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :6_3:And:
expression> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=22:
expression> unexpected AND
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression :6_3:And:
ppp inner> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=22:
ppp inner> unexpected AND
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression :6_3:And:
******************************* / withPrePost                                                 :6_3:And:
******************************** > |<* starting                                              :6_3:And:
******************************** / $*|                                                       :6_3:And:
********************************* / pre part                                                :6_3:And:
pre part> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :6_3:And:
withPrePost> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=22:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text :6_3:And:
******************************* / $*|                                                         :6_3:And:
******************************** / pre part                                                  :6_3:And:
pre part> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :6_3:And:
******************************* / |<*/base                                                       :6_4:UnDeeper:
******************************** / ppp inner                                                    :6_4:UnDeeper:
********************************* / expression                                                 :6_4:UnDeeper:
********************************** / termIndent p                                             :6_4:UnDeeper:
*********************************** / term p/1a:label ends directly above next line          :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/1b:label ends to the left of line below, with EOL :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/1c:label ends to the right of line below        :6_4:UnDeeper:
************************************ > |<|                                                  :6_4:UnDeeper:
************************************ > |<* starting                                         :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=21:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/notLabelTerm                                    :6_4:UnDeeper:
************************************ / term p/2:someIndentation expr p                      :6_4:UnDeeper:
************************************* / someIndentation                                    :6_4:UnDeeper:
************************************** / myindented-GoDeeper                              :6_4:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_4:UnDeeper:
someIndentation> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected )
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / term p/3:plain p                                     :6_4:UnDeeper:
************************************* / pRelPred                                           :6_4:UnDeeper:
************************************** / slRelPred                                        :6_4:UnDeeper:
*************************************** / nested simpleHorn                              :6_4:UnDeeper:
**************************************** > |^|                                          :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
nested simpleHorn> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=21:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

*************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPConstraint                                   :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPConstraint> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

*************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPBoolStructR                                  :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPBoolStructR> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

*************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPMT                                           :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slAKA                                      :6_4:UnDeeper:
****************************************** / $*|                                      :6_4:UnDeeper:
******************************************* / slAKA base                             :6_4:UnDeeper:
******************************************** / slMultiTerm                          :6_4:UnDeeper:
********************************************* / someSL                             :6_4:UnDeeper:
********************************************** / pNumAsText                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

********************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slAKA base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slAKA> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPMT> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=21:
RPMT> unexpected )
RPMT> expecting other text or number

*************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slRelPred> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=21:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
pRelPred> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=21:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************* \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/3:plain p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=21:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************************ \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=21:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

*********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_4:UnDeeper:
termIndent p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=21:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_4:UnDeeper:
expression> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=21:
expression> unexpected )
expression> expecting expression

********************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_4:UnDeeper:
ppp inner> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=21:
ppp inner> unexpected )
ppp inner> expecting expression

******************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_4:UnDeeper:
******************************** / withPrePost                                                  :6_4:UnDeeper:
********************************* > |<* starting                                               :6_4:UnDeeper:
********************************* / $*|                                                        :6_4:UnDeeper:
********************************** / pre part                                                 :6_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
withPrePost> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=21:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
******************************** / $*|                                                          :6_4:UnDeeper:
********************************* / pre part                                                   :6_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
|<*/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=21:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

******************************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_4:UnDeeper:
|<*/parent> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=22:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

****************************** \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :6_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "drinks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

***************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :6_4:UnDeeper:
***************************** / term p/notLabelTerm                                               :5_4:Other "drin:
****************************** / term p/2:someIndentation expr p                                 :5_4:Other "drin:
******************************* / someIndentation                                               :5_4:Other "drin:
******************************** / myindented-GoDeeper                                         :5_4:Other "drin:
myindented-GoDeeper> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "drinks"
myindented-GoDeeper> expecting (

******************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
someIndentation> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "drinks"
someIndentation> expecting (

******************************* \ !Unconsumed Error: someIndentation: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
term p/2:someIndentation expr p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "drinks"
term p/2:someIndentation expr p> expecting (

****************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
****************************** / term p/3:plain p                                                :5_4:Other "drin:
******************************* / pRelPred                                                      :5_4:Other "drin:
******************************** / slRelPred                                                   :5_4:Other "drin:
********************************* / nested simpleHorn                                         :5_4:Other "drin:
********************************** > |^|                                                     :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |^| deeps                                                :6_4:UnDeeper:
|^| deeps> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************** \ |^| deeps has returned ([()],-1)                      :6_3:And:
nested simpleHorn> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
nested simpleHorn> MATCH (CERR): "drinks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

********************************* \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :6_3:And:
********************************* / RPConstraint                                              :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |>| calling $>>                                          :6_4:UnDeeper:
*********************************** / |>>/recurse                                            :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*********************************** / |>>/base                                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
RPConstraint> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPConstraint> MATCH (CERR): "drinks"
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
********************************* / RPBoolStructR                                             :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |>| calling $>>                                          :6_4:UnDeeper:
*********************************** / |>>/recurse                                            :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*********************************** / |>>/base                                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
RPBoolStructR> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPBoolStructR> MATCH (CERR): "drinks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
********************************* / RPMT                                                      :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slAKA                                                 :5_4:Other "drin:
************************************ / $*|                                                 :5_4:Other "drin:
************************************* / slAKA base                                        :5_4:Other "drin:
************************************** / slMultiTerm                                     :5_4:Other "drin:
*************************************** / someSL                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*************************************** \ someSL has returned (["drinks"],0)             :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

************************************** \ slMultiTerm has returned (["drinks"],0)          :6_4:UnDeeper:
slAKA base> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slAKA base> MATCH (COK): "drinks"
slAKA base> VALUE: ((["drinks"],0),[])

************************************* \ slAKA base has returned (["drinks"],0)             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

************************************ \ $*| has returned (["drinks"],0)                      :6_4:UnDeeper:
************************************ / |>>/recurse                                          :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / |>>/base                                             :6_4:UnDeeper:
************************************* / slAKA optional akapart                             :6_4:UnDeeper:
************************************** / |?| optional something                           :6_4:UnDeeper:
*************************************** / |>>/recurse                                    :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*************************************** / |>>/base                                       :6_4:UnDeeper:
**************************************** / PAKA/akapart                                 :6_4:UnDeeper:
***************************************** / $>|                                        :6_4:UnDeeper:
****************************************** / Aka Token                                :6_4:UnDeeper:
Aka Token> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

****************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_4:UnDeeper:
PAKA/akapart> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

**************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0)  :6_4:UnDeeper:
slAKA optional akapart> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional akapart has returned (Nothing,0)    :6_4:UnDeeper:
************************************* > |>>/base got Nothing                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :6_4:UnDeeper:
************************************ / |>>/recurse                                          :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / |>>/base                                             :6_4:UnDeeper:
************************************* / slAKA optional typically                           :6_4:UnDeeper:
************************************** / |?| optional something                           :6_4:UnDeeper:
*************************************** / |>>/recurse                                    :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*************************************** / |>>/base                                       :6_4:UnDeeper:
**************************************** / typically                                    :6_4:UnDeeper:
***************************************** / $>|                                        :6_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
typically> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

**************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0)  :6_4:UnDeeper:
slAKA optional typically> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional typically has returned (Nothing,0)  :6_4:UnDeeper:
************************************* > |>>/base got Nothing                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :6_4:UnDeeper:
************************************ > slAKA: proceeding after base and entityalias are retrieved ... :6_4:UnDeeper:
************************************ > pAKA: entityalias = Nothing                          :6_4:UnDeeper:
slAKA> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slAKA> MATCH (COK): "drinks"
slAKA> VALUE: ((["drinks"],0),[])

*********************************** \ slAKA has returned (["drinks"],0)                      :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
RPMT> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPMT> MATCH (COK): "drinks"
RPMT> VALUE: ((RPMT ["drinks"],0),[])

********************************* \ RPMT has returned (RPMT ["drinks"],0)                      :6_4:UnDeeper:
slRelPred> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slRelPred> MATCH (COK): "drinks"
slRelPred> VALUE: ((RPMT ["drinks"],0),[])

******************************** \ slRelPred has returned (RPMT ["drinks"],0)                   :6_4:UnDeeper:
******************************** / undeepers                                                    :6_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_4:UnDeeper:
********************************* > sameLine: success!                                         :6_4:UnDeeper:
undeepers> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :6_4:UnDeeper:
pRelPred> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
pRelPred> MATCH (COK): "drinks"
pRelPred> VALUE: (RPMT ["drinks"],[])

******************************* \ pRelPred has returned RPMT ["drinks"]                          :6_4:UnDeeper:
term p/3:plain p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/3:plain p> MATCH (COK): "drinks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

****************************** \ term p/3:plain p has returned MyLeaf (RPMT ["drinks"])           :6_4:UnDeeper:
term p/notLabelTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/notLabelTerm> MATCH (COK): "drinks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"])          :6_4:UnDeeper:
termIndent p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
termIndent p> MATCH (COK): "drinks"
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"])                   :6_4:UnDeeper:
**************************** / binary(Or)                                                           :6_4:UnDeeper:
binary(Or)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=21:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :6_4:UnDeeper:
**************************** / binary(And)                                                          :6_4:UnDeeper:
binary(And)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=21:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :6_4:UnDeeper:
**************************** / binary(SetLess)                                                      :6_4:UnDeeper:
binary(SetLess)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=21:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :6_4:UnDeeper:
**************************** / binary(SetPlus)                                                      :6_4:UnDeeper:
binary(SetPlus)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=21:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :6_4:UnDeeper:
expression> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
expression> MATCH (COK): "drinks"
expression> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*************************** \ expression has returned MyLeaf (RPMT ["drinks"])                       :6_4:UnDeeper:
ppp inner> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
ppp inner> MATCH (COK): "drinks"
ppp inner> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************** \ ppp inner has returned MyLeaf (RPMT ["drinks"])                          :6_4:UnDeeper:
manyIndentation/leaf?> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
manyIndentation/leaf?> MATCH (COK): "drinks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["drinks"])                :6_4:UnDeeper:
************************* / myindented-UnDeeper                                                        :6_4:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented-UnDeeper has returned UnDeeper                               :6_3:And:
someIndentation> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someIndentation> MATCH (COK): ( "drinks" )
someIndentation> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["drinks"])                     :6_3:And:
term p/2:someIndentation expr p> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/2:someIndentation expr p> MATCH (COK): ( "drinks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["drinks"])       :6_3:And:
term p/notLabelTerm> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/notLabelTerm> MATCH (COK): ( "drinks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"])                     :6_3:And:
termIndent p> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
termIndent p> MATCH (COK): ( "drinks" )
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["drinks"])                              :6_3:And:
********************* / binary(Or)                                                                      :6_3:And:
binary(Or)> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected AND
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                     :6_3:And:
********************* / binary(And)                                                                     :6_3:And:
binary(And)> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

********************* \ binary(And) has returned And                                                     :6_4:GoDeeper:
********************* / termIndent p                                                                     :6_4:GoDeeper:
********************** / term p/1a:label ends directly above next line                                  :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                       :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/1c:label ends to the right of line below                                :6_4:GoDeeper:
*********************** > |<|                                                                          :6_4:GoDeeper:
*********************** > |<* starting                                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented-GoDeeper                                                      :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented-GoDeeper has returned GoDeeper                                 :6_4:Other "swal:
************************* / manyIndentation/leaf?                                                     :6_4:Other "swal:
************************** / ppp inner                                                               :6_4:Other "swal:
*************************** / expression                                                            :6_4:Other "swal:
**************************** / termIndent p                                                        :6_4:Other "swal:
***************************** / term p/1a:label ends directly above next line                     :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
******************************* / pNumAsText                                                   :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (CERR): "swallows"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

****************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :7_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (CERR): "swallows"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

***************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_3:UnDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL          :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

****************************** \ $*| has returned (["swallows"],0)                              :7_3:UnDeeper:
****************************** / matching EOL                                                   :7_3:UnDeeper:
matching EOL> IN: ) ) MUST DO ( "sing" ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

****************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL   :7_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "swallows"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

***************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_3:UnDeeper:
***************************** / term p/1c:label ends to the right of line below                   :6_4:Other "swal:
****************************** > |<|                                                             :6_4:Other "swal:
****************************** > |<* starting                                                    :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

****************************** \ $*| has returned (["swallows"],0)                              :7_3:UnDeeper:
****************************** / |<*/parent                                                     :7_3:UnDeeper:
******************************* > |<*/recurse                                                  :7_3:UnDeeper:
******************************* / ppp inner                                                 :7_2:Must:
******************************** / expression                                              :7_2:Must:
********************************* / termIndent p                                          :7_2:Must:
********************************** / term p/1a:label ends directly above next line       :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1a:label ends directly above next line> IN: MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/1b:label ends to the left of line below, with EOL :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/1c:label ends to the right of line below     :7_2:Must:
*********************************** > |<|                                               :7_2:Must:
*********************************** > |<* starting                                      :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1c:label ends to the right of line below> IN: MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/notLabelTerm                                 :7_2:Must:
*********************************** / term p/2:someIndentation expr p                   :7_2:Must:
************************************ / someIndentation                                 :7_2:Must:
************************************* / myindented-GoDeeper                           :7_2:Must:
myindented-GoDeeper> IN: MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=27:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :7_2:Must:
someIndentation> IN: MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=27:
someIndentation> unexpected MUST
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :7_2:Must:
term p/2:someIndentation expr p> IN: MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=27:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :7_2:Must:
*********************************** / term p/3:plain p                                  :7_2:Must:
************************************ / pRelPred                                        :7_2:Must:
************************************* / slRelPred                                     :7_2:Must:
************************************** / nested simpleHorn                           :7_2:Must:
*************************************** > |^|                                       :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
nested simpleHorn> IN: MUST DO ( "sing" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPConstraint                                :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPConstraint> IN: MUST DO ( "sing" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=27:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPBoolStructR                               :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPBoolStructR> IN: MUST DO ( "sing" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=27:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPMT                                        :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slAKA                                   :7_2:Must:
***************************************** / $*|                                   :7_2:Must:
****************************************** / slAKA base                          :7_2:Must:
******************************************* / slMultiTerm                       :7_2:Must:
******************************************** / someSL                          :7_2:Must:
********************************************* / pNumAsText                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
slAKA base> IN: MUST DO ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
slAKA> IN: MUST DO ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected MUST
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPMT> IN: MUST DO ( "sing" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=27:
RPMT> unexpected MUST
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :7_2:Must:
slRelPred> IN: MUST DO ( "sing" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=27:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :7_2:Must:
pRelPred> IN: MUST DO ( "sing" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=27:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/3:plain p> IN: MUST DO ( "sing" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=27:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/notLabelTerm> IN: MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=27:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :7_2:Must:
termIndent p> IN: MUST DO ( "sing" ) )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=27:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :7_2:Must:
expression> IN: MUST DO ( "sing" ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=27:
expression> unexpected MUST
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :7_2:Must:
ppp inner> IN: MUST DO ( "sing" ) )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=27:
ppp inner> unexpected MUST
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :7_2:Must:
******************************* / withPrePost                                               :7_2:Must:
******************************** > |<* starting                                            :7_2:Must:
******************************** / $*|                                                     :7_2:Must:
********************************* / pre part                                              :7_2:Must:
pre part> IN: MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected MUST
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :7_2:Must:
withPrePost> IN: MUST DO ( "sing" ) )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=27:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :7_2:Must:
******************************* / $*|                                                       :7_2:Must:
******************************** / pre part                                                :7_2:Must:
pre part> IN: MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :7_2:Must:
******************************* / |<*/base                                                     :7_3:UnDeeper:
******************************** / ppp inner                                                  :7_3:UnDeeper:
********************************* / expression                                               :7_3:UnDeeper:
********************************** / termIndent p                                           :7_3:UnDeeper:
*********************************** / term p/1a:label ends directly above next line        :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/1b:label ends to the left of line below, with EOL :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/1c:label ends to the right of line below      :7_3:UnDeeper:
************************************ > |<|                                                :7_3:UnDeeper:
************************************ > |<* starting                                       :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/notLabelTerm                                  :7_3:UnDeeper:
************************************ / term p/2:someIndentation expr p                    :7_3:UnDeeper:
************************************* / someIndentation                                  :7_3:UnDeeper:
************************************** / myindented-GoDeeper                            :7_3:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_3:UnDeeper:
someIndentation> IN: ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :7_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / term p/3:plain p                                   :7_3:UnDeeper:
************************************* / pRelPred                                         :7_3:UnDeeper:
************************************** / slRelPred                                      :7_3:UnDeeper:
*************************************** / nested simpleHorn                            :7_3:UnDeeper:
**************************************** > |^|                                        :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
nested simpleHorn> IN: ) ) MUST DO ( "sing" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

*************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPConstraint                                 :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPConstraint> IN: ) ) MUST DO ( "sing" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

*************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPBoolStructR                                :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPBoolStructR> IN: ) ) MUST DO ( "sing" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

*************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPMT                                         :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slAKA                                    :7_3:UnDeeper:
****************************************** / $*|                                    :7_3:UnDeeper:
******************************************* / slAKA base                           :7_3:UnDeeper:
******************************************** / slMultiTerm                        :7_3:UnDeeper:
********************************************* / someSL                           :7_3:UnDeeper:
********************************************** / pNumAsText                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slAKA base> IN: ) ) MUST DO ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slAKA> IN: ) ) MUST DO ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPMT> IN: ) ) MUST DO ( "sing" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

*************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slRelPred> IN: ) ) MUST DO ( "sing" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
pRelPred> IN: ) ) MUST DO ( "sing" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************* \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/3:plain p> IN: ) ) MUST DO ( "sing" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************************ \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

*********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_3:UnDeeper:
termIndent p> IN: ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_3:UnDeeper:
expression> IN: ) ) MUST DO ( "sing" ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

********************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :7_3:UnDeeper:
ppp inner> IN: ) ) MUST DO ( "sing" ) )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

******************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :7_3:UnDeeper:
******************************** / withPrePost                                                :7_3:UnDeeper:
********************************* > |<* starting                                             :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / pre part                                               :7_3:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
withPrePost> IN: ) ) MUST DO ( "sing" ) )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
******************************** / $*|                                                        :7_3:UnDeeper:
********************************* / pre part                                                 :7_3:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
|<*/base> IN: ) ) MUST DO ( "sing" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

******************************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_3:UnDeeper:
|<*/parent> IN: ) ) MUST DO ( "sing" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=27:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

****************************** \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :7_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (CERR): "swallows"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

***************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :7_3:UnDeeper:
***************************** / term p/notLabelTerm                                               :6_4:Other "swal:
****************************** / term p/2:someIndentation expr p                                 :6_4:Other "swal:
******************************* / someIndentation                                               :6_4:Other "swal:
******************************** / myindented-GoDeeper                                         :6_4:Other "swal:
myindented-GoDeeper> IN: "swallows" ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected "swallows"
myindented-GoDeeper> expecting (

******************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
someIndentation> IN: "swallows" ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "swallows"
someIndentation> expecting (

******************************* \ !Unconsumed Error: someIndentation: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
term p/2:someIndentation expr p> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "swallows"
term p/2:someIndentation expr p> expecting (

****************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
****************************** / term p/3:plain p                                                :6_4:Other "swal:
******************************* / pRelPred                                                      :6_4:Other "swal:
******************************** / slRelPred                                                   :6_4:Other "swal:
********************************* / nested simpleHorn                                         :6_4:Other "swal:
********************************** > |^|                                                     :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |^| deeps                                              :7_3:UnDeeper:
|^| deeps> IN: ) ) MUST DO ( "sing" ) )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

********************************** \ |^| deeps has returned ([(),()],-2)                 :7_2:Must:
nested simpleHorn> IN: "swallows" ) ) MUST DO ( "sing" ) )
nested simpleHorn> MATCH (CERR): "swallows" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

********************************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :7_2:Must:
********************************* / RPConstraint                                              :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |>| calling $>>                                        :7_3:UnDeeper:
*********************************** / |>>/recurse                                          :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*********************************** / |>>/base                                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_3:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
RPConstraint> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPConstraint> MATCH (CERR): "swallows"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
********************************* / RPBoolStructR                                             :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |>| calling $>>                                        :7_3:UnDeeper:
*********************************** / |>>/recurse                                          :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*********************************** / |>>/base                                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_3:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
RPBoolStructR> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPBoolStructR> MATCH (CERR): "swallows"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
********************************* / RPMT                                                      :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slAKA                                                 :6_4:Other "swal:
************************************ / $*|                                                 :6_4:Other "swal:
************************************* / slAKA base                                        :6_4:Other "swal:
************************************** / slMultiTerm                                     :6_4:Other "swal:
*************************************** / someSL                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*************************************** \ someSL has returned (["swallows"],0)         :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

************************************** \ slMultiTerm has returned (["swallows"],0)      :7_3:UnDeeper:
slAKA base> IN: "swallows" ) ) MUST DO ( "sing" ) )
slAKA base> MATCH (COK): "swallows"
slAKA base> VALUE: ((["swallows"],0),[])

************************************* \ slAKA base has returned (["swallows"],0)         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

************************************ \ $*| has returned (["swallows"],0)                  :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slAKA optional akapart                           :7_3:UnDeeper:
************************************** / |?| optional something                         :7_3:UnDeeper:
*************************************** / |>>/recurse                                  :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*************************************** / |>>/base                                     :7_3:UnDeeper:
**************************************** / PAKA/akapart                               :7_3:UnDeeper:
***************************************** / $>|                                      :7_3:UnDeeper:
****************************************** / Aka Token                              :7_3:UnDeeper:
Aka Token> IN: ) ) MUST DO ( "sing" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

****************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_3:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :7_3:UnDeeper:
PAKA/akapart> IN: ) ) MUST DO ( "sing" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

**************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :7_3:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0) :7_3:UnDeeper:
slAKA optional akapart> IN: ) ) MUST DO ( "sing" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional akapart has returned (Nothing,0)  :7_3:UnDeeper:
************************************* > |>>/base got Nothing                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                  :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slAKA optional typically                         :7_3:UnDeeper:
************************************** / |?| optional something                         :7_3:UnDeeper:
*************************************** / |>>/recurse                                  :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*************************************** / |>>/base                                     :7_3:UnDeeper:
**************************************** / typically                                  :7_3:UnDeeper:
***************************************** / $>|                                      :7_3:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
typically> IN: ) ) MUST DO ( "sing" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

**************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0) :7_3:UnDeeper:
slAKA optional typically> IN: ) ) MUST DO ( "sing" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional typically has returned (Nothing,0) :7_3:UnDeeper:
************************************* > |>>/base got Nothing                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                  :7_3:UnDeeper:
************************************ > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
************************************ > pAKA: entityalias = Nothing                        :7_3:UnDeeper:
slAKA> IN: "swallows" ) ) MUST DO ( "sing" ) )
slAKA> MATCH (COK): "swallows"
slAKA> VALUE: ((["swallows"],0),[])

*********************************** \ slAKA has returned (["swallows"],0)                  :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
RPMT> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPMT> MATCH (COK): "swallows"
RPMT> VALUE: ((RPMT ["swallows"],0),[])

********************************* \ RPMT has returned (RPMT ["swallows"],0)                  :7_3:UnDeeper:
slRelPred> IN: "swallows" ) ) MUST DO ( "sing" ) )
slRelPred> MATCH (COK): "swallows"
slRelPred> VALUE: ((RPMT ["swallows"],0),[])

******************************** \ slRelPred has returned (RPMT ["swallows"],0)               :7_3:UnDeeper:
******************************** / undeepers                                                  :7_3:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
********************************* > sameLine: success!                                       :7_3:UnDeeper:
undeepers> IN: ) ) MUST DO ( "sing" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                  :7_3:UnDeeper:
pRelPred> IN: "swallows" ) ) MUST DO ( "sing" ) )
pRelPred> MATCH (COK): "swallows"
pRelPred> VALUE: (RPMT ["swallows"],[])

******************************* \ pRelPred has returned RPMT ["swallows"]                      :7_3:UnDeeper:
term p/3:plain p> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/3:plain p> MATCH (COK): "swallows"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

****************************** \ term p/3:plain p has returned MyLeaf (RPMT ["swallows"])       :7_3:UnDeeper:
term p/notLabelTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (COK): "swallows"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"])      :7_3:UnDeeper:
termIndent p> IN: "swallows" ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (COK): "swallows"
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"])               :7_3:UnDeeper:
**************************** / binary(Or)                                                         :7_3:UnDeeper:
binary(Or)> IN: ) ) MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR          :7_3:UnDeeper:
**************************** / binary(And)                                                        :7_3:UnDeeper:
binary(And)> IN: ) ) MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND        :7_3:UnDeeper:
**************************** / binary(SetLess)                                                    :7_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS   :7_3:UnDeeper:
**************************** / binary(SetPlus)                                                    :7_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS   :7_3:UnDeeper:
expression> IN: "swallows" ) ) MUST DO ( "sing" ) )
expression> MATCH (COK): "swallows"
expression> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*************************** \ expression has returned MyLeaf (RPMT ["swallows"])                   :7_3:UnDeeper:
ppp inner> IN: "swallows" ) ) MUST DO ( "sing" ) )
ppp inner> MATCH (COK): "swallows"
ppp inner> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************** \ ppp inner has returned MyLeaf (RPMT ["swallows"])                      :7_3:UnDeeper:
manyIndentation/leaf?> IN: "swallows" ) ) MUST DO ( "sing" ) )
manyIndentation/leaf?> MATCH (COK): "swallows"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["swallows"])            :7_3:UnDeeper:
************************* / myindented-UnDeeper                                                      :7_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST DO ( "sing" ) )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented-UnDeeper has returned UnDeeper                                  :7_4:UnDeeper:
someIndentation> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (COK): ( "swallows" )
someIndentation> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["swallows"])                      :7_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (COK): ( "swallows" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["swallows"])        :7_4:UnDeeper:
term p/notLabelTerm> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (COK): ( "swallows" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"])                      :7_4:UnDeeper:
termIndent p> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (COK): ( "swallows" )
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["swallows"])                               :7_4:UnDeeper:
********************* / binary(Or)                                                                         :7_4:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :7_4:UnDeeper:
********************* / binary(And)                                                                        :7_4:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :7_4:UnDeeper:
********************* / binary(SetLess)                                                                    :7_4:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :7_4:UnDeeper:
********************* / binary(SetPlus)                                                                    :7_4:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :7_4:UnDeeper:
expression> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
expression> MATCH (COK): ( "drinks" ) AND ( "swallows" )
expression> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

******************** \ expression has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]  :7_4:UnDeeper:
ppp inner> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
ppp inner> MATCH (COK): ( "drinks" ) AND ( "swallows" )
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

******************* \ ppp inner has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]     :7_4:UnDeeper:
manyIndentation/leaf?> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
manyIndentation/leaf?> MATCH (COK): ( "drinks" ) AND ( "swallows" )
manyIndentation/leaf?> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

****************** \ manyIndentation/leaf? has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_4:UnDeeper:
****************** / myindented-UnDeeper                                                                      :7_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST DO ( "sing" ) )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :7_2:Must:
someIndentation> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someIndentation> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
someIndentation> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

***************** \ someIndentation has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
term p/2:someIndentation expr p> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
term p/2:someIndentation expr p> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

**************** \ term p/2:someIndentation expr p has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
term p/notLabelTerm> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/notLabelTerm> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
term p/notLabelTerm> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

*************** \ term p/notLabelTerm has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
termIndent p> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
termIndent p> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
termIndent p> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

************** \ termIndent p has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]       :7_2:Must:
************** / binary(Or)                                                                                  :7_2:Must:
binary(Or)> IN: MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                :7_2:Must:
************** / binary(And)                                                                                 :7_2:Must:
binary(And)> IN: MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected MUST
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                              :7_2:Must:
************** / binary(SetLess)                                                                             :7_2:Must:
binary(SetLess)> IN: MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                         :7_2:Must:
************** / binary(SetPlus)                                                                             :7_2:Must:
binary(SetPlus)> IN: MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                         :7_2:Must:
expression> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
expression> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]],[])

************* \ expression has returned MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]] :7_2:Must:
ppp inner> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
ppp inner> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]],[])

************ \ ppp inner has returned MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]] :7_2:Must:
pBSR> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pBSR> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]],[])

*********** \ pBSR has returned Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]] :7_2:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]),[])

********** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]) :7_2:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]),[])

********* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]) :7_2:Must:
********* / WHERE                                                                                                 :7_2:Must:
WHERE> IN: MUST DO ( "sing" ) )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected MUST
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                            :7_2:Must:
********* / preambleParamText:[Having]                                                                            :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                           :7_2:Must:
preambleParamText:[Having]> IN: MUST DO ( "sing" ) )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                      :7_2:Must:
********* / preambleParamText:[Given]                                                                             :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                            :7_2:Must:
preambleParamText:[Given]> IN: MUST DO ( "sing" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                        :7_2:Must:
********* / preambleParamText:[Upon]                                                                              :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                             :7_2:Must:
preambleParamText:[Upon]> IN: MUST DO ( "sing" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                          :7_2:Must:
********* / preambleBoolStructR [Unless]                                                                          :7_2:Must:
preambleBoolStructR [Unless]> IN: MUST DO ( "sing" ) )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                    :7_2:Must:
********* / preambleBoolStructR [When,If]                                                                         :7_2:Must:
preambleBoolStructR [When,If]> IN: MUST DO ( "sing" ) )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                  :7_2:Must:
********* / pDT                                                                                                   :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

********** \ $>| has returned DMust                                                                              :8_2:Do:
********** / |>| calling $>>                                                                                     :8_2:Do:
*********** / |>>/recurse                                                                                       :8_2:Do:
|>>/recurse> IN: DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected DO
|>>/recurse> expecting (

*********** \ !Unconsumed Error: |>>/recurse: Unexpected DO Expecting: (                                        :8_2:Do:
*********** / |>>/base                                                                                          :8_2:Do:
************ / pTemporal/eventually                                                                            :8_2:Do:
pTemporal/eventually> IN: DO ( "sing" ) )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=28:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

************ \ !Unconsumed Error: pTemporal/eventually: Unexpected DO Expecting: EVENTUALLY                    :8_2:Do:
************ / pTemporal/specifically                                                                          :8_2:Do:
************* / $>|                                                                                           :8_2:Do:
$>|> IN: DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: $>|: Unexpected DO Expecting: BEFORE AFTER BY ON                           :8_2:Do:
pTemporal/specifically> IN: DO ( "sing" ) )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=28:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: pTemporal/specifically: Unexpected DO Expecting: BEFORE AFTER BY ON          :8_2:Do:
************ / pTemporal/vaguely                                                                               :8_2:Do:
pTemporal/vaguely> IN: DO ( "sing" ) )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=28:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

************ \ !Unconsumed Error: pTemporal/vaguely: Unexpected DO Expecting: Other text                       :8_2:Do:
************ > |>>/base got Nothing                                                                            :8_2:Do:
|>>/base> IN: DO ( "sing" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********** \ |>>/base has returned (Nothing,0)                                                                 :8_2:Do:
|>| calling $>>> IN: DO ( "sing" ) )
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

********** \ |>| calling $>> has returned (Nothing,0)                                                            :8_2:Do:
********** / undeepers                                                                                           :8_2:Do:
*********** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                            :8_2:Do:
*********** > sameLine: success!                                                                                :8_2:Do:
undeepers> IN: DO ( "sing" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :8_2:Do:
pDT> IN: MUST DO ( "sing" ) )
pDT> MATCH (COK): MUST
pDT> VALUE: ((DMust,Nothing),[])

********* \ pDT has returned (DMust,Nothing)                                                                      :8_2:Do:
********* / WHERE                                                                                                 :8_2:Do:
WHERE> IN: DO ( "sing" ) )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected DO
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                              :8_2:Do:
********* / preambleParamText:[Having]                                                                            :8_2:Do:
********** / $>|                                                                                                 :8_2:Do:
$>|> IN: DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected DO
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                             :8_2:Do:
preambleParamText:[Having]> IN: DO ( "sing" ) )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                        :8_2:Do:
********* / preambleParamText:[Given]                                                                             :8_2:Do:
********** / $>|                                                                                                 :8_2:Do:
$>|> IN: DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected DO
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                              :8_2:Do:
preambleParamText:[Given]> IN: DO ( "sing" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                          :8_2:Do:
********* / preambleParamText:[Upon]                                                                              :8_2:Do:
********** / $>|                                                                                                 :8_2:Do:
$>|> IN: DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected DO
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                               :8_2:Do:
preambleParamText:[Upon]> IN: DO ( "sing" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                            :8_2:Do:
********* / preambleBoolStructR [Unless]                                                                          :8_2:Do:
preambleBoolStructR [Unless]> IN: DO ( "sing" ) )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                      :8_2:Do:
********* / preambleBoolStructR [When,If]                                                                         :8_2:Do:
preambleBoolStructR [When,If]> IN: DO ( "sing" ) )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DO Expecting: IF WHEN                    :8_2:Do:
********* / pDoAction/Do                                                                                          :8_2:Do:
pDoAction/Do> IN: DO ( "sing" ) )
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

********* \ pDoAction/Do has returned Do                                                                           :8_3:GoDeeper:
********* / pDoAction/pAction                                                                                      :8_3:GoDeeper:
********** / pAction calling pParamText                                                                           :8_3:GoDeeper:
*********** / pParamText                                                                                         :8_3:GoDeeper:
************ / pParamText(flat) first line: pKeyValues                                                          :8_3:GoDeeper:
************* / pKeyValuesAka                                                                                  :8_3:GoDeeper:
************** / slAKA                                                                                        :8_3:GoDeeper:
*************** / $*|                                                                                        :8_3:GoDeeper:
**************** / slAKA base                                                                               :8_3:GoDeeper:
***************** / slKeyValues                                                                            :8_3:GoDeeper:
****************** / $*|                                                                                  :8_3:GoDeeper:
******************* / someSL                                                                             :8_3:GoDeeper:
******************** / pNumAsText                                                                       :8_3:GoDeeper:
pNumAsText> IN: ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                    :8_3:GoDeeper:
someSL> IN: ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number            :8_3:GoDeeper:
$*|> IN: ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                 :8_3:GoDeeper:
slKeyValues> IN: ( "sing" ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=29:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

***************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number           :8_3:GoDeeper:
slAKA base> IN: ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected (
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number              :8_3:GoDeeper:
$*|> IN: ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :8_3:GoDeeper:
slAKA> IN: ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected (
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                       :8_3:GoDeeper:
pKeyValuesAka> IN: ( "sing" ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=29:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                 :8_3:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sing" ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=29:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

************ \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :8_3:GoDeeper:
pParamText> IN: ( "sing" ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=29:
pParamText> unexpected (
pParamText> expecting other text or number

*********** \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                        :8_3:GoDeeper:
pAction calling pParamText> IN: ( "sing" ) )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=29:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

********** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number          :8_3:GoDeeper:
pDoAction/pAction> IN: ( "sing" ) )
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=29:
pDoAction/pAction> unexpected (
pDoAction/pAction> expecting other text or number

********* \ !Unconsumed Error: pDoAction/pAction: Unexpected ( Expecting: other text or number                     :8_3:GoDeeper:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=29:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting other text or number

******** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: other text or number :8_3:GoDeeper:
******** / regulative permutation with deontic-action                                                              :1_2:Every:
********* / WHERE                                                                                                 :1_2:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=1:
WHERE> unexpected EVERY
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                           :1_2:Every:
********* / preambleParamText:[Having]                                                                            :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                          :1_2:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=1:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                     :1_2:Every:
********* / preambleParamText:[Given]                                                                             :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                           :1_2:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=1:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                       :1_2:Every:
********* / preambleParamText:[Upon]                                                                              :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                            :1_2:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=1:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                         :1_2:Every:
********* / preambleBoolStructR [Unless]                                                                          :1_2:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=1:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                   :1_2:Every:
********* / preambleBoolStructR [When,If]                                                                         :1_2:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=1:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                 :1_2:Every:
********* / pTemporal/eventually                                                                                  :1_2:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=1:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

********* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                       :1_2:Every:
********* / pTemporal/specifically                                                                                :1_2:Every:
********** / $>|                                                                                                 :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

********** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                              :1_2:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=1:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

********* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON             :1_2:Every:
********* / pTemporal/vaguely                                                                                     :1_2:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=1:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

********* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                          :1_2:Every:
********* / pActor [REvery,RParty,RTokAll]                                                                        :1_2:Every:
********** / someIndentation                                                                                      :1_3:GoDeeper:
*********** / myindented-GoDeeper                                                                                :1_3:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) OR ( "runs" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                           :1_3:Other "pers:
*********** / manyIndentation/leaf?                                                                               :1_3:Other "pers:
************ / pMultiTermAka                                                                                     :1_3:Other "pers:
************* / pAKA                                                                                            :1_3:Other "pers:
************** / slAKA                                                                                         :1_3:Other "pers:
*************** / $*|                                                                                         :1_3:Other "pers:
**************** / slAKA base                                                                                :1_3:Other "pers:
***************** / slMultiTerm                                                                             :1_3:Other "pers:
****************** / someSL                                                                                :1_3:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

****************** \ someSL has returned (["person"],0)                                                     :2_3:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

***************** \ slMultiTerm has returned (["person"],0)                                                  :2_3:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

**************** \ slAKA base has returned (["person"],0)                                                     :2_3:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

*************** \ $*| has returned (["person"],0)                                                              :2_3:UnDeeper:
*************** / |>>/recurse                                                                                  :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :2_3:UnDeeper:
*************** / |>>/base                                                                                     :2_3:UnDeeper:
**************** / slAKA optional akapart                                                                     :2_3:UnDeeper:
***************** / |?| optional something                                                                   :2_3:UnDeeper:
****************** / |>>/recurse                                                                            :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_3:UnDeeper:
****************** / |>>/base                                                                               :2_3:UnDeeper:
******************* / PAKA/akapart                                                                         :2_3:UnDeeper:
******************** / $>|                                                                                :2_3:UnDeeper:
********************* / Aka Token                                                                        :2_3:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=4:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                        :2_3:UnDeeper:
$>|> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                :2_3:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=4:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                         :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=4:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                               :2_3:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :2_3:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                            :2_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :2_3:UnDeeper:
*************** / |>>/recurse                                                                                  :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :2_3:UnDeeper:
*************** / |>>/base                                                                                     :2_3:UnDeeper:
**************** / slAKA optional typically                                                                   :2_3:UnDeeper:
***************** / |?| optional something                                                                   :2_3:UnDeeper:
****************** / |>>/recurse                                                                            :2_3:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=4:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :2_3:UnDeeper:
****************** / |>>/base                                                                               :2_3:UnDeeper:
******************* / typically                                                                            :2_3:UnDeeper:
******************** / $>|                                                                                :2_3:UnDeeper:
$>|> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                          :2_3:UnDeeper:
typically> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=4:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                      :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=4:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                         :2_3:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :2_3:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                          :2_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :2_3:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :2_3:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                               :2_3:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                  :2_3:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************** \ slAKA has returned (["person"],0)                                                              :2_3:UnDeeper:
************** / undeepers                                                                                      :2_3:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                       :2_3:UnDeeper:
*************** > sameLine: success!                                                                           :2_3:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                      :2_3:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

************* \ pAKA has returned ["person"]                                                                     :2_3:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

************ \ pMultiTermAka has returned ["person"]                                                              :2_3:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) OR ( "runs" ) <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

*********** \ manyIndentation/leaf? has returned ["person"]                                                        :2_3:UnDeeper:
*********** / myindented-UnDeeper                                                                                  :2_3:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) OR ( "runs" ) OR ( "ea <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented-UnDeeper has returned UnDeeper                                                         :2_2:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) OR ( "runs" <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

********** \ someIndentation has returned ["person"]                                                             :2_2:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

********* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))            :2_2:Who:
********* / manyIndentation/leaf?                                                                                 :2_2:Who:
********** / preambleBoolStructR [Who,Which,Whose]                                                               :2_2:Who:
*********** / pBSR                                                                                               :2_3:GoDeeper:
************ / ppp inner                                                                                        :2_3:GoDeeper:
************* / expression                                                                                     :2_3:GoDeeper:
************** / termIndent p                                                                                 :2_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :2_3:GoDeeper:
**************** > |<|                                                                                      :2_3:GoDeeper:
**************** > |<* starting                                                                             :2_3:GoDeeper:
**************** / $*|                                                                                      :2_3:GoDeeper:
***************** / someSL                                                                                 :2_3:GoDeeper:
****************** / pNumAsText                                                                           :2_3:GoDeeper:
pNumAsText> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :2_3:GoDeeper:
someSL> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :2_3:GoDeeper:
$*|> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :2_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :2_3:GoDeeper:
***************** / someIndentation                                                                        :2_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :2_3:Other "walk:
****************** / manyIndentation/leaf?                                                                 :2_3:Other "walk:
******************* / ppp inner                                                                           :2_3:Other "walk:
******************** / expression                                                                        :2_3:Other "walk:
********************* / termIndent p                                                                    :2_3:Other "walk:
********************** / term p/1a:label ends directly above next line                                 :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
************************ / pNumAsText                                                                 :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :3_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*********************** \ $*| has returned (["walks"],0)                                               :3_3:UnDeeper:
*********************** / matching EOL                                                                 :3_3:UnDeeper:
matching EOL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=8:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :3_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :2_3:Other "walk:
*********************** > |<|                                                                         :2_3:Other "walk:
*********************** > |<* starting                                                                :2_3:Other "walk:
*********************** / $*|                                                                         :2_3:Other "walk:
************************ / someSL                                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

************************ \ someSL has returned (["walks"],0)                                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*********************** \ $*| has returned (["walks"],0)                                               :3_3:UnDeeper:
*********************** / |<*/parent                                                                   :3_3:UnDeeper:
************************ > |<*/recurse                                                                :3_3:UnDeeper:
************************ / ppp inner                                                               :3_2:Or:
************************* / expression                                                            :3_2:Or:
************************** / termIndent p                                                        :3_2:Or:
*************************** / term p/1a:label ends directly above next line                     :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :3_2:Or:
**************************** > |<|                                                             :3_2:Or:
**************************** > |<* starting                                                    :3_2:Or:
**************************** / $*|                                                             :3_2:Or:
***************************** / someSL                                                        :3_2:Or:
****************************** / pNumAsText                                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :3_2:Or:
*************************** / term p/notLabelTerm                                               :3_2:Or:
**************************** / term p/2:someIndentation expr p                                 :3_2:Or:
***************************** / someIndentation                                               :3_2:Or:
****************************** / myindented-GoDeeper                                         :3_2:Or:
myindented-GoDeeper> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=9:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :3_2:Or:
someIndentation> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=9:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :3_2:Or:
term p/2:someIndentation expr p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=9:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :3_2:Or:
**************************** / term p/3:plain p                                                :3_2:Or:
***************************** / pRelPred                                                      :3_2:Or:
****************************** / slRelPred                                                   :3_2:Or:
******************************* / nested simpleHorn                                         :3_2:Or:
******************************** > |^|                                                     :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
nested simpleHorn> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPConstraint                                              :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPConstraint> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=9:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPBoolStructR                                             :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slMultiTerm                                           :3_2:Or:
********************************** / someSL                                              :3_2:Or:
*********************************** / pNumAsText                                        :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPBoolStructR> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=9:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :3_2:Or:
******************************* / RPMT                                                      :3_2:Or:
******************************** / $*|                                                     :3_2:Or:
********************************* / slAKA                                                 :3_2:Or:
********************************** / $*|                                                 :3_2:Or:
*********************************** / slAKA base                                        :3_2:Or:
************************************ / slMultiTerm                                     :3_2:Or:
************************************* / someSL                                        :3_2:Or:
************************************** / pNumAsText                                  :3_2:Or:
pNumAsText> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :3_2:Or:
someSL> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :3_2:Or:
slMultiTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=9:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :3_2:Or:
slAKA base> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=9:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
slAKA> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=9:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :3_2:Or:
RPMT> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=9:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :3_2:Or:
slRelPred> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=9:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :3_2:Or:
pRelPred> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=9:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :3_2:Or:
term p/3:plain p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=9:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :3_2:Or:
term p/notLabelTerm> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=9:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :3_2:Or:
termIndent p> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=9:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :3_2:Or:
expression> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=9:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :3_2:Or:
ppp inner> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=9:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :3_2:Or:
************************ / withPrePost                                                             :3_2:Or:
************************* > |<* starting                                                          :3_2:Or:
************************* / $*|                                                                   :3_2:Or:
************************** / pre part                                                            :3_2:Or:
pre part> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=9:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :3_2:Or:
withPrePost> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=9:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :3_2:Or:
************************ / $*|                                                                     :3_2:Or:
************************* / pre part                                                              :3_2:Or:
pre part> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=9:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :3_2:Or:
$*|> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :3_2:Or:
************************ / |<*/base                                                                   :3_3:UnDeeper:
************************* / ppp inner                                                                :3_3:UnDeeper:
************************** / expression                                                             :3_3:UnDeeper:
*************************** / termIndent p                                                         :3_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :3_3:UnDeeper:
***************************** > |<|                                                              :3_3:UnDeeper:
***************************** > |<* starting                                                     :3_3:UnDeeper:
***************************** / $*|                                                              :3_3:UnDeeper:
****************************** / someSL                                                         :3_3:UnDeeper:
******************************* / pNumAsText                                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :3_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :3_3:UnDeeper:
****************************** / someIndentation                                                :3_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :3_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_3:UnDeeper:
someIndentation> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :3_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_3:UnDeeper:
***************************** / term p/3:plain p                                                 :3_3:UnDeeper:
****************************** / pRelPred                                                       :3_3:UnDeeper:
******************************* / slRelPred                                                    :3_3:UnDeeper:
******************************** / nested simpleHorn                                          :3_3:UnDeeper:
********************************* > |^|                                                      :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPConstraint                                               :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPConstraint> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPBoolStructR                                              :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slMultiTerm                                            :3_3:UnDeeper:
*********************************** / someSL                                               :3_3:UnDeeper:
************************************ / pNumAsText                                         :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
******************************** / RPMT                                                       :3_3:UnDeeper:
********************************* / $*|                                                      :3_3:UnDeeper:
********************************** / slAKA                                                  :3_3:UnDeeper:
*********************************** / $*|                                                  :3_3:UnDeeper:
************************************ / slAKA base                                         :3_3:UnDeeper:
************************************* / slMultiTerm                                      :3_3:UnDeeper:
************************************** / someSL                                         :3_3:UnDeeper:
*************************************** / pNumAsText                                   :3_3:UnDeeper:
pNumAsText> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_3:UnDeeper:
someSL> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slMultiTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slAKA base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slAKA> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
RPMT> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
slRelPred> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
pRelPred> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_3:UnDeeper:
termIndent p> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_3:UnDeeper:
expression> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :3_3:UnDeeper:
ppp inner> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :3_3:UnDeeper:
************************* / withPrePost                                                              :3_3:UnDeeper:
************************** > |<* starting                                                           :3_3:UnDeeper:
************************** / $*|                                                                    :3_3:UnDeeper:
*************************** / pre part                                                             :3_3:UnDeeper:
pre part> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :3_3:UnDeeper:
withPrePost> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :3_3:UnDeeper:
************************* / $*|                                                                      :3_3:UnDeeper:
************************** / pre part                                                               :3_3:UnDeeper:
pre part> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_3:UnDeeper:
$*|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_3:UnDeeper:
|<*/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=8:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_3:UnDeeper:
|<*/parent> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=9:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :3_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :3_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :2_3:Other "walk:
*********************** / term p/2:someIndentation expr p                                             :2_3:Other "walk:
************************ / someIndentation                                                           :2_3:Other "walk:
************************* / myindented-GoDeeper                                                     :2_3:Other "walk:
myindented-GoDeeper> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: ( :2_3:Other "walk:
someIndentation> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "walks"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (       :2_3:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_3:Other "walk:
*********************** / term p/3:plain p                                                            :2_3:Other "walk:
************************ / pRelPred                                                                  :2_3:Other "walk:
************************* / slRelPred                                                               :2_3:Other "walk:
************************** / nested simpleHorn                                                     :2_3:Other "walk:
*************************** > |^|                                                                 :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |^| deeps                                                            :3_3:UnDeeper:
|^| deeps> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :3_2:Or:
nested simpleHorn> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=9:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :3_2:Or:
************************** / RPConstraint                                                          :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |>| calling $>>                                                      :3_3:UnDeeper:
**************************** / |>>/recurse                                                        :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_3:UnDeeper:
**************************** / |>>/base                                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
RPConstraint> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
************************** / RPBoolStructR                                                         :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slMultiTerm                                                       :2_3:Other "walk:
***************************** / someSL                                                          :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

***************************** \ someSL has returned (["walks"],0)                                :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

**************************** \ slMultiTerm has returned (["walks"],0)                             :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
*************************** / |>| calling $>>                                                      :3_3:UnDeeper:
**************************** / |>>/recurse                                                        :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_3:UnDeeper:
**************************** / |>>/base                                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=8:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
RPBoolStructR> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_3:UnDeeper:
************************** / RPMT                                                                  :2_3:Other "walk:
*************************** / $*|                                                                 :2_3:Other "walk:
**************************** / slAKA                                                             :2_3:Other "walk:
***************************** / $*|                                                             :2_3:Other "walk:
****************************** / slAKA base                                                    :2_3:Other "walk:
******************************* / slMultiTerm                                                 :2_3:Other "walk:
******************************** / someSL                                                    :2_3:Other "walk:
someSL> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

******************************** \ someSL has returned (["walks"],0)                          :3_3:UnDeeper:
slMultiTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

******************************* \ slMultiTerm has returned (["walks"],0)                       :3_3:UnDeeper:
slAKA base> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

****************************** \ slAKA base has returned (["walks"],0)                          :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

***************************** \ $*| has returned (["walks"],0)                                   :3_3:UnDeeper:
***************************** / |>>/recurse                                                      :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :3_3:UnDeeper:
***************************** / |>>/base                                                         :3_3:UnDeeper:
****************************** / slAKA optional akapart                                         :3_3:UnDeeper:
******************************* / |?| optional something                                       :3_3:UnDeeper:
******************************** / |>>/recurse                                                :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_3:UnDeeper:
******************************** / |>>/base                                                   :3_3:UnDeeper:
********************************* / PAKA/akapart                                             :3_3:UnDeeper:
********************************** / $>|                                                    :3_3:UnDeeper:
*********************************** / Aka Token                                            :3_3:UnDeeper:
Aka Token> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=8:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_3:UnDeeper:
$>|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :3_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=8:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :3_3:UnDeeper:
|?| optional something> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :3_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :3_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :3_3:UnDeeper:
***************************** / |>>/recurse                                                      :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :3_3:UnDeeper:
***************************** / |>>/base                                                         :3_3:UnDeeper:
****************************** / slAKA optional typically                                       :3_3:UnDeeper:
******************************* / |?| optional something                                       :3_3:UnDeeper:
******************************** / |>>/recurse                                                :3_3:UnDeeper:
|>>/recurse> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_3:UnDeeper:
******************************** / |>>/base                                                   :3_3:UnDeeper:
********************************* / typically                                                :3_3:UnDeeper:
********************************** / $>|                                                    :3_3:UnDeeper:
$>|> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
typically> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_3:UnDeeper:
|?| optional something> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :3_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :3_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :3_3:UnDeeper:
|>>/base> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :3_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :3_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :3_3:UnDeeper:
slAKA> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

**************************** \ slAKA has returned (["walks"],0)                                   :3_3:UnDeeper:
$*|> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                       :3_3:UnDeeper:
RPMT> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************** \ RPMT has returned (RPMT ["walks"],0)                                   :3_3:UnDeeper:
slRelPred> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

************************* \ slRelPred has returned (RPMT ["walks"],0)                                :3_3:UnDeeper:
************************* / undeepers                                                                :3_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :3_3:UnDeeper:
************************** > sameLine: success!                                                     :3_3:UnDeeper:
undeepers> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :3_3:UnDeeper:
pRelPred> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

************************ \ pRelPred has returned RPMT ["walks"]                                       :3_3:UnDeeper:
term p/3:plain p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                        :3_3:UnDeeper:
term p/notLabelTerm> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                       :3_3:UnDeeper:
termIndent p> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                :3_3:UnDeeper:
********************* / binary(Or)                                                                       :3_3:UnDeeper:
binary(Or)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :3_3:UnDeeper:
********************* / binary(And)                                                                      :3_3:UnDeeper:
binary(And)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=8:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :3_3:UnDeeper:
********************* / binary(SetLess)                                                                  :3_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=8:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :3_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :3_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=8:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :3_3:UnDeeper:
expression> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ expression has returned MyLeaf (RPMT ["walks"])                                    :3_3:UnDeeper:
ppp inner> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["walks"])                                       :3_3:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) OR ( "runs" ) OR ( "eats" ) OR <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                             :3_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :3_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "runs" ) OR ( "eats" ) OR ( ( "dr <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :3_2:Or:
someIndentation> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                  :3_2:Or:
term p/2:someIndentation expr p> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                    :3_2:Or:
term p/notLabelTerm> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                  :3_2:Or:
termIndent p> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["walks"])                                           :3_2:Or:
************** / binary(Or)                                                                                  :3_2:Or:
binary(Or)> IN: OR ( "runs" ) OR ( "eats" ) OR ( ( "drin <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :3_3:GoDeeper:
************** / termIndent p                                                                                 :3_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :3_3:GoDeeper:
**************** > |<|                                                                                      :3_3:GoDeeper:
**************** > |<* starting                                                                             :3_3:GoDeeper:
**************** / $*|                                                                                      :3_3:GoDeeper:
***************** / someSL                                                                                 :3_3:GoDeeper:
****************** / pNumAsText                                                                           :3_3:GoDeeper:
pNumAsText> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :3_3:GoDeeper:
someSL> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :3_3:GoDeeper:
$*|> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :3_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :3_3:GoDeeper:
***************** / someIndentation                                                                        :3_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :3_3:Other "runs:
****************** / manyIndentation/leaf?                                                                 :3_3:Other "runs:
******************* / ppp inner                                                                           :3_3:Other "runs:
******************** / expression                                                                        :3_3:Other "runs:
********************* / termIndent p                                                                    :3_3:Other "runs:
********************** / term p/1a:label ends directly above next line                                 :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
************************ / pNumAsText                                                                 :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (CERR): "runs"
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1a:label ends directly above next line> MATCH (CERR): "runs"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*********************** \ $*| has returned (["runs"],0)                                                :4_3:UnDeeper:
*********************** / matching EOL                                                                 :4_3:UnDeeper:
matching EOL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=12:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "runs"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :3_3:Other "runs:
*********************** > |<|                                                                         :3_3:Other "runs:
*********************** > |<* starting                                                                :3_3:Other "runs:
*********************** / $*|                                                                         :3_3:Other "runs:
************************ / someSL                                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

************************ \ someSL has returned (["runs"],0)                                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*********************** \ $*| has returned (["runs"],0)                                                :4_3:UnDeeper:
*********************** / |<*/parent                                                                   :4_3:UnDeeper:
************************ > |<*/recurse                                                                :4_3:UnDeeper:
************************ / ppp inner                                                               :4_2:Or:
************************* / expression                                                            :4_2:Or:
************************** / termIndent p                                                        :4_2:Or:
*************************** / term p/1a:label ends directly above next line                     :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :4_2:Or:
**************************** > |<|                                                             :4_2:Or:
**************************** > |<* starting                                                    :4_2:Or:
**************************** / $*|                                                             :4_2:Or:
***************************** / someSL                                                        :4_2:Or:
****************************** / pNumAsText                                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :4_2:Or:
*************************** / term p/notLabelTerm                                               :4_2:Or:
**************************** / term p/2:someIndentation expr p                                 :4_2:Or:
***************************** / someIndentation                                               :4_2:Or:
****************************** / myindented-GoDeeper                                         :4_2:Or:
myindented-GoDeeper> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :4_2:Or:
someIndentation> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :4_2:Or:
term p/2:someIndentation expr p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :4_2:Or:
**************************** / term p/3:plain p                                                :4_2:Or:
***************************** / pRelPred                                                      :4_2:Or:
****************************** / slRelPred                                                   :4_2:Or:
******************************* / nested simpleHorn                                         :4_2:Or:
******************************** > |^|                                                     :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
nested simpleHorn> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPConstraint                                              :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPConstraint> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPBoolStructR                                             :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slMultiTerm                                           :4_2:Or:
********************************** / someSL                                              :4_2:Or:
*********************************** / pNumAsText                                        :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPBoolStructR> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :4_2:Or:
******************************* / RPMT                                                      :4_2:Or:
******************************** / $*|                                                     :4_2:Or:
********************************* / slAKA                                                 :4_2:Or:
********************************** / $*|                                                 :4_2:Or:
*********************************** / slAKA base                                        :4_2:Or:
************************************ / slMultiTerm                                     :4_2:Or:
************************************* / someSL                                        :4_2:Or:
************************************** / pNumAsText                                  :4_2:Or:
pNumAsText> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :4_2:Or:
someSL> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :4_2:Or:
slMultiTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :4_2:Or:
slAKA base> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
slAKA> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :4_2:Or:
RPMT> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :4_2:Or:
slRelPred> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :4_2:Or:
pRelPred> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :4_2:Or:
term p/3:plain p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :4_2:Or:
term p/notLabelTerm> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :4_2:Or:
termIndent p> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=13:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :4_2:Or:
expression> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :4_2:Or:
ppp inner> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :4_2:Or:
************************ / withPrePost                                                             :4_2:Or:
************************* > |<* starting                                                          :4_2:Or:
************************* / $*|                                                                   :4_2:Or:
************************** / pre part                                                            :4_2:Or:
pre part> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :4_2:Or:
withPrePost> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=13:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :4_2:Or:
************************ / $*|                                                                     :4_2:Or:
************************* / pre part                                                              :4_2:Or:
pre part> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :4_2:Or:
$*|> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :4_2:Or:
************************ / |<*/base                                                                   :4_3:UnDeeper:
************************* / ppp inner                                                                :4_3:UnDeeper:
************************** / expression                                                             :4_3:UnDeeper:
*************************** / termIndent p                                                         :4_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :4_3:UnDeeper:
***************************** > |<|                                                              :4_3:UnDeeper:
***************************** > |<* starting                                                     :4_3:UnDeeper:
***************************** / $*|                                                              :4_3:UnDeeper:
****************************** / someSL                                                         :4_3:UnDeeper:
******************************* / pNumAsText                                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :4_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :4_3:UnDeeper:
****************************** / someIndentation                                                :4_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :4_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=12:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_3:UnDeeper:
someIndentation> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=12:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=12:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_3:UnDeeper:
***************************** / term p/3:plain p                                                 :4_3:UnDeeper:
****************************** / pRelPred                                                       :4_3:UnDeeper:
******************************* / slRelPred                                                    :4_3:UnDeeper:
******************************** / nested simpleHorn                                          :4_3:UnDeeper:
********************************* > |^|                                                      :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=12:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPConstraint                                               :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPConstraint> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=12:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPBoolStructR                                              :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slMultiTerm                                            :4_3:UnDeeper:
*********************************** / someSL                                               :4_3:UnDeeper:
************************************ / pNumAsText                                         :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=12:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
******************************** / RPMT                                                       :4_3:UnDeeper:
********************************* / $*|                                                      :4_3:UnDeeper:
********************************** / slAKA                                                  :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / slAKA base                                         :4_3:UnDeeper:
************************************* / slMultiTerm                                      :4_3:UnDeeper:
************************************** / someSL                                         :4_3:UnDeeper:
*************************************** / pNumAsText                                   :4_3:UnDeeper:
pNumAsText> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=12:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=12:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=12:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPMT> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=12:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slRelPred> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=12:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
pRelPred> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=12:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=12:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=12:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_3:UnDeeper:
termIndent p> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=12:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_3:UnDeeper:
expression> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=12:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :4_3:UnDeeper:
ppp inner> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=12:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :4_3:UnDeeper:
************************* / withPrePost                                                              :4_3:UnDeeper:
************************** > |<* starting                                                           :4_3:UnDeeper:
************************** / $*|                                                                    :4_3:UnDeeper:
*************************** / pre part                                                             :4_3:UnDeeper:
pre part> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=12:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :4_3:UnDeeper:
withPrePost> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=12:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :4_3:UnDeeper:
************************* / $*|                                                                      :4_3:UnDeeper:
************************** / pre part                                                               :4_3:UnDeeper:
pre part> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=12:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :4_3:UnDeeper:
$*|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :4_3:UnDeeper:
|<*/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=12:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_3:UnDeeper:
|<*/parent> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=13:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "runs"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :4_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :3_3:Other "runs:
*********************** / term p/2:someIndentation expr p                                             :3_3:Other "runs:
************************ / someIndentation                                                           :3_3:Other "runs:
************************* / myindented-GoDeeper                                                     :3_3:Other "runs:
myindented-GoDeeper> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected "runs"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "runs" Expecting: (  :3_3:Other "runs:
someIndentation> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected "runs"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "runs" Expecting: (        :3_3:Other "runs:
term p/2:someIndentation expr p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected "runs"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "runs" Expecting: ( :3_3:Other "runs:
*********************** / term p/3:plain p                                                            :3_3:Other "runs:
************************ / pRelPred                                                                  :3_3:Other "runs:
************************* / slRelPred                                                               :3_3:Other "runs:
************************** / nested simpleHorn                                                     :3_3:Other "runs:
*************************** > |^|                                                                 :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |^| deeps                                                            :4_3:UnDeeper:
|^| deeps> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :4_2:Or:
nested simpleHorn> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
nested simpleHorn> MATCH (CERR): "runs" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :4_2:Or:
************************** / RPConstraint                                                          :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |>| calling $>>                                                      :4_3:UnDeeper:
**************************** / |>>/recurse                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_3:UnDeeper:
**************************** / |>>/base                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=12:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPConstraint> MATCH (CERR): "runs"
RPConstraint> ERROR:
RPConstraint> offset=12:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
************************** / RPBoolStructR                                                         :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slMultiTerm                                                       :3_3:Other "runs:
***************************** / someSL                                                          :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

***************************** \ someSL has returned (["runs"],0)                                 :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

**************************** \ slMultiTerm has returned (["runs"],0)                              :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
*************************** / |>| calling $>>                                                      :4_3:UnDeeper:
**************************** / |>>/recurse                                                        :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_3:UnDeeper:
**************************** / |>>/base                                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=12:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPBoolStructR> MATCH (CERR): "runs"
RPBoolStructR> ERROR:
RPBoolStructR> offset=12:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
************************** / RPMT                                                                  :3_3:Other "runs:
*************************** / $*|                                                                 :3_3:Other "runs:
**************************** / slAKA                                                             :3_3:Other "runs:
***************************** / $*|                                                             :3_3:Other "runs:
****************************** / slAKA base                                                    :3_3:Other "runs:
******************************* / slMultiTerm                                                 :3_3:Other "runs:
******************************** / someSL                                                    :3_3:Other "runs:
someSL> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
someSL> MATCH (COK): "runs"
someSL> VALUE: ((["runs"],0),[])

******************************** \ someSL has returned (["runs"],0)                           :4_3:UnDeeper:
slMultiTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slMultiTerm> MATCH (COK): "runs"
slMultiTerm> VALUE: ((["runs"],0),[])

******************************* \ slMultiTerm has returned (["runs"],0)                        :4_3:UnDeeper:
slAKA base> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slAKA base> MATCH (COK): "runs"
slAKA base> VALUE: ((["runs"],0),[])

****************************** \ slAKA base has returned (["runs"],0)                           :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

***************************** \ $*| has returned (["runs"],0)                                    :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / slAKA optional akapart                                         :4_3:UnDeeper:
******************************* / |?| optional something                                       :4_3:UnDeeper:
******************************** / |>>/recurse                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :4_3:UnDeeper:
******************************** / |>>/base                                                   :4_3:UnDeeper:
********************************* / PAKA/akapart                                             :4_3:UnDeeper:
********************************** / $>|                                                    :4_3:UnDeeper:
*********************************** / Aka Token                                            :4_3:UnDeeper:
Aka Token> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=12:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_3:UnDeeper:
$>|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :4_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=12:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :4_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :4_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :4_3:UnDeeper:
***************************** / |>>/recurse                                                      :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :4_3:UnDeeper:
***************************** / |>>/base                                                         :4_3:UnDeeper:
****************************** / slAKA optional typically                                       :4_3:UnDeeper:
******************************* / |?| optional something                                       :4_3:UnDeeper:
******************************** / |>>/recurse                                                :4_3:UnDeeper:
|>>/recurse> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :4_3:UnDeeper:
******************************** / |>>/base                                                   :4_3:UnDeeper:
********************************* / typically                                                :4_3:UnDeeper:
********************************** / $>|                                                    :4_3:UnDeeper:
$>|> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=12:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
typically> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=12:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=12:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|?| optional something> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :4_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :4_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :4_3:UnDeeper:
|>>/base> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :4_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :4_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :4_3:UnDeeper:
slAKA> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slAKA> MATCH (COK): "runs"
slAKA> VALUE: ((["runs"],0),[])

**************************** \ slAKA has returned (["runs"],0)                                    :4_3:UnDeeper:
$*|> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
$*|> MATCH (COK): "runs"
$*|> VALUE: ((["runs"],0),[])

*************************** \ $*| has returned (["runs"],0)                                        :4_3:UnDeeper:
RPMT> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
RPMT> MATCH (COK): "runs"
RPMT> VALUE: ((RPMT ["runs"],0),[])

************************** \ RPMT has returned (RPMT ["runs"],0)                                    :4_3:UnDeeper:
slRelPred> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
slRelPred> MATCH (COK): "runs"
slRelPred> VALUE: ((RPMT ["runs"],0),[])

************************* \ slRelPred has returned (RPMT ["runs"],0)                                 :4_3:UnDeeper:
************************* / undeepers                                                                :4_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_3:UnDeeper:
************************** > sameLine: success!                                                     :4_3:UnDeeper:
undeepers> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :4_3:UnDeeper:
pRelPred> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
pRelPred> MATCH (COK): "runs"
pRelPred> VALUE: (RPMT ["runs"],[])

************************ \ pRelPred has returned RPMT ["runs"]                                        :4_3:UnDeeper:
term p/3:plain p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/3:plain p> MATCH (COK): "runs"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["runs"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["runs"])                         :4_3:UnDeeper:
term p/notLabelTerm> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
term p/notLabelTerm> MATCH (COK): "runs"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["runs"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["runs"])                        :4_3:UnDeeper:
termIndent p> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
termIndent p> MATCH (COK): "runs"
termIndent p> VALUE: (MyLeaf (RPMT ["runs"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["runs"])                                 :4_3:UnDeeper:
********************* / binary(Or)                                                                       :4_3:UnDeeper:
binary(Or)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :4_3:UnDeeper:
********************* / binary(And)                                                                      :4_3:UnDeeper:
binary(And)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :4_3:UnDeeper:
********************* / binary(SetLess)                                                                  :4_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :4_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :4_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :4_3:UnDeeper:
expression> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
expression> MATCH (COK): "runs"
expression> VALUE: (MyLeaf (RPMT ["runs"]),[])

******************** \ expression has returned MyLeaf (RPMT ["runs"])                                     :4_3:UnDeeper:
ppp inner> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
ppp inner> MATCH (COK): "runs"
ppp inner> VALUE: (MyLeaf (RPMT ["runs"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["runs"])                                        :4_3:UnDeeper:
manyIndentation/leaf?> IN: "runs" ) OR ( "eats" ) OR ( ( "drinks" ) <…>
manyIndentation/leaf?> MATCH (COK): "runs"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["runs"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["runs"])                              :4_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :4_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "eats" ) OR ( ( "drinks" ) AND (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :4_2:Or:
someIndentation> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
someIndentation> MATCH (COK): ( "runs" )
someIndentation> VALUE: (MyLeaf (RPMT ["runs"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["runs"])                                   :4_2:Or:
term p/2:someIndentation expr p> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/2:someIndentation expr p> MATCH (COK): ( "runs" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["runs"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["runs"])                     :4_2:Or:
term p/notLabelTerm> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
term p/notLabelTerm> MATCH (COK): ( "runs" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["runs"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["runs"])                                   :4_2:Or:
termIndent p> IN: ( "runs" ) OR ( "eats" ) OR ( ( "drinks" <…>
termIndent p> MATCH (COK): ( "runs" )
termIndent p> VALUE: (MyLeaf (RPMT ["runs"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["runs"])                                            :4_2:Or:
************** / binary(Or)                                                                                  :4_2:Or:
binary(Or)> IN: OR ( "eats" ) OR ( ( "drinks" ) AND ( "s <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :4_3:GoDeeper:
************** / termIndent p                                                                                 :4_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :4_3:GoDeeper:
**************** > |<|                                                                                      :4_3:GoDeeper:
**************** > |<* starting                                                                             :4_3:GoDeeper:
**************** / $*|                                                                                      :4_3:GoDeeper:
***************** / someSL                                                                                 :4_3:GoDeeper:
****************** / pNumAsText                                                                           :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :4_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :4_3:GoDeeper:
***************** / someIndentation                                                                        :4_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                             :4_3:Other "eats:
****************** / manyIndentation/leaf?                                                                 :4_3:Other "eats:
******************* / ppp inner                                                                           :4_3:Other "eats:
******************** / expression                                                                        :4_3:Other "eats:
********************* / termIndent p                                                                    :4_3:Other "eats:
********************** / term p/1a:label ends directly above next line                                 :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
************************ / pNumAsText                                                                 :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or other text or number

*********************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number         :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

********************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                      :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*********************** \ $*| has returned (["eats"],0)                                                :5_3:UnDeeper:
*********************** / matching EOL                                                                 :5_3:UnDeeper:
matching EOL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=16:
matching EOL> unexpected )
matching EOL> expecting EOL

*********************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                 :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

********************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
********************** / term p/1c:label ends to the right of line below                               :4_3:Other "eats:
*********************** > |<|                                                                         :4_3:Other "eats:
*********************** > |<* starting                                                                :4_3:Other "eats:
*********************** / $*|                                                                         :4_3:Other "eats:
************************ / someSL                                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************ \ someSL has returned (["eats"],0)                                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*********************** \ $*| has returned (["eats"],0)                                                :5_3:UnDeeper:
*********************** / |<*/parent                                                                   :5_3:UnDeeper:
************************ > |<*/recurse                                                                :5_3:UnDeeper:
************************ / ppp inner                                                               :5_2:Or:
************************* / expression                                                            :5_2:Or:
************************** / termIndent p                                                        :5_2:Or:
*************************** / term p/1a:label ends directly above next line                     :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

*************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/1b:label ends to the left of line below, with EOL          :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/1c:label ends to the right of line below                   :5_2:Or:
**************************** > |<|                                                             :5_2:Or:
**************************** > |<* starting                                                    :5_2:Or:
**************************** / $*|                                                             :5_2:Or:
***************************** / someSL                                                        :5_2:Or:
****************************** / pNumAsText                                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

***************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

**************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

*************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
*************************** / term p/notLabelTerm                                               :5_2:Or:
**************************** / term p/2:someIndentation expr p                                 :5_2:Or:
***************************** / someIndentation                                               :5_2:Or:
****************************** / myindented-GoDeeper                                         :5_2:Or:
myindented-GoDeeper> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

****************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected OR
someIndentation> expecting (

***************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

**************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
**************************** / term p/3:plain p                                                :5_2:Or:
***************************** / pRelPred                                                      :5_2:Or:
****************************** / slRelPred                                                   :5_2:Or:
******************************* / nested simpleHorn                                         :5_2:Or:
******************************** > |^|                                                     :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

******************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPConstraint                                              :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

******************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPBoolStructR                                             :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slMultiTerm                                           :5_2:Or:
********************************** / someSL                                              :5_2:Or:
*********************************** / pNumAsText                                        :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

******************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
******************************* / RPMT                                                      :5_2:Or:
******************************** / $*|                                                     :5_2:Or:
********************************* / slAKA                                                 :5_2:Or:
********************************** / $*|                                                 :5_2:Or:
*********************************** / slAKA base                                        :5_2:Or:
************************************ / slMultiTerm                                     :5_2:Or:
************************************* / someSL                                        :5_2:Or:
************************************** / pNumAsText                                  :5_2:Or:
pNumAsText> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected OR
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected OR
slAKA base> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected OR
slAKA> expecting other text or number

********************************* \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected OR
RPMT> expecting other text or number

******************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected OR
slRelPred> expecting other text or number

****************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected OR
pRelPred> expecting other text or number

***************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

**************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

*************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected OR
expression> expecting expression

************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression    :5_2:Or:
ppp inner> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected OR
ppp inner> expecting expression

************************ \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression       :5_2:Or:
************************ / withPrePost                                                             :5_2:Or:
************************* > |<* starting                                                          :5_2:Or:
************************* / $*|                                                                   :5_2:Or:
************************** / pre part                                                            :5_2:Or:
pre part> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected OR
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text  :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text         :5_2:Or:
withPrePost> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************ \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text   :5_2:Or:
************************ / $*|                                                                     :5_2:Or:
************************* / pre part                                                              :5_2:Or:
pre part> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected OR
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text    :5_2:Or:
$*|> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected OR
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text           :5_2:Or:
************************ / |<*/base                                                                   :5_3:UnDeeper:
************************* / ppp inner                                                                :5_3:UnDeeper:
************************** / expression                                                             :5_3:UnDeeper:
*************************** / termIndent p                                                         :5_3:UnDeeper:
**************************** / term p/1a:label ends directly above next line                      :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

**************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL           :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

**************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                    :5_3:UnDeeper:
***************************** > |<|                                                              :5_3:UnDeeper:
***************************** > |<* starting                                                     :5_3:UnDeeper:
***************************** / $*|                                                              :5_3:UnDeeper:
****************************** / someSL                                                         :5_3:UnDeeper:
******************************* / pNumAsText                                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

****************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

**************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
**************************** / term p/notLabelTerm                                                :5_3:UnDeeper:
***************************** / term p/2:someIndentation expr p                                  :5_3:UnDeeper:
****************************** / someIndentation                                                :5_3:UnDeeper:
******************************* / myindented-GoDeeper                                          :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=16:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected )
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (  :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
***************************** / term p/3:plain p                                                 :5_3:UnDeeper:
****************************** / pRelPred                                                       :5_3:UnDeeper:
******************************* / slRelPred                                                    :5_3:UnDeeper:
******************************** / nested simpleHorn                                          :5_3:UnDeeper:
********************************* > |^|                                                      :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=16:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

******************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPConstraint                                               :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=16:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

******************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPBoolStructR                                              :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slMultiTerm                                            :5_3:UnDeeper:
*********************************** / someSL                                               :5_3:UnDeeper:
************************************ / pNumAsText                                         :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=16:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

******************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
******************************** / RPMT                                                       :5_3:UnDeeper:
********************************* / $*|                                                      :5_3:UnDeeper:
********************************** / slAKA                                                  :5_3:UnDeeper:
*********************************** / $*|                                                  :5_3:UnDeeper:
************************************ / slAKA base                                         :5_3:UnDeeper:
************************************* / slMultiTerm                                      :5_3:UnDeeper:
************************************** / someSL                                         :5_3:UnDeeper:
*************************************** / pNumAsText                                   :5_3:UnDeeper:
pNumAsText> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected )
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected )
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=16:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=16:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=16:
slAKA> unexpected )
slAKA> expecting other text or number

********************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=16:
RPMT> unexpected )
RPMT> expecting other text or number

******************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=16:
slRelPred> unexpected )
slRelPred> expecting other text or number

******************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=16:
pRelPred> unexpected )
pRelPred> expecting other text or number

****************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=16:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

***************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=16:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

**************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=16:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

*************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=16:
expression> unexpected )
expression> expecting expression

************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression      :5_3:UnDeeper:
ppp inner> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=16:
ppp inner> unexpected )
ppp inner> expecting expression

************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression         :5_3:UnDeeper:
************************* / withPrePost                                                              :5_3:UnDeeper:
************************** > |<* starting                                                           :5_3:UnDeeper:
************************** / $*|                                                                    :5_3:UnDeeper:
*************************** / pre part                                                             :5_3:UnDeeper:
pre part> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=16:
pre part> unexpected )
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text    :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text           :5_3:UnDeeper:
withPrePost> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=16:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text     :5_3:UnDeeper:
************************* / $*|                                                                      :5_3:UnDeeper:
************************** / pre part                                                               :5_3:UnDeeper:
pre part> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=16:
pre part> unexpected )
pre part> expecting ( or Other text

************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :5_3:UnDeeper:
$*|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected )
$*|> expecting ( or Other text

************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :5_3:UnDeeper:
|<*/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=16:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************ \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=17:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

*********************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

********************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
********************** / term p/notLabelTerm                                                           :4_3:Other "eats:
*********************** / term p/2:someIndentation expr p                                             :4_3:Other "eats:
************************ / someIndentation                                                           :4_3:Other "eats:
************************* / myindented-GoDeeper                                                     :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: (  :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************ \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: (        :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

*********************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
*********************** / term p/3:plain p                                                            :4_3:Other "eats:
************************ / pRelPred                                                                  :4_3:Other "eats:
************************* / slRelPred                                                               :4_3:Other "eats:
************************** / nested simpleHorn                                                     :4_3:Other "eats:
*************************** > |^|                                                                 :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |^| deeps                                                            :5_3:UnDeeper:
|^| deeps> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

*************************** \ |^| deeps has returned ([()],-1)                                  :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
************************** / RPConstraint                                                          :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |>| calling $>>                                                      :5_3:UnDeeper:
**************************** / |>>/recurse                                                        :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_3:UnDeeper:
**************************** / |>>/base                                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=16:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=16:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
************************** / RPBoolStructR                                                         :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slMultiTerm                                                       :4_3:Other "eats:
***************************** / someSL                                                          :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

***************************** \ someSL has returned (["eats"],0)                                 :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

**************************** \ slMultiTerm has returned (["eats"],0)                              :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
*************************** / |>| calling $>>                                                      :5_3:UnDeeper:
**************************** / |>>/recurse                                                        :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :5_3:UnDeeper:
**************************** / |>>/base                                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=16:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=16:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
************************** / RPMT                                                                  :4_3:Other "eats:
*************************** / $*|                                                                 :4_3:Other "eats:
**************************** / slAKA                                                             :4_3:Other "eats:
***************************** / $*|                                                             :4_3:Other "eats:
****************************** / slAKA base                                                    :4_3:Other "eats:
******************************* / slMultiTerm                                                 :4_3:Other "eats:
******************************** / someSL                                                    :4_3:Other "eats:
someSL> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************** \ someSL has returned (["eats"],0)                           :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

******************************* \ slMultiTerm has returned (["eats"],0)                        :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

****************************** \ slAKA base has returned (["eats"],0)                           :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************** \ $*| has returned (["eats"],0)                                    :5_3:UnDeeper:
***************************** / |>>/recurse                                                      :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :5_3:UnDeeper:
***************************** / |>>/base                                                         :5_3:UnDeeper:
****************************** / slAKA optional akapart                                         :5_3:UnDeeper:
******************************* / |?| optional something                                       :5_3:UnDeeper:
******************************** / |>>/recurse                                                :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :5_3:UnDeeper:
******************************** / |>>/base                                                   :5_3:UnDeeper:
********************************* / PAKA/akapart                                             :5_3:UnDeeper:
********************************** / $>|                                                    :5_3:UnDeeper:
*********************************** / Aka Token                                            :5_3:UnDeeper:
Aka Token> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=16:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=16:
$>|> unexpected )
$>|> expecting AKA

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA    :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=16:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting AKA

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA   :5_3:UnDeeper:
|?| optional something> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional akapart has returned (Nothing,0)                :5_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :5_3:UnDeeper:
***************************** / |>>/recurse                                                      :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (        :5_3:UnDeeper:
***************************** / |>>/base                                                         :5_3:UnDeeper:
****************************** / slAKA optional typically                                       :5_3:UnDeeper:
******************************* / |?| optional something                                       :5_3:UnDeeper:
******************************** / |>>/recurse                                                :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=16:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :5_3:UnDeeper:
******************************** / |>>/base                                                   :5_3:UnDeeper:
********************************* / typically                                                :5_3:UnDeeper:
********************************** / $>|                                                    :5_3:UnDeeper:
$>|> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=16:
$>|> unexpected )
$>|> expecting TYPICALLY

********************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=16:
typically> unexpected )
typically> expecting TYPICALLY

********************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=16:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)              :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************************** \ slAKA optional typically has returned (Nothing,0)              :5_3:UnDeeper:
****************************** > |>>/base got Nothing                                           :5_3:UnDeeper:
|>>/base> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************************** \ |>>/base has returned (Nothing,0)                                :5_3:UnDeeper:
***************************** > slAKA: proceeding after base and entityalias are retrieved ...   :5_3:UnDeeper:
***************************** > pAKA: entityalias = Nothing                                      :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

**************************** \ slAKA has returned (["eats"],0)                                    :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

*************************** \ $*| has returned (["eats"],0)                                        :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

************************** \ RPMT has returned (RPMT ["eats"],0)                                    :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

************************* \ slRelPred has returned (RPMT ["eats"],0)                                 :5_3:UnDeeper:
************************* / undeepers                                                                :5_3:UnDeeper:
************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
************************** > sameLine: success!                                                     :5_3:UnDeeper:
undeepers> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************* \ undeepers has returned ()                                                :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************ \ pRelPred has returned RPMT ["eats"]                                        :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************** \ term p/3:plain p has returned MyLeaf (RPMT ["eats"])                         :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])                        :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["eats"])                                 :5_3:UnDeeper:
********************* / binary(Or)                                                                       :5_3:UnDeeper:
binary(Or)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=16:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                        :5_3:UnDeeper:
********************* / binary(And)                                                                      :5_3:UnDeeper:
binary(And)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=16:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                      :5_3:UnDeeper:
********************* / binary(SetLess)                                                                  :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=16:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                 :5_3:UnDeeper:
********************* / binary(SetPlus)                                                                  :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=16:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                 :5_3:UnDeeper:
expression> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************** \ expression has returned MyLeaf (RPMT ["eats"])                                     :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************* \ ppp inner has returned MyLeaf (RPMT ["eats"])                                        :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( ( "drinks" ) AND ( "swallo <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])                              :5_3:UnDeeper:
****************** / myindented-UnDeeper                                                                    :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( ( "drinks" ) AND ( "swallows" ) ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************** \ someIndentation has returned MyLeaf (RPMT ["eats"])                                   :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"])                     :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

*************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])                                   :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( ( "drinks" ) AND ( "swal <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                                            :5_2:Or:
************** / binary(Or)                                                                                  :5_2:Or:
binary(Or)> IN: OR ( ( "drinks" ) AND ( "swallows" ) ) M <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

************** \ binary(Or) has returned Or                                                                   :5_3:GoDeeper:
************** / termIndent p                                                                                 :5_3:GoDeeper:
*************** / term p/1a:label ends directly above next line                                              :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

*************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/1b:label ends to the left of line below, with EOL                                   :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/1c:label ends to the right of line below                                            :5_3:GoDeeper:
**************** > |<|                                                                                      :5_3:GoDeeper:
**************** > |<* starting                                                                             :5_3:GoDeeper:
**************** / $*|                                                                                      :5_3:GoDeeper:
***************** / someSL                                                                                 :5_3:GoDeeper:
****************** / pNumAsText                                                                           :5_3:GoDeeper:
pNumAsText> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                        :5_3:GoDeeper:
someSL> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                :5_3:GoDeeper:
$*|> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

*************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
*************** / term p/notLabelTerm                                                                        :5_3:GoDeeper:
**************** / term p/2:someIndentation expr p                                                          :5_3:GoDeeper:
***************** / someIndentation                                                                        :5_3:GoDeeper:
****************** / myindented-GoDeeper                                                                  :5_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****************** \ myindented-GoDeeper has returned GoDeeper                                              :5_4:GoDeeper:
****************** / manyIndentation/leaf?                                                                  :5_4:GoDeeper:
******************* / ppp inner                                                                            :5_4:GoDeeper:
******************** / expression                                                                         :5_4:GoDeeper:
********************* / termIndent p                                                                     :5_4:GoDeeper:
********************** / term p/1a:label ends directly above next line                                  :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                       :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/1c:label ends to the right of line below                                :5_4:GoDeeper:
*********************** > |<|                                                                          :5_4:GoDeeper:
*********************** > |<* starting                                                                 :5_4:GoDeeper:
*********************** / $*|                                                                          :5_4:GoDeeper:
************************ / someSL                                                                     :5_4:GoDeeper:
************************* / pNumAsText                                                               :5_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :5_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :5_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :5_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :5_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :5_4:GoDeeper:
************************ / someIndentation                                                            :5_4:GoDeeper:
************************* / myindented-GoDeeper                                                      :5_4:GoDeeper:
myindented-GoDeeper> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented-GoDeeper has returned GoDeeper                                 :5_4:Other "drin:
************************* / manyIndentation/leaf?                                                     :5_4:Other "drin:
************************** / ppp inner                                                               :5_4:Other "drin:
*************************** / expression                                                            :5_4:Other "drin:
**************************** / termIndent p                                                        :5_4:Other "drin:
***************************** / term p/1a:label ends directly above next line                     :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
******************************* / pNumAsText                                                     :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (CERR): "drinks"
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or other text or number

****************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "drinks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

***************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_4:UnDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL          :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

****************************** \ $*| has returned (["drinks"],0)                                  :6_4:UnDeeper:
****************************** / matching EOL                                                     :6_4:UnDeeper:
matching EOL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=21:
matching EOL> unexpected )
matching EOL> expecting EOL

****************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :6_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "drinks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

***************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_4:UnDeeper:
***************************** / term p/1c:label ends to the right of line below                   :5_4:Other "drin:
****************************** > |<|                                                             :5_4:Other "drin:
****************************** > |<* starting                                                    :5_4:Other "drin:
****************************** / $*|                                                             :5_4:Other "drin:
******************************* / someSL                                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

******************************* \ someSL has returned (["drinks"],0)                             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

****************************** \ $*| has returned (["drinks"],0)                                  :6_4:UnDeeper:
****************************** / |<*/parent                                                       :6_4:UnDeeper:
******************************* > |<*/recurse                                                    :6_4:UnDeeper:
******************************* / ppp inner                                                   :6_3:And:
******************************** / expression                                                :6_3:And:
********************************* / termIndent p                                            :6_3:And:
********************************** / term p/1a:label ends directly above next line         :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1a:label ends directly above next line> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=22:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/1b:label ends to the left of line below, with EOL :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=22:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/1c:label ends to the right of line below       :6_3:And:
*********************************** > |<|                                                 :6_3:And:
*********************************** > |<* starting                                        :6_3:And:
*********************************** / $*|                                                 :6_3:And:
************************************ / someSL                                            :6_3:And:
************************************* / pNumAsText                                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
term p/1c:label ends to the right of line below> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :6_3:And:
********************************** / term p/notLabelTerm                                   :6_3:And:
*********************************** / term p/2:someIndentation expr p                     :6_3:And:
************************************ / someIndentation                                   :6_3:And:
************************************* / myindented-GoDeeper                             :6_3:And:
myindented-GoDeeper> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=22:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :6_3:And:
someIndentation> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected AND
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :6_3:And:
term p/2:someIndentation expr p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :6_3:And:
*********************************** / term p/3:plain p                                    :6_3:And:
************************************ / pRelPred                                          :6_3:And:
************************************* / slRelPred                                       :6_3:And:
************************************** / nested simpleHorn                             :6_3:And:
*************************************** > |^|                                         :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
nested simpleHorn> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPConstraint                                  :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPConstraint> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPBoolStructR                                 :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slMultiTerm                               :6_3:And:
***************************************** / someSL                                  :6_3:And:
****************************************** / pNumAsText                            :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPBoolStructR> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :6_3:And:
************************************** / RPMT                                          :6_3:And:
*************************************** / $*|                                         :6_3:And:
**************************************** / slAKA                                     :6_3:And:
***************************************** / $*|                                     :6_3:And:
****************************************** / slAKA base                            :6_3:And:
******************************************* / slMultiTerm                         :6_3:And:
******************************************** / someSL                            :6_3:And:
********************************************* / pNumAsText                      :6_3:And:
pNumAsText> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :6_3:And:
someSL> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :6_3:And:
slMultiTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :6_3:And:
slAKA base> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected AND
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
slAKA> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected AND
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :6_3:And:
RPMT> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected AND
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :6_3:And:
slRelPred> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected AND
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :6_3:And:
pRelPred> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected AND
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :6_3:And:
term p/3:plain p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=22:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :6_3:And:
term p/notLabelTerm> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=22:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :6_3:And:
termIndent p> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=22:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :6_3:And:
expression> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=22:
expression> unexpected AND
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression :6_3:And:
ppp inner> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=22:
ppp inner> unexpected AND
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression :6_3:And:
******************************* / withPrePost                                                 :6_3:And:
******************************** > |<* starting                                              :6_3:And:
******************************** / $*|                                                       :6_3:And:
********************************* / pre part                                                :6_3:And:
pre part> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :6_3:And:
withPrePost> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=22:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text :6_3:And:
******************************* / $*|                                                         :6_3:And:
******************************** / pre part                                                  :6_3:And:
pre part> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :6_3:And:
$*|> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :6_3:And:
******************************* / |<*/base                                                       :6_4:UnDeeper:
******************************** / ppp inner                                                    :6_4:UnDeeper:
********************************* / expression                                                 :6_4:UnDeeper:
********************************** / termIndent p                                             :6_4:UnDeeper:
*********************************** / term p/1a:label ends directly above next line          :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/1b:label ends to the left of line below, with EOL :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/1c:label ends to the right of line below        :6_4:UnDeeper:
************************************ > |<|                                                  :6_4:UnDeeper:
************************************ > |<* starting                                         :6_4:UnDeeper:
************************************ / $*|                                                  :6_4:UnDeeper:
************************************* / someSL                                             :6_4:UnDeeper:
************************************** / pNumAsText                                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=21:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*********************************** / term p/notLabelTerm                                    :6_4:UnDeeper:
************************************ / term p/2:someIndentation expr p                      :6_4:UnDeeper:
************************************* / someIndentation                                    :6_4:UnDeeper:
************************************** / myindented-GoDeeper                              :6_4:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_4:UnDeeper:
someIndentation> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected )
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / term p/3:plain p                                     :6_4:UnDeeper:
************************************* / pRelPred                                           :6_4:UnDeeper:
************************************** / slRelPred                                        :6_4:UnDeeper:
*************************************** / nested simpleHorn                              :6_4:UnDeeper:
**************************************** > |^|                                          :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
nested simpleHorn> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=21:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

*************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPConstraint                                   :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPConstraint> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

*************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPBoolStructR                                  :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slMultiTerm                                :6_4:UnDeeper:
****************************************** / someSL                                   :6_4:UnDeeper:
******************************************* / pNumAsText                             :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPBoolStructR> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

*************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
*************************************** / RPMT                                           :6_4:UnDeeper:
**************************************** / $*|                                          :6_4:UnDeeper:
***************************************** / slAKA                                      :6_4:UnDeeper:
****************************************** / $*|                                      :6_4:UnDeeper:
******************************************* / slAKA base                             :6_4:UnDeeper:
******************************************** / slMultiTerm                          :6_4:UnDeeper:
********************************************* / someSL                             :6_4:UnDeeper:
********************************************** / pNumAsText                       :6_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

********************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slAKA base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slAKA> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
RPMT> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=21:
RPMT> unexpected )
RPMT> expecting other text or number

*************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
slRelPred> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=21:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
pRelPred> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=21:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************* \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/3:plain p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=21:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************************ \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_4:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=21:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

*********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_4:UnDeeper:
termIndent p> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=21:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_4:UnDeeper:
expression> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=21:
expression> unexpected )
expression> expecting expression

********************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_4:UnDeeper:
ppp inner> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=21:
ppp inner> unexpected )
ppp inner> expecting expression

******************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_4:UnDeeper:
******************************** / withPrePost                                                  :6_4:UnDeeper:
********************************* > |<* starting                                               :6_4:UnDeeper:
********************************* / $*|                                                        :6_4:UnDeeper:
********************************** / pre part                                                 :6_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
withPrePost> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=21:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
******************************** / $*|                                                          :6_4:UnDeeper:
********************************* / pre part                                                   :6_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_4:UnDeeper:
|<*/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=21:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

******************************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_4:UnDeeper:
|<*/parent> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=22:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

****************************** \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :6_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "drinks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

***************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :6_4:UnDeeper:
***************************** / term p/notLabelTerm                                               :5_4:Other "drin:
****************************** / term p/2:someIndentation expr p                                 :5_4:Other "drin:
******************************* / someIndentation                                               :5_4:Other "drin:
******************************** / myindented-GoDeeper                                         :5_4:Other "drin:
myindented-GoDeeper> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "drinks"
myindented-GoDeeper> expecting (

******************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
someIndentation> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "drinks"
someIndentation> expecting (

******************************* \ !Unconsumed Error: someIndentation: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
term p/2:someIndentation expr p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "drinks"
term p/2:someIndentation expr p> expecting (

****************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "drinks" Expecting: ( :5_4:Other "drin:
****************************** / term p/3:plain p                                                :5_4:Other "drin:
******************************* / pRelPred                                                      :5_4:Other "drin:
******************************** / slRelPred                                                   :5_4:Other "drin:
********************************* / nested simpleHorn                                         :5_4:Other "drin:
********************************** > |^|                                                     :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |^| deeps                                                :6_4:UnDeeper:
|^| deeps> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************** \ |^| deeps has returned ([()],-1)                      :6_3:And:
nested simpleHorn> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
nested simpleHorn> MATCH (CERR): "drinks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

********************************* \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :6_3:And:
********************************* / RPConstraint                                              :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |>| calling $>>                                          :6_4:UnDeeper:
*********************************** / |>>/recurse                                            :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*********************************** / |>>/base                                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
RPConstraint> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPConstraint> MATCH (CERR): "drinks"
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
********************************* / RPBoolStructR                                             :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slMultiTerm                                           :5_4:Other "drin:
************************************ / someSL                                              :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************ \ someSL has returned (["drinks"],0)                   :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

*********************************** \ slMultiTerm has returned (["drinks"],0)                :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
********************************** / |>| calling $>>                                          :6_4:UnDeeper:
*********************************** / |>>/recurse                                            :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*********************************** / |>>/base                                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
RPBoolStructR> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPBoolStructR> MATCH (CERR): "drinks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_4:UnDeeper:
********************************* / RPMT                                                      :5_4:Other "drin:
********************************** / $*|                                                     :5_4:Other "drin:
*********************************** / slAKA                                                 :5_4:Other "drin:
************************************ / $*|                                                 :5_4:Other "drin:
************************************* / slAKA base                                        :5_4:Other "drin:
************************************** / slMultiTerm                                     :5_4:Other "drin:
*************************************** / someSL                                        :5_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*************************************** \ someSL has returned (["drinks"],0)             :6_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

************************************** \ slMultiTerm has returned (["drinks"],0)          :6_4:UnDeeper:
slAKA base> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slAKA base> MATCH (COK): "drinks"
slAKA base> VALUE: ((["drinks"],0),[])

************************************* \ slAKA base has returned (["drinks"],0)             :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

************************************ \ $*| has returned (["drinks"],0)                      :6_4:UnDeeper:
************************************ / |>>/recurse                                          :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / |>>/base                                             :6_4:UnDeeper:
************************************* / slAKA optional akapart                             :6_4:UnDeeper:
************************************** / |?| optional something                           :6_4:UnDeeper:
*************************************** / |>>/recurse                                    :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*************************************** / |>>/base                                       :6_4:UnDeeper:
**************************************** / PAKA/akapart                                 :6_4:UnDeeper:
***************************************** / $>|                                        :6_4:UnDeeper:
****************************************** / Aka Token                                :6_4:UnDeeper:
Aka Token> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

****************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_4:UnDeeper:
PAKA/akapart> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

**************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0)  :6_4:UnDeeper:
slAKA optional akapart> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional akapart has returned (Nothing,0)    :6_4:UnDeeper:
************************************* > |>>/base got Nothing                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :6_4:UnDeeper:
************************************ / |>>/recurse                                          :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
************************************ / |>>/base                                             :6_4:UnDeeper:
************************************* / slAKA optional typically                           :6_4:UnDeeper:
************************************** / |?| optional something                           :6_4:UnDeeper:
*************************************** / |>>/recurse                                    :6_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_4:UnDeeper:
*************************************** / |>>/base                                       :6_4:UnDeeper:
**************************************** / typically                                    :6_4:UnDeeper:
***************************************** / $>|                                        :6_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
typically> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

**************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0)  :6_4:UnDeeper:
slAKA optional typically> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional typically has returned (Nothing,0)  :6_4:UnDeeper:
************************************* > |>>/base got Nothing                               :6_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                    :6_4:UnDeeper:
************************************ > slAKA: proceeding after base and entityalias are retrieved ... :6_4:UnDeeper:
************************************ > pAKA: entityalias = Nothing                          :6_4:UnDeeper:
slAKA> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slAKA> MATCH (COK): "drinks"
slAKA> VALUE: ((["drinks"],0),[])

*********************************** \ slAKA has returned (["drinks"],0)                      :6_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************** \ $*| has returned (["drinks"],0)                          :6_4:UnDeeper:
RPMT> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
RPMT> MATCH (COK): "drinks"
RPMT> VALUE: ((RPMT ["drinks"],0),[])

********************************* \ RPMT has returned (RPMT ["drinks"],0)                      :6_4:UnDeeper:
slRelPred> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
slRelPred> MATCH (COK): "drinks"
slRelPred> VALUE: ((RPMT ["drinks"],0),[])

******************************** \ slRelPred has returned (RPMT ["drinks"],0)                   :6_4:UnDeeper:
******************************** / undeepers                                                    :6_4:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_4:UnDeeper:
********************************* > sameLine: success!                                         :6_4:UnDeeper:
undeepers> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                    :6_4:UnDeeper:
pRelPred> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
pRelPred> MATCH (COK): "drinks"
pRelPred> VALUE: (RPMT ["drinks"],[])

******************************* \ pRelPred has returned RPMT ["drinks"]                          :6_4:UnDeeper:
term p/3:plain p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/3:plain p> MATCH (COK): "drinks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

****************************** \ term p/3:plain p has returned MyLeaf (RPMT ["drinks"])           :6_4:UnDeeper:
term p/notLabelTerm> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
term p/notLabelTerm> MATCH (COK): "drinks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"])          :6_4:UnDeeper:
termIndent p> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
termIndent p> MATCH (COK): "drinks"
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"])                   :6_4:UnDeeper:
**************************** / binary(Or)                                                           :6_4:UnDeeper:
binary(Or)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=21:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :6_4:UnDeeper:
**************************** / binary(And)                                                          :6_4:UnDeeper:
binary(And)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=21:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :6_4:UnDeeper:
**************************** / binary(SetLess)                                                      :6_4:UnDeeper:
binary(SetLess)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=21:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :6_4:UnDeeper:
**************************** / binary(SetPlus)                                                      :6_4:UnDeeper:
binary(SetPlus)> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=21:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :6_4:UnDeeper:
expression> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
expression> MATCH (COK): "drinks"
expression> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*************************** \ expression has returned MyLeaf (RPMT ["drinks"])                       :6_4:UnDeeper:
ppp inner> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
ppp inner> MATCH (COK): "drinks"
ppp inner> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************** \ ppp inner has returned MyLeaf (RPMT ["drinks"])                          :6_4:UnDeeper:
manyIndentation/leaf?> IN: "drinks" ) AND ( "swallows" ) ) MUST DO  <…>
manyIndentation/leaf?> MATCH (COK): "drinks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["drinks"])                :6_4:UnDeeper:
************************* / myindented-UnDeeper                                                        :6_4:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "swallows" ) ) MUST DO ( "sing"  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented-UnDeeper has returned UnDeeper                               :6_3:And:
someIndentation> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
someIndentation> MATCH (COK): ( "drinks" )
someIndentation> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["drinks"])                     :6_3:And:
term p/2:someIndentation expr p> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/2:someIndentation expr p> MATCH (COK): ( "drinks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["drinks"])       :6_3:And:
term p/notLabelTerm> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
term p/notLabelTerm> MATCH (COK): ( "drinks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"])                     :6_3:And:
termIndent p> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
termIndent p> MATCH (COK): ( "drinks" )
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["drinks"])                              :6_3:And:
********************* / binary(Or)                                                                      :6_3:And:
binary(Or)> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected AND
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                     :6_3:And:
********************* / binary(And)                                                                     :6_3:And:
binary(And)> IN: AND ( "swallows" ) ) MUST DO ( "sing" )  <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

********************* \ binary(And) has returned And                                                     :6_4:GoDeeper:
********************* / termIndent p                                                                     :6_4:GoDeeper:
********************** / term p/1a:label ends directly above next line                                  :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/1b:label ends to the left of line below, with EOL                       :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/1c:label ends to the right of line below                                :6_4:GoDeeper:
*********************** > |<|                                                                          :6_4:GoDeeper:
*********************** > |<* starting                                                                 :6_4:GoDeeper:
*********************** / $*|                                                                          :6_4:GoDeeper:
************************ / someSL                                                                     :6_4:GoDeeper:
************************* / pNumAsText                                                               :6_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number            :6_4:GoDeeper:
someSL> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

************************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number    :6_4:GoDeeper:
$*|> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************** / term p/notLabelTerm                                                            :6_4:GoDeeper:
*********************** / term p/2:someIndentation expr p                                              :6_4:GoDeeper:
************************ / someIndentation                                                            :6_4:GoDeeper:
************************* / myindented-GoDeeper                                                      :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************* \ myindented-GoDeeper has returned GoDeeper                                 :6_4:Other "swal:
************************* / manyIndentation/leaf?                                                     :6_4:Other "swal:
************************** / ppp inner                                                               :6_4:Other "swal:
*************************** / expression                                                            :6_4:Other "swal:
**************************** / termIndent p                                                        :6_4:Other "swal:
***************************** / term p/1a:label ends directly above next line                     :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
******************************* / pNumAsText                                                   :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (CERR): "swallows"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

****************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :7_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (CERR): "swallows"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

***************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_3:UnDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL          :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

****************************** \ $*| has returned (["swallows"],0)                              :7_3:UnDeeper:
****************************** / matching EOL                                                   :7_3:UnDeeper:
matching EOL> IN: ) ) MUST DO ( "sing" ) )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

****************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL   :7_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "swallows"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

***************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_3:UnDeeper:
***************************** / term p/1c:label ends to the right of line below                   :6_4:Other "swal:
****************************** > |<|                                                             :6_4:Other "swal:
****************************** > |<* starting                                                    :6_4:Other "swal:
****************************** / $*|                                                             :6_4:Other "swal:
******************************* / someSL                                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

******************************* \ someSL has returned (["swallows"],0)                         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

****************************** \ $*| has returned (["swallows"],0)                              :7_3:UnDeeper:
****************************** / |<*/parent                                                     :7_3:UnDeeper:
******************************* > |<*/recurse                                                  :7_3:UnDeeper:
******************************* / ppp inner                                                 :7_2:Must:
******************************** / expression                                              :7_2:Must:
********************************* / termIndent p                                          :7_2:Must:
********************************** / term p/1a:label ends directly above next line       :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1a:label ends directly above next line> IN: MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/1b:label ends to the left of line below, with EOL :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/1c:label ends to the right of line below     :7_2:Must:
*********************************** > |<|                                               :7_2:Must:
*********************************** > |<* starting                                      :7_2:Must:
*********************************** / $*|                                               :7_2:Must:
************************************ / someSL                                          :7_2:Must:
************************************* / pNumAsText                                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/1c:label ends to the right of line below> IN: MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :7_2:Must:
********************************** / term p/notLabelTerm                                 :7_2:Must:
*********************************** / term p/2:someIndentation expr p                   :7_2:Must:
************************************ / someIndentation                                 :7_2:Must:
************************************* / myindented-GoDeeper                           :7_2:Must:
myindented-GoDeeper> IN: MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=27:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :7_2:Must:
someIndentation> IN: MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=27:
someIndentation> unexpected MUST
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :7_2:Must:
term p/2:someIndentation expr p> IN: MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=27:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :7_2:Must:
*********************************** / term p/3:plain p                                  :7_2:Must:
************************************ / pRelPred                                        :7_2:Must:
************************************* / slRelPred                                     :7_2:Must:
************************************** / nested simpleHorn                           :7_2:Must:
*************************************** > |^|                                       :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
nested simpleHorn> IN: MUST DO ( "sing" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPConstraint                                :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPConstraint> IN: MUST DO ( "sing" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=27:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPBoolStructR                               :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slMultiTerm                             :7_2:Must:
***************************************** / someSL                                :7_2:Must:
****************************************** / pNumAsText                          :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPBoolStructR> IN: MUST DO ( "sing" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=27:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :7_2:Must:
************************************** / RPMT                                        :7_2:Must:
*************************************** / $*|                                       :7_2:Must:
**************************************** / slAKA                                   :7_2:Must:
***************************************** / $*|                                   :7_2:Must:
****************************************** / slAKA base                          :7_2:Must:
******************************************* / slMultiTerm                       :7_2:Must:
******************************************** / someSL                          :7_2:Must:
********************************************* / pNumAsText                    :7_2:Must:
pNumAsText> IN: MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :7_2:Must:
someSL> IN: MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :7_2:Must:
slMultiTerm> IN: MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :7_2:Must:
slAKA base> IN: MUST DO ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
slAKA> IN: MUST DO ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected MUST
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :7_2:Must:
RPMT> IN: MUST DO ( "sing" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=27:
RPMT> unexpected MUST
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :7_2:Must:
slRelPred> IN: MUST DO ( "sing" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=27:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :7_2:Must:
pRelPred> IN: MUST DO ( "sing" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=27:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/3:plain p> IN: MUST DO ( "sing" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=27:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :7_2:Must:
term p/notLabelTerm> IN: MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=27:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :7_2:Must:
termIndent p> IN: MUST DO ( "sing" ) )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=27:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :7_2:Must:
expression> IN: MUST DO ( "sing" ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=27:
expression> unexpected MUST
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :7_2:Must:
ppp inner> IN: MUST DO ( "sing" ) )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=27:
ppp inner> unexpected MUST
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :7_2:Must:
******************************* / withPrePost                                               :7_2:Must:
******************************** > |<* starting                                            :7_2:Must:
******************************** / $*|                                                     :7_2:Must:
********************************* / pre part                                              :7_2:Must:
pre part> IN: MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected MUST
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :7_2:Must:
withPrePost> IN: MUST DO ( "sing" ) )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=27:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :7_2:Must:
******************************* / $*|                                                       :7_2:Must:
******************************** / pre part                                                :7_2:Must:
pre part> IN: MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :7_2:Must:
$*|> IN: MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :7_2:Must:
******************************* / |<*/base                                                     :7_3:UnDeeper:
******************************** / ppp inner                                                  :7_3:UnDeeper:
********************************* / expression                                               :7_3:UnDeeper:
********************************** / termIndent p                                           :7_3:UnDeeper:
*********************************** / term p/1a:label ends directly above next line        :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST DO ( "sing" ) )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/1b:label ends to the left of line below, with EOL :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST DO ( "sing" ) )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/1c:label ends to the right of line below      :7_3:UnDeeper:
************************************ > |<|                                                :7_3:UnDeeper:
************************************ > |<* starting                                       :7_3:UnDeeper:
************************************ / $*|                                                :7_3:UnDeeper:
************************************* / someSL                                           :7_3:UnDeeper:
************************************** / pNumAsText                                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

*********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*********************************** / term p/notLabelTerm                                  :7_3:UnDeeper:
************************************ / term p/2:someIndentation expr p                    :7_3:UnDeeper:
************************************* / someIndentation                                  :7_3:UnDeeper:
************************************** / myindented-GoDeeper                            :7_3:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_3:UnDeeper:
someIndentation> IN: ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

************************************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :7_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************************ \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / term p/3:plain p                                   :7_3:UnDeeper:
************************************* / pRelPred                                         :7_3:UnDeeper:
************************************** / slRelPred                                      :7_3:UnDeeper:
*************************************** / nested simpleHorn                            :7_3:UnDeeper:
**************************************** > |^|                                        :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
nested simpleHorn> IN: ) ) MUST DO ( "sing" ) )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

*************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPConstraint                                 :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPConstraint> IN: ) ) MUST DO ( "sing" ) )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

*************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPBoolStructR                                :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slMultiTerm                              :7_3:UnDeeper:
****************************************** / someSL                                 :7_3:UnDeeper:
******************************************* / pNumAsText                           :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPBoolStructR> IN: ) ) MUST DO ( "sing" ) )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

*************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
*************************************** / RPMT                                         :7_3:UnDeeper:
**************************************** / $*|                                        :7_3:UnDeeper:
***************************************** / slAKA                                    :7_3:UnDeeper:
****************************************** / $*|                                    :7_3:UnDeeper:
******************************************* / slAKA base                           :7_3:UnDeeper:
******************************************** / slMultiTerm                        :7_3:UnDeeper:
********************************************* / someSL                           :7_3:UnDeeper:
********************************************** / pNumAsText                     :7_3:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_3:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slAKA base> IN: ) ) MUST DO ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

******************************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slAKA> IN: ) ) MUST DO ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
RPMT> IN: ) ) MUST DO ( "sing" ) )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

*************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
slRelPred> IN: ) ) MUST DO ( "sing" ) )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
pRelPred> IN: ) ) MUST DO ( "sing" ) )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************* \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/3:plain p> IN: ) ) MUST DO ( "sing" ) )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************************ \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_3:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

*********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_3:UnDeeper:
termIndent p> IN: ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_3:UnDeeper:
expression> IN: ) ) MUST DO ( "sing" ) )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

********************************* \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :7_3:UnDeeper:
ppp inner> IN: ) ) MUST DO ( "sing" ) )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

******************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :7_3:UnDeeper:
******************************** / withPrePost                                                :7_3:UnDeeper:
********************************* > |<* starting                                             :7_3:UnDeeper:
********************************* / $*|                                                      :7_3:UnDeeper:
********************************** / pre part                                               :7_3:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
withPrePost> IN: ) ) MUST DO ( "sing" ) )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
******************************** / $*|                                                        :7_3:UnDeeper:
********************************* / pre part                                                 :7_3:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" ) )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_3:UnDeeper:
|<*/base> IN: ) ) MUST DO ( "sing" ) )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

******************************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_3:UnDeeper:
|<*/parent> IN: ) ) MUST DO ( "sing" ) )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=27:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

****************************** \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :7_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/1c:label ends to the right of line below> MATCH (CERR): "swallows"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

***************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :7_3:UnDeeper:
***************************** / term p/notLabelTerm                                               :6_4:Other "swal:
****************************** / term p/2:someIndentation expr p                                 :6_4:Other "swal:
******************************* / someIndentation                                               :6_4:Other "swal:
******************************** / myindented-GoDeeper                                         :6_4:Other "swal:
myindented-GoDeeper> IN: "swallows" ) ) MUST DO ( "sing" ) )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected "swallows"
myindented-GoDeeper> expecting (

******************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
someIndentation> IN: "swallows" ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "swallows"
someIndentation> expecting (

******************************* \ !Unconsumed Error: someIndentation: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
term p/2:someIndentation expr p> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "swallows"
term p/2:someIndentation expr p> expecting (

****************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "swallows" Expecting: ( :6_4:Other "swal:
****************************** / term p/3:plain p                                                :6_4:Other "swal:
******************************* / pRelPred                                                      :6_4:Other "swal:
******************************** / slRelPred                                                   :6_4:Other "swal:
********************************* / nested simpleHorn                                         :6_4:Other "swal:
********************************** > |^|                                                     :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |^| deeps                                              :7_3:UnDeeper:
|^| deeps> IN: ) ) MUST DO ( "sing" ) )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

********************************** \ |^| deeps has returned ([(),()],-2)                 :7_2:Must:
nested simpleHorn> IN: "swallows" ) ) MUST DO ( "sing" ) )
nested simpleHorn> MATCH (CERR): "swallows" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

********************************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :7_2:Must:
********************************* / RPConstraint                                              :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |>| calling $>>                                        :7_3:UnDeeper:
*********************************** / |>>/recurse                                          :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*********************************** / |>>/base                                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_3:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
RPConstraint> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPConstraint> MATCH (CERR): "swallows"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
********************************* / RPBoolStructR                                             :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slMultiTerm                                           :6_4:Other "swal:
************************************ / someSL                                              :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************ \ someSL has returned (["swallows"],0)               :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

*********************************** \ slMultiTerm has returned (["swallows"],0)            :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
********************************** / |>| calling $>>                                        :7_3:UnDeeper:
*********************************** / |>>/recurse                                          :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*********************************** / |>>/base                                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_3:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" ) )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
RPBoolStructR> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPBoolStructR> MATCH (CERR): "swallows"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_3:UnDeeper:
********************************* / RPMT                                                      :6_4:Other "swal:
********************************** / $*|                                                     :6_4:Other "swal:
*********************************** / slAKA                                                 :6_4:Other "swal:
************************************ / $*|                                                 :6_4:Other "swal:
************************************* / slAKA base                                        :6_4:Other "swal:
************************************** / slMultiTerm                                     :6_4:Other "swal:
*************************************** / someSL                                        :6_4:Other "swal:
someSL> IN: "swallows" ) ) MUST DO ( "sing" ) )
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*************************************** \ someSL has returned (["swallows"],0)         :7_3:UnDeeper:
slMultiTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

************************************** \ slMultiTerm has returned (["swallows"],0)      :7_3:UnDeeper:
slAKA base> IN: "swallows" ) ) MUST DO ( "sing" ) )
slAKA base> MATCH (COK): "swallows"
slAKA base> VALUE: ((["swallows"],0),[])

************************************* \ slAKA base has returned (["swallows"],0)         :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

************************************ \ $*| has returned (["swallows"],0)                  :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slAKA optional akapart                           :7_3:UnDeeper:
************************************** / |?| optional something                         :7_3:UnDeeper:
*************************************** / |>>/recurse                                  :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*************************************** / |>>/base                                     :7_3:UnDeeper:
**************************************** / PAKA/akapart                               :7_3:UnDeeper:
***************************************** / $>|                                      :7_3:UnDeeper:
****************************************** / Aka Token                              :7_3:UnDeeper:
Aka Token> IN: ) ) MUST DO ( "sing" ) )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

****************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_3:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :7_3:UnDeeper:
PAKA/akapart> IN: ) ) MUST DO ( "sing" ) )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

**************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :7_3:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0) :7_3:UnDeeper:
slAKA optional akapart> IN: ) ) MUST DO ( "sing" ) )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional akapart has returned (Nothing,0)  :7_3:UnDeeper:
************************************* > |>>/base got Nothing                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                  :7_3:UnDeeper:
************************************ / |>>/recurse                                        :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
************************************ / |>>/base                                           :7_3:UnDeeper:
************************************* / slAKA optional typically                         :7_3:UnDeeper:
************************************** / |?| optional something                         :7_3:UnDeeper:
*************************************** / |>>/recurse                                  :7_3:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" ) )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_3:UnDeeper:
*************************************** / |>>/base                                     :7_3:UnDeeper:
**************************************** / typically                                  :7_3:UnDeeper:
***************************************** / $>|                                      :7_3:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

***************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
typically> IN: ) ) MUST DO ( "sing" ) )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

**************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

*************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_3:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" ) )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************** \ |?| optional something has returned (Nothing,0) :7_3:UnDeeper:
slAKA optional typically> IN: ) ) MUST DO ( "sing" ) )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************* \ slAKA optional typically has returned (Nothing,0) :7_3:UnDeeper:
************************************* > |>>/base got Nothing                             :7_3:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" ) )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************************ \ |>>/base has returned (Nothing,0)                  :7_3:UnDeeper:
************************************ > slAKA: proceeding after base and entityalias are retrieved ... :7_3:UnDeeper:
************************************ > pAKA: entityalias = Nothing                        :7_3:UnDeeper:
slAKA> IN: "swallows" ) ) MUST DO ( "sing" ) )
slAKA> MATCH (COK): "swallows"
slAKA> VALUE: ((["swallows"],0),[])

*********************************** \ slAKA has returned (["swallows"],0)                  :7_3:UnDeeper:
$*|> IN: "swallows" ) ) MUST DO ( "sing" ) )
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************** \ $*| has returned (["swallows"],0)                      :7_3:UnDeeper:
RPMT> IN: "swallows" ) ) MUST DO ( "sing" ) )
RPMT> MATCH (COK): "swallows"
RPMT> VALUE: ((RPMT ["swallows"],0),[])

********************************* \ RPMT has returned (RPMT ["swallows"],0)                  :7_3:UnDeeper:
slRelPred> IN: "swallows" ) ) MUST DO ( "sing" ) )
slRelPred> MATCH (COK): "swallows"
slRelPred> VALUE: ((RPMT ["swallows"],0),[])

******************************** \ slRelPred has returned (RPMT ["swallows"],0)               :7_3:UnDeeper:
******************************** / undeepers                                                  :7_3:UnDeeper:
********************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_3:UnDeeper:
********************************* > sameLine: success!                                       :7_3:UnDeeper:
undeepers> IN: ) ) MUST DO ( "sing" ) )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************** \ undeepers has returned ()                                  :7_3:UnDeeper:
pRelPred> IN: "swallows" ) ) MUST DO ( "sing" ) )
pRelPred> MATCH (COK): "swallows"
pRelPred> VALUE: (RPMT ["swallows"],[])

******************************* \ pRelPred has returned RPMT ["swallows"]                      :7_3:UnDeeper:
term p/3:plain p> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/3:plain p> MATCH (COK): "swallows"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

****************************** \ term p/3:plain p has returned MyLeaf (RPMT ["swallows"])       :7_3:UnDeeper:
term p/notLabelTerm> IN: "swallows" ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (COK): "swallows"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"])      :7_3:UnDeeper:
termIndent p> IN: "swallows" ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (COK): "swallows"
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"])               :7_3:UnDeeper:
**************************** / binary(Or)                                                         :7_3:UnDeeper:
binary(Or)> IN: ) ) MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR          :7_3:UnDeeper:
**************************** / binary(And)                                                        :7_3:UnDeeper:
binary(And)> IN: ) ) MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND        :7_3:UnDeeper:
**************************** / binary(SetLess)                                                    :7_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS   :7_3:UnDeeper:
**************************** / binary(SetPlus)                                                    :7_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS   :7_3:UnDeeper:
expression> IN: "swallows" ) ) MUST DO ( "sing" ) )
expression> MATCH (COK): "swallows"
expression> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*************************** \ expression has returned MyLeaf (RPMT ["swallows"])                   :7_3:UnDeeper:
ppp inner> IN: "swallows" ) ) MUST DO ( "sing" ) )
ppp inner> MATCH (COK): "swallows"
ppp inner> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************** \ ppp inner has returned MyLeaf (RPMT ["swallows"])                      :7_3:UnDeeper:
manyIndentation/leaf?> IN: "swallows" ) ) MUST DO ( "sing" ) )
manyIndentation/leaf?> MATCH (COK): "swallows"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["swallows"])            :7_3:UnDeeper:
************************* / myindented-UnDeeper                                                      :7_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST DO ( "sing" ) )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************* \ myindented-UnDeeper has returned UnDeeper                                  :7_4:UnDeeper:
someIndentation> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
someIndentation> MATCH (COK): ( "swallows" )
someIndentation> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************ \ someIndentation has returned MyLeaf (RPMT ["swallows"])                      :7_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/2:someIndentation expr p> MATCH (COK): ( "swallows" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["swallows"])        :7_4:UnDeeper:
term p/notLabelTerm> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
term p/notLabelTerm> MATCH (COK): ( "swallows" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"])                      :7_4:UnDeeper:
termIndent p> IN: ( "swallows" ) ) MUST DO ( "sing" ) )
termIndent p> MATCH (COK): ( "swallows" )
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************* \ termIndent p has returned MyLeaf (RPMT ["swallows"])                               :7_4:UnDeeper:
********************* / binary(Or)                                                                         :7_4:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

********************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :7_4:UnDeeper:
********************* / binary(And)                                                                        :7_4:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

********************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :7_4:UnDeeper:
********************* / binary(SetLess)                                                                    :7_4:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

********************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :7_4:UnDeeper:
********************* / binary(SetPlus)                                                                    :7_4:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

********************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :7_4:UnDeeper:
expression> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
expression> MATCH (COK): ( "drinks" ) AND ( "swallows" )
expression> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

******************** \ expression has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]  :7_4:UnDeeper:
ppp inner> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
ppp inner> MATCH (COK): ( "drinks" ) AND ( "swallows" )
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

******************* \ ppp inner has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]     :7_4:UnDeeper:
manyIndentation/leaf?> IN: ( "drinks" ) AND ( "swallows" ) ) MUST D <…>
manyIndentation/leaf?> MATCH (COK): ( "drinks" ) AND ( "swallows" )
manyIndentation/leaf?> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

****************** \ manyIndentation/leaf? has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_4:UnDeeper:
****************** / myindented-UnDeeper                                                                      :7_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST DO ( "sing" ) )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

****************** \ myindented-UnDeeper has returned UnDeeper                                           :7_2:Must:
someIndentation> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
someIndentation> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
someIndentation> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

***************** \ someIndentation has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
term p/2:someIndentation expr p> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
term p/2:someIndentation expr p> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

**************** \ term p/2:someIndentation expr p has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
term p/notLabelTerm> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
term p/notLabelTerm> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
term p/notLabelTerm> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

*************** \ term p/notLabelTerm has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])] :7_2:Must:
termIndent p> IN: ( ( "drinks" ) AND ( "swallows" ) ) MUST <…>
termIndent p> MATCH (COK): ( ( "drinks" ) AND ( "swallows" ) )
termIndent p> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])],[])

************** \ termIndent p has returned MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]       :7_2:Must:
************** / binary(Or)                                                                                  :7_2:Must:
binary(Or)> IN: MUST DO ( "sing" ) )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************** \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                :7_2:Must:
************** / binary(And)                                                                                 :7_2:Must:
binary(And)> IN: MUST DO ( "sing" ) )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected MUST
binary(And)> expecting AND

************** \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                              :7_2:Must:
************** / binary(SetLess)                                                                             :7_2:Must:
binary(SetLess)> IN: MUST DO ( "sing" ) )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************** \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                         :7_2:Must:
************** / binary(SetPlus)                                                                             :7_2:Must:
binary(SetPlus)> IN: MUST DO ( "sing" ) )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************** \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                         :7_2:Must:
expression> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
expression> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]],[])

************* \ expression has returned MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]] :7_2:Must:
ppp inner> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
ppp inner> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]],[])

************ \ ppp inner has returned MyAny [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["runs"]),MyLeaf (RPMT ["eats"]),MyAll [MyLeaf (RPMT ["drinks"]),MyLeaf (RPMT ["swallows"])]] :7_2:Must:
pBSR> IN: ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pBSR> MATCH (COK): ( "walks" ) OR ( "runs" ) OR ( "eats" )  <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]],[])

*********** \ pBSR has returned Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]] :7_2:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]),[])

********** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]) :7_2:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) OR ( "runs" ) OR ( "eats <…>
manyIndentation/leaf?> VALUE: ((Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]),[])

********* \ manyIndentation/leaf? has returned (Who,Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]) :7_2:Must:
********* / WHERE                                                                                                 :7_2:Must:
WHERE> IN: MUST DO ( "sing" ) )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected MUST
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                            :7_2:Must:
********* / preambleParamText:[Having]                                                                            :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                           :7_2:Must:
preambleParamText:[Having]> IN: MUST DO ( "sing" ) )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                      :7_2:Must:
********* / preambleParamText:[Given]                                                                             :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                            :7_2:Must:
preambleParamText:[Given]> IN: MUST DO ( "sing" ) )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                        :7_2:Must:
********* / preambleParamText:[Upon]                                                                              :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                             :7_2:Must:
preambleParamText:[Upon]> IN: MUST DO ( "sing" ) )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                          :7_2:Must:
********* / preambleBoolStructR [Unless]                                                                          :7_2:Must:
preambleBoolStructR [Unless]> IN: MUST DO ( "sing" ) )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                    :7_2:Must:
********* / preambleBoolStructR [When,If]                                                                         :7_2:Must:
preambleBoolStructR [When,If]> IN: MUST DO ( "sing" ) )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                  :7_2:Must:
********* / pTemporal/eventually                                                                                  :7_2:Must:
pTemporal/eventually> IN: MUST DO ( "sing" ) )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=27:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

********* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY                        :7_2:Must:
********* / pTemporal/specifically                                                                                :7_2:Must:
********** / $>|                                                                                                 :7_2:Must:
$>|> IN: MUST DO ( "sing" ) )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON                               :7_2:Must:
pTemporal/specifically> IN: MUST DO ( "sing" ) )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=27:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

********* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON              :7_2:Must:
********* / pTemporal/vaguely                                                                                     :7_2:Must:
pTemporal/vaguely> IN: MUST DO ( "sing" ) )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=27:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

********* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text                           :7_2:Must:
********* / pDA                                                                                                   :7_2:Must:
********** / pAction calling pParamText                                                                          :8_2:Do:
*********** / pParamText                                                                                        :8_2:Do:
************ / pParamText(flat) first line: pKeyValues                                                         :8_2:Do:
************* / pKeyValuesAka                                                                                 :8_2:Do:
************** / slAKA                                                                                       :8_2:Do:
*************** / $*|                                                                                       :8_2:Do:
**************** / slAKA base                                                                              :8_2:Do:
***************** / slKeyValues                                                                           :8_2:Do:
****************** / $*|                                                                                 :8_2:Do:
******************* / someSL                                                                            :8_2:Do:
******************** / pNumAsText                                                                      :8_2:Do:
pNumAsText> IN: DO ( "sing" ) )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number                  :8_2:Do:
someSL> IN: DO ( "sing" ) )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected DO
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number          :8_2:Do:
$*|> IN: DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected DO
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number               :8_2:Do:
slKeyValues> IN: DO ( "sing" ) )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=28:
slKeyValues> unexpected DO
slKeyValues> expecting other text or number

***************** \ !Unconsumed Error: slKeyValues: Unexpected DO Expecting: other text or number         :8_2:Do:
slAKA base> IN: DO ( "sing" ) )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=28:
slAKA base> unexpected DO
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number            :8_2:Do:
$*|> IN: DO ( "sing" ) )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected DO
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number                     :8_2:Do:
slAKA> IN: DO ( "sing" ) )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=28:
slAKA> unexpected DO
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number                     :8_2:Do:
pKeyValuesAka> IN: DO ( "sing" ) )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=28:
pKeyValuesAka> unexpected DO
pKeyValuesAka> expecting other text or number

************* \ !Unconsumed Error: pKeyValuesAka: Unexpected DO Expecting: other text or number               :8_2:Do:
pParamText(flat) first line: pKeyValues> IN: DO ( "sing" ) )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=28:
pParamText(flat) first line: pKeyValues> unexpected DO
pParamText(flat) first line: pKeyValues> expecting other text or number

************ \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected DO Expecting: other text or number :8_2:Do:
pParamText> IN: DO ( "sing" ) )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=28:
pParamText> unexpected DO
pParamText> expecting other text or number

*********** \ !Unconsumed Error: pParamText: Unexpected DO Expecting: other text or number                      :8_2:Do:
pAction calling pParamText> IN: DO ( "sing" ) )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=28:
pAction calling pParamText> unexpected DO
pAction calling pParamText> expecting other text or number

********** \ !Unconsumed Error: pAction calling pParamText: Unexpected DO Expecting: other text or number        :8_2:Do:
pDA> IN: MUST DO ( "sing" ) )
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=28:
pDA> unexpected DO
pDA> expecting other text or number

********* \ !Consumed Error: pDA: Unexpected DO Expecting: other text or number                                   :8_2:Do:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=28:
regulative permutation with deontic-action> unexpected DO
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

******** \ !Consumed Error: regulative permutation with deontic-action: Unexpected DO Expecting: AND OR LESS PLUS other text or number :7_2:Must:
permutationsReg> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=29:
permutationsReg> unexpected (
permutationsReg> expecting other text or number

******* \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: other text or number                          :1_2:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=29:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting other text or number

****** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: other text or number                             :1_2:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=29:
pRegRule> unexpected (
pRegRule> expecting other text or number or §

***** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § other text or number                                  :1_2:Every:
***** / pTypeDefinition                                                                                               :1_2:Every:
****** / pRuleLabel                                                                                                  :1_2:Every:
******* / $>|                                                                                                       :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting §

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_2:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=1:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

****** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_2:Every:
****** / pHornlike/uponLimb                                                                                          :1_2:Every:
******* / preambleParamText:[Upon]                                                                                  :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_2:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=1:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_2:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=1:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

****** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_2:Every:
****** / pHornlike/givenLimb                                                                                         :1_2:Every:
******* / preambleParamText:[Given]                                                                                 :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_2:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=1:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_2:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=1:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

****** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_2:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=1:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

***** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                          :1_2:Every:
***** / pConstitutiveRule                                                                                             :1_2:Every:
****** / pRuleLabel                                                                                                  :1_2:Every:
******* / $>|                                                                                                       :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting §

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_2:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=1:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

****** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_2:Every:
****** / calling myindented pNameParens                                                                              :1_2:Every:
******* / manyIndentation/leaf?                                                                                     :1_2:Every:
******** / pMultiTermAka                                                                                           :1_2:Every:
********* / pAKA                                                                                                  :1_2:Every:
********** / slAKA                                                                                               :1_2:Every:
*********** / $*|                                                                                               :1_2:Every:
************ / slAKA base                                                                                      :1_2:Every:
************* / slMultiTerm                                                                                   :1_2:Every:
************** / someSL                                                                                      :1_2:Every:
*************** / pNumAsText                                                                                :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************* \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************ \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                          :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

********** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                          :1_2:Every:
pAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=1:
pAKA> unexpected EVERY
pAKA> expecting other text or number

********* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                             :1_2:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=1:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

******** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_2:Every:
******* / manyIndentation/deeper; calling someIndentation                                                           :1_2:Every:
******** / someIndentation                                                                                         :1_2:Every:
********* / myindented-GoDeeper                                                                                   :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_2:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=1:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

****** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number       :1_2:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=1:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

***** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                   :1_2:Every:
***** / pScenarioRule                                                                                                 :1_2:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=1:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

***** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                        :1_2:Every:
***** / pHornlike                                                                                                     :1_2:Every:
****** / pSrcRef                                                                                                     :1_2:Every:
******* / pRuleLabel                                                                                                :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting §

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                  :1_2:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=1:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

******* \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                             :1_2:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})),[])

****** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})) :1_2:Every:
****** / pHornlike / permute                                                                                         :1_2:Every:
******* / whenCase                                                                                                  :1_2:Every:
******** / whenMeansIf                                                                                             :1_2:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=1:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                               :1_2:Every:
******** / Otherwise                                                                                               :1_2:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=1:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                     :1_2:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=1:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

******* \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                          :1_2:Every:
******* / pHornlike/uponLimb                                                                                        :1_2:Every:
******** / preambleParamText:[Upon]                                                                                :1_2:Every:
********* / $>|                                                                                                   :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting UPON

********* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_2:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=1:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_2:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=1:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

******* \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                   :1_2:Every:
******* / whenCase                                                                                                  :1_2:Every:
******** / whenMeansIf                                                                                             :1_2:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=1:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                               :1_2:Every:
******** / Otherwise                                                                                               :1_2:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=1:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                     :1_2:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=1:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

******* \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                          :1_2:Every:
******* / pHornlike/givenLimb                                                                                       :1_2:Every:
******** / preambleParamText:[Given]                                                                               :1_2:Every:
********* / $>|                                                                                                   :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting GIVEN

********* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_2:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=1:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_2:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=1:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

******* \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                 :1_2:Every:
******* / whenCase                                                                                                  :1_2:Every:
******** / whenMeansIf                                                                                             :1_2:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=1:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                               :1_2:Every:
******** / Otherwise                                                                                               :1_2:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=1:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                     :1_2:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=1:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

******* \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                          :1_2:Every:
******* / pHornlike/ambitious                                                                                       :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                       :1_2:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=1:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                         :1_2:Every:
******* / pHornlike/someStructure                                                                                   :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:Every:
******* / pHornlike/ambitious                                                                                       :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                       :1_2:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=1:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                         :1_2:Every:
******* / pHornlike/someStructure                                                                                   :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:Every:
******* / pHornlike/givenLimb                                                                                       :1_2:Every:
******** / preambleParamText:[Given]                                                                               :1_2:Every:
********* / $>|                                                                                                   :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting GIVEN

********* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_2:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=1:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_2:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=1:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

******* \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                 :1_2:Every:
******* / whenCase                                                                                                  :1_2:Every:
******** / whenMeansIf                                                                                             :1_2:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=1:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                               :1_2:Every:
******** / Otherwise                                                                                               :1_2:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=1:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                     :1_2:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=1:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

******* \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                          :1_2:Every:
******* / pHornlike/uponLimb                                                                                        :1_2:Every:
******** / preambleParamText:[Upon]                                                                                :1_2:Every:
********* / $>|                                                                                                   :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting UPON

********* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_2:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=1:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_2:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=1:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

******* \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                   :1_2:Every:
******* / whenCase                                                                                                  :1_2:Every:
******** / whenMeansIf                                                                                             :1_2:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=1:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

******** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                               :1_2:Every:
******** / Otherwise                                                                                               :1_2:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=1:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

******** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                     :1_2:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=1:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

******* \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                          :1_2:Every:
******* / pHornlike/ambitious                                                                                       :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                       :1_2:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=1:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                         :1_2:Every:
******* / pHornlike/someStructure                                                                                   :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:Every:
******* / pHornlike/ambitious                                                                                       :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                       :1_2:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=1:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                         :1_2:Every:
******* / pHornlike/someStructure                                                                                   :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:Every:
******* / pHornlike/ambitious                                                                                       :1_2:Every:
******** / $>|                                                                                                     :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                       :1_2:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=1:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

******* \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                         :1_2:Every:
******* / pHornlike/someStructure                                                                                   :1_2:Every:
******** / manyIndentation/leaf?                                                                                   :1_2:Every:
********* / relPredNextlineWhen                                                                                   :1_2:Every:
********** / pRelPred optIndentedTuple whenCase                                                                  :1_2:Every:
*********** / optIndentedTuple                                                                                  :1_2:Every:
************ / optIndented                                                                                     :1_2:Every:
************* / pRelPred                                                                                      :1_2:Every:
************** / slRelPred                                                                                   :1_2:Every:
*************** / nested simpleHorn                                                                         :1_2:Every:
**************** > |^|                                                                                     :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

*************** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number    :1_2:Every:
*************** / RPConstraint                                                                              :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

*************** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number         :1_2:Every:
*************** / RPBoolStructR                                                                             :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

*************** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number        :1_2:Every:
*************** / RPMT                                                                                      :1_2:Every:
**************** / $*|                                                                                     :1_2:Every:
***************** / slAKA                                                                                 :1_2:Every:
****************** / $*|                                                                                 :1_2:Every:
******************* / slAKA base                                                                        :1_2:Every:
******************** / slMultiTerm                                                                     :1_2:Every:
********************* / someSL                                                                        :1_2:Every:
********************** / pNumAsText                                                                  :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number           :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number   :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

******************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

******************* \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number   :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number            :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

***************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

*************** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number              :1_2:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=1:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

************* \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                 :1_2:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=1:
optIndented> unexpected EVERY
optIndented> expecting other text or number

************ \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                :1_2:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=1:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

*********** \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number             :1_2:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=1:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

********** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_2:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=1:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
********* / relPredSamelineWhen                                                                                   :1_2:Every:
********** / $*|                                                                                                 :1_2:Every:
*********** / slRelPred                                                                                         :1_2:Every:
************ / nested simpleHorn                                                                               :1_2:Every:
************* > |^|                                                                                           :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=1:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************ \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number          :1_2:Every:
************ / RPConstraint                                                                                    :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=1:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************ \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number               :1_2:Every:
************ / RPBoolStructR                                                                                   :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slMultiTerm                                                                                 :1_2:Every:
*************** / someSL                                                                                    :1_2:Every:
**************** / pNumAsText                                                                              :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                       :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number               :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number            :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=1:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************ \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number              :1_2:Every:
************ / RPMT                                                                                            :1_2:Every:
************* / $*|                                                                                           :1_2:Every:
************** / slAKA                                                                                       :1_2:Every:
*************** / $*|                                                                                       :1_2:Every:
**************** / slAKA base                                                                              :1_2:Every:
***************** / slMultiTerm                                                                           :1_2:Every:
****************** / someSL                                                                              :1_2:Every:
******************* / pNumAsText                                                                        :1_2:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=1:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                 :1_2:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=1:
someSL> unexpected EVERY
someSL> expecting other text or number

****************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number         :1_2:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=1:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

***************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number      :1_2:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=1:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

**************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number         :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=1:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                  :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                      :1_2:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=1:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************ \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                       :1_2:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=1:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

*********** \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                    :1_2:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=1:
$*|> unexpected EVERY
$*|> expecting other text or number

********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_2:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=1:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

********* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number              :1_2:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=1:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number              :1_2:Every:
******** / manyIndentation/deeper; calling someIndentation                                                         :1_2:Every:
********* / someIndentation                                                                                       :1_2:Every:
********** / myindented-GoDeeper                                                                                 :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                               :1_2:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=1:
someIndentation> unexpected EVERY
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                     :1_2:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=1:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (       :1_2:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=1:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

******* \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_2:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=1:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

****** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_2:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=1:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

***** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_2:Every:
***** / pRuleLabel                                                                                                    :1_2:Every:
****** / $>|                                                                                                         :1_2:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=1:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_2:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=1:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_2:Every:
***** / pRule: unwrapping indentation and recursing                                                                   :1_2:Every:
****** / myindented-GoDeeper                                                                                         :1_2:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=1:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

****** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                       :1_2:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=1:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

***** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                 :1_2:Every:
pRule> IN: EVERY ( "person" ) WHO ( "walks" ) OR (  <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=29:
pRule> unexpected (
pRule> expecting EOL or regulative rule

**** \ !Unconsumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                           :1_2:Every:
pRule: unwrapping indentation and recursing> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRule: unwrapping indentation and recursing> MATCH (CERR): (
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=29:
pRule: unwrapping indentation and recursing> unexpected (
pRule: unwrapping indentation and recursing> expecting EOL or regulative rule

*** \ !Consumed Error: pRule: unwrapping indentation and recursing: Unexpected ( Expecting: EOL regulative rule         :1_2:Every:
pRule> IN: ( EVERY ( "person" ) WHO ( "walks" ) OR  <…>
pRule> MATCH (CERR): (
pRule> ERROR:
pRule> offset=29:
pRule> unexpected (
pRule> expecting EOL or regulative rule

** \ !Consumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                                 :1_2:Every:
Loading env

Parser tests
  megaparsing
Loaded env
    indented-1 FAILED [1]

Failures:

  test/Spec.hs:281:7: 
  1) Parser tests, megaparsing, indented-1
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), rkeyword = REvery, who = Just (Any Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["runs"]),Leaf (RPMT ["eats"]),All Nothing [Leaf (RPMT ["drinks"]),Leaf (RPMT ["swallows"])]]), cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}]]
       but parsing failed with error:
       8:3:
       unexpected (
       expecting EOL or regulative rule
       
          EVERY   person              
          WHO     walks               
          OR      runs                
          OR      eats                
          OR               drinks     
                  AND      swallows   
          MUST                        
          ->      ✳ sing              
       
       
       Stream:
       ( EVERY ( "person" ) WHO ( "walks" ) OR ( "runs" ) OR ( "eats" ) OR
           ( ( "drinks" ) AND ( "swallows" ) ) MUST DO "✳"
           ( "✳" "sing" )
       )

  To rerun use: --match "/Parser tests/megaparsing/indented-1/"

Randomized with seed 1586539711

Finished in 0.9650 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

