* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/megaparsing/indented-2/")

* Tokens
EVERY ( "person" ) WHO ( "walks" ) AND
    ( "degustates" MEANS ( "eats" ) OR ( "imbibes" ) ) MUST DO ( "sing" )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / ppp inner                                                                             :2_2:Other "walk:
****************** / expression                                                                          :2_2:Other "walk:
******************* / termIndent p                                                                      :2_2:Other "walk:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=7:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "walk:
********************* > |<|                                                                           :2_2:Other "walk:
********************* > |<* starting                                                                  :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:And:
*********************** / expression                                                              :3_1:And:
************************ / termIndent p                                                          :3_1:And:
************************* / term p/1a:label ends directly above next line                       :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1a:label ends directly above next line> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1c:label ends to the right of line below                     :3_1:And:
************************** > |<|                                                               :3_1:And:
************************** > |<* starting                                                      :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1c:label ends to the right of line below> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/notLabelTerm                                                 :3_1:And:
************************** / term p/2:someIndentation expr p                                   :3_1:And:
*************************** / someIndentation                                                 :3_1:And:
**************************** / myindented-GoDeeper                                           :3_1:And:
myindented-GoDeeper> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :3_1:And:
someIndentation> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected AND
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :3_1:And:
term p/2:someIndentation expr p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :3_1:And:
************************** / term p/3:plain p                                                  :3_1:And:
*************************** / pRelPred                                                        :3_1:And:
**************************** / slRelPred                                                     :3_1:And:
***************************** / nested simpleHorn                                           :3_1:And:
****************************** > |^|                                                       :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
nested simpleHorn> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPConstraint                                                :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPConstraint> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPBoolStructR                                               :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPBoolStructR> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPMT                                                        :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slAKA                                                   :3_1:And:
******************************** / $*|                                                   :3_1:And:
********************************* / slAKA base                                          :3_1:And:
********************************** / slMultiTerm                                       :3_1:And:
*********************************** / someSL                                          :3_1:And:
************************************ / pNumAsText                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
slAKA base> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected AND
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
slAKA> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected AND
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPMT> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected AND
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :3_1:And:
slRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected AND
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :3_1:And:
pRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :3_1:And:
term p/3:plain p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :3_1:And:
term p/notLabelTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :3_1:And:
termIndent p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :3_1:And:
expression> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected AND
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression     :3_1:And:
ppp inner> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected AND
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression        :3_1:And:
********************** / withPrePost                                                               :3_1:And:
*********************** > |<* starting                                                            :3_1:And:
*********************** / $*|                                                                     :3_1:And:
************************ / pre part                                                              :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text   :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text          :3_1:And:
withPrePost> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text    :3_1:And:
********************** / $*|                                                                       :3_1:And:
*********************** / pre part                                                                :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text     :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text            :3_1:And:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=7:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=7:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=7:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=7:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=7:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=7:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=7:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=7:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=7:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "walk:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "walk:
********************** / someIndentation                                                             :2_2:Other "walk:
*********************** / myindented-GoDeeper                                                       :2_2:Other "walk:
myindented-GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: (   :2_2:Other "walk:
someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (         :2_2:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_2:Other "walk:
********************* / term p/3:plain p                                                              :2_2:Other "walk:
********************** / pRelPred                                                                    :2_2:Other "walk:
*********************** / slRelPred                                                                 :2_2:Other "walk:
************************ / nested simpleHorn                                                       :2_2:Other "walk:
************************* > |^|                                                                   :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************* \ |^| deeps has returned ([()],-1)                                    :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :3_1:And:
************************ / RPConstraint                                                            :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slAKA                                                               :2_2:Other "walk:
*************************** / $*|                                                               :2_2:Other "walk:
**************************** / slAKA base                                                      :2_2:Other "walk:
***************************** / slMultiTerm                                                   :2_2:Other "walk:
****************************** / someSL                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

****************************** \ someSL has returned (["walks"],0)                            :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

***************************** \ slMultiTerm has returned (["walks"],0)                         :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

**************************** \ slAKA base has returned (["walks"],0)                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                     :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************** \ slAKA has returned (["walks"],0)                                     :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************ \ RPMT has returned (RPMT ["walks"],0)                                     :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

*********************** \ slRelPred has returned (RPMT ["walks"],0)                                  :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                       :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************** \ pRelPred has returned RPMT ["walks"]                                         :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                          :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                         :3_2:UnDeeper:
termIndent p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                  :3_2:UnDeeper:
******************* / binary(Or)                                                                         :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :3_2:UnDeeper:
******************* / binary(And)                                                                        :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :3_2:UnDeeper:
******************* / binary(SetLess)                                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :3_2:UnDeeper:
******************* / binary(SetPlus)                                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :3_2:UnDeeper:
expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ expression has returned MyLeaf (RPMT ["walks"])                                      :3_2:UnDeeper:
ppp inner> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["walks"])                                         :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented-UnDeeper                                                                      :3_2:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
termIndent p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["walks"])                                             :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                                   :3_1:And:
************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / ppp inner                                                                             :3_2:Other "degu:
****************** / expression                                                                          :3_2:Other "degu:
******************* / termIndent p                                                                      :3_2:Other "degu:
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
********************** / pNumAsText                                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number           :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (CERR): "degustates"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number      :4_2:Means:
term p/1a:label ends directly above next line> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1a:label ends directly above next line> MATCH (CERR): "degustates"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :4_2:Means:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / matching EOL                                                                  :4_2:Means:
matching EOL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL              :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "degustates"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :4_2:Means:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "degu:
********************* > |<|                                                                           :3_2:Other "degu:
********************* > |<* starting                                                                  :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / |<*/parent                                                                    :4_2:Means:
********************** > |<*/recurse                                                                 :4_2:Means:
********************** / |<*/base                                                                    :4_2:Means:
*********************** / ppp inner                                                                 :4_2:Means:
************************ / expression                                                              :4_2:Means:
************************* / termIndent p                                                          :4_2:Means:
************************** / term p/1a:label ends directly above next line                       :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1b:label ends to the left of line below, with EOL            :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1c:label ends to the right of line below                     :4_2:Means:
*************************** > |<|                                                               :4_2:Means:
*************************** > |<* starting                                                      :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/notLabelTerm                                                 :4_2:Means:
*************************** / term p/2:someIndentation expr p                                   :4_2:Means:
**************************** / someIndentation                                                 :4_2:Means:
***************************** / myindented-GoDeeper                                           :4_2:Means:
myindented-GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :4_2:Means:
someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :4_2:Means:
term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :4_2:Means:
*************************** / term p/3:plain p                                                  :4_2:Means:
**************************** / pRelPred                                                        :4_2:Means:
***************************** / slRelPred                                                     :4_2:Means:
****************************** / nested simpleHorn                                           :4_2:Means:
******************************* > |^|                                                       :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPConstraint                                                :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPBoolStructR                                               :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPMT                                                        :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slAKA                                                   :4_2:Means:
********************************* / $*|                                                   :4_2:Means:
********************************** / slAKA base                                          :4_2:Means:
*********************************** / slMultiTerm                                       :4_2:Means:
************************************ / someSL                                          :4_2:Means:
************************************* / pNumAsText                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :4_2:Means:
slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :4_2:Means:
termIndent p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :4_2:Means:
expression> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression   :4_2:Means:
ppp inner> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression      :4_2:Means:
*********************** / withPrePost                                                               :4_2:Means:
************************ > |<* starting                                                            :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / pre part                                                              :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text        :4_2:Means:
withPrePost> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text  :4_2:Means:
*********************** / $*|                                                                       :4_2:Means:
************************ / pre part                                                                :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text   :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text          :4_2:Means:
|<*/base> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :4_2:Means:
|<*/parent> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :4_2:Means:
term p/1c:label ends to the right of line below> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "degustates"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :4_2:Means:
******************** / term p/notLabelTerm                                                             :3_2:Other "degu:
********************* / term p/2:someIndentation expr p                                               :3_2:Other "degu:
********************** / someIndentation                                                             :3_2:Other "degu:
*********************** / myindented-GoDeeper                                                       :3_2:Other "degu:
myindented-GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected "degustates"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "degustates" Expecting: (    :3_2:Other "degu:
term p/2:someIndentation expr p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected "degustates"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
********************* / term p/3:plain p                                                              :3_2:Other "degu:
********************** / pRelPred                                                                    :3_2:Other "degu:
*********************** / slRelPred                                                                 :3_2:Other "degu:
************************ / nested simpleHorn                                                       :3_2:Other "degu:
************************* > |^|                                                                   :3_2:Other "degu:
************************* / $*|                                                                   :3_2:Other "degu:
************************** / slMultiTerm                                                         :3_2:Other "degu:
*************************** / someSL                                                            :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

*************************** \ someSL has returned (["degustates"],0)                            :4_2:Means:
slMultiTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slMultiTerm> MATCH (COK): "degustates"
slMultiTerm> VALUE: ((["degustates"],0),[])

************************** \ slMultiTerm has returned (["degustates"],0)                         :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

************************* \ $*| has returned (["degustates"],0)                                   :4_2:Means:
************************* / |^| deeps                                                             :4_2:Means:
|^| deeps> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

************************* \ |^| deeps has returned ([],0)                                         :4_2:Means:
************************* / pBSR                                                                   :4_3:GoDeeper:
************************** / ppp inner                                                            :4_3:GoDeeper:
*************************** / expression                                                         :4_3:GoDeeper:
**************************** / termIndent p                                                     :4_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :4_3:GoDeeper:
****************************** > |<|                                                          :4_3:GoDeeper:
****************************** > |<* starting                                                 :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :4_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :4_3:GoDeeper:
******************************* / someIndentation                                            :4_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :4_3:Other "eats:
******************************** / manyIndentation/leaf?                                     :4_3:Other "eats:
********************************* / ppp inner                                               :4_3:Other "eats:
********************************** / expression                                            :4_3:Other "eats:
*********************************** / termIndent p                                        :4_3:Other "eats:
************************************ / term p/1a:label ends directly above next line     :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
************************************** / pNumAsText                                     :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / matching EOL                                     :5_3:UnDeeper:
matching EOL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=14:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :4_3:Other "eats:
************************************* > |<|                                             :4_3:Other "eats:
************************************* > |<* starting                                    :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / |<*/parent                                       :5_3:UnDeeper:
************************************** > |<*/recurse                                    :5_3:UnDeeper:
************************************** / ppp inner                                   :5_2:Or:
*************************************** / expression                                :5_2:Or:
**************************************** / termIndent p                            :5_2:Or:
***************************************** / term p/1a:label ends directly above next line :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1b:label ends to the left of line below, with EOL :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1c:label ends to the right of line below :5_2:Or:
****************************************** > |<|                                 :5_2:Or:
****************************************** > |<* starting                        :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/notLabelTerm                   :5_2:Or:
****************************************** / term p/2:someIndentation expr p     :5_2:Or:
******************************************* / someIndentation                   :5_2:Or:
******************************************** / myindented-GoDeeper             :5_2:Or:
myindented-GoDeeper> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected OR
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
****************************************** / term p/3:plain p                    :5_2:Or:
******************************************* / pRelPred                          :5_2:Or:
******************************************** / slRelPred                       :5_2:Or:
********************************************* / nested simpleHorn             :5_2:Or:
********************************************** > |^|                         :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPConstraint                  :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=15:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPBoolStructR                 :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=15:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPMT                          :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slAKA                     :5_2:Or:
************************************************ / $*|                     :5_2:Or:
************************************************* / slAKA base            :5_2:Or:
************************************************** / slMultiTerm         :5_2:Or:
*************************************************** / someSL            :5_2:Or:
**************************************************** / pNumAsText      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=15:
slAKA base> unexpected OR
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=15:
slAKA> unexpected OR
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=15:
RPMT> unexpected OR
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=15:
slRelPred> unexpected OR
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=15:
pRelPred> unexpected OR
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=15:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=15:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=15:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=15:
expression> unexpected OR
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :5_2:Or:
ppp inner> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> unexpected OR
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :5_2:Or:
************************************** / withPrePost                                 :5_2:Or:
*************************************** > |<* starting                              :5_2:Or:
*************************************** / $*|                                       :5_2:Or:
**************************************** / pre part                                :5_2:Or:
pre part> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
withPrePost> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=15:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / $*|                                         :5_2:Or:
*************************************** / pre part                                  :5_2:Or:
pre part> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / |<*/base                                       :5_3:UnDeeper:
*************************************** / ppp inner                                    :5_3:UnDeeper:
**************************************** / expression                                 :5_3:UnDeeper:
***************************************** / termIndent p                             :5_3:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :5_3:UnDeeper:
******************************************* > |<|                                  :5_3:UnDeeper:
******************************************* > |<* starting                         :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/notLabelTerm                    :5_3:UnDeeper:
******************************************* / term p/2:someIndentation expr p      :5_3:UnDeeper:
******************************************** / someIndentation                    :5_3:UnDeeper:
********************************************* / myindented-GoDeeper              :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / term p/3:plain p                     :5_3:UnDeeper:
******************************************** / pRelPred                           :5_3:UnDeeper:
********************************************* / slRelPred                        :5_3:UnDeeper:
********************************************** / nested simpleHorn              :5_3:UnDeeper:
*********************************************** > |^|                          :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPConstraint                   :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPBoolStructR                  :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPMT                           :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slAKA                      :5_3:UnDeeper:
************************************************* / $*|                      :5_3:UnDeeper:
************************************************** / slAKA base             :5_3:UnDeeper:
*************************************************** / slMultiTerm          :5_3:UnDeeper:
**************************************************** / someSL             :5_3:UnDeeper:
***************************************************** / pNumAsText       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=14:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :5_3:UnDeeper:
ppp inner> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :5_3:UnDeeper:
*************************************** / withPrePost                                  :5_3:UnDeeper:
**************************************** > |<* starting                               :5_3:UnDeeper:
**************************************** / $*|                                        :5_3:UnDeeper:
***************************************** / pre part                                 :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
withPrePost> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
*************************************** / $*|                                          :5_3:UnDeeper:
**************************************** / pre part                                   :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
|<*/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=14:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=15:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
************************************ / term p/notLabelTerm                               :4_3:Other "eats:
************************************* / term p/2:someIndentation expr p                 :4_3:Other "eats:
************************************** / someIndentation                               :4_3:Other "eats:
*************************************** / myindented-GoDeeper                         :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: ( :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: ( :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
************************************* / term p/3:plain p                                :4_3:Other "eats:
************************************** / pRelPred                                      :4_3:Other "eats:
*************************************** / slRelPred                                   :4_3:Other "eats:
**************************************** / nested simpleHorn                         :4_3:Other "eats:
***************************************** > |^|                                     :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |^| deeps                                :5_3:UnDeeper:
|^| deeps> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

***************************************** \ |^| deeps has returned ([()],-1)      :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
**************************************** / RPConstraint                              :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPBoolStructR                             :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPMT                                      :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slAKA                                 :4_3:Other "eats:
******************************************* / $*|                                 :4_3:Other "eats:
******************************************** / slAKA base                        :4_3:Other "eats:
********************************************* / slMultiTerm                     :4_3:Other "eats:
********************************************** / someSL                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

********************************************** \ someSL has returned (["eats"],0) :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

********************************************* \ slMultiTerm has returned (["eats"],0) :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

******************************************** \ slAKA base has returned (["eats"],0) :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

******************************************* \ $*| has returned (["eats"],0)        :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional akapart             :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / PAKA/akapart                 :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
************************************************* / Aka Token                :5_3:UnDeeper:
Aka Token> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=14:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=14:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional typically           :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / typically                    :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=14:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :5_3:UnDeeper:
******************************************* > pAKA: entityalias = Nothing          :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

****************************************** \ slAKA has returned (["eats"],0)        :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

**************************************** \ RPMT has returned (RPMT ["eats"],0)        :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

*************************************** \ slRelPred has returned (RPMT ["eats"],0)     :5_3:UnDeeper:
*************************************** / undeepers                                    :5_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
**************************************** > sameLine: success!                         :5_3:UnDeeper:
undeepers> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************************** \ pRelPred has returned RPMT ["eats"]            :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])     :5_3:UnDeeper:
*********************************** / binary(Or)                                           :5_3:UnDeeper:
binary(Or)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :5_3:UnDeeper:
*********************************** / binary(And)                                          :5_3:UnDeeper:
binary(And)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :5_3:UnDeeper:
*********************************** / binary(SetLess)                                      :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :5_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :5_3:UnDeeper:
expression> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["eats"])         :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["eats"])            :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])  :5_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper               :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"]) :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                :5_2:Or:
**************************** / binary(Or)                                                      :5_2:Or:
binary(Or)> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**************************** \ binary(Or) has returned Or                                       :5_3:GoDeeper:
**************************** / termIndent p                                                     :5_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :5_3:GoDeeper:
****************************** > |<|                                                          :5_3:GoDeeper:
****************************** > |<* starting                                                 :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :5_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :5_3:GoDeeper:
******************************* / someIndentation                                            :5_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :5_3:GoDeeper:
myindented-GoDeeper> IN: ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :5_3:Other "imbi:
******************************** / manyIndentation/leaf?                                     :5_3:Other "imbi:
********************************* / ppp inner                                               :5_3:Other "imbi:
********************************** / expression                                            :5_3:Other "imbi:
*********************************** / termIndent p                                        :5_3:Other "imbi:
************************************ / term p/1a:label ends directly above next line     :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
************************************** / pNumAsText                                   :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (CERR): "imbibes"
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (CERR): "imbibes"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_2:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)               :6_2:UnDeeper:
************************************* / matching EOL                                   :6_2:UnDeeper:
matching EOL> IN: ) ) MUST DO ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=18:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "imbibes"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_2:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :5_3:Other "imbi:
************************************* > |<|                                             :5_3:Other "imbi:
************************************* > |<* starting                                    :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)               :6_2:UnDeeper:
************************************* / |<*/parent                                     :6_2:UnDeeper:
************************************** > |<*/recurse                                  :6_2:UnDeeper:
************************************** / ppp inner                                 :6_1:Must:
*************************************** / expression                              :6_1:Must:
**************************************** / termIndent p                          :6_1:Must:
***************************************** / term p/1a:label ends directly above next line :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1a:label ends directly above next line> IN: MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=20:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/1b:label ends to the left of line below, with EOL :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=20:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/1c:label ends to the right of line below :6_1:Must:
****************************************** > |<|                               :6_1:Must:
****************************************** > |<* starting                      :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1c:label ends to the right of line below> IN: MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/notLabelTerm                 :6_1:Must:
****************************************** / term p/2:someIndentation expr p   :6_1:Must:
******************************************* / someIndentation                 :6_1:Must:
******************************************** / myindented-GoDeeper           :6_1:Must:
myindented-GoDeeper> IN: MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :6_1:Must:
someIndentation> IN: MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected MUST
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :6_1:Must:
term p/2:someIndentation expr p> IN: MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :6_1:Must:
****************************************** / term p/3:plain p                  :6_1:Must:
******************************************* / pRelPred                        :6_1:Must:
******************************************** / slRelPred                     :6_1:Must:
********************************************* / nested simpleHorn           :6_1:Must:
********************************************** > |^|                       :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
nested simpleHorn> IN: MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=20:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPConstraint                :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPConstraint> IN: MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=20:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPBoolStructR               :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPBoolStructR> IN: MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=20:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPMT                        :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slAKA                   :6_1:Must:
************************************************ / $*|                   :6_1:Must:
************************************************* / slAKA base          :6_1:Must:
************************************************** / slMultiTerm       :6_1:Must:
*************************************************** / someSL          :6_1:Must:
**************************************************** / pNumAsText    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
slAKA base> IN: MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=20:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
slAKA> IN: MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=20:
slAKA> unexpected MUST
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPMT> IN: MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=20:
RPMT> unexpected MUST
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :6_1:Must:
slRelPred> IN: MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=20:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :6_1:Must:
pRelPred> IN: MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=20:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/3:plain p> IN: MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=20:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/notLabelTerm> IN: MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=20:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :6_1:Must:
termIndent p> IN: MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=20:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :6_1:Must:
expression> IN: MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=20:
expression> unexpected MUST
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :6_1:Must:
ppp inner> IN: MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=20:
ppp inner> unexpected MUST
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :6_1:Must:
************************************** / withPrePost                               :6_1:Must:
*************************************** > |<* starting                            :6_1:Must:
*************************************** / $*|                                     :6_1:Must:
**************************************** / pre part                              :6_1:Must:
pre part> IN: MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=20:
pre part> unexpected MUST
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :6_1:Must:
withPrePost> IN: MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=20:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :6_1:Must:
************************************** / $*|                                       :6_1:Must:
*************************************** / pre part                                :6_1:Must:
pre part> IN: MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=20:
pre part> unexpected MUST
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :6_1:Must:
************************************** / |<*/base                                     :6_2:UnDeeper:
*************************************** / ppp inner                                  :6_2:UnDeeper:
**************************************** / expression                               :6_2:UnDeeper:
***************************************** / termIndent p                           :6_2:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :6_2:UnDeeper:
******************************************* > |<|                                :6_2:UnDeeper:
******************************************* > |<* starting                       :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/notLabelTerm                  :6_2:UnDeeper:
******************************************* / term p/2:someIndentation expr p    :6_2:UnDeeper:
******************************************** / someIndentation                  :6_2:UnDeeper:
********************************************* / myindented-GoDeeper            :6_2:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=18:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_2:UnDeeper:
someIndentation> IN: ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=18:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / term p/3:plain p                   :6_2:UnDeeper:
******************************************** / pRelPred                         :6_2:UnDeeper:
********************************************* / slRelPred                      :6_2:UnDeeper:
********************************************** / nested simpleHorn            :6_2:UnDeeper:
*********************************************** > |^|                        :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
nested simpleHorn> IN: ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=18:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPConstraint                 :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPConstraint> IN: ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPBoolStructR                :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPBoolStructR> IN: ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPMT                         :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slAKA                    :6_2:UnDeeper:
************************************************* / $*|                    :6_2:UnDeeper:
************************************************** / slAKA base           :6_2:UnDeeper:
*************************************************** / slMultiTerm        :6_2:UnDeeper:
**************************************************** / someSL           :6_2:UnDeeper:
***************************************************** / pNumAsText     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA base> IN: ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=18:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA> IN: ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=18:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPMT> IN: ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=18:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slRelPred> IN: ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=18:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
pRelPred> IN: ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=18:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/3:plain p> IN: ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=18:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=18:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_2:UnDeeper:
termIndent p> IN: ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=18:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_2:UnDeeper:
expression> IN: ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=18:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_2:UnDeeper:
ppp inner> IN: ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=18:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_2:UnDeeper:
*************************************** / withPrePost                                :6_2:UnDeeper:
**************************************** > |<* starting                             :6_2:UnDeeper:
**************************************** / $*|                                      :6_2:UnDeeper:
***************************************** / pre part                               :6_2:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
withPrePost> IN: ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=18:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
*************************************** / $*|                                        :6_2:UnDeeper:
**************************************** / pre part                                 :6_2:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
|<*/base> IN: ) ) MUST DO ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=18:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_2:UnDeeper:
|<*/parent> IN: ) ) MUST DO ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=20:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (CERR): "imbibes"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :6_2:UnDeeper:
************************************ / term p/notLabelTerm                               :5_3:Other "imbi:
************************************* / term p/2:someIndentation expr p                 :5_3:Other "imbi:
************************************** / someIndentation                               :5_3:Other "imbi:
*************************************** / myindented-GoDeeper                         :5_3:Other "imbi:
myindented-GoDeeper> IN: "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected "imbibes"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
someIndentation> IN: "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected "imbibes"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
term p/2:someIndentation expr p> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected "imbibes"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
************************************* / term p/3:plain p                                :5_3:Other "imbi:
************************************** / pRelPred                                      :5_3:Other "imbi:
*************************************** / slRelPred                                   :5_3:Other "imbi:
**************************************** / nested simpleHorn                         :5_3:Other "imbi:
***************************************** > |^|                                     :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |^| deeps                              :6_2:UnDeeper:
|^| deeps> IN: ) ) MUST DO ( "sing" )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************************** \ |^| deeps has returned ([(),()],-2) :6_1:Must:
nested simpleHorn> IN: "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (CERR): "imbibes" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=20:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :6_1:Must:
**************************************** / RPConstraint                              :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPConstraint> IN: "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (CERR): "imbibes"
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
**************************************** / RPBoolStructR                             :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPBoolStructR> IN: "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (CERR): "imbibes"
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
**************************************** / RPMT                                      :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slAKA                                 :5_3:Other "imbi:
******************************************* / $*|                                 :5_3:Other "imbi:
******************************************** / slAKA base                        :5_3:Other "imbi:
********************************************* / slMultiTerm                     :5_3:Other "imbi:
********************************************** / someSL                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

********************************************** \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

********************************************* \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
slAKA base> IN: "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (COK): "imbibes"
slAKA base> VALUE: ((["imbibes"],0),[])

******************************************** \ slAKA base has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

******************************************* \ $*| has returned (["imbibes"],0)   :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional akapart           :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / PAKA/akapart               :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
************************************************* / Aka Token              :6_2:UnDeeper:
Aka Token> IN: ) ) MUST DO ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=18:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_2:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_2:UnDeeper:
PAKA/akapart> IN: ) ) MUST DO ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=18:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_2:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST DO ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional typically         :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / typically                  :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
typically> IN: ) ) MUST DO ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=18:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST DO ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :6_2:UnDeeper:
slAKA> IN: "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (COK): "imbibes"
slAKA> VALUE: ((["imbibes"],0),[])

****************************************** \ slAKA has returned (["imbibes"],0)   :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
RPMT> IN: "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (COK): "imbibes"
RPMT> VALUE: ((RPMT ["imbibes"],0),[])

**************************************** \ RPMT has returned (RPMT ["imbibes"],0)   :6_2:UnDeeper:
slRelPred> IN: "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (COK): "imbibes"
slRelPred> VALUE: ((RPMT ["imbibes"],0),[])

*************************************** \ slRelPred has returned (RPMT ["imbibes"],0) :6_2:UnDeeper:
*************************************** / undeepers                                  :6_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
**************************************** > sameLine: success!                       :6_2:UnDeeper:
undeepers> IN: ) ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :6_2:UnDeeper:
pRelPred> IN: "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (COK): "imbibes"
pRelPred> VALUE: (RPMT ["imbibes"],[])

************************************** \ pRelPred has returned RPMT ["imbibes"]       :6_2:UnDeeper:
term p/3:plain p> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (COK): "imbibes"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (COK): "imbibes"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
termIndent p> IN: "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (COK): "imbibes"
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
*********************************** / binary(Or)                                         :6_2:UnDeeper:
binary(Or)> IN: ) ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :6_2:UnDeeper:
*********************************** / binary(And)                                        :6_2:UnDeeper:
binary(And)> IN: ) ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :6_2:UnDeeper:
*********************************** / binary(SetLess)                                    :6_2:UnDeeper:
binary(SetLess)> IN: ) ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :6_2:UnDeeper:
*********************************** / binary(SetPlus)                                    :6_2:UnDeeper:
binary(SetPlus)> IN: ) ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :6_2:UnDeeper:
expression> IN: "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (COK): "imbibes"
expression> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["imbibes"])    :6_2:UnDeeper:
ppp inner> IN: "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (COK): "imbibes"
ppp inner> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["imbibes"])       :6_2:UnDeeper:
manyIndentation/leaf?> IN: "imbibes" ) ) MUST DO ( "sing" )
manyIndentation/leaf?> MATCH (COK): "imbibes"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
******************************** / myindented-UnDeeper                                      :6_2:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper                  :6_3:UnDeeper:
someIndentation> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (COK): ( "imbibes" )
someIndentation> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["imbibes"])       :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (COK): ( "imbibes" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["imbibes"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (COK): ( "imbibes" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"])       :6_3:UnDeeper:
termIndent p> IN: ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (COK): ( "imbibes" )
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])                :6_3:UnDeeper:
**************************** / binary(Or)                                                         :6_3:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR          :6_3:UnDeeper:
**************************** / binary(And)                                                        :6_3:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND        :6_3:UnDeeper:
**************************** / binary(SetLess)                                                    :6_3:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS   :6_3:UnDeeper:
**************************** / binary(SetPlus)                                                    :6_3:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS   :6_3:UnDeeper:
expression> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
expression> MATCH (COK): ( "eats" ) OR ( "imbibes" )
expression> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[])

*************************** \ expression has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :6_3:UnDeeper:
ppp inner> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
ppp inner> MATCH (COK): ( "eats" ) OR ( "imbibes" )
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[])

************************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :6_3:UnDeeper:
pBSR> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pBSR> MATCH (COK): ( "eats" ) OR ( "imbibes" )
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])],[])

************************* \ pBSR has returned Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])] :6_3:UnDeeper:
************************* > constructed simpleHorn; running tellIdFirst                              :6_3:UnDeeper:
nested simpleHorn> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************************ \ nested simpleHorn has returned (RPMT ["degustates"],0)                     :6_3:UnDeeper:
slRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********************** \ slRelPred has returned (RPMT ["degustates"],0)                               :6_3:UnDeeper:
*********************** / undeepers                                                                    :6_3:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :6_3:UnDeeper:
************************ > sameLine: success!                                                         :6_3:UnDeeper:
undeepers> IN: ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                    :6_3:UnDeeper:
pRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> VALUE: (RPMT ["degustates"],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************** \ pRelPred has returned RPMT ["degustates"]                                      :6_3:UnDeeper:
term p/3:plain p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["degustates"])                       :6_3:UnDeeper:
term p/notLabelTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                      :6_3:UnDeeper:
termIndent p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************* \ termIndent p has returned MyLeaf (RPMT ["degustates"])                               :6_3:UnDeeper:
******************* / binary(Or)                                                                           :6_3:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :6_3:UnDeeper:
******************* / binary(And)                                                                          :6_3:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :6_3:UnDeeper:
******************* / binary(SetLess)                                                                      :6_3:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :6_3:UnDeeper:
******************* / binary(SetPlus)                                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :6_3:UnDeeper:
expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

****************** \ expression has returned MyLeaf (RPMT ["degustates"])                                   :6_3:UnDeeper:
ppp inner> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

***************** \ ppp inner has returned MyLeaf (RPMT ["degustates"])                                      :6_3:UnDeeper:
manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["degustates"])                            :6_3:UnDeeper:
**************** / myindented-UnDeeper                                                                        :6_3:UnDeeper:
myindented-UnDeeper> IN: ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :6_1:Must:
someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*************** \ someIndentation has returned MyLeaf (RPMT ["degustates"])                               :6_1:Must:
term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["degustates"])                 :6_1:Must:
term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                               :6_1:Must:
termIndent p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************ \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                        :6_1:Must:
************ / binary(Or)                                                                                    :6_1:Must:
binary(Or)> IN: MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=20:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :6_1:Must:
************ / binary(And)                                                                                   :6_1:Must:
binary(And)> IN: MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=20:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :6_1:Must:
************ / binary(SetLess)                                                                               :6_1:Must:
binary(SetLess)> IN: MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=20:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :6_1:Must:
************ / binary(SetPlus)                                                                               :6_1:Must:
binary(SetPlus)> IN: MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=20:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :6_1:Must:
expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********** \ expression has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]            :6_1:Must:
ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********** \ ppp inner has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]               :6_1:Must:
pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********* \ pBSR has returned All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]                    :6_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :6_1:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******* \ manyIndentation/leaf? has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :6_1:Must:
******* / WHERE                                                                                                   :6_1:Must:
WHERE> IN: MUST DO ( "sing" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=20:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :6_1:Must:
******* / preambleParamText:[Having]                                                                              :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :6_1:Must:
preambleParamText:[Having]> IN: MUST DO ( "sing" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=20:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :6_1:Must:
******* / preambleParamText:[Given]                                                                               :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :6_1:Must:
preambleParamText:[Given]> IN: MUST DO ( "sing" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=20:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :6_1:Must:
******* / preambleParamText:[Upon]                                                                                :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :6_1:Must:
preambleParamText:[Upon]> IN: MUST DO ( "sing" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=20:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :6_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :6_1:Must:
preambleBoolStructR [Unless]> IN: MUST DO ( "sing" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=20:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :6_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Must:
preambleBoolStructR [When,If]> IN: MUST DO ( "sing" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=20:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :6_1:Must:
******* / pDT                                                                                                     :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                :7_1:Do:
******** / |>| calling $>>                                                                                       :7_1:Do:
********* / |>>/recurse                                                                                         :7_1:Do:
|>>/recurse> IN: DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected DO
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected DO Expecting: (                                          :7_1:Do:
********* / |>>/base                                                                                            :7_1:Do:
********** / pTemporal/eventually                                                                              :7_1:Do:
pTemporal/eventually> IN: DO ( "sing" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=21:
pTemporal/eventually> unexpected DO
pTemporal/eventually> expecting EVENTUALLY

********** \ !Unconsumed Error: pTemporal/eventually: Unexpected DO Expecting: EVENTUALLY                      :7_1:Do:
********** / pTemporal/specifically                                                                            :7_1:Do:
*********** / $>|                                                                                             :7_1:Do:
$>|> IN: DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected DO
$>|> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: BEFORE AFTER BY ON                             :7_1:Do:
pTemporal/specifically> IN: DO ( "sing" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=21:
pTemporal/specifically> unexpected DO
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

********** \ !Unconsumed Error: pTemporal/specifically: Unexpected DO Expecting: BEFORE AFTER BY ON            :7_1:Do:
********** / pTemporal/vaguely                                                                                 :7_1:Do:
pTemporal/vaguely> IN: DO ( "sing" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=21:
pTemporal/vaguely> unexpected DO
pTemporal/vaguely> expecting Other text

********** \ !Unconsumed Error: pTemporal/vaguely: Unexpected DO Expecting: Other text                         :7_1:Do:
********** > |>>/base got Nothing                                                                              :7_1:Do:
|>>/base> IN: DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                   :7_1:Do:
|>| calling $>>> IN: DO ( "sing" )
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                              :7_1:Do:
******** / undeepers                                                                                             :7_1:Do:
********* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                              :7_1:Do:
********* > sameLine: success!                                                                                  :7_1:Do:
undeepers> IN: DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :7_1:Do:
pDT> IN: MUST DO ( "sing" )
pDT> MATCH (COK): MUST
pDT> VALUE: ((DMust,Nothing),[])

******* \ pDT has returned (DMust,Nothing)                                                                        :7_1:Do:
******* / WHERE                                                                                                   :7_1:Do:
WHERE> IN: DO ( "sing" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=21:
WHERE> unexpected DO
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                                :7_1:Do:
******* / preambleParamText:[Having]                                                                              :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected DO
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                               :7_1:Do:
preambleParamText:[Having]> IN: DO ( "sing" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=21:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                          :7_1:Do:
******* / preambleParamText:[Given]                                                                               :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected DO
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                                :7_1:Do:
preambleParamText:[Given]> IN: DO ( "sing" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=21:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                            :7_1:Do:
******* / preambleParamText:[Upon]                                                                                :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected DO
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                                 :7_1:Do:
preambleParamText:[Upon]> IN: DO ( "sing" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=21:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                              :7_1:Do:
******* / preambleBoolStructR [Unless]                                                                            :7_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "sing" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=21:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                        :7_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :7_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "sing" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=21:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DO Expecting: IF WHEN                      :7_1:Do:
******* / pDoAction/Do                                                                                            :7_1:Do:
pDoAction/Do> IN: DO ( "sing" )
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :7_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :7_2:GoDeeper:
******** / pAction calling pParamText                                                                             :7_2:GoDeeper:
********* / pParamText                                                                                           :7_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :7_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :7_2:GoDeeper:
************ / slAKA                                                                                          :7_2:GoDeeper:
************* / $*|                                                                                          :7_2:GoDeeper:
************** / slAKA base                                                                                 :7_2:GoDeeper:
*************** / slKeyValues                                                                              :7_2:GoDeeper:
**************** / $*|                                                                                    :7_2:GoDeeper:
***************** / someSL                                                                               :7_2:GoDeeper:
****************** / pNumAsText                                                                         :7_2:GoDeeper:
pNumAsText> IN: ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :7_2:GoDeeper:
someSL> IN: ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :7_2:GoDeeper:
$*|> IN: ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :7_2:GoDeeper:
slKeyValues> IN: ( "sing" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=22:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :7_2:GoDeeper:
slAKA base> IN: ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :7_2:GoDeeper:
$*|> IN: ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :7_2:GoDeeper:
slAKA> IN: ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :7_2:GoDeeper:
pKeyValuesAka> IN: ( "sing" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=22:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :7_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sing" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=22:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :7_2:GoDeeper:
pParamText> IN: ( "sing" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=22:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :7_2:GoDeeper:
pAction calling pParamText> IN: ( "sing" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=22:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :7_2:GoDeeper:
pDoAction/pAction> IN: ( "sing" )
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=22:
pDoAction/pAction> unexpected (
pDoAction/pAction> expecting other text or number

******* \ !Unconsumed Error: pDoAction/pAction: Unexpected ( Expecting: other text or number                       :7_2:GoDeeper:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=22:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting other text or number

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: other text or number :7_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / ppp inner                                                                             :2_2:Other "walk:
****************** / expression                                                                          :2_2:Other "walk:
******************* / termIndent p                                                                      :2_2:Other "walk:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=7:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "walk:
********************* > |<|                                                                           :2_2:Other "walk:
********************* > |<* starting                                                                  :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:And:
*********************** / expression                                                              :3_1:And:
************************ / termIndent p                                                          :3_1:And:
************************* / term p/1a:label ends directly above next line                       :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1a:label ends directly above next line> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1c:label ends to the right of line below                     :3_1:And:
************************** > |<|                                                               :3_1:And:
************************** > |<* starting                                                      :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1c:label ends to the right of line below> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/notLabelTerm                                                 :3_1:And:
************************** / term p/2:someIndentation expr p                                   :3_1:And:
*************************** / someIndentation                                                 :3_1:And:
**************************** / myindented-GoDeeper                                           :3_1:And:
myindented-GoDeeper> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :3_1:And:
someIndentation> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected AND
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :3_1:And:
term p/2:someIndentation expr p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :3_1:And:
************************** / term p/3:plain p                                                  :3_1:And:
*************************** / pRelPred                                                        :3_1:And:
**************************** / slRelPred                                                     :3_1:And:
***************************** / nested simpleHorn                                           :3_1:And:
****************************** > |^|                                                       :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
nested simpleHorn> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPConstraint                                                :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPConstraint> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPBoolStructR                                               :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPBoolStructR> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPMT                                                        :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slAKA                                                   :3_1:And:
******************************** / $*|                                                   :3_1:And:
********************************* / slAKA base                                          :3_1:And:
********************************** / slMultiTerm                                       :3_1:And:
*********************************** / someSL                                          :3_1:And:
************************************ / pNumAsText                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
slAKA base> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected AND
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
slAKA> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected AND
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPMT> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected AND
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :3_1:And:
slRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected AND
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :3_1:And:
pRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :3_1:And:
term p/3:plain p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :3_1:And:
term p/notLabelTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :3_1:And:
termIndent p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :3_1:And:
expression> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected AND
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression     :3_1:And:
ppp inner> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected AND
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression        :3_1:And:
********************** / withPrePost                                                               :3_1:And:
*********************** > |<* starting                                                            :3_1:And:
*********************** / $*|                                                                     :3_1:And:
************************ / pre part                                                              :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text   :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text          :3_1:And:
withPrePost> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text    :3_1:And:
********************** / $*|                                                                       :3_1:And:
*********************** / pre part                                                                :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text     :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text            :3_1:And:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=7:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=7:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=7:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=7:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=7:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=7:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=7:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=7:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=7:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "walk:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "walk:
********************** / someIndentation                                                             :2_2:Other "walk:
*********************** / myindented-GoDeeper                                                       :2_2:Other "walk:
myindented-GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: (   :2_2:Other "walk:
someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (         :2_2:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_2:Other "walk:
********************* / term p/3:plain p                                                              :2_2:Other "walk:
********************** / pRelPred                                                                    :2_2:Other "walk:
*********************** / slRelPred                                                                 :2_2:Other "walk:
************************ / nested simpleHorn                                                       :2_2:Other "walk:
************************* > |^|                                                                   :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************* \ |^| deeps has returned ([()],-1)                                    :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :3_1:And:
************************ / RPConstraint                                                            :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slAKA                                                               :2_2:Other "walk:
*************************** / $*|                                                               :2_2:Other "walk:
**************************** / slAKA base                                                      :2_2:Other "walk:
***************************** / slMultiTerm                                                   :2_2:Other "walk:
****************************** / someSL                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

****************************** \ someSL has returned (["walks"],0)                            :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

***************************** \ slMultiTerm has returned (["walks"],0)                         :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

**************************** \ slAKA base has returned (["walks"],0)                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                     :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************** \ slAKA has returned (["walks"],0)                                     :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************ \ RPMT has returned (RPMT ["walks"],0)                                     :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

*********************** \ slRelPred has returned (RPMT ["walks"],0)                                  :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                       :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************** \ pRelPred has returned RPMT ["walks"]                                         :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                          :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                         :3_2:UnDeeper:
termIndent p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                  :3_2:UnDeeper:
******************* / binary(Or)                                                                         :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :3_2:UnDeeper:
******************* / binary(And)                                                                        :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :3_2:UnDeeper:
******************* / binary(SetLess)                                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :3_2:UnDeeper:
******************* / binary(SetPlus)                                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :3_2:UnDeeper:
expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ expression has returned MyLeaf (RPMT ["walks"])                                      :3_2:UnDeeper:
ppp inner> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["walks"])                                         :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented-UnDeeper                                                                      :3_2:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
termIndent p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["walks"])                                             :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                                   :3_1:And:
************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / ppp inner                                                                             :3_2:Other "degu:
****************** / expression                                                                          :3_2:Other "degu:
******************* / termIndent p                                                                      :3_2:Other "degu:
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
********************** / pNumAsText                                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number           :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (CERR): "degustates"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number      :4_2:Means:
term p/1a:label ends directly above next line> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1a:label ends directly above next line> MATCH (CERR): "degustates"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :4_2:Means:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / matching EOL                                                                  :4_2:Means:
matching EOL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL              :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "degustates"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :4_2:Means:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "degu:
********************* > |<|                                                                           :3_2:Other "degu:
********************* > |<* starting                                                                  :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / |<*/parent                                                                    :4_2:Means:
********************** > |<*/recurse                                                                 :4_2:Means:
********************** / |<*/base                                                                    :4_2:Means:
*********************** / ppp inner                                                                 :4_2:Means:
************************ / expression                                                              :4_2:Means:
************************* / termIndent p                                                          :4_2:Means:
************************** / term p/1a:label ends directly above next line                       :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1b:label ends to the left of line below, with EOL            :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1c:label ends to the right of line below                     :4_2:Means:
*************************** > |<|                                                               :4_2:Means:
*************************** > |<* starting                                                      :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/notLabelTerm                                                 :4_2:Means:
*************************** / term p/2:someIndentation expr p                                   :4_2:Means:
**************************** / someIndentation                                                 :4_2:Means:
***************************** / myindented-GoDeeper                                           :4_2:Means:
myindented-GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :4_2:Means:
someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :4_2:Means:
term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :4_2:Means:
*************************** / term p/3:plain p                                                  :4_2:Means:
**************************** / pRelPred                                                        :4_2:Means:
***************************** / slRelPred                                                     :4_2:Means:
****************************** / nested simpleHorn                                           :4_2:Means:
******************************* > |^|                                                       :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPConstraint                                                :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPBoolStructR                                               :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPMT                                                        :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slAKA                                                   :4_2:Means:
********************************* / $*|                                                   :4_2:Means:
********************************** / slAKA base                                          :4_2:Means:
*********************************** / slMultiTerm                                       :4_2:Means:
************************************ / someSL                                          :4_2:Means:
************************************* / pNumAsText                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :4_2:Means:
slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :4_2:Means:
termIndent p> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :4_2:Means:
expression> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression   :4_2:Means:
ppp inner> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression      :4_2:Means:
*********************** / withPrePost                                                               :4_2:Means:
************************ > |<* starting                                                            :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / pre part                                                              :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text        :4_2:Means:
withPrePost> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text  :4_2:Means:
*********************** / $*|                                                                       :4_2:Means:
************************ / pre part                                                                :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text   :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text          :4_2:Means:
|<*/base> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :4_2:Means:
|<*/parent> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :4_2:Means:
term p/1c:label ends to the right of line below> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "degustates"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :4_2:Means:
******************** / term p/notLabelTerm                                                             :3_2:Other "degu:
********************* / term p/2:someIndentation expr p                                               :3_2:Other "degu:
********************** / someIndentation                                                             :3_2:Other "degu:
*********************** / myindented-GoDeeper                                                       :3_2:Other "degu:
myindented-GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected "degustates"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "degustates" Expecting: (    :3_2:Other "degu:
term p/2:someIndentation expr p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected "degustates"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
********************* / term p/3:plain p                                                              :3_2:Other "degu:
********************** / pRelPred                                                                    :3_2:Other "degu:
*********************** / slRelPred                                                                 :3_2:Other "degu:
************************ / nested simpleHorn                                                       :3_2:Other "degu:
************************* > |^|                                                                   :3_2:Other "degu:
************************* / $*|                                                                   :3_2:Other "degu:
************************** / slMultiTerm                                                         :3_2:Other "degu:
*************************** / someSL                                                            :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

*************************** \ someSL has returned (["degustates"],0)                            :4_2:Means:
slMultiTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slMultiTerm> MATCH (COK): "degustates"
slMultiTerm> VALUE: ((["degustates"],0),[])

************************** \ slMultiTerm has returned (["degustates"],0)                         :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

************************* \ $*| has returned (["degustates"],0)                                   :4_2:Means:
************************* / |^| deeps                                                             :4_2:Means:
|^| deeps> IN: MEANS ( "eats" ) OR ( "imbibes" ) ) MUST <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

************************* \ |^| deeps has returned ([],0)                                         :4_2:Means:
************************* / pBSR                                                                   :4_3:GoDeeper:
************************** / ppp inner                                                            :4_3:GoDeeper:
*************************** / expression                                                         :4_3:GoDeeper:
**************************** / termIndent p                                                     :4_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :4_3:GoDeeper:
****************************** > |<|                                                          :4_3:GoDeeper:
****************************** > |<* starting                                                 :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :4_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :4_3:GoDeeper:
******************************* / someIndentation                                            :4_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :4_3:Other "eats:
******************************** / manyIndentation/leaf?                                     :4_3:Other "eats:
********************************* / ppp inner                                               :4_3:Other "eats:
********************************** / expression                                            :4_3:Other "eats:
*********************************** / termIndent p                                        :4_3:Other "eats:
************************************ / term p/1a:label ends directly above next line     :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
************************************** / pNumAsText                                     :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / matching EOL                                     :5_3:UnDeeper:
matching EOL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=14:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :4_3:Other "eats:
************************************* > |<|                                             :4_3:Other "eats:
************************************* > |<* starting                                    :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / |<*/parent                                       :5_3:UnDeeper:
************************************** > |<*/recurse                                    :5_3:UnDeeper:
************************************** / ppp inner                                   :5_2:Or:
*************************************** / expression                                :5_2:Or:
**************************************** / termIndent p                            :5_2:Or:
***************************************** / term p/1a:label ends directly above next line :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1b:label ends to the left of line below, with EOL :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1c:label ends to the right of line below :5_2:Or:
****************************************** > |<|                                 :5_2:Or:
****************************************** > |<* starting                        :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/notLabelTerm                   :5_2:Or:
****************************************** / term p/2:someIndentation expr p     :5_2:Or:
******************************************* / someIndentation                   :5_2:Or:
******************************************** / myindented-GoDeeper             :5_2:Or:
myindented-GoDeeper> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected OR
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
****************************************** / term p/3:plain p                    :5_2:Or:
******************************************* / pRelPred                          :5_2:Or:
******************************************** / slRelPred                       :5_2:Or:
********************************************* / nested simpleHorn             :5_2:Or:
********************************************** > |^|                         :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPConstraint                  :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=15:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPBoolStructR                 :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=15:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPMT                          :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slAKA                     :5_2:Or:
************************************************ / $*|                     :5_2:Or:
************************************************* / slAKA base            :5_2:Or:
************************************************** / slMultiTerm         :5_2:Or:
*************************************************** / someSL            :5_2:Or:
**************************************************** / pNumAsText      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=15:
slAKA base> unexpected OR
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=15:
slAKA> unexpected OR
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=15:
RPMT> unexpected OR
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=15:
slRelPred> unexpected OR
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=15:
pRelPred> unexpected OR
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=15:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=15:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=15:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=15:
expression> unexpected OR
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :5_2:Or:
ppp inner> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> unexpected OR
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :5_2:Or:
************************************** / withPrePost                                 :5_2:Or:
*************************************** > |<* starting                              :5_2:Or:
*************************************** / $*|                                       :5_2:Or:
**************************************** / pre part                                :5_2:Or:
pre part> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
withPrePost> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=15:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / $*|                                         :5_2:Or:
*************************************** / pre part                                  :5_2:Or:
pre part> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / |<*/base                                       :5_3:UnDeeper:
*************************************** / ppp inner                                    :5_3:UnDeeper:
**************************************** / expression                                 :5_3:UnDeeper:
***************************************** / termIndent p                             :5_3:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :5_3:UnDeeper:
******************************************* > |<|                                  :5_3:UnDeeper:
******************************************* > |<* starting                         :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/notLabelTerm                    :5_3:UnDeeper:
******************************************* / term p/2:someIndentation expr p      :5_3:UnDeeper:
******************************************** / someIndentation                    :5_3:UnDeeper:
********************************************* / myindented-GoDeeper              :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / term p/3:plain p                     :5_3:UnDeeper:
******************************************** / pRelPred                           :5_3:UnDeeper:
********************************************* / slRelPred                        :5_3:UnDeeper:
********************************************** / nested simpleHorn              :5_3:UnDeeper:
*********************************************** > |^|                          :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPConstraint                   :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPBoolStructR                  :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPMT                           :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slAKA                      :5_3:UnDeeper:
************************************************* / $*|                      :5_3:UnDeeper:
************************************************** / slAKA base             :5_3:UnDeeper:
*************************************************** / slMultiTerm          :5_3:UnDeeper:
**************************************************** / someSL             :5_3:UnDeeper:
***************************************************** / pNumAsText       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=14:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :5_3:UnDeeper:
ppp inner> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :5_3:UnDeeper:
*************************************** / withPrePost                                  :5_3:UnDeeper:
**************************************** > |<* starting                               :5_3:UnDeeper:
**************************************** / $*|                                        :5_3:UnDeeper:
***************************************** / pre part                                 :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
withPrePost> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
*************************************** / $*|                                          :5_3:UnDeeper:
**************************************** / pre part                                   :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
|<*/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=14:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=15:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
************************************ / term p/notLabelTerm                               :4_3:Other "eats:
************************************* / term p/2:someIndentation expr p                 :4_3:Other "eats:
************************************** / someIndentation                               :4_3:Other "eats:
*************************************** / myindented-GoDeeper                         :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: ( :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: ( :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
************************************* / term p/3:plain p                                :4_3:Other "eats:
************************************** / pRelPred                                      :4_3:Other "eats:
*************************************** / slRelPred                                   :4_3:Other "eats:
**************************************** / nested simpleHorn                         :4_3:Other "eats:
***************************************** > |^|                                     :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |^| deeps                                :5_3:UnDeeper:
|^| deeps> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

***************************************** \ |^| deeps has returned ([()],-1)      :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
**************************************** / RPConstraint                              :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPBoolStructR                             :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPMT                                      :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slAKA                                 :4_3:Other "eats:
******************************************* / $*|                                 :4_3:Other "eats:
******************************************** / slAKA base                        :4_3:Other "eats:
********************************************* / slMultiTerm                     :4_3:Other "eats:
********************************************** / someSL                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

********************************************** \ someSL has returned (["eats"],0) :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

********************************************* \ slMultiTerm has returned (["eats"],0) :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

******************************************** \ slAKA base has returned (["eats"],0) :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

******************************************* \ $*| has returned (["eats"],0)        :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional akapart             :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / PAKA/akapart                 :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
************************************************* / Aka Token                :5_3:UnDeeper:
Aka Token> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=14:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=14:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional typically           :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / typically                    :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=14:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :5_3:UnDeeper:
******************************************* > pAKA: entityalias = Nothing          :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

****************************************** \ slAKA has returned (["eats"],0)        :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

**************************************** \ RPMT has returned (RPMT ["eats"],0)        :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

*************************************** \ slRelPred has returned (RPMT ["eats"],0)     :5_3:UnDeeper:
*************************************** / undeepers                                    :5_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
**************************************** > sameLine: success!                         :5_3:UnDeeper:
undeepers> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************************** \ pRelPred has returned RPMT ["eats"]            :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])     :5_3:UnDeeper:
*********************************** / binary(Or)                                           :5_3:UnDeeper:
binary(Or)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :5_3:UnDeeper:
*********************************** / binary(And)                                          :5_3:UnDeeper:
binary(And)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :5_3:UnDeeper:
*********************************** / binary(SetLess)                                      :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :5_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :5_3:UnDeeper:
expression> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["eats"])         :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["eats"])            :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( "imbibes" ) ) MUST DO ( "s <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])  :5_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "imbibes" ) ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper               :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"]) :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                :5_2:Or:
**************************** / binary(Or)                                                      :5_2:Or:
binary(Or)> IN: OR ( "imbibes" ) ) MUST DO ( "sing" )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**************************** \ binary(Or) has returned Or                                       :5_3:GoDeeper:
**************************** / termIndent p                                                     :5_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :5_3:GoDeeper:
****************************** > |<|                                                          :5_3:GoDeeper:
****************************** > |<* starting                                                 :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :5_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :5_3:GoDeeper:
******************************* / someIndentation                                            :5_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :5_3:GoDeeper:
myindented-GoDeeper> IN: ( "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :5_3:Other "imbi:
******************************** / manyIndentation/leaf?                                     :5_3:Other "imbi:
********************************* / ppp inner                                               :5_3:Other "imbi:
********************************** / expression                                            :5_3:Other "imbi:
*********************************** / termIndent p                                        :5_3:Other "imbi:
************************************ / term p/1a:label ends directly above next line     :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
************************************** / pNumAsText                                   :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (CERR): "imbibes"
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (CERR): "imbibes"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_2:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)               :6_2:UnDeeper:
************************************* / matching EOL                                   :6_2:UnDeeper:
matching EOL> IN: ) ) MUST DO ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=18:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "imbibes"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_2:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :5_3:Other "imbi:
************************************* > |<|                                             :5_3:Other "imbi:
************************************* > |<* starting                                    :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)          :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)               :6_2:UnDeeper:
************************************* / |<*/parent                                     :6_2:UnDeeper:
************************************** > |<*/recurse                                  :6_2:UnDeeper:
************************************** / ppp inner                                 :6_1:Must:
*************************************** / expression                              :6_1:Must:
**************************************** / termIndent p                          :6_1:Must:
***************************************** / term p/1a:label ends directly above next line :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1a:label ends directly above next line> IN: MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=20:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/1b:label ends to the left of line below, with EOL :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=20:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/1c:label ends to the right of line below :6_1:Must:
****************************************** > |<|                               :6_1:Must:
****************************************** > |<* starting                      :6_1:Must:
****************************************** / $*|                               :6_1:Must:
******************************************* / someSL                          :6_1:Must:
******************************************** / pNumAsText                    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/1c:label ends to the right of line below> IN: MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :6_1:Must:
***************************************** / term p/notLabelTerm                 :6_1:Must:
****************************************** / term p/2:someIndentation expr p   :6_1:Must:
******************************************* / someIndentation                 :6_1:Must:
******************************************** / myindented-GoDeeper           :6_1:Must:
myindented-GoDeeper> IN: MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :6_1:Must:
someIndentation> IN: MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected MUST
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :6_1:Must:
term p/2:someIndentation expr p> IN: MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :6_1:Must:
****************************************** / term p/3:plain p                  :6_1:Must:
******************************************* / pRelPred                        :6_1:Must:
******************************************** / slRelPred                     :6_1:Must:
********************************************* / nested simpleHorn           :6_1:Must:
********************************************** > |^|                       :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
nested simpleHorn> IN: MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=20:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPConstraint                :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPConstraint> IN: MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=20:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPBoolStructR               :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slMultiTerm             :6_1:Must:
************************************************ / someSL                :6_1:Must:
************************************************* / pNumAsText          :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPBoolStructR> IN: MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=20:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :6_1:Must:
********************************************* / RPMT                        :6_1:Must:
********************************************** / $*|                       :6_1:Must:
*********************************************** / slAKA                   :6_1:Must:
************************************************ / $*|                   :6_1:Must:
************************************************* / slAKA base          :6_1:Must:
************************************************** / slMultiTerm       :6_1:Must:
*************************************************** / someSL          :6_1:Must:
**************************************************** / pNumAsText    :6_1:Must:
pNumAsText> IN: MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :6_1:Must:
someSL> IN: MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected MUST
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :6_1:Must:
slMultiTerm> IN: MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=20:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :6_1:Must:
slAKA base> IN: MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=20:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
slAKA> IN: MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=20:
slAKA> unexpected MUST
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :6_1:Must:
RPMT> IN: MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=20:
RPMT> unexpected MUST
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :6_1:Must:
slRelPred> IN: MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=20:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :6_1:Must:
pRelPred> IN: MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=20:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/3:plain p> IN: MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=20:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :6_1:Must:
term p/notLabelTerm> IN: MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=20:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :6_1:Must:
termIndent p> IN: MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=20:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :6_1:Must:
expression> IN: MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=20:
expression> unexpected MUST
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :6_1:Must:
ppp inner> IN: MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=20:
ppp inner> unexpected MUST
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :6_1:Must:
************************************** / withPrePost                               :6_1:Must:
*************************************** > |<* starting                            :6_1:Must:
*************************************** / $*|                                     :6_1:Must:
**************************************** / pre part                              :6_1:Must:
pre part> IN: MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=20:
pre part> unexpected MUST
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :6_1:Must:
withPrePost> IN: MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=20:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :6_1:Must:
************************************** / $*|                                       :6_1:Must:
*************************************** / pre part                                :6_1:Must:
pre part> IN: MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=20:
pre part> unexpected MUST
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :6_1:Must:
$*|> IN: MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected MUST
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :6_1:Must:
************************************** / |<*/base                                     :6_2:UnDeeper:
*************************************** / ppp inner                                  :6_2:UnDeeper:
**************************************** / expression                               :6_2:UnDeeper:
***************************************** / termIndent p                           :6_2:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST DO ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST DO ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :6_2:UnDeeper:
******************************************* > |<|                                :6_2:UnDeeper:
******************************************* > |<* starting                       :6_2:UnDeeper:
******************************************* / $*|                                :6_2:UnDeeper:
******************************************** / someSL                           :6_2:UnDeeper:
********************************************* / pNumAsText                     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
****************************************** / term p/notLabelTerm                  :6_2:UnDeeper:
******************************************* / term p/2:someIndentation expr p    :6_2:UnDeeper:
******************************************** / someIndentation                  :6_2:UnDeeper:
********************************************* / myindented-GoDeeper            :6_2:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=18:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_2:UnDeeper:
someIndentation> IN: ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=18:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / term p/3:plain p                   :6_2:UnDeeper:
******************************************** / pRelPred                         :6_2:UnDeeper:
********************************************* / slRelPred                      :6_2:UnDeeper:
********************************************** / nested simpleHorn            :6_2:UnDeeper:
*********************************************** > |^|                        :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
nested simpleHorn> IN: ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=18:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPConstraint                 :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPConstraint> IN: ) ) MUST DO ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPBoolStructR                :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slMultiTerm              :6_2:UnDeeper:
************************************************* / someSL                 :6_2:UnDeeper:
************************************************** / pNumAsText           :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPBoolStructR> IN: ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
********************************************** / RPMT                         :6_2:UnDeeper:
*********************************************** / $*|                        :6_2:UnDeeper:
************************************************ / slAKA                    :6_2:UnDeeper:
************************************************* / $*|                    :6_2:UnDeeper:
************************************************** / slAKA base           :6_2:UnDeeper:
*************************************************** / slMultiTerm        :6_2:UnDeeper:
**************************************************** / someSL           :6_2:UnDeeper:
***************************************************** / pNumAsText     :6_2:UnDeeper:
pNumAsText> IN: ) ) MUST DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) ) MUST DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA base> IN: ) ) MUST DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=18:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA> IN: ) ) MUST DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=18:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPMT> IN: ) ) MUST DO ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=18:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slRelPred> IN: ) ) MUST DO ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=18:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
pRelPred> IN: ) ) MUST DO ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=18:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/3:plain p> IN: ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=18:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=18:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_2:UnDeeper:
termIndent p> IN: ) ) MUST DO ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=18:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_2:UnDeeper:
expression> IN: ) ) MUST DO ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=18:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_2:UnDeeper:
ppp inner> IN: ) ) MUST DO ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=18:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_2:UnDeeper:
*************************************** / withPrePost                                :6_2:UnDeeper:
**************************************** > |<* starting                             :6_2:UnDeeper:
**************************************** / $*|                                      :6_2:UnDeeper:
***************************************** / pre part                               :6_2:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
withPrePost> IN: ) ) MUST DO ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=18:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
*************************************** / $*|                                        :6_2:UnDeeper:
**************************************** / pre part                                 :6_2:UnDeeper:
pre part> IN: ) ) MUST DO ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
$*|> IN: ) ) MUST DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_2:UnDeeper:
|<*/base> IN: ) ) MUST DO ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=18:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_2:UnDeeper:
|<*/parent> IN: ) ) MUST DO ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=20:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/1c:label ends to the right of line below> MATCH (CERR): "imbibes"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :6_2:UnDeeper:
************************************ / term p/notLabelTerm                               :5_3:Other "imbi:
************************************* / term p/2:someIndentation expr p                 :5_3:Other "imbi:
************************************** / someIndentation                               :5_3:Other "imbi:
*************************************** / myindented-GoDeeper                         :5_3:Other "imbi:
myindented-GoDeeper> IN: "imbibes" ) ) MUST DO ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected "imbibes"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
someIndentation> IN: "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected "imbibes"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
term p/2:someIndentation expr p> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected "imbibes"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
************************************* / term p/3:plain p                                :5_3:Other "imbi:
************************************** / pRelPred                                      :5_3:Other "imbi:
*************************************** / slRelPred                                   :5_3:Other "imbi:
**************************************** / nested simpleHorn                         :5_3:Other "imbi:
***************************************** > |^|                                     :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |^| deeps                              :6_2:UnDeeper:
|^| deeps> IN: ) ) MUST DO ( "sing" )
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

***************************************** \ |^| deeps has returned ([(),()],-2) :6_1:Must:
nested simpleHorn> IN: "imbibes" ) ) MUST DO ( "sing" )
nested simpleHorn> MATCH (CERR): "imbibes" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=20:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :6_1:Must:
**************************************** / RPConstraint                              :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPConstraint> IN: "imbibes" ) ) MUST DO ( "sing" )
RPConstraint> MATCH (CERR): "imbibes"
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
**************************************** / RPBoolStructR                             :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
***************************************** / |>| calling $>>                        :6_2:UnDeeper:
****************************************** / |>>/recurse                          :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
****************************************** / |>>/base                             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST DO ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=18:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPBoolStructR> IN: "imbibes" ) ) MUST DO ( "sing" )
RPBoolStructR> MATCH (CERR): "imbibes"
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
**************************************** / RPMT                                      :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slAKA                                 :5_3:Other "imbi:
******************************************* / $*|                                 :5_3:Other "imbi:
******************************************** / slAKA base                        :5_3:Other "imbi:
********************************************* / slMultiTerm                     :5_3:Other "imbi:
********************************************** / someSL                        :5_3:Other "imbi:
someSL> IN: "imbibes" ) ) MUST DO ( "sing" )
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

********************************************** \ someSL has returned (["imbibes"],0) :6_2:UnDeeper:
slMultiTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

********************************************* \ slMultiTerm has returned (["imbibes"],0) :6_2:UnDeeper:
slAKA base> IN: "imbibes" ) ) MUST DO ( "sing" )
slAKA base> MATCH (COK): "imbibes"
slAKA base> VALUE: ((["imbibes"],0),[])

******************************************** \ slAKA base has returned (["imbibes"],0) :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

******************************************* \ $*| has returned (["imbibes"],0)   :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional akapart           :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / PAKA/akapart               :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
************************************************* / Aka Token              :6_2:UnDeeper:
Aka Token> IN: ) ) MUST DO ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=18:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_2:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_2:UnDeeper:
PAKA/akapart> IN: ) ) MUST DO ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=18:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_2:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST DO ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* / |>>/recurse                        :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
******************************************* / |>>/base                           :6_2:UnDeeper:
******************************************** / slAKA optional typically         :6_2:UnDeeper:
********************************************* / |?| optional something         :6_2:UnDeeper:
********************************************** / |>>/recurse                  :6_2:UnDeeper:
|>>/recurse> IN: ) ) MUST DO ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=18:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_2:UnDeeper:
********************************************** / |>>/base                     :6_2:UnDeeper:
*********************************************** / typically                  :6_2:UnDeeper:
************************************************ / $>|                      :6_2:UnDeeper:
$>|> IN: ) ) MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
typically> IN: ) ) MUST DO ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=18:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=18:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|?| optional something> IN: ) ) MUST DO ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :6_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST DO ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :6_2:UnDeeper:
******************************************** > |>>/base got Nothing             :6_2:UnDeeper:
|>>/base> IN: ) ) MUST DO ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)  :6_2:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :6_2:UnDeeper:
******************************************* > pAKA: entityalias = Nothing        :6_2:UnDeeper:
slAKA> IN: "imbibes" ) ) MUST DO ( "sing" )
slAKA> MATCH (COK): "imbibes"
slAKA> VALUE: ((["imbibes"],0),[])

****************************************** \ slAKA has returned (["imbibes"],0)   :6_2:UnDeeper:
$*|> IN: "imbibes" ) ) MUST DO ( "sing" )
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)       :6_2:UnDeeper:
RPMT> IN: "imbibes" ) ) MUST DO ( "sing" )
RPMT> MATCH (COK): "imbibes"
RPMT> VALUE: ((RPMT ["imbibes"],0),[])

**************************************** \ RPMT has returned (RPMT ["imbibes"],0)   :6_2:UnDeeper:
slRelPred> IN: "imbibes" ) ) MUST DO ( "sing" )
slRelPred> MATCH (COK): "imbibes"
slRelPred> VALUE: ((RPMT ["imbibes"],0),[])

*************************************** \ slRelPred has returned (RPMT ["imbibes"],0) :6_2:UnDeeper:
*************************************** / undeepers                                  :6_2:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_2:UnDeeper:
**************************************** > sameLine: success!                       :6_2:UnDeeper:
undeepers> IN: ) ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                  :6_2:UnDeeper:
pRelPred> IN: "imbibes" ) ) MUST DO ( "sing" )
pRelPred> MATCH (COK): "imbibes"
pRelPred> VALUE: (RPMT ["imbibes"],[])

************************************** \ pRelPred has returned RPMT ["imbibes"]       :6_2:UnDeeper:
term p/3:plain p> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/3:plain p> MATCH (COK): "imbibes"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (COK): "imbibes"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
termIndent p> IN: "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (COK): "imbibes"
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
*********************************** / binary(Or)                                         :6_2:UnDeeper:
binary(Or)> IN: ) ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :6_2:UnDeeper:
*********************************** / binary(And)                                        :6_2:UnDeeper:
binary(And)> IN: ) ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :6_2:UnDeeper:
*********************************** / binary(SetLess)                                    :6_2:UnDeeper:
binary(SetLess)> IN: ) ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :6_2:UnDeeper:
*********************************** / binary(SetPlus)                                    :6_2:UnDeeper:
binary(SetPlus)> IN: ) ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :6_2:UnDeeper:
expression> IN: "imbibes" ) ) MUST DO ( "sing" )
expression> MATCH (COK): "imbibes"
expression> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["imbibes"])    :6_2:UnDeeper:
ppp inner> IN: "imbibes" ) ) MUST DO ( "sing" )
ppp inner> MATCH (COK): "imbibes"
ppp inner> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["imbibes"])       :6_2:UnDeeper:
manyIndentation/leaf?> IN: "imbibes" ) ) MUST DO ( "sing" )
manyIndentation/leaf?> MATCH (COK): "imbibes"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["imbibes"]) :6_2:UnDeeper:
******************************** / myindented-UnDeeper                                      :6_2:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper                  :6_3:UnDeeper:
someIndentation> IN: ( "imbibes" ) ) MUST DO ( "sing" )
someIndentation> MATCH (COK): ( "imbibes" )
someIndentation> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["imbibes"])       :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/2:someIndentation expr p> MATCH (COK): ( "imbibes" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["imbibes"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: ( "imbibes" ) ) MUST DO ( "sing" )
term p/notLabelTerm> MATCH (COK): ( "imbibes" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"])       :6_3:UnDeeper:
termIndent p> IN: ( "imbibes" ) ) MUST DO ( "sing" )
termIndent p> MATCH (COK): ( "imbibes" )
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])                :6_3:UnDeeper:
**************************** / binary(Or)                                                         :6_3:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR          :6_3:UnDeeper:
**************************** / binary(And)                                                        :6_3:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND        :6_3:UnDeeper:
**************************** / binary(SetLess)                                                    :6_3:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS   :6_3:UnDeeper:
**************************** / binary(SetPlus)                                                    :6_3:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS   :6_3:UnDeeper:
expression> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
expression> MATCH (COK): ( "eats" ) OR ( "imbibes" )
expression> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[])

*************************** \ expression has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :6_3:UnDeeper:
ppp inner> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
ppp inner> MATCH (COK): ( "eats" ) OR ( "imbibes" )
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[])

************************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :6_3:UnDeeper:
pBSR> IN: ( "eats" ) OR ( "imbibes" ) ) MUST DO (  <…>
pBSR> MATCH (COK): ( "eats" ) OR ( "imbibes" )
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])],[])

************************* \ pBSR has returned Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])] :6_3:UnDeeper:
************************* > constructed simpleHorn; running tellIdFirst                              :6_3:UnDeeper:
nested simpleHorn> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************************ \ nested simpleHorn has returned (RPMT ["degustates"],0)                     :6_3:UnDeeper:
slRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********************** \ slRelPred has returned (RPMT ["degustates"],0)                               :6_3:UnDeeper:
*********************** / undeepers                                                                    :6_3:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :6_3:UnDeeper:
************************ > sameLine: success!                                                         :6_3:UnDeeper:
undeepers> IN: ) MUST DO ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                    :6_3:UnDeeper:
pRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> VALUE: (RPMT ["degustates"],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************** \ pRelPred has returned RPMT ["degustates"]                                      :6_3:UnDeeper:
term p/3:plain p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["degustates"])                       :6_3:UnDeeper:
term p/notLabelTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                      :6_3:UnDeeper:
termIndent p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************* \ termIndent p has returned MyLeaf (RPMT ["degustates"])                               :6_3:UnDeeper:
******************* / binary(Or)                                                                           :6_3:UnDeeper:
binary(Or)> IN: ) MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :6_3:UnDeeper:
******************* / binary(And)                                                                          :6_3:UnDeeper:
binary(And)> IN: ) MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :6_3:UnDeeper:
******************* / binary(SetLess)                                                                      :6_3:UnDeeper:
binary(SetLess)> IN: ) MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :6_3:UnDeeper:
******************* / binary(SetPlus)                                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: ) MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :6_3:UnDeeper:
expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

****************** \ expression has returned MyLeaf (RPMT ["degustates"])                                   :6_3:UnDeeper:
ppp inner> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

***************** \ ppp inner has returned MyLeaf (RPMT ["degustates"])                                      :6_3:UnDeeper:
manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["degustates"])                            :6_3:UnDeeper:
**************** / myindented-UnDeeper                                                                        :6_3:UnDeeper:
myindented-UnDeeper> IN: ) MUST DO ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :6_1:Must:
someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*************** \ someIndentation has returned MyLeaf (RPMT ["degustates"])                               :6_1:Must:
term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["degustates"])                 :6_1:Must:
term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                               :6_1:Must:
termIndent p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************ \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                        :6_1:Must:
************ / binary(Or)                                                                                    :6_1:Must:
binary(Or)> IN: MUST DO ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=20:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :6_1:Must:
************ / binary(And)                                                                                   :6_1:Must:
binary(And)> IN: MUST DO ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=20:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :6_1:Must:
************ / binary(SetLess)                                                                               :6_1:Must:
binary(SetLess)> IN: MUST DO ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=20:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :6_1:Must:
************ / binary(SetPlus)                                                                               :6_1:Must:
binary(SetPlus)> IN: MUST DO ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=20:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :6_1:Must:
expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********** \ expression has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]            :6_1:Must:
ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********** \ ppp inner has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]               :6_1:Must:
pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])],[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********* \ pBSR has returned All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]                    :6_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :6_1:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******* \ manyIndentation/leaf? has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :6_1:Must:
******* / WHERE                                                                                                   :6_1:Must:
WHERE> IN: MUST DO ( "sing" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=20:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :6_1:Must:
******* / preambleParamText:[Having]                                                                              :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :6_1:Must:
preambleParamText:[Having]> IN: MUST DO ( "sing" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=20:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :6_1:Must:
******* / preambleParamText:[Given]                                                                               :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :6_1:Must:
preambleParamText:[Given]> IN: MUST DO ( "sing" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=20:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :6_1:Must:
******* / preambleParamText:[Upon]                                                                                :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :6_1:Must:
preambleParamText:[Upon]> IN: MUST DO ( "sing" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=20:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :6_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :6_1:Must:
preambleBoolStructR [Unless]> IN: MUST DO ( "sing" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=20:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :6_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Must:
preambleBoolStructR [When,If]> IN: MUST DO ( "sing" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=20:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :6_1:Must:
******* / pTemporal/eventually                                                                                    :6_1:Must:
pTemporal/eventually> IN: MUST DO ( "sing" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=20:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY                          :6_1:Must:
******* / pTemporal/specifically                                                                                  :6_1:Must:
******** / $>|                                                                                                   :6_1:Must:
$>|> IN: MUST DO ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=20:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON                                 :6_1:Must:
pTemporal/specifically> IN: MUST DO ( "sing" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=20:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON                :6_1:Must:
******* / pTemporal/vaguely                                                                                       :6_1:Must:
pTemporal/vaguely> IN: MUST DO ( "sing" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=20:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text                             :6_1:Must:
******* / pDA                                                                                                     :6_1:Must:
******** / pAction calling pParamText                                                                            :7_1:Do:
********* / pParamText                                                                                          :7_1:Do:
********** / pParamText(flat) first line: pKeyValues                                                           :7_1:Do:
*********** / pKeyValuesAka                                                                                   :7_1:Do:
************ / slAKA                                                                                         :7_1:Do:
************* / $*|                                                                                         :7_1:Do:
************** / slAKA base                                                                                :7_1:Do:
*************** / slKeyValues                                                                             :7_1:Do:
**************** / $*|                                                                                   :7_1:Do:
***************** / someSL                                                                              :7_1:Do:
****************** / pNumAsText                                                                        :7_1:Do:
pNumAsText> IN: DO ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected DO
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number                    :7_1:Do:
someSL> IN: DO ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected DO
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number            :7_1:Do:
$*|> IN: DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected DO
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number                 :7_1:Do:
slKeyValues> IN: DO ( "sing" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=21:
slKeyValues> unexpected DO
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected DO Expecting: other text or number           :7_1:Do:
slAKA base> IN: DO ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected DO
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number              :7_1:Do:
$*|> IN: DO ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected DO
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number                       :7_1:Do:
slAKA> IN: DO ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected DO
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number                       :7_1:Do:
pKeyValuesAka> IN: DO ( "sing" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=21:
pKeyValuesAka> unexpected DO
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected DO Expecting: other text or number                 :7_1:Do:
pParamText(flat) first line: pKeyValues> IN: DO ( "sing" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=21:
pParamText(flat) first line: pKeyValues> unexpected DO
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected DO Expecting: other text or number :7_1:Do:
pParamText> IN: DO ( "sing" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=21:
pParamText> unexpected DO
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected DO Expecting: other text or number                        :7_1:Do:
pAction calling pParamText> IN: DO ( "sing" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=21:
pAction calling pParamText> unexpected DO
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected DO Expecting: other text or number          :7_1:Do:
pDA> IN: MUST DO ( "sing" )
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=21:
pDA> unexpected DO
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected DO Expecting: other text or number                                     :7_1:Do:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=21:
regulative permutation with deontic-action> unexpected DO
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected DO Expecting: AND OR LESS PLUS other text or number :6_1:Must:
permutationsReg> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=22:
permutationsReg> unexpected (
permutationsReg> expecting other text or number

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: other text or number                            :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=22:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting other text or number

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: other text or number                               :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=22:
pRegRule> unexpected (
pRegRule> expecting other text or number or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § other text or number                                    :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=22:
pRule> unexpected (
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                             :1_1:Every:
Loading env

Parser tests
  megaparsing
    indented-2 FAILED [1]

Failures:

  test/Spec.hs:327:7: 
  1) Parser tests, megaparsing, indented-2
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), rkeyword = REvery, who = Just (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]), cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       7:2:
       unexpected (
       expecting EOL or regulative rule
       
       EVERY   person              
       WHO     walks               
       AND     degustates          
               MEANS        eats   
               OR           imbibes
       MUST                        
       ->      ✳ sing              
       
       
       Stream:
       EVERY ( "person" ) WHO ( "walks" ) AND
           ( "degustates" MEANS ( "eats" ) OR ( "imbibes" ) ) MUST DO "✳"
           ( "✳" "sing" )

  To rerun use: --match "/Parser tests/megaparsing/indented-2/"

Randomized with seed 1737689744

Finished in 0.5487 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

