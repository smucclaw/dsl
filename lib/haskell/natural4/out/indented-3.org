* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/megaparsing/indented-3/")

* Tokens
EVERY ( "person" ) WHO ( "walks" ) AND
    ( "degustates" MEANS ( "eats" ) OR
        ( "imbibes" MEANS ( "drinks" ) AND ( "swallows" ) OR ( "spits" ) )
    ) MUST ( "sing" )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / ppp inner                                                                             :2_2:Other "walk:
****************** / expression                                                                          :2_2:Other "walk:
******************* / termIndent p                                                                      :2_2:Other "walk:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=7:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "walk:
********************* > |<|                                                                           :2_2:Other "walk:
********************* > |<* starting                                                                  :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:And:
*********************** / expression                                                              :3_1:And:
************************ / termIndent p                                                          :3_1:And:
************************* / term p/1a:label ends directly above next line                       :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1a:label ends directly above next line> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1c:label ends to the right of line below                     :3_1:And:
************************** > |<|                                                               :3_1:And:
************************** > |<* starting                                                      :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1c:label ends to the right of line below> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/notLabelTerm                                                 :3_1:And:
************************** / term p/2:someIndentation expr p                                   :3_1:And:
*************************** / someIndentation                                                 :3_1:And:
**************************** / myindented-GoDeeper                                           :3_1:And:
myindented-GoDeeper> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :3_1:And:
someIndentation> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected AND
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :3_1:And:
term p/2:someIndentation expr p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :3_1:And:
************************** / term p/3:plain p                                                  :3_1:And:
*************************** / pRelPred                                                        :3_1:And:
**************************** / slRelPred                                                     :3_1:And:
***************************** / nested simpleHorn                                           :3_1:And:
****************************** > |^|                                                       :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
nested simpleHorn> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPConstraint                                                :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPConstraint> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPBoolStructR                                               :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPBoolStructR> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPMT                                                        :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slAKA                                                   :3_1:And:
******************************** / $*|                                                   :3_1:And:
********************************* / slAKA base                                          :3_1:And:
********************************** / slMultiTerm                                       :3_1:And:
*********************************** / someSL                                          :3_1:And:
************************************ / pNumAsText                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
slAKA base> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected AND
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
slAKA> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected AND
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPMT> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected AND
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :3_1:And:
slRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected AND
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :3_1:And:
pRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :3_1:And:
term p/3:plain p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :3_1:And:
term p/notLabelTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :3_1:And:
termIndent p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :3_1:And:
expression> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected AND
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression     :3_1:And:
ppp inner> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected AND
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression        :3_1:And:
********************** / withPrePost                                                               :3_1:And:
*********************** > |<* starting                                                            :3_1:And:
*********************** / $*|                                                                     :3_1:And:
************************ / pre part                                                              :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text   :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text          :3_1:And:
withPrePost> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text    :3_1:And:
********************** / $*|                                                                       :3_1:And:
*********************** / pre part                                                                :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text     :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text            :3_1:And:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=7:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=7:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=7:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=7:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=7:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=7:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=7:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=7:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=7:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "walk:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "walk:
********************** / someIndentation                                                             :2_2:Other "walk:
*********************** / myindented-GoDeeper                                                       :2_2:Other "walk:
myindented-GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: (   :2_2:Other "walk:
someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (         :2_2:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_2:Other "walk:
********************* / term p/3:plain p                                                              :2_2:Other "walk:
********************** / pRelPred                                                                    :2_2:Other "walk:
*********************** / slRelPred                                                                 :2_2:Other "walk:
************************ / nested simpleHorn                                                       :2_2:Other "walk:
************************* > |^|                                                                   :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************* \ |^| deeps has returned ([()],-1)                                    :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :3_1:And:
************************ / RPConstraint                                                            :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slAKA                                                               :2_2:Other "walk:
*************************** / $*|                                                               :2_2:Other "walk:
**************************** / slAKA base                                                      :2_2:Other "walk:
***************************** / slMultiTerm                                                   :2_2:Other "walk:
****************************** / someSL                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

****************************** \ someSL has returned (["walks"],0)                            :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

***************************** \ slMultiTerm has returned (["walks"],0)                         :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

**************************** \ slAKA base has returned (["walks"],0)                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                     :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************** \ slAKA has returned (["walks"],0)                                     :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************ \ RPMT has returned (RPMT ["walks"],0)                                     :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

*********************** \ slRelPred has returned (RPMT ["walks"],0)                                  :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                       :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************** \ pRelPred has returned RPMT ["walks"]                                         :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                          :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                         :3_2:UnDeeper:
termIndent p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                  :3_2:UnDeeper:
******************* / binary(Or)                                                                         :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :3_2:UnDeeper:
******************* / binary(And)                                                                        :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :3_2:UnDeeper:
******************* / binary(SetLess)                                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :3_2:UnDeeper:
******************* / binary(SetPlus)                                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :3_2:UnDeeper:
expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ expression has returned MyLeaf (RPMT ["walks"])                                      :3_2:UnDeeper:
ppp inner> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["walks"])                                         :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented-UnDeeper                                                                      :3_2:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
termIndent p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["walks"])                                             :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                                   :3_1:And:
************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / ppp inner                                                                             :3_2:Other "degu:
****************** / expression                                                                          :3_2:Other "degu:
******************* / termIndent p                                                                      :3_2:Other "degu:
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
********************** / pNumAsText                                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number           :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (CERR): "degustates"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number      :4_2:Means:
term p/1a:label ends directly above next line> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1a:label ends directly above next line> MATCH (CERR): "degustates"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :4_2:Means:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / matching EOL                                                                  :4_2:Means:
matching EOL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL              :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "degustates"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :4_2:Means:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "degu:
********************* > |<|                                                                           :3_2:Other "degu:
********************* > |<* starting                                                                  :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / |<*/parent                                                                    :4_2:Means:
********************** > |<*/recurse                                                                 :4_2:Means:
********************** / |<*/base                                                                    :4_2:Means:
*********************** / ppp inner                                                                 :4_2:Means:
************************ / expression                                                              :4_2:Means:
************************* / termIndent p                                                          :4_2:Means:
************************** / term p/1a:label ends directly above next line                       :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1b:label ends to the left of line below, with EOL            :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1c:label ends to the right of line below                     :4_2:Means:
*************************** > |<|                                                               :4_2:Means:
*************************** > |<* starting                                                      :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/notLabelTerm                                                 :4_2:Means:
*************************** / term p/2:someIndentation expr p                                   :4_2:Means:
**************************** / someIndentation                                                 :4_2:Means:
***************************** / myindented-GoDeeper                                           :4_2:Means:
myindented-GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :4_2:Means:
someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :4_2:Means:
term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :4_2:Means:
*************************** / term p/3:plain p                                                  :4_2:Means:
**************************** / pRelPred                                                        :4_2:Means:
***************************** / slRelPred                                                     :4_2:Means:
****************************** / nested simpleHorn                                           :4_2:Means:
******************************* > |^|                                                       :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPConstraint                                                :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPBoolStructR                                               :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPMT                                                        :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slAKA                                                   :4_2:Means:
********************************* / $*|                                                   :4_2:Means:
********************************** / slAKA base                                          :4_2:Means:
*********************************** / slMultiTerm                                       :4_2:Means:
************************************ / someSL                                          :4_2:Means:
************************************* / pNumAsText                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :4_2:Means:
slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :4_2:Means:
termIndent p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :4_2:Means:
expression> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression   :4_2:Means:
ppp inner> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression      :4_2:Means:
*********************** / withPrePost                                                               :4_2:Means:
************************ > |<* starting                                                            :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / pre part                                                              :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text        :4_2:Means:
withPrePost> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text  :4_2:Means:
*********************** / $*|                                                                       :4_2:Means:
************************ / pre part                                                                :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text   :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text          :4_2:Means:
|<*/base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :4_2:Means:
|<*/parent> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :4_2:Means:
term p/1c:label ends to the right of line below> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "degustates"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :4_2:Means:
******************** / term p/notLabelTerm                                                             :3_2:Other "degu:
********************* / term p/2:someIndentation expr p                                               :3_2:Other "degu:
********************** / someIndentation                                                             :3_2:Other "degu:
*********************** / myindented-GoDeeper                                                       :3_2:Other "degu:
myindented-GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected "degustates"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "degustates" Expecting: (    :3_2:Other "degu:
term p/2:someIndentation expr p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected "degustates"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
********************* / term p/3:plain p                                                              :3_2:Other "degu:
********************** / pRelPred                                                                    :3_2:Other "degu:
*********************** / slRelPred                                                                 :3_2:Other "degu:
************************ / nested simpleHorn                                                       :3_2:Other "degu:
************************* > |^|                                                                   :3_2:Other "degu:
************************* / $*|                                                                   :3_2:Other "degu:
************************** / slMultiTerm                                                         :3_2:Other "degu:
*************************** / someSL                                                            :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

*************************** \ someSL has returned (["degustates"],0)                            :4_2:Means:
slMultiTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slMultiTerm> MATCH (COK): "degustates"
slMultiTerm> VALUE: ((["degustates"],0),[])

************************** \ slMultiTerm has returned (["degustates"],0)                         :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

************************* \ $*| has returned (["degustates"],0)                                   :4_2:Means:
************************* / |^| deeps                                                             :4_2:Means:
|^| deeps> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

************************* \ |^| deeps has returned ([],0)                                         :4_2:Means:
************************* / pBSR                                                                   :4_3:GoDeeper:
************************** / ppp inner                                                            :4_3:GoDeeper:
*************************** / expression                                                         :4_3:GoDeeper:
**************************** / termIndent p                                                     :4_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :4_3:GoDeeper:
****************************** > |<|                                                          :4_3:GoDeeper:
****************************** > |<* starting                                                 :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :4_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :4_3:GoDeeper:
******************************* / someIndentation                                            :4_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :4_3:Other "eats:
******************************** / manyIndentation/leaf?                                     :4_3:Other "eats:
********************************* / ppp inner                                               :4_3:Other "eats:
********************************** / expression                                            :4_3:Other "eats:
*********************************** / termIndent p                                        :4_3:Other "eats:
************************************ / term p/1a:label ends directly above next line     :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
************************************** / pNumAsText                                     :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / matching EOL                                     :5_3:UnDeeper:
matching EOL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=14:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :4_3:Other "eats:
************************************* > |<|                                             :4_3:Other "eats:
************************************* > |<* starting                                    :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / |<*/parent                                       :5_3:UnDeeper:
************************************** > |<*/recurse                                    :5_3:UnDeeper:
************************************** / ppp inner                                   :5_2:Or:
*************************************** / expression                                :5_2:Or:
**************************************** / termIndent p                            :5_2:Or:
***************************************** / term p/1a:label ends directly above next line :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1b:label ends to the left of line below, with EOL :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1c:label ends to the right of line below :5_2:Or:
****************************************** > |<|                                 :5_2:Or:
****************************************** > |<* starting                        :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/notLabelTerm                   :5_2:Or:
****************************************** / term p/2:someIndentation expr p     :5_2:Or:
******************************************* / someIndentation                   :5_2:Or:
******************************************** / myindented-GoDeeper             :5_2:Or:
myindented-GoDeeper> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected OR
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
****************************************** / term p/3:plain p                    :5_2:Or:
******************************************* / pRelPred                          :5_2:Or:
******************************************** / slRelPred                       :5_2:Or:
********************************************* / nested simpleHorn             :5_2:Or:
********************************************** > |^|                         :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPConstraint                  :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=15:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPBoolStructR                 :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=15:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPMT                          :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slAKA                     :5_2:Or:
************************************************ / $*|                     :5_2:Or:
************************************************* / slAKA base            :5_2:Or:
************************************************** / slMultiTerm         :5_2:Or:
*************************************************** / someSL            :5_2:Or:
**************************************************** / pNumAsText      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=15:
slAKA base> unexpected OR
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=15:
slAKA> unexpected OR
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=15:
RPMT> unexpected OR
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=15:
slRelPred> unexpected OR
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=15:
pRelPred> unexpected OR
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=15:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=15:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=15:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=15:
expression> unexpected OR
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :5_2:Or:
ppp inner> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> unexpected OR
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :5_2:Or:
************************************** / withPrePost                                 :5_2:Or:
*************************************** > |<* starting                              :5_2:Or:
*************************************** / $*|                                       :5_2:Or:
**************************************** / pre part                                :5_2:Or:
pre part> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
withPrePost> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=15:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / $*|                                         :5_2:Or:
*************************************** / pre part                                  :5_2:Or:
pre part> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / |<*/base                                       :5_3:UnDeeper:
*************************************** / ppp inner                                    :5_3:UnDeeper:
**************************************** / expression                                 :5_3:UnDeeper:
***************************************** / termIndent p                             :5_3:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :5_3:UnDeeper:
******************************************* > |<|                                  :5_3:UnDeeper:
******************************************* > |<* starting                         :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/notLabelTerm                    :5_3:UnDeeper:
******************************************* / term p/2:someIndentation expr p      :5_3:UnDeeper:
******************************************** / someIndentation                    :5_3:UnDeeper:
********************************************* / myindented-GoDeeper              :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / term p/3:plain p                     :5_3:UnDeeper:
******************************************** / pRelPred                           :5_3:UnDeeper:
********************************************* / slRelPred                        :5_3:UnDeeper:
********************************************** / nested simpleHorn              :5_3:UnDeeper:
*********************************************** > |^|                          :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPConstraint                   :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPBoolStructR                  :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPMT                           :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slAKA                      :5_3:UnDeeper:
************************************************* / $*|                      :5_3:UnDeeper:
************************************************** / slAKA base             :5_3:UnDeeper:
*************************************************** / slMultiTerm          :5_3:UnDeeper:
**************************************************** / someSL             :5_3:UnDeeper:
***************************************************** / pNumAsText       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=14:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :5_3:UnDeeper:
ppp inner> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :5_3:UnDeeper:
*************************************** / withPrePost                                  :5_3:UnDeeper:
**************************************** > |<* starting                               :5_3:UnDeeper:
**************************************** / $*|                                        :5_3:UnDeeper:
***************************************** / pre part                                 :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
withPrePost> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
*************************************** / $*|                                          :5_3:UnDeeper:
**************************************** / pre part                                   :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
|<*/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=14:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=15:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
************************************ / term p/notLabelTerm                               :4_3:Other "eats:
************************************* / term p/2:someIndentation expr p                 :4_3:Other "eats:
************************************** / someIndentation                               :4_3:Other "eats:
*************************************** / myindented-GoDeeper                         :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: ( :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: ( :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
************************************* / term p/3:plain p                                :4_3:Other "eats:
************************************** / pRelPred                                      :4_3:Other "eats:
*************************************** / slRelPred                                   :4_3:Other "eats:
**************************************** / nested simpleHorn                         :4_3:Other "eats:
***************************************** > |^|                                     :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |^| deeps                                :5_3:UnDeeper:
|^| deeps> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

***************************************** \ |^| deeps has returned ([()],-1)      :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
**************************************** / RPConstraint                              :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPBoolStructR                             :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPMT                                      :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slAKA                                 :4_3:Other "eats:
******************************************* / $*|                                 :4_3:Other "eats:
******************************************** / slAKA base                        :4_3:Other "eats:
********************************************* / slMultiTerm                     :4_3:Other "eats:
********************************************** / someSL                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

********************************************** \ someSL has returned (["eats"],0) :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

********************************************* \ slMultiTerm has returned (["eats"],0) :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

******************************************** \ slAKA base has returned (["eats"],0) :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

******************************************* \ $*| has returned (["eats"],0)        :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional akapart             :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / PAKA/akapart                 :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
************************************************* / Aka Token                :5_3:UnDeeper:
Aka Token> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=14:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=14:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional typically           :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / typically                    :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=14:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :5_3:UnDeeper:
******************************************* > pAKA: entityalias = Nothing          :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

****************************************** \ slAKA has returned (["eats"],0)        :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

**************************************** \ RPMT has returned (RPMT ["eats"],0)        :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

*************************************** \ slRelPred has returned (RPMT ["eats"],0)     :5_3:UnDeeper:
*************************************** / undeepers                                    :5_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
**************************************** > sameLine: success!                         :5_3:UnDeeper:
undeepers> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************************** \ pRelPred has returned RPMT ["eats"]            :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])     :5_3:UnDeeper:
*********************************** / binary(Or)                                           :5_3:UnDeeper:
binary(Or)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :5_3:UnDeeper:
*********************************** / binary(And)                                          :5_3:UnDeeper:
binary(And)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :5_3:UnDeeper:
*********************************** / binary(SetLess)                                      :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :5_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :5_3:UnDeeper:
expression> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["eats"])         :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["eats"])            :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])  :5_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper               :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"]) :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                :5_2:Or:
**************************** / binary(Or)                                                      :5_2:Or:
binary(Or)> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**************************** \ binary(Or) has returned Or                                       :5_3:GoDeeper:
**************************** / termIndent p                                                     :5_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :5_3:GoDeeper:
****************************** > |<|                                                          :5_3:GoDeeper:
****************************** > |<* starting                                                 :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :5_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :5_3:GoDeeper:
******************************* / someIndentation                                            :5_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :5_3:GoDeeper:
myindented-GoDeeper> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :5_3:Other "imbi:
******************************** / manyIndentation/leaf?                                     :5_3:Other "imbi:
********************************* / ppp inner                                               :5_3:Other "imbi:
********************************** / expression                                            :5_3:Other "imbi:
*********************************** / termIndent p                                        :5_3:Other "imbi:
************************************ / term p/1a:label ends directly above next line     :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
************************************** / pNumAsText                                    :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (CERR): "imbibes"
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number :6_3:Means:
term p/1a:label ends directly above next line> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1a:label ends directly above next line> MATCH (CERR): "imbibes"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :6_3:Means:
************************************ / term p/1b:label ends to the left of line below, with EOL :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)                :6_3:Means:
************************************* / matching EOL                                    :6_3:Means:
matching EOL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=18:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL :6_3:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "imbibes"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :6_3:Means:
************************************ / term p/1c:label ends to the right of line below   :5_3:Other "imbi:
************************************* > |<|                                             :5_3:Other "imbi:
************************************* > |<* starting                                    :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)                :6_3:Means:
************************************* / |<*/parent                                      :6_3:Means:
************************************** > |<*/recurse                                   :6_3:Means:
************************************** / |<*/base                                      :6_3:Means:
*************************************** / ppp inner                                   :6_3:Means:
**************************************** / expression                                :6_3:Means:
***************************************** / termIndent p                            :6_3:Means:
****************************************** / term p/1a:label ends directly above next line :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/1b:label ends to the left of line below, with EOL :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/1c:label ends to the right of line below :6_3:Means:
******************************************* > |<|                                 :6_3:Means:
******************************************* > |<* starting                        :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/notLabelTerm                   :6_3:Means:
******************************************* / term p/2:someIndentation expr p     :6_3:Means:
******************************************** / someIndentation                   :6_3:Means:
********************************************* / myindented-GoDeeper             :6_3:Means:
myindented-GoDeeper> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=18:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :6_3:Means:
someIndentation> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected MEANS
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :6_3:Means:
term p/2:someIndentation expr p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=18:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :6_3:Means:
******************************************* / term p/3:plain p                    :6_3:Means:
******************************************** / pRelPred                          :6_3:Means:
********************************************* / slRelPred                       :6_3:Means:
********************************************** / nested simpleHorn             :6_3:Means:
*********************************************** > |^|                         :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
nested simpleHorn> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=18:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPConstraint                  :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPConstraint> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPBoolStructR                 :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPBoolStructR> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPMT                          :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slAKA                     :6_3:Means:
************************************************* / $*|                     :6_3:Means:
************************************************** / slAKA base            :6_3:Means:
*************************************************** / slMultiTerm         :6_3:Means:
**************************************************** / someSL            :6_3:Means:
***************************************************** / pNumAsText      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
slAKA base> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=18:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
slAKA> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=18:
slAKA> unexpected MEANS
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPMT> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=18:
RPMT> unexpected MEANS
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :6_3:Means:
slRelPred> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=18:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :6_3:Means:
pRelPred> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=18:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/3:plain p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=18:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/notLabelTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=18:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :6_3:Means:
termIndent p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=18:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :6_3:Means:
expression> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=18:
expression> unexpected MEANS
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression :6_3:Means:
ppp inner> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=18:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression :6_3:Means:
*************************************** / withPrePost                                 :6_3:Means:
**************************************** > |<* starting                              :6_3:Means:
**************************************** / $*|                                       :6_3:Means:
***************************************** / pre part                                :6_3:Means:
pre part> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected MEANS
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text :6_3:Means:
withPrePost> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=18:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text :6_3:Means:
*************************************** / $*|                                         :6_3:Means:
**************************************** / pre part                                  :6_3:Means:
pre part> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected MEANS
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text :6_3:Means:
|<*/base> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=18:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :6_3:Means:
|<*/parent> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=18:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :6_3:Means:
term p/1c:label ends to the right of line below> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "imbibes"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :6_3:Means:
************************************ / term p/notLabelTerm                               :5_3:Other "imbi:
************************************* / term p/2:someIndentation expr p                 :5_3:Other "imbi:
************************************** / someIndentation                               :5_3:Other "imbi:
*************************************** / myindented-GoDeeper                         :5_3:Other "imbi:
myindented-GoDeeper> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected "imbibes"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
someIndentation> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected "imbibes"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
term p/2:someIndentation expr p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected "imbibes"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
************************************* / term p/3:plain p                                :5_3:Other "imbi:
************************************** / pRelPred                                      :5_3:Other "imbi:
*************************************** / slRelPred                                   :5_3:Other "imbi:
**************************************** / nested simpleHorn                         :5_3:Other "imbi:
***************************************** > |^|                                     :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_3:Means:
slMultiTerm> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)        :6_3:Means:
***************************************** / |^| deeps                               :6_3:Means:
|^| deeps> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

***************************************** \ |^| deeps has returned ([],0)           :6_3:Means:
***************************************** / pBSR                                     :6_4:GoDeeper:
****************************************** / ppp inner                              :6_4:GoDeeper:
******************************************* / expression                           :6_4:GoDeeper:
******************************************** / termIndent p                       :6_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :6_4:GoDeeper:
********************************************** > |<|                            :6_4:GoDeeper:
********************************************** > |<* starting                   :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/notLabelTerm              :6_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :6_4:GoDeeper:
*********************************************** / someIndentation              :6_4:GoDeeper:
************************************************ / myindented-GoDeeper        :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :6_4:Other "drin:
************************************************ / manyIndentation/leaf?       :6_4:Other "drin:
************************************************* / ppp inner                 :6_4:Other "drin:
************************************************** / expression              :6_4:Other "drin:
*************************************************** / termIndent p          :6_4:Other "drin:
**************************************************** / term p/1a:label ends directly above next line :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
****************************************************** / pNumAsText       :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (CERR): "drinks"
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :7_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1a:label ends directly above next line> MATCH (CERR): "drinks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_4:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

***************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
***************************************************** / matching EOL       :7_4:UnDeeper:
matching EOL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=21:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :7_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "drinks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_4:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :6_4:Other "drin:
***************************************************** > |<|               :6_4:Other "drin:
***************************************************** > |<* starting      :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

***************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
***************************************************** / |<*/parent         :7_4:UnDeeper:
****************************************************** > |<*/recurse      :7_4:UnDeeper:
****************************************************** / ppp inner     :7_3:And:
******************************************************* / expression  :7_3:And:
******************************************************** / termIndent p :7_3:And:
********************************************************* / term p/1a:label ends directly above next line :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1a:label ends directly above next line> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=22:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=22:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/1c:label ends to the right of line below :7_3:And:
********************************************************** > |<|   :7_3:And:
********************************************************** > |<* starting :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1c:label ends to the right of line below> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/notLabelTerm :7_3:And:
********************************************************** / term p/2:someIndentation expr p :7_3:And:
*********************************************************** / someIndentation :7_3:And:
************************************************************ / myindented-GoDeeper :7_3:And:
myindented-GoDeeper> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=22:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :7_3:And:
someIndentation> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected AND
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :7_3:And:
term p/2:someIndentation expr p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :7_3:And:
********************************************************** / term p/3:plain p :7_3:And:
*********************************************************** / pRelPred :7_3:And:
************************************************************ / slRelPred :7_3:And:
************************************************************* / nested simpleHorn :7_3:And:
************************************************************** > |^| :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
nested simpleHorn> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPConstraint :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPConstraint> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPBoolStructR :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPBoolStructR> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPMT :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slAKA :7_3:And:
**************************************************************** / $*| :7_3:And:
***************************************************************** / slAKA base :7_3:And:
****************************************************************** / slMultiTerm :7_3:And:
******************************************************************* / someSL :7_3:And:
******************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
slAKA base> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected AND
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
slAKA> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected AND
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPMT> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected AND
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :7_3:And:
slRelPred> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected AND
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :7_3:And:
pRelPred> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :7_3:And:
term p/3:plain p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=22:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :7_3:And:
term p/notLabelTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=22:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :7_3:And:
termIndent p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=22:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :7_3:And:
expression> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=22:
expression> unexpected AND
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected AND Expecting: expression :7_3:And:
ppp inner> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=22:
ppp inner> unexpected AND
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression :7_3:And:
****************************************************** / withPrePost   :7_3:And:
******************************************************* > |<* starting :7_3:And:
******************************************************* / $*|         :7_3:And:
******************************************************** / pre part  :7_3:And:
pre part> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :7_3:And:
withPrePost> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=22:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text :7_3:And:
****************************************************** / $*|           :7_3:And:
******************************************************* / pre part    :7_3:And:
pre part> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :7_3:And:
****************************************************** / |<*/base         :7_4:UnDeeper:
******************************************************* / ppp inner      :7_4:UnDeeper:
******************************************************** / expression   :7_4:UnDeeper:
********************************************************* / termIndent p :7_4:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :7_4:UnDeeper:
*********************************************************** > |<|    :7_4:UnDeeper:
*********************************************************** > |<* starting :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=21:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/notLabelTerm :7_4:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :7_4:UnDeeper:
************************************************************ / someIndentation :7_4:UnDeeper:
************************************************************* / myindented-GoDeeper :7_4:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_4:UnDeeper:
someIndentation> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :7_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / term p/3:plain p :7_4:UnDeeper:
************************************************************ / pRelPred :7_4:UnDeeper:
************************************************************* / slRelPred :7_4:UnDeeper:
************************************************************** / nested simpleHorn :7_4:UnDeeper:
*************************************************************** > |^| :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
nested simpleHorn> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=21:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPConstraint :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPConstraint> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPBoolStructR :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPBoolStructR> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPMT :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slAKA :7_4:UnDeeper:
***************************************************************** / $*| :7_4:UnDeeper:
****************************************************************** / slAKA base :7_4:UnDeeper:
******************************************************************* / slMultiTerm :7_4:UnDeeper:
******************************************************************** / someSL :7_4:UnDeeper:
********************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slAKA base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slAKA> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPMT> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=21:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slRelPred> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=21:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
pRelPred> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=21:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/3:plain p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=21:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=21:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_4:UnDeeper:
termIndent p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=21:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_4:UnDeeper:
expression> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=21:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :7_4:UnDeeper:
ppp inner> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=21:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :7_4:UnDeeper:
******************************************************* / withPrePost    :7_4:UnDeeper:
******************************************************** > |<* starting :7_4:UnDeeper:
******************************************************** / $*|          :7_4:UnDeeper:
********************************************************* / pre part   :7_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
withPrePost> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=21:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
******************************************************* / $*|            :7_4:UnDeeper:
******************************************************** / pre part     :7_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
|<*/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=21:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_4:UnDeeper:
|<*/parent> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=22:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :7_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "drinks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :7_4:UnDeeper:
**************************************************** / term p/notLabelTerm :6_4:Other "drin:
***************************************************** / term p/2:someIndentation expr p :6_4:Other "drin:
****************************************************** / someIndentation :6_4:Other "drin:
******************************************************* / myindented-GoDeeper :6_4:Other "drin:
myindented-GoDeeper> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "drinks"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
someIndentation> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "drinks"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
term p/2:someIndentation expr p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "drinks"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
***************************************************** / term p/3:plain p  :6_4:Other "drin:
****************************************************** / pRelPred        :6_4:Other "drin:
******************************************************* / slRelPred     :6_4:Other "drin:
******************************************************** / nested simpleHorn :6_4:Other "drin:
********************************************************* > |^|       :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |^| deeps  :7_4:UnDeeper:
|^| deeps> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************************************* \ |^| deeps has returned ([()],-1) :7_3:And:
nested simpleHorn> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
nested simpleHorn> MATCH (CERR): "drinks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :7_3:And:
******************************************************** / RPConstraint :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |>| calling $>> :7_4:UnDeeper:
********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
********************************************************** / |>>/base :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
RPConstraint> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPConstraint> MATCH (CERR): "drinks"
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
******************************************************** / RPBoolStructR :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |>| calling $>> :7_4:UnDeeper:
********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
********************************************************** / |>>/base :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
RPBoolStructR> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPBoolStructR> MATCH (CERR): "drinks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
******************************************************** / RPMT        :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slAKA   :6_4:Other "drin:
*********************************************************** / $*|   :6_4:Other "drin:
************************************************************ / slAKA base :6_4:Other "drin:
************************************************************* / slMultiTerm :6_4:Other "drin:
************************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

************************************************************* \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
slAKA base> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slAKA base> MATCH (COK): "drinks"
slAKA base> VALUE: ((["drinks"],0),[])

************************************************************ \ slAKA base has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

*********************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
*********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / |>>/base :7_4:UnDeeper:
************************************************************ / slAKA optional akapart :7_4:UnDeeper:
************************************************************* / |?| optional something :7_4:UnDeeper:
************************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
************************************************************** / |>>/base :7_4:UnDeeper:
*************************************************************** / PAKA/akapart :7_4:UnDeeper:
**************************************************************** / $>| :7_4:UnDeeper:
***************************************************************** / Aka Token :7_4:UnDeeper:
Aka Token> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :7_4:UnDeeper:
PAKA/akapart> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :7_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :7_4:UnDeeper:
************************************************************ > |>>/base got Nothing :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :7_4:UnDeeper:
*********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / |>>/base :7_4:UnDeeper:
************************************************************ / slAKA optional typically :7_4:UnDeeper:
************************************************************* / |?| optional something :7_4:UnDeeper:
************************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
************************************************************** / |>>/base :7_4:UnDeeper:
*************************************************************** / typically :7_4:UnDeeper:
**************************************************************** / $>| :7_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
typically> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************************************ > |>>/base got Nothing :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :7_4:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :7_4:UnDeeper:
slAKA> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slAKA> MATCH (COK): "drinks"
slAKA> VALUE: ((["drinks"],0),[])

********************************************************** \ slAKA has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
RPMT> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPMT> MATCH (COK): "drinks"
RPMT> VALUE: ((RPMT ["drinks"],0),[])

******************************************************** \ RPMT has returned (RPMT ["drinks"],0) :7_4:UnDeeper:
slRelPred> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slRelPred> MATCH (COK): "drinks"
slRelPred> VALUE: ((RPMT ["drinks"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["drinks"],0) :7_4:UnDeeper:
******************************************************* / undeepers      :7_4:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
******************************************************** > sameLine: success! :7_4:UnDeeper:
undeepers> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :7_4:UnDeeper:
pRelPred> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
pRelPred> MATCH (COK): "drinks"
pRelPred> VALUE: (RPMT ["drinks"],[])

****************************************************** \ pRelPred has returned RPMT ["drinks"] :7_4:UnDeeper:
term p/3:plain p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/3:plain p> MATCH (COK): "drinks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
term p/notLabelTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/notLabelTerm> MATCH (COK): "drinks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
termIndent p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
termIndent p> MATCH (COK): "drinks"
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
*************************************************** / binary(Or)             :7_4:UnDeeper:
binary(Or)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=21:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :7_4:UnDeeper:
*************************************************** / binary(And)            :7_4:UnDeeper:
binary(And)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=21:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :7_4:UnDeeper:
*************************************************** / binary(SetLess)        :7_4:UnDeeper:
binary(SetLess)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=21:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :7_4:UnDeeper:
*************************************************** / binary(SetPlus)        :7_4:UnDeeper:
binary(SetPlus)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=21:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :7_4:UnDeeper:
expression> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
expression> MATCH (COK): "drinks"
expression> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
ppp inner> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
ppp inner> MATCH (COK): "drinks"
ppp inner> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
manyIndentation/leaf?> MATCH (COK): "drinks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
************************************************ / myindented-UnDeeper          :7_4:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :7_3:And:
someIndentation> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someIndentation> MATCH (COK): ( "drinks" )
someIndentation> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
term p/2:someIndentation expr p> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/2:someIndentation expr p> MATCH (COK): ( "drinks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
term p/notLabelTerm> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/notLabelTerm> MATCH (COK): ( "drinks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
termIndent p> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
termIndent p> MATCH (COK): ( "drinks" )
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
******************************************** / binary(Or)                        :7_3:And:
binary(Or)> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected AND
binary(Or)> expecting OR

******************************************** \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR :7_3:And:
******************************************** / binary(And)                       :7_3:And:
binary(And)> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

******************************************** \ binary(And) has returned And       :7_4:GoDeeper:
******************************************** / termIndent p                       :7_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :7_4:GoDeeper:
********************************************** > |<|                            :7_4:GoDeeper:
********************************************** > |<* starting                   :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/notLabelTerm              :7_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :7_4:GoDeeper:
*********************************************** / someIndentation              :7_4:GoDeeper:
************************************************ / myindented-GoDeeper        :7_4:GoDeeper:
myindented-GoDeeper> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :7_4:Other "swal:
************************************************ / manyIndentation/leaf?       :7_4:Other "swal:
************************************************* / ppp inner                 :7_4:Other "swal:
************************************************** / expression              :7_4:Other "swal:
*************************************************** / termIndent p          :7_4:Other "swal:
**************************************************** / term p/1a:label ends directly above next line :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
****************************************************** / pNumAsText       :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (CERR): "swallows"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :8_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "swallows"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :8_4:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

***************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
***************************************************** / matching EOL       :8_4:UnDeeper:
matching EOL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :8_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "swallows"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :8_4:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :7_4:Other "swal:
***************************************************** > |<|               :7_4:Other "swal:
***************************************************** > |<* starting      :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

***************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
***************************************************** / |<*/parent         :8_4:UnDeeper:
****************************************************** > |<*/recurse      :8_4:UnDeeper:
****************************************************** / ppp inner     :8_3:Or:
******************************************************* / expression  :8_3:Or:
******************************************************** / termIndent p :8_3:Or:
********************************************************* / term p/1a:label ends directly above next line :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1a:label ends directly above next line> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/1c:label ends to the right of line below :8_3:Or:
********************************************************** > |<|   :8_3:Or:
********************************************************** > |<* starting :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1c:label ends to the right of line below> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/notLabelTerm :8_3:Or:
********************************************************** / term p/2:someIndentation expr p :8_3:Or:
*********************************************************** / someIndentation :8_3:Or:
************************************************************ / myindented-GoDeeper :8_3:Or:
myindented-GoDeeper> IN: OR ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :8_3:Or:
someIndentation> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected OR
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :8_3:Or:
term p/2:someIndentation expr p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :8_3:Or:
********************************************************** / term p/3:plain p :8_3:Or:
*********************************************************** / pRelPred :8_3:Or:
************************************************************ / slRelPred :8_3:Or:
************************************************************* / nested simpleHorn :8_3:Or:
************************************************************** > |^| :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
nested simpleHorn> IN: OR ( "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPConstraint :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPConstraint> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPBoolStructR :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPBoolStructR> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPMT :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slAKA :8_3:Or:
**************************************************************** / $*| :8_3:Or:
***************************************************************** / slAKA base :8_3:Or:
****************************************************************** / slMultiTerm :8_3:Or:
******************************************************************* / someSL :8_3:Or:
******************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
slAKA base> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected OR
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
slAKA> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected OR
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPMT> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected OR
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :8_3:Or:
slRelPred> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected OR
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :8_3:Or:
pRelPred> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected OR
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :8_3:Or:
term p/3:plain p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :8_3:Or:
term p/notLabelTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :8_3:Or:
termIndent p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :8_3:Or:
expression> IN: OR ( "spits" ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected OR
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :8_3:Or:
ppp inner> IN: OR ( "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected OR
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :8_3:Or:
****************************************************** / withPrePost   :8_3:Or:
******************************************************* > |<* starting :8_3:Or:
******************************************************* / $*|         :8_3:Or:
******************************************************** / pre part  :8_3:Or:
pre part> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected OR
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :8_3:Or:
withPrePost> IN: OR ( "spits" ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :8_3:Or:
****************************************************** / $*|           :8_3:Or:
******************************************************* / pre part    :8_3:Or:
pre part> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected OR
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :8_3:Or:
****************************************************** / |<*/base         :8_4:UnDeeper:
******************************************************* / ppp inner      :8_4:UnDeeper:
******************************************************** / expression   :8_4:UnDeeper:
********************************************************* / termIndent p :8_4:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :8_4:UnDeeper:
*********************************************************** > |<|    :8_4:UnDeeper:
*********************************************************** > |<* starting :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/notLabelTerm :8_4:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :8_4:UnDeeper:
************************************************************ / someIndentation :8_4:UnDeeper:
************************************************************* / myindented-GoDeeper :8_4:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :8_4:UnDeeper:
someIndentation> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :8_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / term p/3:plain p :8_4:UnDeeper:
************************************************************ / pRelPred :8_4:UnDeeper:
************************************************************* / slRelPred :8_4:UnDeeper:
************************************************************** / nested simpleHorn :8_4:UnDeeper:
*************************************************************** > |^| :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
nested simpleHorn> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPConstraint :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPConstraint> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPBoolStructR :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPBoolStructR> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPMT :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slAKA :8_4:UnDeeper:
***************************************************************** / $*| :8_4:UnDeeper:
****************************************************************** / slAKA base :8_4:UnDeeper:
******************************************************************* / slMultiTerm :8_4:UnDeeper:
******************************************************************** / someSL :8_4:UnDeeper:
********************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slAKA base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slAKA> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPMT> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slRelPred> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
pRelPred> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/3:plain p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :8_4:UnDeeper:
termIndent p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :8_4:UnDeeper:
expression> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :8_4:UnDeeper:
ppp inner> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :8_4:UnDeeper:
******************************************************* / withPrePost    :8_4:UnDeeper:
******************************************************** > |<* starting :8_4:UnDeeper:
******************************************************** / $*|          :8_4:UnDeeper:
********************************************************* / pre part   :8_4:UnDeeper:
pre part> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
withPrePost> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
******************************************************* / $*|            :8_4:UnDeeper:
******************************************************** / pre part     :8_4:UnDeeper:
pre part> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
|<*/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :8_4:UnDeeper:
|<*/parent> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :8_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "swallows"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :8_4:UnDeeper:
**************************************************** / term p/notLabelTerm :7_4:Other "swal:
***************************************************** / term p/2:someIndentation expr p :7_4:Other "swal:
****************************************************** / someIndentation :7_4:Other "swal:
******************************************************* / myindented-GoDeeper :7_4:Other "swal:
myindented-GoDeeper> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected "swallows"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
someIndentation> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "swallows"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
term p/2:someIndentation expr p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "swallows"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
***************************************************** / term p/3:plain p  :7_4:Other "swal:
****************************************************** / pRelPred        :7_4:Other "swal:
******************************************************* / slRelPred     :7_4:Other "swal:
******************************************************** / nested simpleHorn :7_4:Other "swal:
********************************************************* > |^|       :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |^| deeps  :8_4:UnDeeper:
|^| deeps> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************************************* \ |^| deeps has returned ([()],-1) :8_3:Or:
nested simpleHorn> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
nested simpleHorn> MATCH (CERR): "swallows" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :8_3:Or:
******************************************************** / RPConstraint :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |>| calling $>> :8_4:UnDeeper:
********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
********************************************************** / |>>/base :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPConstraint> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPConstraint> MATCH (CERR): "swallows"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
******************************************************** / RPBoolStructR :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |>| calling $>> :8_4:UnDeeper:
********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
********************************************************** / |>>/base :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPBoolStructR> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPBoolStructR> MATCH (CERR): "swallows"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
******************************************************** / RPMT        :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slAKA   :7_4:Other "swal:
*********************************************************** / $*|   :7_4:Other "swal:
************************************************************ / slAKA base :7_4:Other "swal:
************************************************************* / slMultiTerm :7_4:Other "swal:
************************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

************************************************************* \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
slAKA base> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slAKA base> MATCH (COK): "swallows"
slAKA base> VALUE: ((["swallows"],0),[])

************************************************************ \ slAKA base has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

*********************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
*********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / |>>/base :8_4:UnDeeper:
************************************************************ / slAKA optional akapart :8_4:UnDeeper:
************************************************************* / |?| optional something :8_4:UnDeeper:
************************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
************************************************************** / |>>/base :8_4:UnDeeper:
*************************************************************** / PAKA/akapart :8_4:UnDeeper:
**************************************************************** / $>| :8_4:UnDeeper:
***************************************************************** / Aka Token :8_4:UnDeeper:
Aka Token> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :8_4:UnDeeper:
$>|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :8_4:UnDeeper:
PAKA/akapart> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :8_4:UnDeeper:
|?| optional something> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional akapart> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :8_4:UnDeeper:
************************************************************ > |>>/base got Nothing :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
*********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / |>>/base :8_4:UnDeeper:
************************************************************ / slAKA optional typically :8_4:UnDeeper:
************************************************************* / |?| optional something :8_4:UnDeeper:
************************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
************************************************************** / |>>/base :8_4:UnDeeper:
*************************************************************** / typically :8_4:UnDeeper:
**************************************************************** / $>| :8_4:UnDeeper:
$>|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
typically> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|?| optional something> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional typically> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :8_4:UnDeeper:
************************************************************ > |>>/base got Nothing :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :8_4:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :8_4:UnDeeper:
slAKA> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slAKA> MATCH (COK): "swallows"
slAKA> VALUE: ((["swallows"],0),[])

********************************************************** \ slAKA has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
RPMT> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPMT> MATCH (COK): "swallows"
RPMT> VALUE: ((RPMT ["swallows"],0),[])

******************************************************** \ RPMT has returned (RPMT ["swallows"],0) :8_4:UnDeeper:
slRelPred> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slRelPred> MATCH (COK): "swallows"
slRelPred> VALUE: ((RPMT ["swallows"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["swallows"],0) :8_4:UnDeeper:
******************************************************* / undeepers      :8_4:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_4:UnDeeper:
******************************************************** > sameLine: success! :8_4:UnDeeper:
undeepers> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :8_4:UnDeeper:
pRelPred> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
pRelPred> MATCH (COK): "swallows"
pRelPred> VALUE: (RPMT ["swallows"],[])

****************************************************** \ pRelPred has returned RPMT ["swallows"] :8_4:UnDeeper:
term p/3:plain p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/3:plain p> MATCH (COK): "swallows"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
term p/notLabelTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/notLabelTerm> MATCH (COK): "swallows"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
termIndent p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
termIndent p> MATCH (COK): "swallows"
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
*************************************************** / binary(Or)             :8_4:UnDeeper:
binary(Or)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :8_4:UnDeeper:
*************************************************** / binary(And)            :8_4:UnDeeper:
binary(And)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :8_4:UnDeeper:
*************************************************** / binary(SetLess)        :8_4:UnDeeper:
binary(SetLess)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :8_4:UnDeeper:
*************************************************** / binary(SetPlus)        :8_4:UnDeeper:
binary(SetPlus)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :8_4:UnDeeper:
expression> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
expression> MATCH (COK): "swallows"
expression> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
ppp inner> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
ppp inner> MATCH (COK): "swallows"
ppp inner> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
manyIndentation/leaf?> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
manyIndentation/leaf?> MATCH (COK): "swallows"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
************************************************ / myindented-UnDeeper          :8_4:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :8_3:Or:
someIndentation> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "swallows" )
someIndentation> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
term p/2:someIndentation expr p> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "swallows" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
term p/notLabelTerm> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "swallows" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
termIndent p> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
termIndent p> MATCH (COK): ( "swallows" )
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
******************************************** / binary(Or)                        :8_3:Or:
binary(Or)> IN: OR ( "spits" ) ) ) MUST ( "sing" )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************************************** \ binary(Or) has returned Or         :8_4:GoDeeper:
******************************************** / termIndent p                       :8_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :8_4:GoDeeper:
********************************************** > |<|                            :8_4:GoDeeper:
********************************************** > |<* starting                   :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/notLabelTerm              :8_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :8_4:GoDeeper:
*********************************************** / someIndentation              :8_4:GoDeeper:
************************************************ / myindented-GoDeeper        :8_4:GoDeeper:
myindented-GoDeeper> IN: ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :8_4:Other "spit:
************************************************ / manyIndentation/leaf?       :8_4:Other "spit:
************************************************* / ppp inner                 :8_4:Other "spit:
************************************************** / expression              :8_4:Other "spit:
*************************************************** / termIndent p          :8_4:Other "spit:
**************************************************** / term p/1a:label ends directly above next line :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
****************************************************** / pNumAsText   :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (CERR): "spits"
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :9_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (CERR): "spits"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :9_2:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

***************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
***************************************************** / matching EOL   :9_2:UnDeeper:
matching EOL> IN: ) ) ) MUST ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=29:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :9_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "spits"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :9_2:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :8_4:Other "spit:
***************************************************** > |<|               :8_4:Other "spit:
***************************************************** > |<* starting      :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

***************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
***************************************************** / |<*/parent     :9_2:UnDeeper:
****************************************************** > |<*/recurse  :9_2:UnDeeper:
****************************************************** / ppp inner :9_1:Must:
******************************************************* / expression :9_1:Must:
******************************************************** / termIndent p :9_1:Must:
********************************************************* / term p/1a:label ends directly above next line :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=32:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=32:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/1c:label ends to the right of line below :9_1:Must:
********************************************************** > |<| :9_1:Must:
********************************************************** > |<* starting :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=32:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/notLabelTerm :9_1:Must:
********************************************************** / term p/2:someIndentation expr p :9_1:Must:
*********************************************************** / someIndentation :9_1:Must:
************************************************************ / myindented-GoDeeper :9_1:Must:
myindented-GoDeeper> IN: MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=32:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :9_1:Must:
someIndentation> IN: MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected MUST
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :9_1:Must:
term p/2:someIndentation expr p> IN: MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :9_1:Must:
********************************************************** / term p/3:plain p :9_1:Must:
*********************************************************** / pRelPred :9_1:Must:
************************************************************ / slRelPred :9_1:Must:
************************************************************* / nested simpleHorn :9_1:Must:
************************************************************** > |^| :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
nested simpleHorn> IN: MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=32:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPConstraint :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPConstraint> IN: MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=32:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPBoolStructR :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPBoolStructR> IN: MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=32:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPMT :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slAKA :9_1:Must:
**************************************************************** / $*| :9_1:Must:
***************************************************************** / slAKA base :9_1:Must:
****************************************************************** / slMultiTerm :9_1:Must:
******************************************************************* / someSL :9_1:Must:
******************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
slAKA base> IN: MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
slAKA> IN: MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected MUST
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPMT> IN: MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=32:
RPMT> unexpected MUST
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :9_1:Must:
slRelPred> IN: MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=32:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :9_1:Must:
pRelPred> IN: MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=32:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/3:plain p> IN: MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/notLabelTerm> IN: MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=32:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :9_1:Must:
termIndent p> IN: MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=32:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :9_1:Must:
expression> IN: MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=32:
expression> unexpected MUST
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :9_1:Must:
ppp inner> IN: MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=32:
ppp inner> unexpected MUST
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :9_1:Must:
****************************************************** / withPrePost :9_1:Must:
******************************************************* > |<* starting :9_1:Must:
******************************************************* / $*|     :9_1:Must:
******************************************************** / pre part :9_1:Must:
pre part> IN: MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=32:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :9_1:Must:
withPrePost> IN: MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=32:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :9_1:Must:
****************************************************** / $*|       :9_1:Must:
******************************************************* / pre part :9_1:Must:
pre part> IN: MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=32:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :9_1:Must:
****************************************************** / |<*/base     :9_2:UnDeeper:
******************************************************* / ppp inner  :9_2:UnDeeper:
******************************************************** / expression :9_2:UnDeeper:
********************************************************* / termIndent p :9_2:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :9_2:UnDeeper:
*********************************************************** > |<| :9_2:UnDeeper:
*********************************************************** > |<* starting :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=29:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/notLabelTerm :9_2:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :9_2:UnDeeper:
************************************************************ / someIndentation :9_2:UnDeeper:
************************************************************* / myindented-GoDeeper :9_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=29:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :9_2:UnDeeper:
someIndentation> IN: ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :9_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / term p/3:plain p :9_2:UnDeeper:
************************************************************ / pRelPred :9_2:UnDeeper:
************************************************************* / slRelPred :9_2:UnDeeper:
************************************************************** / nested simpleHorn :9_2:UnDeeper:
*************************************************************** > |^| :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=29:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPConstraint :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPConstraint> IN: ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPBoolStructR :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPMT :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slAKA :9_2:UnDeeper:
***************************************************************** / $*| :9_2:UnDeeper:
****************************************************************** / slAKA base :9_2:UnDeeper:
******************************************************************* / slMultiTerm :9_2:UnDeeper:
******************************************************************** / someSL :9_2:UnDeeper:
********************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slAKA base> IN: ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slAKA> IN: ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPMT> IN: ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=29:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slRelPred> IN: ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=29:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
pRelPred> IN: ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=29:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=29:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=29:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :9_2:UnDeeper:
termIndent p> IN: ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=29:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :9_2:UnDeeper:
expression> IN: ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=29:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :9_2:UnDeeper:
ppp inner> IN: ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=29:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :9_2:UnDeeper:
******************************************************* / withPrePost :9_2:UnDeeper:
******************************************************** > |<* starting :9_2:UnDeeper:
******************************************************** / $*|      :9_2:UnDeeper:
********************************************************* / pre part :9_2:UnDeeper:
pre part> IN: ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=29:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
withPrePost> IN: ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=29:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
******************************************************* / $*|        :9_2:UnDeeper:
******************************************************** / pre part :9_2:UnDeeper:
pre part> IN: ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=29:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
|<*/base> IN: ) ) ) MUST ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=29:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :9_2:UnDeeper:
|<*/parent> IN: ) ) ) MUST ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=32:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :9_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (CERR): "spits"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=32:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :9_2:UnDeeper:
**************************************************** / term p/notLabelTerm :8_4:Other "spit:
***************************************************** / term p/2:someIndentation expr p :8_4:Other "spit:
****************************************************** / someIndentation :8_4:Other "spit:
******************************************************* / myindented-GoDeeper :8_4:Other "spit:
myindented-GoDeeper> IN: "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=28:
myindented-GoDeeper> unexpected "spits"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "spits" Expecting: ( :8_4:Other "spit:
someIndentation> IN: "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "spits"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "spits" Expecting: ( :8_4:Other "spit:
term p/2:someIndentation expr p> IN: "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "spits"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "spits" Expecting: ( :8_4:Other "spit:
***************************************************** / term p/3:plain p  :8_4:Other "spit:
****************************************************** / pRelPred        :8_4:Other "spit:
******************************************************* / slRelPred     :8_4:Other "spit:
******************************************************** / nested simpleHorn :8_4:Other "spit:
********************************************************* > |^|       :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |^| deeps :9_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( "sing" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************************************* \ |^| deeps has returned ([(),(),()],-3) :9_1:Must:
nested simpleHorn> IN: "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (CERR): "spits" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=32:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :9_1:Must:
******************************************************** / RPConstraint :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |>| calling $>> :9_2:UnDeeper:
********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
********************************************************** / |>>/base :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :9_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
RPConstraint> IN: "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (CERR): "spits"
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
******************************************************** / RPBoolStructR :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |>| calling $>> :9_2:UnDeeper:
********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
********************************************************** / |>>/base :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :9_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
RPBoolStructR> IN: "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (CERR): "spits"
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
******************************************************** / RPMT        :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slAKA   :8_4:Other "spit:
*********************************************************** / $*|   :8_4:Other "spit:
************************************************************ / slAKA base :8_4:Other "spit:
************************************************************* / slMultiTerm :8_4:Other "spit:
************************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

************************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

************************************************************* \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
slAKA base> IN: "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (COK): "spits"
slAKA base> VALUE: ((["spits"],0),[])

************************************************************ \ slAKA base has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

*********************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
*********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / |>>/base :9_2:UnDeeper:
************************************************************ / slAKA optional akapart :9_2:UnDeeper:
************************************************************* / |?| optional something :9_2:UnDeeper:
************************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
************************************************************** / |>>/base :9_2:UnDeeper:
*************************************************************** / PAKA/akapart :9_2:UnDeeper:
**************************************************************** / $>| :9_2:UnDeeper:
***************************************************************** / Aka Token :9_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :9_2:UnDeeper:
$>|> IN: ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :9_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MUST ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :9_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :9_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :9_2:UnDeeper:
************************************************************ > |>>/base got Nothing :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :9_2:UnDeeper:
*********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / |>>/base :9_2:UnDeeper:
************************************************************ / slAKA optional typically :9_2:UnDeeper:
************************************************************* / |?| optional something :9_2:UnDeeper:
************************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
************************************************************** / |>>/base :9_2:UnDeeper:
*************************************************************** / typically :9_2:UnDeeper:
**************************************************************** / $>| :9_2:UnDeeper:
$>|> IN: ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
typically> IN: ) ) ) MUST ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :9_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :9_2:UnDeeper:
************************************************************ > |>>/base got Nothing :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :9_2:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :9_2:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :9_2:UnDeeper:
slAKA> IN: "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (COK): "spits"
slAKA> VALUE: ((["spits"],0),[])

********************************************************** \ slAKA has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
RPMT> IN: "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (COK): "spits"
RPMT> VALUE: ((RPMT ["spits"],0),[])

******************************************************** \ RPMT has returned (RPMT ["spits"],0) :9_2:UnDeeper:
slRelPred> IN: "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (COK): "spits"
slRelPred> VALUE: ((RPMT ["spits"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["spits"],0) :9_2:UnDeeper:
******************************************************* / undeepers  :9_2:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :9_2:UnDeeper:
******************************************************** > sameLine: success! :9_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :9_2:UnDeeper:
pRelPred> IN: "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (COK): "spits"
pRelPred> VALUE: (RPMT ["spits"],[])

****************************************************** \ pRelPred has returned RPMT ["spits"] :9_2:UnDeeper:
term p/3:plain p> IN: "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (COK): "spits"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["spits"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
term p/notLabelTerm> IN: "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (COK): "spits"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["spits"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
termIndent p> IN: "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (COK): "spits"
termIndent p> VALUE: (MyLeaf (RPMT ["spits"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
*************************************************** / binary(Or)         :9_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_2:UnDeeper:
*************************************************** / binary(And)        :9_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_2:UnDeeper:
*************************************************** / binary(SetLess)    :9_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_2:UnDeeper:
*************************************************** / binary(SetPlus)    :9_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_2:UnDeeper:
expression> IN: "spits" ) ) ) MUST ( "sing" )
expression> MATCH (COK): "spits"
expression> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
ppp inner> IN: "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (COK): "spits"
ppp inner> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
manyIndentation/leaf?> IN: "spits" ) ) ) MUST ( "sing" )
manyIndentation/leaf?> MATCH (COK): "spits"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
************************************************ / myindented-UnDeeper      :9_2:UnDeeper:
myindented-UnDeeper> IN: ) ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :9_3:UnDeeper:
someIndentation> IN: ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (COK): ( "spits" )
someIndentation> VALUE: (MyLeaf (RPMT ["spits"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (COK): ( "spits" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["spits"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
term p/notLabelTerm> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (COK): ( "spits" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["spits"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
termIndent p> IN: ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (COK): ( "spits" )
termIndent p> VALUE: (MyLeaf (RPMT ["spits"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
******************************************** / binary(Or)                         :9_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_3:UnDeeper:
******************************************** / binary(And)                        :9_3:UnDeeper:
binary(And)> IN: ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

******************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_3:UnDeeper:
******************************************** / binary(SetLess)                    :9_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_3:UnDeeper:
******************************************** / binary(SetPlus)                    :9_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_3:UnDeeper:
expression> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
expression> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]],[])

******************************************* \ expression has returned MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]] :9_3:UnDeeper:
ppp inner> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
ppp inner> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]],[])

****************************************** \ ppp inner has returned MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]] :9_3:UnDeeper:
pBSR> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pBSR> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]],[])

***************************************** \ pBSR has returned All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]] :9_3:UnDeeper:
***************************************** > constructed simpleHorn; running tellIdFirst :9_3:UnDeeper:
nested simpleHorn> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
nested simpleHorn> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
nested simpleHorn> VALUE: ((RPMT ["imbibes"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

**************************************** \ nested simpleHorn has returned (RPMT ["imbibes"],0) :9_3:UnDeeper:
slRelPred> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slRelPred> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slRelPred> VALUE: ((RPMT ["imbibes"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*************************************** \ slRelPred has returned (RPMT ["imbibes"],0)  :9_3:UnDeeper:
*************************************** / undeepers                                    :9_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :9_3:UnDeeper:
**************************************** > sameLine: success!                         :9_3:UnDeeper:
undeepers> IN: ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :9_3:UnDeeper:
pRelPred> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
pRelPred> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
pRelPred> VALUE: (RPMT ["imbibes"],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************** \ pRelPred has returned RPMT ["imbibes"]         :9_3:UnDeeper:
term p/3:plain p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/3:plain p> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
term p/notLabelTerm> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
termIndent p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
termIndent p> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])  :9_3:UnDeeper:
*********************************** / binary(Or)                                           :9_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_3:UnDeeper:
*********************************** / binary(And)                                          :9_3:UnDeeper:
binary(And)> IN: ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_3:UnDeeper:
*********************************** / binary(SetLess)                                      :9_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :9_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_3:UnDeeper:
expression> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
expression> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
expression> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

********************************** \ expression has returned MyLeaf (RPMT ["imbibes"])      :9_3:UnDeeper:
ppp inner> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
ppp inner> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
ppp inner> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

********************************* \ ppp inner has returned MyLeaf (RPMT ["imbibes"])         :9_3:UnDeeper:
manyIndentation/leaf?> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
manyIndentation/leaf?> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :9_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper                    :9_4:UnDeeper:
someIndentation> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someIndentation> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someIndentation> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

******************************* \ someIndentation has returned MyLeaf (RPMT ["imbibes"])         :9_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/2:someIndentation expr p> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["imbibes"]) :9_4:UnDeeper:
term p/notLabelTerm> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/notLabelTerm> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"])         :9_4:UnDeeper:
termIndent p> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
termIndent p> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

**************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])                  :9_4:UnDeeper:
**************************** / binary(Or)                                                           :9_4:UnDeeper:
binary(Or)> IN: ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :9_4:UnDeeper:
**************************** / binary(And)                                                          :9_4:UnDeeper:
binary(And)> IN: ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :9_4:UnDeeper:
**************************** / binary(SetLess)                                                      :9_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :9_4:UnDeeper:
**************************** / binary(SetPlus)                                                      :9_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :9_4:UnDeeper:
expression> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
expression> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*************************** \ expression has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :9_4:UnDeeper:
ppp inner> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
ppp inner> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :9_4:UnDeeper:
pBSR> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pBSR> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************* \ pBSR has returned Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])] :9_4:UnDeeper:
************************* > constructed simpleHorn; running tellIdFirst                                :9_4:UnDeeper:
nested simpleHorn> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************************ \ nested simpleHorn has returned (RPMT ["degustates"],0)                       :9_4:UnDeeper:
slRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********************** \ slRelPred has returned (RPMT ["degustates"],0)                                 :9_4:UnDeeper:
*********************** / undeepers                                                                      :9_4:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :9_4:UnDeeper:
************************ > sameLine: success!                                                           :9_4:UnDeeper:
undeepers> IN: ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                      :9_4:UnDeeper:
pRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> VALUE: (RPMT ["degustates"],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************** \ pRelPred has returned RPMT ["degustates"]                                        :9_4:UnDeeper:
term p/3:plain p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["degustates"])                         :9_4:UnDeeper:
term p/notLabelTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                        :9_4:UnDeeper:
termIndent p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************* \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                 :9_4:UnDeeper:
******************* / binary(Or)                                                                             :9_4:UnDeeper:
binary(Or)> IN: ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :9_4:UnDeeper:
******************* / binary(And)                                                                            :9_4:UnDeeper:
binary(And)> IN: ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :9_4:UnDeeper:
******************* / binary(SetLess)                                                                        :9_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :9_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :9_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :9_4:UnDeeper:
expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

****************** \ expression has returned MyLeaf (RPMT ["degustates"])                                     :9_4:UnDeeper:
ppp inner> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

***************** \ ppp inner has returned MyLeaf (RPMT ["degustates"])                                        :9_4:UnDeeper:
manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["degustates"])                              :9_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :9_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :9_1:Must:
someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*************** \ someIndentation has returned MyLeaf (RPMT ["degustates"])                               :9_1:Must:
term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["degustates"])                 :9_1:Must:
term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                               :9_1:Must:
termIndent p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************ \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                        :9_1:Must:
************ / binary(Or)                                                                                    :9_1:Must:
binary(Or)> IN: MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :9_1:Must:
************ / binary(And)                                                                                   :9_1:Must:
binary(And)> IN: MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :9_1:Must:
************ / binary(SetLess)                                                                               :9_1:Must:
binary(SetLess)> IN: MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :9_1:Must:
************ / binary(SetPlus)                                                                               :9_1:Must:
binary(SetPlus)> IN: MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :9_1:Must:
expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********** \ expression has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]            :9_1:Must:
ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********** \ ppp inner has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]               :9_1:Must:
pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********* \ pBSR has returned All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]                    :9_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :9_1:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******* \ manyIndentation/leaf? has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :9_1:Must:
******* / WHERE                                                                                                   :9_1:Must:
WHERE> IN: MUST ( "sing" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=32:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :9_1:Must:
******* / preambleParamText:[Having]                                                                              :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :9_1:Must:
preambleParamText:[Having]> IN: MUST ( "sing" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=32:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :9_1:Must:
******* / preambleParamText:[Given]                                                                               :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :9_1:Must:
preambleParamText:[Given]> IN: MUST ( "sing" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=32:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :9_1:Must:
******* / preambleParamText:[Upon]                                                                                :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :9_1:Must:
preambleParamText:[Upon]> IN: MUST ( "sing" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=32:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :9_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :9_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "sing" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=32:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :9_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :9_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "sing" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=32:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :9_1:Must:
******* / pDT                                                                                                     :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :9_2:GoDeeper:
******** / |>| calling $>>                                                                                        :9_2:GoDeeper:
********* / |>>/recurse                                                                                          :9_2:GoDeeper:
********** / |>>/recurse                                                                                         :9_2:Other "sing:
|>>/recurse> IN: "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=34:
|>>/recurse> unexpected "sing"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "sing" Expecting: (                                      :9_2:Other "sing:
********** / |>>/base                                                                                            :9_2:Other "sing:
*********** / pTemporal/eventually                                                                              :9_2:Other "sing:
pTemporal/eventually> IN: "sing" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=34:
pTemporal/eventually> unexpected "sing"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "sing" Expecting: EVENTUALLY                  :9_2:Other "sing:
*********** / pTemporal/specifically                                                                            :9_2:Other "sing:
************ / $>|                                                                                             :9_2:Other "sing:
$>|> IN: "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=34:
$>|> unexpected "sing"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "sing" Expecting: BEFORE AFTER BY ON                         :9_2:Other "sing:
pTemporal/specifically> IN: "sing" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=34:
pTemporal/specifically> unexpected "sing"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "sing" Expecting: BEFORE AFTER BY ON        :9_2:Other "sing:
*********** / pTemporal/vaguely                                                                                 :9_2:Other "sing:
pTemporal/vaguely> IN: "sing" )
pTemporal/vaguely> MATCH (COK): "sing"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "sing"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "sing")                    :1_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "sing"))                               :1_2:UnDeeper:
|>>/base> IN: "sing" )
|>>/base> MATCH (COK): "sing"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sing")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "sing")),0)                    :1_2:UnDeeper:
|>>/recurse> IN: ( "sing" )
|>>/recurse> MATCH (COK): ( "sing"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sing")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "sing")),1)                   :1_2:UnDeeper:
|>| calling $>>> IN: ( "sing" )
|>| calling $>>> MATCH (COK): ( "sing"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "sing")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "sing")),1)                 :1_2:UnDeeper:
******** / undeepers                                                                                                :1_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :1_2:UnDeeper:
********* > sameLine: success!                                                                                :EOF:
undeepers> IN: )
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                           :EOF:
pDT> IN: MUST ( "sing" )
pDT> MATCH (COK): MUST ( "sing" )
pDT> VALUE: ((DMust,Just (TemporalConstraint TVague (Just 0) "sing")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TVague (Just 0) "sing"))                             :EOF:
******* / WHERE                                                                                                 :EOF:
WHERE> IN: <EMPTY>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=36:
WHERE> unexpected end of input
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected end of input Expecting: WHERE                                    :EOF:
******* / preambleParamText:[Having]                                                                            :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected end of input
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: HAVING                                   :EOF:
preambleParamText:[Having]> IN: <EMPTY>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=36:
preambleParamText:[Having]> unexpected end of input
preambleParamText:[Having]> expecting HAVING or any token

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected end of input Expecting: HAVING any token    :EOF:
******* / preambleParamText:[Given]                                                                             :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected end of input
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: GIVEN                                    :EOF:
preambleParamText:[Given]> IN: <EMPTY>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=36:
preambleParamText:[Given]> unexpected end of input
preambleParamText:[Given]> expecting GIVEN or any token

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected end of input Expecting: GIVEN any token      :EOF:
******* / preambleParamText:[Upon]                                                                              :EOF:
******** / $>|                                                                                                 :EOF:
$>|> IN: <EMPTY>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=36:
$>|> unexpected end of input
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected end of input Expecting: UPON                                     :EOF:
preambleParamText:[Upon]> IN: <EMPTY>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=36:
preambleParamText:[Upon]> unexpected end of input
preambleParamText:[Upon]> expecting UPON or any token

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected end of input Expecting: UPON any token        :EOF:
******* / preambleBoolStructR [Unless]                                                                          :EOF:
preambleBoolStructR [Unless]> IN: <EMPTY>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=36:
preambleBoolStructR [Unless]> unexpected end of input
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected end of input Expecting: UNLESS            :EOF:
******* / preambleBoolStructR [When,If]                                                                         :EOF:
preambleBoolStructR [When,If]> IN: <EMPTY>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=36:
preambleBoolStructR [When,If]> unexpected end of input
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected end of input Expecting: IF WHEN          :EOF:
******* / pDoAction/Do                                                                                          :EOF:
pDoAction/Do> IN: <EMPTY>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=36:
pDoAction/Do> unexpected end of input
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected end of input Expecting: DO                                :EOF:
regulative permutation with deontic-temporal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=36:
regulative permutation with deontic-temporal> unexpected end of input
regulative permutation with deontic-temporal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :EOF:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "pers:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "pers:
********** / pMultiTermAka                                                                                       :1_2:Other "pers:
*********** / pAKA                                                                                              :1_2:Other "pers:
************ / slAKA                                                                                           :1_2:Other "pers:
************* / $*|                                                                                           :1_2:Other "pers:
************** / slAKA base                                                                                  :1_2:Other "pers:
*************** / slMultiTerm                                                                               :1_2:Other "pers:
**************** / someSL                                                                                  :1_2:Other "pers:
someSL> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
someSL> MATCH (COK): "person"
someSL> VALUE: ((["person"],0),[])

**************** \ someSL has returned (["person"],0)                                                       :2_2:UnDeeper:
slMultiTerm> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slMultiTerm> MATCH (COK): "person"
slMultiTerm> VALUE: ((["person"],0),[])

*************** \ slMultiTerm has returned (["person"],0)                                                    :2_2:UnDeeper:
slAKA base> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA base> MATCH (COK): "person"
slAKA base> VALUE: ((["person"],0),[])

************** \ slAKA base has returned (["person"],0)                                                       :2_2:UnDeeper:
$*|> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
$*|> MATCH (COK): "person"
$*|> VALUE: ((["person"],0),[])

************* \ $*| has returned (["person"],0)                                                                :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional akapart                                                                       :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / PAKA/akapart                                                                           :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
******************* / Aka Token                                                                          :2_2:UnDeeper:
Aka Token> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=3:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :2_2:UnDeeper:
PAKA/akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=3:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional akapart> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=3:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=3:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=3:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=3:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :2_2:UnDeeper:
slAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
slAKA> MATCH (COK): "person"
slAKA> VALUE: ((["person"],0),[])

************ \ slAKA has returned (["person"],0)                                                                :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                             :2_2:UnDeeper:
undeepers> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :2_2:UnDeeper:
pAKA> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pAKA> MATCH (COK): "person"
pAKA> VALUE: (["person"],[])

*********** \ pAKA has returned ["person"]                                                                       :2_2:UnDeeper:
pMultiTermAka> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
pMultiTermAka> MATCH (COK): "person"
pMultiTermAka> VALUE: (["person"],[])

********** \ pMultiTermAka has returned ["person"]                                                                :2_2:UnDeeper:
manyIndentation/leaf?> IN: "person" ) WHO ( "walks" ) AND ( "degust <…>
manyIndentation/leaf?> MATCH (COK): "person"
manyIndentation/leaf?> VALUE: (["person"],[])

********* \ manyIndentation/leaf? has returned ["person"]                                                          :2_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :2_2:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "walks" ) AND ( "degustates" MEA <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Who:
someIndentation> IN: ( "person" ) WHO ( "walks" ) AND ( "degu <…>
someIndentation> MATCH (COK): ( "person" )
someIndentation> VALUE: (["person"],[])

******** \ someIndentation has returned ["person"]                                                               :2_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "person" )
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("person" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("person" :| [],Nothing) :| []))              :2_1:Who:
******* / manyIndentation/leaf?                                                                                   :2_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Who:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "walk:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "walk:
***************** / ppp inner                                                                             :2_2:Other "walk:
****************** / expression                                                                          :2_2:Other "walk:
******************* / termIndent p                                                                      :2_2:Other "walk:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (CERR): "walks"
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1a:label ends directly above next line> MATCH (CERR): "walks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=7:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "walks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "walk:
********************* > |<|                                                                           :2_2:Other "walk:
********************* > |<* starting                                                                  :2_2:Other "walk:
********************* / $*|                                                                           :2_2:Other "walk:
********************** / someSL                                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

********************** \ someSL has returned (["walks"],0)                                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

********************* \ $*| has returned (["walks"],0)                                                 :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:And:
*********************** / expression                                                              :3_1:And:
************************ / termIndent p                                                          :3_1:And:
************************* / term p/1a:label ends directly above next line                       :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1a:label ends directly above next line> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=8:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=8:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/1c:label ends to the right of line below                     :3_1:And:
************************** > |<|                                                               :3_1:And:
************************** > |<* starting                                                      :3_1:And:
************************** / $*|                                                               :3_1:And:
*************************** / someSL                                                          :3_1:And:
**************************** / pNumAsText                                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
term p/1c:label ends to the right of line below> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :3_1:And:
************************* / term p/notLabelTerm                                                 :3_1:And:
************************** / term p/2:someIndentation expr p                                   :3_1:And:
*************************** / someIndentation                                                 :3_1:And:
**************************** / myindented-GoDeeper                                           :3_1:And:
myindented-GoDeeper> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=8:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :3_1:And:
someIndentation> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=8:
someIndentation> unexpected AND
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :3_1:And:
term p/2:someIndentation expr p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=8:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :3_1:And:
************************** / term p/3:plain p                                                  :3_1:And:
*************************** / pRelPred                                                        :3_1:And:
**************************** / slRelPred                                                     :3_1:And:
***************************** / nested simpleHorn                                           :3_1:And:
****************************** > |^|                                                       :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
nested simpleHorn> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPConstraint                                                :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPConstraint> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=8:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPBoolStructR                                               :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slMultiTerm                                             :3_1:And:
******************************** / someSL                                                :3_1:And:
********************************* / pNumAsText                                          :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPBoolStructR> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=8:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :3_1:And:
***************************** / RPMT                                                        :3_1:And:
****************************** / $*|                                                       :3_1:And:
******************************* / slAKA                                                   :3_1:And:
******************************** / $*|                                                   :3_1:And:
********************************* / slAKA base                                          :3_1:And:
********************************** / slMultiTerm                                       :3_1:And:
*********************************** / someSL                                          :3_1:And:
************************************ / pNumAsText                                    :3_1:And:
pNumAsText> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=8:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :3_1:And:
someSL> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=8:
someSL> unexpected AND
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :3_1:And:
slMultiTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=8:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :3_1:And:
slAKA base> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=8:
slAKA base> unexpected AND
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
slAKA> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=8:
slAKA> unexpected AND
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :3_1:And:
RPMT> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=8:
RPMT> unexpected AND
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :3_1:And:
slRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=8:
slRelPred> unexpected AND
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :3_1:And:
pRelPred> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=8:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :3_1:And:
term p/3:plain p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=8:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :3_1:And:
term p/notLabelTerm> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=8:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :3_1:And:
termIndent p> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=8:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :3_1:And:
expression> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=8:
expression> unexpected AND
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected AND Expecting: expression     :3_1:And:
ppp inner> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=8:
ppp inner> unexpected AND
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression        :3_1:And:
********************** / withPrePost                                                               :3_1:And:
*********************** > |<* starting                                                            :3_1:And:
*********************** / $*|                                                                     :3_1:And:
************************ / pre part                                                              :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text   :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text          :3_1:And:
withPrePost> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=8:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text    :3_1:And:
********************** / $*|                                                                       :3_1:And:
*********************** / pre part                                                                :3_1:And:
pre part> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=8:
pre part> unexpected AND
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text     :3_1:And:
$*|> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=8:
$*|> unexpected AND
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text            :3_1:And:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=7:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=7:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=7:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=7:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=7:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=7:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=7:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=7:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=7:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=7:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=7:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=7:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=7:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=7:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=7:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=7:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=7:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=7:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=7:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=7:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=7:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=8:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "walks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=8:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "walk:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "walk:
********************** / someIndentation                                                             :2_2:Other "walk:
*********************** / myindented-GoDeeper                                                       :2_2:Other "walk:
myindented-GoDeeper> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected "walks"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "walks" Expecting: (   :2_2:Other "walk:
someIndentation> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected "walks"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "walks" Expecting: (         :2_2:Other "walk:
term p/2:someIndentation expr p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=6:
term p/2:someIndentation expr p> unexpected "walks"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "walks" Expecting: ( :2_2:Other "walk:
********************* / term p/3:plain p                                                              :2_2:Other "walk:
********************** / pRelPred                                                                    :2_2:Other "walk:
*********************** / slRelPred                                                                 :2_2:Other "walk:
************************ / nested simpleHorn                                                       :2_2:Other "walk:
************************* > |^|                                                                   :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************* \ |^| deeps has returned ([()],-1)                                    :3_1:And:
nested simpleHorn> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
nested simpleHorn> MATCH (CERR): "walks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=8:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :3_1:And:
************************ / RPConstraint                                                            :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPConstraint> MATCH (CERR): "walks"
RPConstraint> ERROR:
RPConstraint> offset=7:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slMultiTerm                                                         :2_2:Other "walk:
*************************** / someSL                                                            :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

*************************** \ someSL has returned (["walks"],0)                                  :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

************************** \ slMultiTerm has returned (["walks"],0)                               :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=7:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPBoolStructR> MATCH (CERR): "walks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=7:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "walk:
************************* / $*|                                                                   :2_2:Other "walk:
************************** / slAKA                                                               :2_2:Other "walk:
*************************** / $*|                                                               :2_2:Other "walk:
**************************** / slAKA base                                                      :2_2:Other "walk:
***************************** / slMultiTerm                                                   :2_2:Other "walk:
****************************** / someSL                                                      :2_2:Other "walk:
someSL> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
someSL> MATCH (COK): "walks"
someSL> VALUE: ((["walks"],0),[])

****************************** \ someSL has returned (["walks"],0)                            :3_2:UnDeeper:
slMultiTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slMultiTerm> MATCH (COK): "walks"
slMultiTerm> VALUE: ((["walks"],0),[])

***************************** \ slMultiTerm has returned (["walks"],0)                         :3_2:UnDeeper:
slAKA base> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA base> MATCH (COK): "walks"
slAKA base> VALUE: ((["walks"],0),[])

**************************** \ slAKA base has returned (["walks"],0)                            :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

*************************** \ $*| has returned (["walks"],0)                                     :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=7:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=7:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=7:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=7:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=7:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slAKA> MATCH (COK): "walks"
slAKA> VALUE: ((["walks"],0),[])

************************** \ slAKA has returned (["walks"],0)                                     :3_2:UnDeeper:
$*|> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
$*|> MATCH (COK): "walks"
$*|> VALUE: ((["walks"],0),[])

************************* \ $*| has returned (["walks"],0)                                         :3_2:UnDeeper:
RPMT> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
RPMT> MATCH (COK): "walks"
RPMT> VALUE: ((RPMT ["walks"],0),[])

************************ \ RPMT has returned (RPMT ["walks"],0)                                     :3_2:UnDeeper:
slRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
slRelPred> MATCH (COK): "walks"
slRelPred> VALUE: ((RPMT ["walks"],0),[])

*********************** \ slRelPred has returned (RPMT ["walks"],0)                                  :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                       :3_2:UnDeeper:
undeepers> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                  :3_2:UnDeeper:
pRelPred> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
pRelPred> MATCH (COK): "walks"
pRelPred> VALUE: (RPMT ["walks"],[])

********************** \ pRelPred has returned RPMT ["walks"]                                         :3_2:UnDeeper:
term p/3:plain p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/3:plain p> MATCH (COK): "walks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["walks"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["walks"])                          :3_2:UnDeeper:
term p/notLabelTerm> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
term p/notLabelTerm> MATCH (COK): "walks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                         :3_2:UnDeeper:
termIndent p> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
termIndent p> MATCH (COK): "walks"
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["walks"])                                  :3_2:UnDeeper:
******************* / binary(Or)                                                                         :3_2:UnDeeper:
binary(Or)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=7:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                          :3_2:UnDeeper:
******************* / binary(And)                                                                        :3_2:UnDeeper:
binary(And)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=7:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                        :3_2:UnDeeper:
******************* / binary(SetLess)                                                                    :3_2:UnDeeper:
binary(SetLess)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=7:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                   :3_2:UnDeeper:
******************* / binary(SetPlus)                                                                    :3_2:UnDeeper:
binary(SetPlus)> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=7:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                   :3_2:UnDeeper:
expression> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
expression> MATCH (COK): "walks"
expression> VALUE: (MyLeaf (RPMT ["walks"]),[])

****************** \ expression has returned MyLeaf (RPMT ["walks"])                                      :3_2:UnDeeper:
ppp inner> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
ppp inner> MATCH (COK): "walks"
ppp inner> VALUE: (MyLeaf (RPMT ["walks"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["walks"])                                         :3_2:UnDeeper:
manyIndentation/leaf?> IN: "walks" ) AND ( "degustates" MEANS ( "ea <…>
manyIndentation/leaf?> MATCH (COK): "walks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["walks"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["walks"])                               :3_2:UnDeeper:
**************** / myindented-UnDeeper                                                                      :3_2:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "degustates" MEANS ( "eats" ) OR <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:And:
someIndentation> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
someIndentation> MATCH (COK): ( "walks" )
someIndentation> VALUE: (MyLeaf (RPMT ["walks"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
term p/2:someIndentation expr p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "walks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["walks"])                      :3_1:And:
term p/notLabelTerm> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
term p/notLabelTerm> MATCH (COK): ( "walks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["walks"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["walks"])                                    :3_1:And:
termIndent p> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
termIndent p> MATCH (COK): ( "walks" )
termIndent p> VALUE: (MyLeaf (RPMT ["walks"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["walks"])                                             :3_1:And:
************ / binary(Or)                                                                                    :3_1:And:
binary(Or)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=8:
binary(Or)> unexpected AND
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR                                   :3_1:And:
************ / binary(And)                                                                                   :3_1:And:
binary(And)> IN: AND ( "degustates" MEANS ( "eats" ) OR ( <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

************ \ binary(And) has returned And                                                                   :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=9:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=9:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=9:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=9:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=9:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=9:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "degu:
**************** / manyIndentation/leaf?                                                                   :3_2:Other "degu:
***************** / ppp inner                                                                             :3_2:Other "degu:
****************** / expression                                                                          :3_2:Other "degu:
******************* / termIndent p                                                                      :3_2:Other "degu:
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
********************** / pNumAsText                                                                  :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number           :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (CERR): "degustates"
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number      :4_2:Means:
term p/1a:label ends directly above next line> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1a:label ends directly above next line> MATCH (CERR): "degustates"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :4_2:Means:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / matching EOL                                                                  :4_2:Means:
matching EOL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=11:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL              :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "degustates"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :4_2:Means:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "degu:
********************* > |<|                                                                           :3_2:Other "degu:
********************* > |<* starting                                                                  :3_2:Other "degu:
********************* / $*|                                                                           :3_2:Other "degu:
********************** / someSL                                                                      :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

********************** \ someSL has returned (["degustates"],0)                                      :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

********************* \ $*| has returned (["degustates"],0)                                           :4_2:Means:
********************* / |<*/parent                                                                    :4_2:Means:
********************** > |<*/recurse                                                                 :4_2:Means:
********************** / |<*/base                                                                    :4_2:Means:
*********************** / ppp inner                                                                 :4_2:Means:
************************ / expression                                                              :4_2:Means:
************************* / termIndent p                                                          :4_2:Means:
************************** / term p/1a:label ends directly above next line                       :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=11:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1b:label ends to the left of line below, with EOL            :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=11:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/1c:label ends to the right of line below                     :4_2:Means:
*************************** > |<|                                                               :4_2:Means:
*************************** > |<* starting                                                      :4_2:Means:
*************************** / $*|                                                               :4_2:Means:
**************************** / someSL                                                          :4_2:Means:
***************************** / pNumAsText                                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :4_2:Means:
************************** / term p/notLabelTerm                                                 :4_2:Means:
*************************** / term p/2:someIndentation expr p                                   :4_2:Means:
**************************** / someIndentation                                                 :4_2:Means:
***************************** / myindented-GoDeeper                                           :4_2:Means:
myindented-GoDeeper> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=11:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :4_2:Means:
someIndentation> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=11:
someIndentation> unexpected MEANS
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :4_2:Means:
term p/2:someIndentation expr p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=11:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :4_2:Means:
*************************** / term p/3:plain p                                                  :4_2:Means:
**************************** / pRelPred                                                        :4_2:Means:
***************************** / slRelPred                                                     :4_2:Means:
****************************** / nested simpleHorn                                           :4_2:Means:
******************************* > |^|                                                       :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
nested simpleHorn> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=11:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPConstraint                                                :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPConstraint> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=11:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPBoolStructR                                               :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slMultiTerm                                             :4_2:Means:
********************************* / someSL                                                :4_2:Means:
********************************** / pNumAsText                                          :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPBoolStructR> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=11:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :4_2:Means:
****************************** / RPMT                                                        :4_2:Means:
******************************* / $*|                                                       :4_2:Means:
******************************** / slAKA                                                   :4_2:Means:
********************************* / $*|                                                   :4_2:Means:
********************************** / slAKA base                                          :4_2:Means:
*********************************** / slMultiTerm                                       :4_2:Means:
************************************ / someSL                                          :4_2:Means:
************************************* / pNumAsText                                    :4_2:Means:
pNumAsText> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=11:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :4_2:Means:
someSL> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=11:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :4_2:Means:
slMultiTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=11:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=11:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
slAKA> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=11:
slAKA> unexpected MEANS
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :4_2:Means:
RPMT> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=11:
RPMT> unexpected MEANS
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :4_2:Means:
slRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=11:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
pRelPred> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=11:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/3:plain p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=11:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :4_2:Means:
term p/notLabelTerm> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=11:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :4_2:Means:
termIndent p> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=11:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :4_2:Means:
expression> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=11:
expression> unexpected MEANS
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression   :4_2:Means:
ppp inner> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=11:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression      :4_2:Means:
*********************** / withPrePost                                                               :4_2:Means:
************************ > |<* starting                                                            :4_2:Means:
************************ / $*|                                                                     :4_2:Means:
************************* / pre part                                                              :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text        :4_2:Means:
withPrePost> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=11:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text  :4_2:Means:
*********************** / $*|                                                                       :4_2:Means:
************************ / pre part                                                                :4_2:Means:
pre part> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=11:
pre part> unexpected MEANS
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text   :4_2:Means:
$*|> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=11:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text          :4_2:Means:
|<*/base> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=11:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :4_2:Means:
|<*/parent> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=11:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :4_2:Means:
term p/1c:label ends to the right of line below> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "degustates"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=11:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :4_2:Means:
******************** / term p/notLabelTerm                                                             :3_2:Other "degu:
********************* / term p/2:someIndentation expr p                                               :3_2:Other "degu:
********************** / someIndentation                                                             :3_2:Other "degu:
*********************** / myindented-GoDeeper                                                       :3_2:Other "degu:
myindented-GoDeeper> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected "degustates"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
someIndentation> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected "degustates"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "degustates" Expecting: (    :3_2:Other "degu:
term p/2:someIndentation expr p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected "degustates"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "degustates" Expecting: ( :3_2:Other "degu:
********************* / term p/3:plain p                                                              :3_2:Other "degu:
********************** / pRelPred                                                                    :3_2:Other "degu:
*********************** / slRelPred                                                                 :3_2:Other "degu:
************************ / nested simpleHorn                                                       :3_2:Other "degu:
************************* > |^|                                                                   :3_2:Other "degu:
************************* / $*|                                                                   :3_2:Other "degu:
************************** / slMultiTerm                                                         :3_2:Other "degu:
*************************** / someSL                                                            :3_2:Other "degu:
someSL> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
someSL> MATCH (COK): "degustates"
someSL> VALUE: ((["degustates"],0),[])

*************************** \ someSL has returned (["degustates"],0)                            :4_2:Means:
slMultiTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slMultiTerm> MATCH (COK): "degustates"
slMultiTerm> VALUE: ((["degustates"],0),[])

************************** \ slMultiTerm has returned (["degustates"],0)                         :4_2:Means:
$*|> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
$*|> MATCH (COK): "degustates"
$*|> VALUE: ((["degustates"],0),[])

************************* \ $*| has returned (["degustates"],0)                                   :4_2:Means:
************************* / |^| deeps                                                             :4_2:Means:
|^| deeps> IN: MEANS ( "eats" ) OR ( "imbibes" MEANS (  <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

************************* \ |^| deeps has returned ([],0)                                         :4_2:Means:
************************* / pBSR                                                                   :4_3:GoDeeper:
************************** / ppp inner                                                            :4_3:GoDeeper:
*************************** / expression                                                         :4_3:GoDeeper:
**************************** / termIndent p                                                     :4_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=12:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=12:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :4_3:GoDeeper:
****************************** > |<|                                                          :4_3:GoDeeper:
****************************** > |<* starting                                                 :4_3:GoDeeper:
****************************** / $*|                                                          :4_3:GoDeeper:
******************************* / someSL                                                     :4_3:GoDeeper:
******************************** / pNumAsText                                               :4_3:GoDeeper:
pNumAsText> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=12:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :4_3:GoDeeper:
someSL> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=12:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
$*|> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=12:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=12:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :4_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :4_3:GoDeeper:
******************************* / someIndentation                                            :4_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :4_3:GoDeeper:
myindented-GoDeeper> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :4_3:Other "eats:
******************************** / manyIndentation/leaf?                                     :4_3:Other "eats:
********************************* / ppp inner                                               :4_3:Other "eats:
********************************** / expression                                            :4_3:Other "eats:
*********************************** / termIndent p                                        :4_3:Other "eats:
************************************ / term p/1a:label ends directly above next line     :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
************************************** / pNumAsText                                     :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (CERR): "eats"
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1a:label ends directly above next line> MATCH (CERR): "eats"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :5_3:UnDeeper:
************************************ / term p/1b:label ends to the left of line below, with EOL :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / matching EOL                                     :5_3:UnDeeper:
matching EOL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=14:
matching EOL> unexpected )
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "eats"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :5_3:UnDeeper:
************************************ / term p/1c:label ends to the right of line below   :4_3:Other "eats:
************************************* > |<|                                             :4_3:Other "eats:
************************************* > |<* starting                                    :4_3:Other "eats:
************************************* / $*|                                             :4_3:Other "eats:
************************************** / someSL                                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

************************************** \ someSL has returned (["eats"],0)               :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

************************************* \ $*| has returned (["eats"],0)                    :5_3:UnDeeper:
************************************* / |<*/parent                                       :5_3:UnDeeper:
************************************** > |<*/recurse                                    :5_3:UnDeeper:
************************************** / ppp inner                                   :5_2:Or:
*************************************** / expression                                :5_2:Or:
**************************************** / termIndent p                            :5_2:Or:
***************************************** / term p/1a:label ends directly above next line :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1a:label ends directly above next line> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1b:label ends to the left of line below, with EOL :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/1c:label ends to the right of line below :5_2:Or:
****************************************** > |<|                                 :5_2:Or:
****************************************** > |<* starting                        :5_2:Or:
****************************************** / $*|                                 :5_2:Or:
******************************************* / someSL                            :5_2:Or:
******************************************** / pNumAsText                      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

****************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
term p/1c:label ends to the right of line below> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

***************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :5_2:Or:
***************************************** / term p/notLabelTerm                   :5_2:Or:
****************************************** / term p/2:someIndentation expr p     :5_2:Or:
******************************************* / someIndentation                   :5_2:Or:
******************************************** / myindented-GoDeeper             :5_2:Or:
myindented-GoDeeper> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=15:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

******************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :5_2:Or:
someIndentation> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=15:
someIndentation> unexpected OR
someIndentation> expecting (

******************************************* \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :5_2:Or:
term p/2:someIndentation expr p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=15:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

****************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :5_2:Or:
****************************************** / term p/3:plain p                    :5_2:Or:
******************************************* / pRelPred                          :5_2:Or:
******************************************** / slRelPred                       :5_2:Or:
********************************************* / nested simpleHorn             :5_2:Or:
********************************************** > |^|                         :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
nested simpleHorn> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

********************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPConstraint                  :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPConstraint> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=15:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

********************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPBoolStructR                 :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slMultiTerm               :5_2:Or:
************************************************ / someSL                  :5_2:Or:
************************************************* / pNumAsText            :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************* \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

************************************************ \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*********************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPBoolStructR> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=15:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

********************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :5_2:Or:
********************************************* / RPMT                          :5_2:Or:
********************************************** / $*|                         :5_2:Or:
*********************************************** / slAKA                     :5_2:Or:
************************************************ / $*|                     :5_2:Or:
************************************************* / slAKA base            :5_2:Or:
************************************************** / slMultiTerm         :5_2:Or:
*************************************************** / someSL            :5_2:Or:
**************************************************** / pNumAsText      :5_2:Or:
pNumAsText> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected OR
pNumAsText> expecting number

**************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :5_2:Or:
someSL> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected OR
someSL> expecting other text or number

*************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :5_2:Or:
slMultiTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=15:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA base> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=15:
slAKA base> unexpected OR
slAKA base> expecting other text or number

************************************************* \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

************************************************ \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
slAKA> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=15:
slAKA> unexpected OR
slAKA> expecting other text or number

*********************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :5_2:Or:
RPMT> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=15:
RPMT> unexpected OR
RPMT> expecting other text or number

********************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :5_2:Or:
slRelPred> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=15:
slRelPred> unexpected OR
slRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
pRelPred> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=15:
pRelPred> unexpected OR
pRelPred> expecting other text or number

******************************************* \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :5_2:Or:
term p/3:plain p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=15:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

****************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :5_2:Or:
term p/notLabelTerm> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=15:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

***************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :5_2:Or:
termIndent p> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=15:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

**************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :5_2:Or:
expression> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=15:
expression> unexpected OR
expression> expecting expression

*************************************** \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :5_2:Or:
ppp inner> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=15:
ppp inner> unexpected OR
ppp inner> expecting expression

************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :5_2:Or:
************************************** / withPrePost                                 :5_2:Or:
*************************************** > |<* starting                              :5_2:Or:
*************************************** / $*|                                       :5_2:Or:
**************************************** / pre part                                :5_2:Or:
pre part> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
withPrePost> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=15:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / $*|                                         :5_2:Or:
*************************************** / pre part                                  :5_2:Or:
pre part> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=15:
pre part> unexpected OR
pre part> expecting ( or Other text

*************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :5_2:Or:
$*|> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected OR
$*|> expecting ( or Other text

************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :5_2:Or:
************************************** / |<*/base                                       :5_3:UnDeeper:
*************************************** / ppp inner                                    :5_3:UnDeeper:
**************************************** / expression                                 :5_3:UnDeeper:
***************************************** / termIndent p                             :5_3:UnDeeper:
****************************************** / term p/1a:label ends directly above next line :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1b:label ends to the left of line below, with EOL :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/1c:label ends to the right of line below :5_3:UnDeeper:
******************************************* > |<|                                  :5_3:UnDeeper:
******************************************* > |<* starting                         :5_3:UnDeeper:
******************************************* / $*|                                  :5_3:UnDeeper:
******************************************** / someSL                             :5_3:UnDeeper:
********************************************* / pNumAsText                       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
****************************************** / term p/notLabelTerm                    :5_3:UnDeeper:
******************************************* / term p/2:someIndentation expr p      :5_3:UnDeeper:
******************************************** / someIndentation                    :5_3:UnDeeper:
********************************************* / myindented-GoDeeper              :5_3:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :5_3:UnDeeper:
someIndentation> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected )
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :5_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / term p/3:plain p                     :5_3:UnDeeper:
******************************************** / pRelPred                           :5_3:UnDeeper:
********************************************* / slRelPred                        :5_3:UnDeeper:
********************************************** / nested simpleHorn              :5_3:UnDeeper:
*********************************************** > |^|                          :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
nested simpleHorn> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=14:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPConstraint                   :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPConstraint> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPBoolStructR                  :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slMultiTerm                :5_3:UnDeeper:
************************************************* / someSL                   :5_3:UnDeeper:
************************************************** / pNumAsText             :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPBoolStructR> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
********************************************** / RPMT                           :5_3:UnDeeper:
*********************************************** / $*|                          :5_3:UnDeeper:
************************************************ / slAKA                      :5_3:UnDeeper:
************************************************* / $*|                      :5_3:UnDeeper:
************************************************** / slAKA base             :5_3:UnDeeper:
*************************************************** / slMultiTerm          :5_3:UnDeeper:
**************************************************** / someSL             :5_3:UnDeeper:
***************************************************** / pNumAsText       :5_3:UnDeeper:
pNumAsText> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :5_3:UnDeeper:
someSL> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected )
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slMultiTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=14:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=14:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slAKA> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=14:
slAKA> unexpected )
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
RPMT> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=14:
RPMT> unexpected )
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
slRelPred> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=14:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
pRelPred> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=14:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/3:plain p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=14:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :5_3:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=14:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :5_3:UnDeeper:
termIndent p> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=14:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :5_3:UnDeeper:
expression> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=14:
expression> unexpected )
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :5_3:UnDeeper:
ppp inner> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=14:
ppp inner> unexpected )
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :5_3:UnDeeper:
*************************************** / withPrePost                                  :5_3:UnDeeper:
**************************************** > |<* starting                               :5_3:UnDeeper:
**************************************** / $*|                                        :5_3:UnDeeper:
***************************************** / pre part                                 :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
withPrePost> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=14:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
*************************************** / $*|                                          :5_3:UnDeeper:
**************************************** / pre part                                   :5_3:UnDeeper:
pre part> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=14:
pre part> unexpected )
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
$*|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected )
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :5_3:UnDeeper:
|<*/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=14:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :5_3:UnDeeper:
|<*/parent> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=15:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :5_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "eats"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :5_3:UnDeeper:
************************************ / term p/notLabelTerm                               :4_3:Other "eats:
************************************* / term p/2:someIndentation expr p                 :4_3:Other "eats:
************************************** / someIndentation                               :4_3:Other "eats:
*************************************** / myindented-GoDeeper                         :4_3:Other "eats:
myindented-GoDeeper> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected "eats"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "eats" Expecting: ( :4_3:Other "eats:
someIndentation> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected "eats"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "eats" Expecting: ( :4_3:Other "eats:
term p/2:someIndentation expr p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected "eats"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "eats" Expecting: ( :4_3:Other "eats:
************************************* / term p/3:plain p                                :4_3:Other "eats:
************************************** / pRelPred                                      :4_3:Other "eats:
*************************************** / slRelPred                                   :4_3:Other "eats:
**************************************** / nested simpleHorn                         :4_3:Other "eats:
***************************************** > |^|                                     :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |^| deeps                                :5_3:UnDeeper:
|^| deeps> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

***************************************** \ |^| deeps has returned ([()],-1)      :5_2:Or:
nested simpleHorn> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
nested simpleHorn> MATCH (CERR): "eats" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=15:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

**************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :5_2:Or:
**************************************** / RPConstraint                              :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPConstraint> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPConstraint> MATCH (CERR): "eats"
RPConstraint> ERROR:
RPConstraint> offset=14:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPBoolStructR                             :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slMultiTerm                           :4_3:Other "eats:
******************************************* / someSL                              :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

******************************************* \ someSL has returned (["eats"],0)     :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

****************************************** \ slMultiTerm has returned (["eats"],0)  :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
***************************************** / |>| calling $>>                          :5_3:UnDeeper:
****************************************** / |>>/recurse                            :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
****************************************** / |>>/base                               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :5_3:UnDeeper:
|>| calling $>>> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=14:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
RPBoolStructR> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPBoolStructR> MATCH (CERR): "eats"
RPBoolStructR> ERROR:
RPBoolStructR> offset=14:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :5_3:UnDeeper:
**************************************** / RPMT                                      :4_3:Other "eats:
***************************************** / $*|                                     :4_3:Other "eats:
****************************************** / slAKA                                 :4_3:Other "eats:
******************************************* / $*|                                 :4_3:Other "eats:
******************************************** / slAKA base                        :4_3:Other "eats:
********************************************* / slMultiTerm                     :4_3:Other "eats:
********************************************** / someSL                        :4_3:Other "eats:
someSL> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
someSL> MATCH (COK): "eats"
someSL> VALUE: ((["eats"],0),[])

********************************************** \ someSL has returned (["eats"],0) :5_3:UnDeeper:
slMultiTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slMultiTerm> MATCH (COK): "eats"
slMultiTerm> VALUE: ((["eats"],0),[])

********************************************* \ slMultiTerm has returned (["eats"],0) :5_3:UnDeeper:
slAKA base> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slAKA base> MATCH (COK): "eats"
slAKA base> VALUE: ((["eats"],0),[])

******************************************** \ slAKA base has returned (["eats"],0) :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

******************************************* \ $*| has returned (["eats"],0)        :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional akapart             :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / PAKA/akapart                 :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
************************************************* / Aka Token                :5_3:UnDeeper:
Aka Token> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=14:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting AKA

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :5_3:UnDeeper:
PAKA/akapart> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=14:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional akapart> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional akapart has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* / |>>/recurse                          :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
******************************************* / |>>/base                             :5_3:UnDeeper:
******************************************** / slAKA optional typically           :5_3:UnDeeper:
********************************************* / |?| optional something           :5_3:UnDeeper:
********************************************** / |>>/recurse                    :5_3:UnDeeper:
|>>/recurse> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=14:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :5_3:UnDeeper:
********************************************** / |>>/base                       :5_3:UnDeeper:
*********************************************** / typically                    :5_3:UnDeeper:
************************************************ / $>|                        :5_3:UnDeeper:
$>|> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=14:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
typically> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=14:
typically> unexpected )
typically> expecting TYPICALLY

*********************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=14:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :5_3:UnDeeper:
|?| optional something> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************************* \ |?| optional something has returned (Nothing,0) :5_3:UnDeeper:
slAKA optional typically> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************************** \ slAKA optional typically has returned (Nothing,0) :5_3:UnDeeper:
******************************************** > |>>/base got Nothing               :5_3:UnDeeper:
|>>/base> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************************* \ |>>/base has returned (Nothing,0)    :5_3:UnDeeper:
******************************************* > slAKA: proceeding after base and entityalias are retrieved ... :5_3:UnDeeper:
******************************************* > pAKA: entityalias = Nothing          :5_3:UnDeeper:
slAKA> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slAKA> MATCH (COK): "eats"
slAKA> VALUE: ((["eats"],0),[])

****************************************** \ slAKA has returned (["eats"],0)        :5_3:UnDeeper:
$*|> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
$*|> MATCH (COK): "eats"
$*|> VALUE: ((["eats"],0),[])

***************************************** \ $*| has returned (["eats"],0)            :5_3:UnDeeper:
RPMT> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
RPMT> MATCH (COK): "eats"
RPMT> VALUE: ((RPMT ["eats"],0),[])

**************************************** \ RPMT has returned (RPMT ["eats"],0)        :5_3:UnDeeper:
slRelPred> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
slRelPred> MATCH (COK): "eats"
slRelPred> VALUE: ((RPMT ["eats"],0),[])

*************************************** \ slRelPred has returned (RPMT ["eats"],0)     :5_3:UnDeeper:
*************************************** / undeepers                                    :5_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :5_3:UnDeeper:
**************************************** > sameLine: success!                         :5_3:UnDeeper:
undeepers> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :5_3:UnDeeper:
pRelPred> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
pRelPred> MATCH (COK): "eats"
pRelPred> VALUE: (RPMT ["eats"],[])

************************************** \ pRelPred has returned RPMT ["eats"]            :5_3:UnDeeper:
term p/3:plain p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/3:plain p> MATCH (COK): "eats"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
term p/notLabelTerm> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
term p/notLabelTerm> MATCH (COK): "eats"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"]) :5_3:UnDeeper:
termIndent p> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
termIndent p> MATCH (COK): "eats"
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])     :5_3:UnDeeper:
*********************************** / binary(Or)                                           :5_3:UnDeeper:
binary(Or)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=14:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :5_3:UnDeeper:
*********************************** / binary(And)                                          :5_3:UnDeeper:
binary(And)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=14:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :5_3:UnDeeper:
*********************************** / binary(SetLess)                                      :5_3:UnDeeper:
binary(SetLess)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=14:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :5_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :5_3:UnDeeper:
binary(SetPlus)> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=14:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :5_3:UnDeeper:
expression> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
expression> MATCH (COK): "eats"
expression> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************** \ expression has returned MyLeaf (RPMT ["eats"])         :5_3:UnDeeper:
ppp inner> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
ppp inner> MATCH (COK): "eats"
ppp inner> VALUE: (MyLeaf (RPMT ["eats"]),[])

********************************* \ ppp inner has returned MyLeaf (RPMT ["eats"])            :5_3:UnDeeper:
manyIndentation/leaf?> IN: "eats" ) OR ( "imbibes" MEANS ( "drinks" <…>
manyIndentation/leaf?> MATCH (COK): "eats"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["eats"])  :5_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :5_3:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "imbibes" MEANS ( "drinks" ) AND  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper               :5_2:Or:
someIndentation> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
someIndentation> MATCH (COK): ( "eats" )
someIndentation> VALUE: (MyLeaf (RPMT ["eats"]),[])

******************************* \ someIndentation has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
term p/2:someIndentation expr p> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/2:someIndentation expr p> MATCH (COK): ( "eats" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["eats"]),[])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["eats"]) :5_2:Or:
term p/notLabelTerm> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
term p/notLabelTerm> MATCH (COK): ( "eats" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["eats"]),[])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["eats"])       :5_2:Or:
termIndent p> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
termIndent p> MATCH (COK): ( "eats" )
termIndent p> VALUE: (MyLeaf (RPMT ["eats"]),[])

**************************** \ termIndent p has returned MyLeaf (RPMT ["eats"])                :5_2:Or:
**************************** / binary(Or)                                                      :5_2:Or:
binary(Or)> IN: OR ( "imbibes" MEANS ( "drinks" ) AND (  <…>
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

**************************** \ binary(Or) has returned Or                                       :5_3:GoDeeper:
**************************** / termIndent p                                                     :5_3:GoDeeper:
***************************** / term p/1a:label ends directly above next line                  :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=16:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1b:label ends to the left of line below, with EOL       :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=16:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/1c:label ends to the right of line below                :5_3:GoDeeper:
****************************** > |<|                                                          :5_3:GoDeeper:
****************************** > |<* starting                                                 :5_3:GoDeeper:
****************************** / $*|                                                          :5_3:GoDeeper:
******************************* / someSL                                                     :5_3:GoDeeper:
******************************** / pNumAsText                                               :5_3:GoDeeper:
pNumAsText> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=16:
pNumAsText> unexpected (
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :5_3:GoDeeper:
someSL> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=16:
someSL> unexpected (
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
$*|> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=16:
$*|> unexpected (
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=16:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_3:GoDeeper:
***************************** / term p/notLabelTerm                                            :5_3:GoDeeper:
****************************** / term p/2:someIndentation expr p                              :5_3:GoDeeper:
******************************* / someIndentation                                            :5_3:GoDeeper:
******************************** / myindented-GoDeeper                                      :5_3:GoDeeper:
myindented-GoDeeper> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************************** \ myindented-GoDeeper has returned GoDeeper                 :5_3:Other "imbi:
******************************** / manyIndentation/leaf?                                     :5_3:Other "imbi:
********************************* / ppp inner                                               :5_3:Other "imbi:
********************************** / expression                                            :5_3:Other "imbi:
*********************************** / termIndent p                                        :5_3:Other "imbi:
************************************ / term p/1a:label ends directly above next line     :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
************************************** / pNumAsText                                    :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (CERR): "imbibes"
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or other text or number

************************************* \ !Consumed Error: $*|: Unexpected MEANS Expecting: ( other text or number :6_3:Means:
term p/1a:label ends directly above next line> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1a:label ends directly above next line> MATCH (CERR): "imbibes"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting ( or other text or number

************************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: ( other text or number :6_3:Means:
************************************ / term p/1b:label ends to the left of line below, with EOL :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)                :6_3:Means:
************************************* / matching EOL                                    :6_3:Means:
matching EOL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=18:
matching EOL> unexpected MEANS
matching EOL> expecting EOL

************************************* \ !Unconsumed Error: matching EOL: Unexpected MEANS Expecting: EOL :6_3:Means:
term p/1b:label ends to the left of line below, with EOL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "imbibes"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: EOL ( :6_3:Means:
************************************ / term p/1c:label ends to the right of line below   :5_3:Other "imbi:
************************************* > |<|                                             :5_3:Other "imbi:
************************************* > |<* starting                                    :5_3:Other "imbi:
************************************* / $*|                                             :5_3:Other "imbi:
************************************** / someSL                                        :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

************************************** \ someSL has returned (["imbibes"],0)           :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

************************************* \ $*| has returned (["imbibes"],0)                :6_3:Means:
************************************* / |<*/parent                                      :6_3:Means:
************************************** > |<*/recurse                                   :6_3:Means:
************************************** / |<*/base                                      :6_3:Means:
*************************************** / ppp inner                                   :6_3:Means:
**************************************** / expression                                :6_3:Means:
***************************************** / termIndent p                            :6_3:Means:
****************************************** / term p/1a:label ends directly above next line :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1a:label ends directly above next line> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=18:
term p/1a:label ends directly above next line> unexpected MEANS
term p/1a:label ends directly above next line> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/1b:label ends to the left of line below, with EOL :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1b:label ends to the left of line below, with EOL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=18:
term p/1b:label ends to the left of line below, with EOL> unexpected MEANS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/1c:label ends to the right of line below :6_3:Means:
******************************************* > |<|                                 :6_3:Means:
******************************************* > |<* starting                        :6_3:Means:
******************************************* / $*|                                 :6_3:Means:
******************************************** / someSL                            :6_3:Means:
********************************************* / pNumAsText                      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

******************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/1c:label ends to the right of line below> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting other text or number

****************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: other text or number :6_3:Means:
****************************************** / term p/notLabelTerm                   :6_3:Means:
******************************************* / term p/2:someIndentation expr p     :6_3:Means:
******************************************** / someIndentation                   :6_3:Means:
********************************************* / myindented-GoDeeper             :6_3:Means:
myindented-GoDeeper> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=18:
myindented-GoDeeper> unexpected MEANS
myindented-GoDeeper> expecting (

********************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MEANS Expecting: ( :6_3:Means:
someIndentation> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=18:
someIndentation> unexpected MEANS
someIndentation> expecting (

******************************************** \ !Unconsumed Error: someIndentation: Unexpected MEANS Expecting: ( :6_3:Means:
term p/2:someIndentation expr p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=18:
term p/2:someIndentation expr p> unexpected MEANS
term p/2:someIndentation expr p> expecting (

******************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MEANS Expecting: ( :6_3:Means:
******************************************* / term p/3:plain p                    :6_3:Means:
******************************************** / pRelPred                          :6_3:Means:
********************************************* / slRelPred                       :6_3:Means:
********************************************** / nested simpleHorn             :6_3:Means:
*********************************************** > |^|                         :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
nested simpleHorn> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=18:
nested simpleHorn> unexpected MEANS
nested simpleHorn> expecting other text or number

********************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPConstraint                  :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPConstraint> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=18:
RPConstraint> unexpected MEANS
RPConstraint> expecting other text or number

********************************************** \ !Unconsumed Error: RPConstraint: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPBoolStructR                 :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slMultiTerm               :6_3:Means:
************************************************* / someSL                  :6_3:Means:
************************************************** / pNumAsText            :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

************************************************* \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

************************************************ \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPBoolStructR> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=18:
RPBoolStructR> unexpected MEANS
RPBoolStructR> expecting other text or number

********************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MEANS Expecting: other text or number :6_3:Means:
********************************************** / RPMT                          :6_3:Means:
*********************************************** / $*|                         :6_3:Means:
************************************************ / slAKA                     :6_3:Means:
************************************************* / $*|                     :6_3:Means:
************************************************** / slAKA base            :6_3:Means:
*************************************************** / slMultiTerm         :6_3:Means:
**************************************************** / someSL            :6_3:Means:
***************************************************** / pNumAsText      :6_3:Means:
pNumAsText> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=18:
pNumAsText> unexpected MEANS
pNumAsText> expecting number

***************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MEANS Expecting: number :6_3:Means:
someSL> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=18:
someSL> unexpected MEANS
someSL> expecting other text or number

**************************************************** \ !Unconsumed Error: someSL: Unexpected MEANS Expecting: other text or number :6_3:Means:
slMultiTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=18:
slMultiTerm> unexpected MEANS
slMultiTerm> expecting other text or number

*************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MEANS Expecting: other text or number :6_3:Means:
slAKA base> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=18:
slAKA base> unexpected MEANS
slAKA base> expecting other text or number

************************************************** \ !Unconsumed Error: slAKA base: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

************************************************* \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
slAKA> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=18:
slAKA> unexpected MEANS
slAKA> expecting other text or number

************************************************ \ !Unconsumed Error: slAKA: Unexpected MEANS Expecting: other text or number :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting other text or number

*********************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: other text or number :6_3:Means:
RPMT> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=18:
RPMT> unexpected MEANS
RPMT> expecting other text or number

********************************************** \ !Unconsumed Error: RPMT: Unexpected MEANS Expecting: other text or number :6_3:Means:
slRelPred> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=18:
slRelPred> unexpected MEANS
slRelPred> expecting other text or number

********************************************* \ !Unconsumed Error: slRelPred: Unexpected MEANS Expecting: other text or number :6_3:Means:
pRelPred> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=18:
pRelPred> unexpected MEANS
pRelPred> expecting other text or number

******************************************** \ !Unconsumed Error: pRelPred: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/3:plain p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=18:
term p/3:plain p> unexpected MEANS
term p/3:plain p> expecting other text or number

******************************************* \ !Unconsumed Error: term p/3:plain p: Unexpected MEANS Expecting: other text or number :6_3:Means:
term p/notLabelTerm> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=18:
term p/notLabelTerm> unexpected MEANS
term p/notLabelTerm> expecting ( or term

****************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected MEANS Expecting: ( term :6_3:Means:
termIndent p> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=18:
termIndent p> unexpected MEANS
termIndent p> expecting (, other text or number, or term

***************************************** \ !Unconsumed Error: termIndent p: Unexpected MEANS Expecting: ( other text or number term :6_3:Means:
expression> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=18:
expression> unexpected MEANS
expression> expecting expression

**************************************** \ !Unconsumed Error: expression: Unexpected MEANS Expecting: expression :6_3:Means:
ppp inner> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=18:
ppp inner> unexpected MEANS
ppp inner> expecting expression

*************************************** \ !Unconsumed Error: ppp inner: Unexpected MEANS Expecting: expression :6_3:Means:
*************************************** / withPrePost                                 :6_3:Means:
**************************************** > |<* starting                              :6_3:Means:
**************************************** / $*|                                       :6_3:Means:
***************************************** / pre part                                :6_3:Means:
pre part> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected MEANS
pre part> expecting ( or Other text

***************************************** \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or Other text

**************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text :6_3:Means:
withPrePost> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=18:
withPrePost> unexpected MEANS
withPrePost> expecting ( or Other text

*************************************** \ !Unconsumed Error: withPrePost: Unexpected MEANS Expecting: ( Other text :6_3:Means:
*************************************** / $*|                                         :6_3:Means:
**************************************** / pre part                                  :6_3:Means:
pre part> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=18:
pre part> unexpected MEANS
pre part> expecting ( or Other text

**************************************** \ !Unconsumed Error: pre part: Unexpected MEANS Expecting: ( Other text :6_3:Means:
$*|> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=18:
$*|> unexpected MEANS
$*|> expecting ( or Other text

*************************************** \ !Unconsumed Error: $*|: Unexpected MEANS Expecting: ( Other text :6_3:Means:
|<*/base> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=18:
|<*/base> unexpected MEANS
|<*/base> expecting (, Other text, or expression

************************************** \ !Unconsumed Error: |<*/base: Unexpected MEANS Expecting: ( ( Other text expression :6_3:Means:
|<*/parent> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=18:
|<*/parent> unexpected MEANS
|<*/parent> expecting (, ), Other text, or expression

************************************* \ !Unconsumed Error: |<*/parent: Unexpected MEANS Expecting: ( ( ) Other text expression :6_3:Means:
term p/1c:label ends to the right of line below> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "imbibes"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=18:
term p/1c:label ends to the right of line below> unexpected MEANS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MEANS Expecting: ( ( ( ) Other text expression :6_3:Means:
************************************ / term p/notLabelTerm                               :5_3:Other "imbi:
************************************* / term p/2:someIndentation expr p                 :5_3:Other "imbi:
************************************** / someIndentation                               :5_3:Other "imbi:
*************************************** / myindented-GoDeeper                         :5_3:Other "imbi:
myindented-GoDeeper> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected "imbibes"
myindented-GoDeeper> expecting (

*************************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
someIndentation> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected "imbibes"
someIndentation> expecting (

************************************** \ !Unconsumed Error: someIndentation: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
term p/2:someIndentation expr p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected "imbibes"
term p/2:someIndentation expr p> expecting (

************************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "imbibes" Expecting: ( :5_3:Other "imbi:
************************************* / term p/3:plain p                                :5_3:Other "imbi:
************************************** / pRelPred                                      :5_3:Other "imbi:
*************************************** / slRelPred                                   :5_3:Other "imbi:
**************************************** / nested simpleHorn                         :5_3:Other "imbi:
***************************************** > |^|                                     :5_3:Other "imbi:
***************************************** / $*|                                     :5_3:Other "imbi:
****************************************** / slMultiTerm                           :5_3:Other "imbi:
******************************************* / someSL                              :5_3:Other "imbi:
someSL> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
someSL> MATCH (COK): "imbibes"
someSL> VALUE: ((["imbibes"],0),[])

******************************************* \ someSL has returned (["imbibes"],0) :6_3:Means:
slMultiTerm> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slMultiTerm> MATCH (COK): "imbibes"
slMultiTerm> VALUE: ((["imbibes"],0),[])

****************************************** \ slMultiTerm has returned (["imbibes"],0) :6_3:Means:
$*|> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
$*|> MATCH (COK): "imbibes"
$*|> VALUE: ((["imbibes"],0),[])

***************************************** \ $*| has returned (["imbibes"],0)        :6_3:Means:
***************************************** / |^| deeps                               :6_3:Means:
|^| deeps> IN: MEANS ( "drinks" ) AND ( "swallows" ) OR <…>
|^| deeps> MATCH (EOK): <EMPTY>
|^| deeps> VALUE: (([],0),[])

***************************************** \ |^| deeps has returned ([],0)           :6_3:Means:
***************************************** / pBSR                                     :6_4:GoDeeper:
****************************************** / ppp inner                              :6_4:GoDeeper:
******************************************* / expression                           :6_4:GoDeeper:
******************************************** / termIndent p                       :6_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :6_4:GoDeeper:
********************************************** > |<|                            :6_4:GoDeeper:
********************************************** > |<* starting                   :6_4:GoDeeper:
********************************************** / $*|                            :6_4:GoDeeper:
*********************************************** / someSL                       :6_4:GoDeeper:
************************************************ / pNumAsText                 :6_4:GoDeeper:
pNumAsText> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :6_4:GoDeeper:
someSL> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
$*|> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
********************************************* / term p/notLabelTerm              :6_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :6_4:GoDeeper:
*********************************************** / someIndentation              :6_4:GoDeeper:
************************************************ / myindented-GoDeeper        :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :6_4:Other "drin:
************************************************ / manyIndentation/leaf?       :6_4:Other "drin:
************************************************* / ppp inner                 :6_4:Other "drin:
************************************************** / expression              :6_4:Other "drin:
*************************************************** / termIndent p          :6_4:Other "drin:
**************************************************** / term p/1a:label ends directly above next line :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
****************************************************** / pNumAsText       :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (CERR): "drinks"
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :7_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1a:label ends directly above next line> MATCH (CERR): "drinks"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_4:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

***************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
***************************************************** / matching EOL       :7_4:UnDeeper:
matching EOL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=21:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :7_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "drinks"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_4:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :6_4:Other "drin:
***************************************************** > |<|               :6_4:Other "drin:
***************************************************** > |<* starting      :6_4:Other "drin:
***************************************************** / $*|               :6_4:Other "drin:
****************************************************** / someSL          :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

****************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

***************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
***************************************************** / |<*/parent         :7_4:UnDeeper:
****************************************************** > |<*/recurse      :7_4:UnDeeper:
****************************************************** / ppp inner     :7_3:And:
******************************************************* / expression  :7_3:And:
******************************************************** / termIndent p :7_3:And:
********************************************************* / term p/1a:label ends directly above next line :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1a:label ends directly above next line> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=22:
term p/1a:label ends directly above next line> unexpected AND
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1b:label ends to the left of line below, with EOL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=22:
term p/1b:label ends to the left of line below, with EOL> unexpected AND
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/1c:label ends to the right of line below :7_3:And:
********************************************************** > |<|   :7_3:And:
********************************************************** > |<* starting :7_3:And:
********************************************************** / $*|   :7_3:And:
*********************************************************** / someSL :7_3:And:
************************************************************ / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
term p/1c:label ends to the right of line below> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: other text or number :7_3:And:
********************************************************* / term p/notLabelTerm :7_3:And:
********************************************************** / term p/2:someIndentation expr p :7_3:And:
*********************************************************** / someIndentation :7_3:And:
************************************************************ / myindented-GoDeeper :7_3:And:
myindented-GoDeeper> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=22:
myindented-GoDeeper> unexpected AND
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected AND Expecting: ( :7_3:And:
someIndentation> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=22:
someIndentation> unexpected AND
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected AND Expecting: ( :7_3:And:
term p/2:someIndentation expr p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=22:
term p/2:someIndentation expr p> unexpected AND
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected AND Expecting: ( :7_3:And:
********************************************************** / term p/3:plain p :7_3:And:
*********************************************************** / pRelPred :7_3:And:
************************************************************ / slRelPred :7_3:And:
************************************************************* / nested simpleHorn :7_3:And:
************************************************************** > |^| :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
nested simpleHorn> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPConstraint :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPConstraint> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=22:
RPConstraint> unexpected AND
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPBoolStructR :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slMultiTerm :7_3:And:
**************************************************************** / someSL :7_3:And:
***************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPBoolStructR> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=22:
RPBoolStructR> unexpected AND
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected AND Expecting: other text or number :7_3:And:
************************************************************* / RPMT :7_3:And:
************************************************************** / $*| :7_3:And:
*************************************************************** / slAKA :7_3:And:
**************************************************************** / $*| :7_3:And:
***************************************************************** / slAKA base :7_3:And:
****************************************************************** / slMultiTerm :7_3:And:
******************************************************************* / someSL :7_3:And:
******************************************************************** / pNumAsText :7_3:And:
pNumAsText> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=22:
pNumAsText> unexpected AND
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected AND Expecting: number :7_3:And:
someSL> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=22:
someSL> unexpected AND
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected AND Expecting: other text or number :7_3:And:
slMultiTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=22:
slMultiTerm> unexpected AND
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected AND Expecting: other text or number :7_3:And:
slAKA base> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=22:
slAKA base> unexpected AND
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
slAKA> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=22:
slAKA> unexpected AND
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected AND Expecting: other text or number :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: other text or number :7_3:And:
RPMT> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=22:
RPMT> unexpected AND
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected AND Expecting: other text or number :7_3:And:
slRelPred> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=22:
slRelPred> unexpected AND
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected AND Expecting: other text or number :7_3:And:
pRelPred> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=22:
pRelPred> unexpected AND
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected AND Expecting: other text or number :7_3:And:
term p/3:plain p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=22:
term p/3:plain p> unexpected AND
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected AND Expecting: other text or number :7_3:And:
term p/notLabelTerm> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=22:
term p/notLabelTerm> unexpected AND
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected AND Expecting: ( term :7_3:And:
termIndent p> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=22:
termIndent p> unexpected AND
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected AND Expecting: ( other text or number term :7_3:And:
expression> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=22:
expression> unexpected AND
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected AND Expecting: expression :7_3:And:
ppp inner> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=22:
ppp inner> unexpected AND
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected AND Expecting: expression :7_3:And:
****************************************************** / withPrePost   :7_3:And:
******************************************************* > |<* starting :7_3:And:
******************************************************* / $*|         :7_3:And:
******************************************************** / pre part  :7_3:And:
pre part> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :7_3:And:
withPrePost> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=22:
withPrePost> unexpected AND
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected AND Expecting: ( Other text :7_3:And:
****************************************************** / $*|           :7_3:And:
******************************************************* / pre part    :7_3:And:
pre part> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=22:
pre part> unexpected AND
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected AND Expecting: ( Other text :7_3:And:
$*|> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=22:
$*|> unexpected AND
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected AND Expecting: ( Other text :7_3:And:
****************************************************** / |<*/base         :7_4:UnDeeper:
******************************************************* / ppp inner      :7_4:UnDeeper:
******************************************************** / expression   :7_4:UnDeeper:
********************************************************* / termIndent p :7_4:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=21:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=21:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :7_4:UnDeeper:
*********************************************************** > |<|    :7_4:UnDeeper:
*********************************************************** > |<* starting :7_4:UnDeeper:
*********************************************************** / $*|    :7_4:UnDeeper:
************************************************************ / someSL :7_4:UnDeeper:
************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=21:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
********************************************************** / term p/notLabelTerm :7_4:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :7_4:UnDeeper:
************************************************************ / someIndentation :7_4:UnDeeper:
************************************************************* / myindented-GoDeeper :7_4:UnDeeper:
myindented-GoDeeper> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_4:UnDeeper:
someIndentation> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :7_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / term p/3:plain p :7_4:UnDeeper:
************************************************************ / pRelPred :7_4:UnDeeper:
************************************************************* / slRelPred :7_4:UnDeeper:
************************************************************** / nested simpleHorn :7_4:UnDeeper:
*************************************************************** > |^| :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
nested simpleHorn> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=21:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPConstraint :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPConstraint> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPBoolStructR :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slMultiTerm :7_4:UnDeeper:
***************************************************************** / someSL :7_4:UnDeeper:
****************************************************************** / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPBoolStructR> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
************************************************************** / RPMT :7_4:UnDeeper:
*************************************************************** / $*| :7_4:UnDeeper:
**************************************************************** / slAKA :7_4:UnDeeper:
***************************************************************** / $*| :7_4:UnDeeper:
****************************************************************** / slAKA base :7_4:UnDeeper:
******************************************************************* / slMultiTerm :7_4:UnDeeper:
******************************************************************** / someSL :7_4:UnDeeper:
********************************************************************* / pNumAsText :7_4:UnDeeper:
pNumAsText> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=21:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_4:UnDeeper:
someSL> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=21:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slMultiTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=21:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slAKA base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=21:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slAKA> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=21:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
RPMT> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=21:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
slRelPred> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=21:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
pRelPred> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=21:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/3:plain p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=21:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_4:UnDeeper:
term p/notLabelTerm> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=21:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_4:UnDeeper:
termIndent p> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=21:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_4:UnDeeper:
expression> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=21:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :7_4:UnDeeper:
ppp inner> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=21:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :7_4:UnDeeper:
******************************************************* / withPrePost    :7_4:UnDeeper:
******************************************************** > |<* starting :7_4:UnDeeper:
******************************************************** / $*|          :7_4:UnDeeper:
********************************************************* / pre part   :7_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
withPrePost> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=21:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
******************************************************* / $*|            :7_4:UnDeeper:
******************************************************** / pre part     :7_4:UnDeeper:
pre part> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=21:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
$*|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=21:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :7_4:UnDeeper:
|<*/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=21:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_4:UnDeeper:
|<*/parent> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=22:
|<*/parent> unexpected AND
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected AND Expecting: ( ( ) Other text expression :7_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "drinks"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=22:
term p/1c:label ends to the right of line below> unexpected AND
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected AND Expecting: ( ( ( ) Other text expression :7_4:UnDeeper:
**************************************************** / term p/notLabelTerm :6_4:Other "drin:
***************************************************** / term p/2:someIndentation expr p :6_4:Other "drin:
****************************************************** / someIndentation :6_4:Other "drin:
******************************************************* / myindented-GoDeeper :6_4:Other "drin:
myindented-GoDeeper> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "drinks"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
someIndentation> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "drinks"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
term p/2:someIndentation expr p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "drinks"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "drinks" Expecting: ( :6_4:Other "drin:
***************************************************** / term p/3:plain p  :6_4:Other "drin:
****************************************************** / pRelPred        :6_4:Other "drin:
******************************************************* / slRelPred     :6_4:Other "drin:
******************************************************** / nested simpleHorn :6_4:Other "drin:
********************************************************* > |^|       :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |^| deeps  :7_4:UnDeeper:
|^| deeps> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************************************* \ |^| deeps has returned ([()],-1) :7_3:And:
nested simpleHorn> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
nested simpleHorn> MATCH (CERR): "drinks" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=22:
nested simpleHorn> unexpected AND
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected AND Expecting: MEANS ) :7_3:And:
******************************************************** / RPConstraint :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |>| calling $>> :7_4:UnDeeper:
********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
********************************************************** / |>>/base :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
RPConstraint> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPConstraint> MATCH (CERR): "drinks"
RPConstraint> ERROR:
RPConstraint> offset=21:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
******************************************************** / RPBoolStructR :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slMultiTerm :6_4:Other "drin:
*********************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

*********************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

********************************************************** \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
********************************************************* / |>| calling $>> :7_4:UnDeeper:
********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
********************************************************** / |>>/base :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_4:UnDeeper:
|>| calling $>>> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=21:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
RPBoolStructR> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPBoolStructR> MATCH (CERR): "drinks"
RPBoolStructR> ERROR:
RPBoolStructR> offset=21:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_4:UnDeeper:
******************************************************** / RPMT        :6_4:Other "drin:
********************************************************* / $*|       :6_4:Other "drin:
********************************************************** / slAKA   :6_4:Other "drin:
*********************************************************** / $*|   :6_4:Other "drin:
************************************************************ / slAKA base :6_4:Other "drin:
************************************************************* / slMultiTerm :6_4:Other "drin:
************************************************************** / someSL :6_4:Other "drin:
someSL> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
someSL> MATCH (COK): "drinks"
someSL> VALUE: ((["drinks"],0),[])

************************************************************** \ someSL has returned (["drinks"],0) :7_4:UnDeeper:
slMultiTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slMultiTerm> MATCH (COK): "drinks"
slMultiTerm> VALUE: ((["drinks"],0),[])

************************************************************* \ slMultiTerm has returned (["drinks"],0) :7_4:UnDeeper:
slAKA base> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slAKA base> MATCH (COK): "drinks"
slAKA base> VALUE: ((["drinks"],0),[])

************************************************************ \ slAKA base has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

*********************************************************** \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
*********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / |>>/base :7_4:UnDeeper:
************************************************************ / slAKA optional akapart :7_4:UnDeeper:
************************************************************* / |?| optional something :7_4:UnDeeper:
************************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
************************************************************** / |>>/base :7_4:UnDeeper:
*************************************************************** / PAKA/akapart :7_4:UnDeeper:
**************************************************************** / $>| :7_4:UnDeeper:
***************************************************************** / Aka Token :7_4:UnDeeper:
Aka Token> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=21:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :7_4:UnDeeper:
PAKA/akapart> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=21:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :7_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional akapart> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :7_4:UnDeeper:
************************************************************ > |>>/base got Nothing :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :7_4:UnDeeper:
*********************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
*********************************************************** / |>>/base :7_4:UnDeeper:
************************************************************ / slAKA optional typically :7_4:UnDeeper:
************************************************************* / |?| optional something :7_4:UnDeeper:
************************************************************** / |>>/recurse :7_4:UnDeeper:
|>>/recurse> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :7_4:UnDeeper:
************************************************************** / |>>/base :7_4:UnDeeper:
*************************************************************** / typically :7_4:UnDeeper:
**************************************************************** / $>| :7_4:UnDeeper:
$>|> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
typically> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=21:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=21:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_4:UnDeeper:
|?| optional something> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :7_4:UnDeeper:
slAKA optional typically> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :7_4:UnDeeper:
************************************************************ > |>>/base got Nothing :7_4:UnDeeper:
|>>/base> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :7_4:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :7_4:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :7_4:UnDeeper:
slAKA> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slAKA> MATCH (COK): "drinks"
slAKA> VALUE: ((["drinks"],0),[])

********************************************************** \ slAKA has returned (["drinks"],0) :7_4:UnDeeper:
$*|> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
$*|> MATCH (COK): "drinks"
$*|> VALUE: ((["drinks"],0),[])

********************************************************* \ $*| has returned (["drinks"],0) :7_4:UnDeeper:
RPMT> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
RPMT> MATCH (COK): "drinks"
RPMT> VALUE: ((RPMT ["drinks"],0),[])

******************************************************** \ RPMT has returned (RPMT ["drinks"],0) :7_4:UnDeeper:
slRelPred> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
slRelPred> MATCH (COK): "drinks"
slRelPred> VALUE: ((RPMT ["drinks"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["drinks"],0) :7_4:UnDeeper:
******************************************************* / undeepers      :7_4:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :7_4:UnDeeper:
******************************************************** > sameLine: success! :7_4:UnDeeper:
undeepers> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :7_4:UnDeeper:
pRelPred> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
pRelPred> MATCH (COK): "drinks"
pRelPred> VALUE: (RPMT ["drinks"],[])

****************************************************** \ pRelPred has returned RPMT ["drinks"] :7_4:UnDeeper:
term p/3:plain p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/3:plain p> MATCH (COK): "drinks"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
term p/notLabelTerm> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
term p/notLabelTerm> MATCH (COK): "drinks"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
termIndent p> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
termIndent p> MATCH (COK): "drinks"
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
*************************************************** / binary(Or)             :7_4:UnDeeper:
binary(Or)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=21:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :7_4:UnDeeper:
*************************************************** / binary(And)            :7_4:UnDeeper:
binary(And)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=21:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :7_4:UnDeeper:
*************************************************** / binary(SetLess)        :7_4:UnDeeper:
binary(SetLess)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=21:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :7_4:UnDeeper:
*************************************************** / binary(SetPlus)        :7_4:UnDeeper:
binary(SetPlus)> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=21:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :7_4:UnDeeper:
expression> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
expression> MATCH (COK): "drinks"
expression> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
ppp inner> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
ppp inner> MATCH (COK): "drinks"
ppp inner> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
manyIndentation/leaf?> IN: "drinks" ) AND ( "swallows" ) OR ( "spit <…>
manyIndentation/leaf?> MATCH (COK): "drinks"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["drinks"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["drinks"]) :7_4:UnDeeper:
************************************************ / myindented-UnDeeper          :7_4:UnDeeper:
myindented-UnDeeper> IN: ) AND ( "swallows" ) OR ( "spits" ) ) )  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :7_3:And:
someIndentation> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
someIndentation> MATCH (COK): ( "drinks" )
someIndentation> VALUE: (MyLeaf (RPMT ["drinks"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
term p/2:someIndentation expr p> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/2:someIndentation expr p> MATCH (COK): ( "drinks" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
term p/notLabelTerm> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
term p/notLabelTerm> MATCH (COK): ( "drinks" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["drinks"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
termIndent p> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
termIndent p> MATCH (COK): ( "drinks" )
termIndent p> VALUE: (MyLeaf (RPMT ["drinks"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["drinks"]) :7_3:And:
******************************************** / binary(Or)                        :7_3:And:
binary(Or)> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=22:
binary(Or)> unexpected AND
binary(Or)> expecting OR

******************************************** \ !Unconsumed Error: binary(Or): Unexpected AND Expecting: OR :7_3:And:
******************************************** / binary(And)                       :7_3:And:
binary(And)> IN: AND ( "swallows" ) OR ( "spits" ) ) ) MU <…>
binary(And)> MATCH (COK): AND
binary(And)> VALUE: (And,[])

******************************************** \ binary(And) has returned And       :7_4:GoDeeper:
******************************************** / termIndent p                       :7_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=23:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=23:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :7_4:GoDeeper:
********************************************** > |<|                            :7_4:GoDeeper:
********************************************** > |<* starting                   :7_4:GoDeeper:
********************************************** / $*|                            :7_4:GoDeeper:
*********************************************** / someSL                       :7_4:GoDeeper:
************************************************ / pNumAsText                 :7_4:GoDeeper:
pNumAsText> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=23:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :7_4:GoDeeper:
someSL> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=23:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
$*|> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=23:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=23:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :7_4:GoDeeper:
********************************************* / term p/notLabelTerm              :7_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :7_4:GoDeeper:
*********************************************** / someIndentation              :7_4:GoDeeper:
************************************************ / myindented-GoDeeper        :7_4:GoDeeper:
myindented-GoDeeper> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :7_4:Other "swal:
************************************************ / manyIndentation/leaf?       :7_4:Other "swal:
************************************************* / ppp inner                 :7_4:Other "swal:
************************************************** / expression              :7_4:Other "swal:
*************************************************** / termIndent p          :7_4:Other "swal:
**************************************************** / term p/1a:label ends directly above next line :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
****************************************************** / pNumAsText       :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (CERR): "swallows"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :8_4:UnDeeper:
term p/1a:label ends directly above next line> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1a:label ends directly above next line> MATCH (CERR): "swallows"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :8_4:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

***************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
***************************************************** / matching EOL       :8_4:UnDeeper:
matching EOL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :8_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "swallows"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :8_4:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :7_4:Other "swal:
***************************************************** > |<|               :7_4:Other "swal:
***************************************************** > |<* starting      :7_4:Other "swal:
***************************************************** / $*|               :7_4:Other "swal:
****************************************************** / someSL          :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

****************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

***************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
***************************************************** / |<*/parent         :8_4:UnDeeper:
****************************************************** > |<*/recurse      :8_4:UnDeeper:
****************************************************** / ppp inner     :8_3:Or:
******************************************************* / expression  :8_3:Or:
******************************************************** / termIndent p :8_3:Or:
********************************************************* / term p/1a:label ends directly above next line :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1a:label ends directly above next line> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=26:
term p/1a:label ends directly above next line> unexpected OR
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1b:label ends to the left of line below, with EOL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=26:
term p/1b:label ends to the left of line below, with EOL> unexpected OR
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/1c:label ends to the right of line below :8_3:Or:
********************************************************** > |<|   :8_3:Or:
********************************************************** > |<* starting :8_3:Or:
********************************************************** / $*|   :8_3:Or:
*********************************************************** / someSL :8_3:Or:
************************************************************ / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
term p/1c:label ends to the right of line below> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: other text or number :8_3:Or:
********************************************************* / term p/notLabelTerm :8_3:Or:
********************************************************** / term p/2:someIndentation expr p :8_3:Or:
*********************************************************** / someIndentation :8_3:Or:
************************************************************ / myindented-GoDeeper :8_3:Or:
myindented-GoDeeper> IN: OR ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=26:
myindented-GoDeeper> unexpected OR
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected OR Expecting: ( :8_3:Or:
someIndentation> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=26:
someIndentation> unexpected OR
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected OR Expecting: ( :8_3:Or:
term p/2:someIndentation expr p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=26:
term p/2:someIndentation expr p> unexpected OR
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected OR Expecting: ( :8_3:Or:
********************************************************** / term p/3:plain p :8_3:Or:
*********************************************************** / pRelPred :8_3:Or:
************************************************************ / slRelPred :8_3:Or:
************************************************************* / nested simpleHorn :8_3:Or:
************************************************************** > |^| :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
nested simpleHorn> IN: OR ( "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPConstraint :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPConstraint> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=26:
RPConstraint> unexpected OR
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPBoolStructR :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slMultiTerm :8_3:Or:
**************************************************************** / someSL :8_3:Or:
***************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPBoolStructR> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=26:
RPBoolStructR> unexpected OR
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected OR Expecting: other text or number :8_3:Or:
************************************************************* / RPMT :8_3:Or:
************************************************************** / $*| :8_3:Or:
*************************************************************** / slAKA :8_3:Or:
**************************************************************** / $*| :8_3:Or:
***************************************************************** / slAKA base :8_3:Or:
****************************************************************** / slMultiTerm :8_3:Or:
******************************************************************* / someSL :8_3:Or:
******************************************************************** / pNumAsText :8_3:Or:
pNumAsText> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected OR
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected OR Expecting: number :8_3:Or:
someSL> IN: OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected OR
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected OR Expecting: other text or number :8_3:Or:
slMultiTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=26:
slMultiTerm> unexpected OR
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected OR Expecting: other text or number :8_3:Or:
slAKA base> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected OR
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
slAKA> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected OR
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected OR Expecting: other text or number :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: other text or number :8_3:Or:
RPMT> IN: OR ( "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=26:
RPMT> unexpected OR
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected OR Expecting: other text or number :8_3:Or:
slRelPred> IN: OR ( "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=26:
slRelPred> unexpected OR
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected OR Expecting: other text or number :8_3:Or:
pRelPred> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=26:
pRelPred> unexpected OR
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected OR Expecting: other text or number :8_3:Or:
term p/3:plain p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=26:
term p/3:plain p> unexpected OR
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected OR Expecting: other text or number :8_3:Or:
term p/notLabelTerm> IN: OR ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=26:
term p/notLabelTerm> unexpected OR
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected OR Expecting: ( term :8_3:Or:
termIndent p> IN: OR ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=26:
termIndent p> unexpected OR
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected OR Expecting: ( other text or number term :8_3:Or:
expression> IN: OR ( "spits" ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=26:
expression> unexpected OR
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected OR Expecting: expression :8_3:Or:
ppp inner> IN: OR ( "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=26:
ppp inner> unexpected OR
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected OR Expecting: expression :8_3:Or:
****************************************************** / withPrePost   :8_3:Or:
******************************************************* > |<* starting :8_3:Or:
******************************************************* / $*|         :8_3:Or:
******************************************************** / pre part  :8_3:Or:
pre part> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected OR
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :8_3:Or:
withPrePost> IN: OR ( "spits" ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=26:
withPrePost> unexpected OR
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected OR Expecting: ( Other text :8_3:Or:
****************************************************** / $*|           :8_3:Or:
******************************************************* / pre part    :8_3:Or:
pre part> IN: OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=26:
pre part> unexpected OR
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected OR Expecting: ( Other text :8_3:Or:
$*|> IN: OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected OR
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected OR Expecting: ( Other text :8_3:Or:
****************************************************** / |<*/base         :8_4:UnDeeper:
******************************************************* / ppp inner      :8_4:UnDeeper:
******************************************************** / expression   :8_4:UnDeeper:
********************************************************* / termIndent p :8_4:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1a:label ends directly above next line> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :8_4:UnDeeper:
*********************************************************** > |<|    :8_4:UnDeeper:
*********************************************************** > |<* starting :8_4:UnDeeper:
*********************************************************** / $*|    :8_4:UnDeeper:
************************************************************ / someSL :8_4:UnDeeper:
************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
********************************************************** / term p/notLabelTerm :8_4:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :8_4:UnDeeper:
************************************************************ / someIndentation :8_4:UnDeeper:
************************************************************* / myindented-GoDeeper :8_4:UnDeeper:
myindented-GoDeeper> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :8_4:UnDeeper:
someIndentation> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :8_4:UnDeeper:
term p/2:someIndentation expr p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / term p/3:plain p :8_4:UnDeeper:
************************************************************ / pRelPred :8_4:UnDeeper:
************************************************************* / slRelPred :8_4:UnDeeper:
************************************************************** / nested simpleHorn :8_4:UnDeeper:
*************************************************************** > |^| :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
nested simpleHorn> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPConstraint :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPConstraint> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPBoolStructR :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slMultiTerm :8_4:UnDeeper:
***************************************************************** / someSL :8_4:UnDeeper:
****************************************************************** / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPBoolStructR> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
************************************************************** / RPMT :8_4:UnDeeper:
*************************************************************** / $*| :8_4:UnDeeper:
**************************************************************** / slAKA :8_4:UnDeeper:
***************************************************************** / $*| :8_4:UnDeeper:
****************************************************************** / slAKA base :8_4:UnDeeper:
******************************************************************* / slMultiTerm :8_4:UnDeeper:
******************************************************************** / someSL :8_4:UnDeeper:
********************************************************************* / pNumAsText :8_4:UnDeeper:
pNumAsText> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :8_4:UnDeeper:
someSL> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slMultiTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slAKA base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slAKA> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
RPMT> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
slRelPred> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
pRelPred> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/3:plain p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :8_4:UnDeeper:
term p/notLabelTerm> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :8_4:UnDeeper:
termIndent p> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :8_4:UnDeeper:
expression> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :8_4:UnDeeper:
ppp inner> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :8_4:UnDeeper:
******************************************************* / withPrePost    :8_4:UnDeeper:
******************************************************** > |<* starting :8_4:UnDeeper:
******************************************************** / $*|          :8_4:UnDeeper:
********************************************************* / pre part   :8_4:UnDeeper:
pre part> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
withPrePost> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
******************************************************* / $*|            :8_4:UnDeeper:
******************************************************** / pre part     :8_4:UnDeeper:
pre part> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
$*|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :8_4:UnDeeper:
|<*/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :8_4:UnDeeper:
|<*/parent> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=26:
|<*/parent> unexpected OR
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected OR Expecting: ( ( ) Other text expression :8_4:UnDeeper:
term p/1c:label ends to the right of line below> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "swallows"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=26:
term p/1c:label ends to the right of line below> unexpected OR
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected OR Expecting: ( ( ( ) Other text expression :8_4:UnDeeper:
**************************************************** / term p/notLabelTerm :7_4:Other "swal:
***************************************************** / term p/2:someIndentation expr p :7_4:Other "swal:
****************************************************** / someIndentation :7_4:Other "swal:
******************************************************* / myindented-GoDeeper :7_4:Other "swal:
myindented-GoDeeper> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected "swallows"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
someIndentation> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected "swallows"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
term p/2:someIndentation expr p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected "swallows"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "swallows" Expecting: ( :7_4:Other "swal:
***************************************************** / term p/3:plain p  :7_4:Other "swal:
****************************************************** / pRelPred        :7_4:Other "swal:
******************************************************* / slRelPred     :7_4:Other "swal:
******************************************************** / nested simpleHorn :7_4:Other "swal:
********************************************************* > |^|       :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |^| deeps  :8_4:UnDeeper:
|^| deeps> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

********************************************************* \ |^| deeps has returned ([()],-1) :8_3:Or:
nested simpleHorn> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
nested simpleHorn> MATCH (CERR): "swallows" )
nested simpleHorn> ERROR:
nested simpleHorn> offset=26:
nested simpleHorn> unexpected OR
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected OR Expecting: MEANS ) :8_3:Or:
******************************************************** / RPConstraint :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |>| calling $>> :8_4:UnDeeper:
********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
********************************************************** / |>>/base :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPConstraint> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPConstraint> MATCH (CERR): "swallows"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
******************************************************** / RPBoolStructR :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slMultiTerm :7_4:Other "swal:
*********************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

*********************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

********************************************************** \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
********************************************************* / |>| calling $>> :8_4:UnDeeper:
********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
********************************************************** / |>>/base :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :8_4:UnDeeper:
|>| calling $>>> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
RPBoolStructR> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPBoolStructR> MATCH (CERR): "swallows"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :8_4:UnDeeper:
******************************************************** / RPMT        :7_4:Other "swal:
********************************************************* / $*|       :7_4:Other "swal:
********************************************************** / slAKA   :7_4:Other "swal:
*********************************************************** / $*|   :7_4:Other "swal:
************************************************************ / slAKA base :7_4:Other "swal:
************************************************************* / slMultiTerm :7_4:Other "swal:
************************************************************** / someSL :7_4:Other "swal:
someSL> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
someSL> MATCH (COK): "swallows"
someSL> VALUE: ((["swallows"],0),[])

************************************************************** \ someSL has returned (["swallows"],0) :8_4:UnDeeper:
slMultiTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slMultiTerm> MATCH (COK): "swallows"
slMultiTerm> VALUE: ((["swallows"],0),[])

************************************************************* \ slMultiTerm has returned (["swallows"],0) :8_4:UnDeeper:
slAKA base> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slAKA base> MATCH (COK): "swallows"
slAKA base> VALUE: ((["swallows"],0),[])

************************************************************ \ slAKA base has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

*********************************************************** \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
*********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / |>>/base :8_4:UnDeeper:
************************************************************ / slAKA optional akapart :8_4:UnDeeper:
************************************************************* / |?| optional something :8_4:UnDeeper:
************************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
************************************************************** / |>>/base :8_4:UnDeeper:
*************************************************************** / PAKA/akapart :8_4:UnDeeper:
**************************************************************** / $>| :8_4:UnDeeper:
***************************************************************** / Aka Token :8_4:UnDeeper:
Aka Token> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :8_4:UnDeeper:
$>|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :8_4:UnDeeper:
PAKA/akapart> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :8_4:UnDeeper:
|?| optional something> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional akapart> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :8_4:UnDeeper:
************************************************************ > |>>/base got Nothing :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
*********************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
*********************************************************** / |>>/base :8_4:UnDeeper:
************************************************************ / slAKA optional typically :8_4:UnDeeper:
************************************************************* / |?| optional something :8_4:UnDeeper:
************************************************************** / |>>/recurse :8_4:UnDeeper:
|>>/recurse> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :8_4:UnDeeper:
************************************************************** / |>>/base :8_4:UnDeeper:
*************************************************************** / typically :8_4:UnDeeper:
**************************************************************** / $>| :8_4:UnDeeper:
$>|> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
typically> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :8_4:UnDeeper:
|?| optional something> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :8_4:UnDeeper:
slAKA optional typically> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :8_4:UnDeeper:
************************************************************ > |>>/base got Nothing :8_4:UnDeeper:
|>>/base> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :8_4:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :8_4:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :8_4:UnDeeper:
slAKA> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slAKA> MATCH (COK): "swallows"
slAKA> VALUE: ((["swallows"],0),[])

********************************************************** \ slAKA has returned (["swallows"],0) :8_4:UnDeeper:
$*|> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
$*|> MATCH (COK): "swallows"
$*|> VALUE: ((["swallows"],0),[])

********************************************************* \ $*| has returned (["swallows"],0) :8_4:UnDeeper:
RPMT> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
RPMT> MATCH (COK): "swallows"
RPMT> VALUE: ((RPMT ["swallows"],0),[])

******************************************************** \ RPMT has returned (RPMT ["swallows"],0) :8_4:UnDeeper:
slRelPred> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
slRelPred> MATCH (COK): "swallows"
slRelPred> VALUE: ((RPMT ["swallows"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["swallows"],0) :8_4:UnDeeper:
******************************************************* / undeepers      :8_4:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :8_4:UnDeeper:
******************************************************** > sameLine: success! :8_4:UnDeeper:
undeepers> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :8_4:UnDeeper:
pRelPred> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
pRelPred> MATCH (COK): "swallows"
pRelPred> VALUE: (RPMT ["swallows"],[])

****************************************************** \ pRelPred has returned RPMT ["swallows"] :8_4:UnDeeper:
term p/3:plain p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/3:plain p> MATCH (COK): "swallows"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
term p/notLabelTerm> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
term p/notLabelTerm> MATCH (COK): "swallows"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
termIndent p> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
termIndent p> MATCH (COK): "swallows"
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
*************************************************** / binary(Or)             :8_4:UnDeeper:
binary(Or)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :8_4:UnDeeper:
*************************************************** / binary(And)            :8_4:UnDeeper:
binary(And)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :8_4:UnDeeper:
*************************************************** / binary(SetLess)        :8_4:UnDeeper:
binary(SetLess)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :8_4:UnDeeper:
*************************************************** / binary(SetPlus)        :8_4:UnDeeper:
binary(SetPlus)> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :8_4:UnDeeper:
expression> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
expression> MATCH (COK): "swallows"
expression> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
ppp inner> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
ppp inner> MATCH (COK): "swallows"
ppp inner> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
manyIndentation/leaf?> IN: "swallows" ) OR ( "spits" ) ) ) MUST ( " <…>
manyIndentation/leaf?> MATCH (COK): "swallows"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["swallows"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["swallows"]) :8_4:UnDeeper:
************************************************ / myindented-UnDeeper          :8_4:UnDeeper:
myindented-UnDeeper> IN: ) OR ( "spits" ) ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :8_3:Or:
someIndentation> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
someIndentation> MATCH (COK): ( "swallows" )
someIndentation> VALUE: (MyLeaf (RPMT ["swallows"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
term p/2:someIndentation expr p> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( "swallows" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
term p/notLabelTerm> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
term p/notLabelTerm> MATCH (COK): ( "swallows" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["swallows"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
termIndent p> IN: ( "swallows" ) OR ( "spits" ) ) ) MUST ( <…>
termIndent p> MATCH (COK): ( "swallows" )
termIndent p> VALUE: (MyLeaf (RPMT ["swallows"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["swallows"]) :8_3:Or:
******************************************** / binary(Or)                        :8_3:Or:
binary(Or)> IN: OR ( "spits" ) ) ) MUST ( "sing" )
binary(Or)> MATCH (COK): OR
binary(Or)> VALUE: (Or,[])

******************************************** \ binary(Or) has returned Or         :8_4:GoDeeper:
******************************************** / termIndent p                       :8_4:GoDeeper:
********************************************* / term p/1a:label ends directly above next line :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/1b:label ends to the left of line below, with EOL :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/1c:label ends to the right of line below :8_4:GoDeeper:
********************************************** > |<|                            :8_4:GoDeeper:
********************************************** > |<* starting                   :8_4:GoDeeper:
********************************************** / $*|                            :8_4:GoDeeper:
*********************************************** / someSL                       :8_4:GoDeeper:
************************************************ / pNumAsText                 :8_4:GoDeeper:
pNumAsText> IN: ( "spits" ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected (
pNumAsText> expecting number

************************************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :8_4:GoDeeper:
someSL> IN: ( "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected (
someSL> expecting other text or number

*********************************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
$*|> IN: ( "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected (
$*|> expecting other text or number

********************************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :8_4:GoDeeper:
********************************************* / term p/notLabelTerm              :8_4:GoDeeper:
********************************************** / term p/2:someIndentation expr p :8_4:GoDeeper:
*********************************************** / someIndentation              :8_4:GoDeeper:
************************************************ / myindented-GoDeeper        :8_4:GoDeeper:
myindented-GoDeeper> IN: ( "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************************************ \ myindented-GoDeeper has returned GoDeeper :8_4:Other "spit:
************************************************ / manyIndentation/leaf?       :8_4:Other "spit:
************************************************* / ppp inner                 :8_4:Other "spit:
************************************************** / expression              :8_4:Other "spit:
*************************************************** / termIndent p          :8_4:Other "spit:
**************************************************** / term p/1a:label ends directly above next line :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
****************************************************** / pNumAsText   :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (CERR): "spits"
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :9_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "spits" ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (CERR): "spits"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :9_2:UnDeeper:
**************************************************** / term p/1b:label ends to the left of line below, with EOL :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

***************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
***************************************************** / matching EOL   :9_2:UnDeeper:
matching EOL> IN: ) ) ) MUST ( "sing" )
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=29:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL :9_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "spits" ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "spits"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :9_2:UnDeeper:
**************************************************** / term p/1c:label ends to the right of line below :8_4:Other "spit:
***************************************************** > |<|               :8_4:Other "spit:
***************************************************** > |<* starting      :8_4:Other "spit:
***************************************************** / $*|               :8_4:Other "spit:
****************************************************** / someSL          :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

****************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

***************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
***************************************************** / |<*/parent     :9_2:UnDeeper:
****************************************************** > |<*/recurse  :9_2:UnDeeper:
****************************************************** / ppp inner :9_1:Must:
******************************************************* / expression :9_1:Must:
******************************************************** / termIndent p :9_1:Must:
********************************************************* / term p/1a:label ends directly above next line :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=32:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/1b:label ends to the left of line below, with EOL :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=32:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/1c:label ends to the right of line below :9_1:Must:
********************************************************** > |<| :9_1:Must:
********************************************************** > |<* starting :9_1:Must:
********************************************************** / $*| :9_1:Must:
*********************************************************** / someSL :9_1:Must:
************************************************************ / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

********************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=32:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :9_1:Must:
********************************************************* / term p/notLabelTerm :9_1:Must:
********************************************************** / term p/2:someIndentation expr p :9_1:Must:
*********************************************************** / someIndentation :9_1:Must:
************************************************************ / myindented-GoDeeper :9_1:Must:
myindented-GoDeeper> IN: MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=32:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

************************************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :9_1:Must:
someIndentation> IN: MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=32:
someIndentation> unexpected MUST
someIndentation> expecting (

*********************************************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :9_1:Must:
term p/2:someIndentation expr p> IN: MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=32:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :9_1:Must:
********************************************************** / term p/3:plain p :9_1:Must:
*********************************************************** / pRelPred :9_1:Must:
************************************************************ / slRelPred :9_1:Must:
************************************************************* / nested simpleHorn :9_1:Must:
************************************************************** > |^| :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
nested simpleHorn> IN: MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=32:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

************************************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPConstraint :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPConstraint> IN: MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=32:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

************************************************************* \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPBoolStructR :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slMultiTerm :9_1:Must:
**************************************************************** / someSL :9_1:Must:
***************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

**************************************************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

*************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPBoolStructR> IN: MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=32:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

************************************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :9_1:Must:
************************************************************* / RPMT :9_1:Must:
************************************************************** / $*| :9_1:Must:
*************************************************************** / slAKA :9_1:Must:
**************************************************************** / $*| :9_1:Must:
***************************************************************** / slAKA base :9_1:Must:
****************************************************************** / slMultiTerm :9_1:Must:
******************************************************************* / someSL :9_1:Must:
******************************************************************** / pNumAsText :9_1:Must:
pNumAsText> IN: MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :9_1:Must:
someSL> IN: MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected MUST
someSL> expecting other text or number

******************************************************************* \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :9_1:Must:
slMultiTerm> IN: MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=32:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

****************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :9_1:Must:
slAKA base> IN: MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

***************************************************************** \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

**************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
slAKA> IN: MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected MUST
slAKA> expecting other text or number

*************************************************************** \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting other text or number

************************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :9_1:Must:
RPMT> IN: MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=32:
RPMT> unexpected MUST
RPMT> expecting other text or number

************************************************************* \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :9_1:Must:
slRelPred> IN: MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=32:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :9_1:Must:
pRelPred> IN: MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=32:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*********************************************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/3:plain p> IN: MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=32:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :9_1:Must:
term p/notLabelTerm> IN: MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=32:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

********************************************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :9_1:Must:
termIndent p> IN: MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=32:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

******************************************************** \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :9_1:Must:
expression> IN: MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=32:
expression> unexpected MUST
expression> expecting expression

******************************************************* \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression :9_1:Must:
ppp inner> IN: MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=32:
ppp inner> unexpected MUST
ppp inner> expecting expression

****************************************************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression :9_1:Must:
****************************************************** / withPrePost :9_1:Must:
******************************************************* > |<* starting :9_1:Must:
******************************************************* / $*|     :9_1:Must:
******************************************************** / pre part :9_1:Must:
pre part> IN: MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=32:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :9_1:Must:
withPrePost> IN: MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=32:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

****************************************************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text :9_1:Must:
****************************************************** / $*|       :9_1:Must:
******************************************************* / pre part :9_1:Must:
pre part> IN: MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=32:
pre part> unexpected MUST
pre part> expecting ( or Other text

******************************************************* \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text :9_1:Must:
$*|> IN: MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected MUST
$*|> expecting ( or Other text

****************************************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text :9_1:Must:
****************************************************** / |<*/base     :9_2:UnDeeper:
******************************************************* / ppp inner  :9_2:UnDeeper:
******************************************************** / expression :9_2:UnDeeper:
********************************************************* / termIndent p :9_2:UnDeeper:
********************************************************** / term p/1a:label ends directly above next line :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MUST ( "sing" )
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/1b:label ends to the left of line below, with EOL :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MUST ( "sing" )
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/1c:label ends to the right of line below :9_2:UnDeeper:
*********************************************************** > |<| :9_2:UnDeeper:
*********************************************************** > |<* starting :9_2:UnDeeper:
*********************************************************** / $*| :9_2:UnDeeper:
************************************************************ / someSL :9_2:UnDeeper:
************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

************************************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*********************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=29:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
********************************************************** / term p/notLabelTerm :9_2:UnDeeper:
*********************************************************** / term p/2:someIndentation expr p :9_2:UnDeeper:
************************************************************ / someIndentation :9_2:UnDeeper:
************************************************************* / myindented-GoDeeper :9_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=29:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :9_2:UnDeeper:
someIndentation> IN: ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected )
someIndentation> expecting (

************************************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :9_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / term p/3:plain p :9_2:UnDeeper:
************************************************************ / pRelPred :9_2:UnDeeper:
************************************************************* / slRelPred :9_2:UnDeeper:
************************************************************** / nested simpleHorn :9_2:UnDeeper:
*************************************************************** > |^| :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=29:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPConstraint :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPConstraint> IN: ) ) ) MUST ( "sing" )
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPBoolStructR :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slMultiTerm :9_2:UnDeeper:
***************************************************************** / someSL :9_2:UnDeeper:
****************************************************************** / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

***************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
************************************************************** / RPMT :9_2:UnDeeper:
*************************************************************** / $*| :9_2:UnDeeper:
**************************************************************** / slAKA :9_2:UnDeeper:
***************************************************************** / $*| :9_2:UnDeeper:
****************************************************************** / slAKA base :9_2:UnDeeper:
******************************************************************* / slMultiTerm :9_2:UnDeeper:
******************************************************************** / someSL :9_2:UnDeeper:
********************************************************************* / pNumAsText :9_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :9_2:UnDeeper:
someSL> IN: ) ) ) MUST ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected )
someSL> expecting other text or number

******************************************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=29:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slAKA base> IN: ) ) ) MUST ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=29:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

***************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slAKA> IN: ) ) ) MUST ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=29:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting other text or number

*************************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
RPMT> IN: ) ) ) MUST ( "sing" )
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=29:
RPMT> unexpected )
RPMT> expecting other text or number

************************************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
slRelPred> IN: ) ) ) MUST ( "sing" )
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=29:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
pRelPred> IN: ) ) ) MUST ( "sing" )
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=29:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=29:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :9_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=29:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :9_2:UnDeeper:
termIndent p> IN: ) ) ) MUST ( "sing" )
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=29:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :9_2:UnDeeper:
expression> IN: ) ) ) MUST ( "sing" )
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=29:
expression> unexpected )
expression> expecting expression

******************************************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :9_2:UnDeeper:
ppp inner> IN: ) ) ) MUST ( "sing" )
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=29:
ppp inner> unexpected )
ppp inner> expecting expression

******************************************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :9_2:UnDeeper:
******************************************************* / withPrePost :9_2:UnDeeper:
******************************************************** > |<* starting :9_2:UnDeeper:
******************************************************** / $*|      :9_2:UnDeeper:
********************************************************* / pre part :9_2:UnDeeper:
pre part> IN: ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=29:
pre part> unexpected )
pre part> expecting ( or Other text

********************************************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
withPrePost> IN: ) ) ) MUST ( "sing" )
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=29:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
******************************************************* / $*|        :9_2:UnDeeper:
******************************************************** / pre part :9_2:UnDeeper:
pre part> IN: ) ) ) MUST ( "sing" )
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=29:
pre part> unexpected )
pre part> expecting ( or Other text

******************************************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
$*|> IN: ) ) ) MUST ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected )
$*|> expecting ( or Other text

******************************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :9_2:UnDeeper:
|<*/base> IN: ) ) ) MUST ( "sing" )
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=29:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :9_2:UnDeeper:
|<*/parent> IN: ) ) ) MUST ( "sing" )
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=32:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

***************************************************** \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :9_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "spits" ) ) ) MUST ( "sing" )
term p/1c:label ends to the right of line below> MATCH (CERR): "spits"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=32:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :9_2:UnDeeper:
**************************************************** / term p/notLabelTerm :8_4:Other "spit:
***************************************************** / term p/2:someIndentation expr p :8_4:Other "spit:
****************************************************** / someIndentation :8_4:Other "spit:
******************************************************* / myindented-GoDeeper :8_4:Other "spit:
myindented-GoDeeper> IN: "spits" ) ) ) MUST ( "sing" )
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=28:
myindented-GoDeeper> unexpected "spits"
myindented-GoDeeper> expecting (

******************************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "spits" Expecting: ( :8_4:Other "spit:
someIndentation> IN: "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected "spits"
someIndentation> expecting (

****************************************************** \ !Unconsumed Error: someIndentation: Unexpected "spits" Expecting: ( :8_4:Other "spit:
term p/2:someIndentation expr p> IN: "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected "spits"
term p/2:someIndentation expr p> expecting (

***************************************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "spits" Expecting: ( :8_4:Other "spit:
***************************************************** / term p/3:plain p  :8_4:Other "spit:
****************************************************** / pRelPred        :8_4:Other "spit:
******************************************************* / slRelPred     :8_4:Other "spit:
******************************************************** / nested simpleHorn :8_4:Other "spit:
********************************************************* > |^|       :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |^| deeps :9_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( "sing" )
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************************************* \ |^| deeps has returned ([(),(),()],-3) :9_1:Must:
nested simpleHorn> IN: "spits" ) ) ) MUST ( "sing" )
nested simpleHorn> MATCH (CERR): "spits" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=32:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

******************************************************** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :9_1:Must:
******************************************************** / RPConstraint :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |>| calling $>> :9_2:UnDeeper:
********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
********************************************************** / |>>/base :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :9_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
RPConstraint> IN: "spits" ) ) ) MUST ( "sing" )
RPConstraint> MATCH (CERR): "spits"
RPConstraint> ERROR:
RPConstraint> offset=29:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
******************************************************** / RPBoolStructR :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slMultiTerm :8_4:Other "spit:
*********************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

*********************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

********************************************************** \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
********************************************************* / |>| calling $>> :9_2:UnDeeper:
********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
********************************************************** / |>>/base :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :9_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( "sing" )
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=29:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
RPBoolStructR> IN: "spits" ) ) ) MUST ( "sing" )
RPBoolStructR> MATCH (CERR): "spits"
RPBoolStructR> ERROR:
RPBoolStructR> offset=29:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :9_2:UnDeeper:
******************************************************** / RPMT        :8_4:Other "spit:
********************************************************* / $*|       :8_4:Other "spit:
********************************************************** / slAKA   :8_4:Other "spit:
*********************************************************** / $*|   :8_4:Other "spit:
************************************************************ / slAKA base :8_4:Other "spit:
************************************************************* / slMultiTerm :8_4:Other "spit:
************************************************************** / someSL :8_4:Other "spit:
someSL> IN: "spits" ) ) ) MUST ( "sing" )
someSL> MATCH (COK): "spits"
someSL> VALUE: ((["spits"],0),[])

************************************************************** \ someSL has returned (["spits"],0) :9_2:UnDeeper:
slMultiTerm> IN: "spits" ) ) ) MUST ( "sing" )
slMultiTerm> MATCH (COK): "spits"
slMultiTerm> VALUE: ((["spits"],0),[])

************************************************************* \ slMultiTerm has returned (["spits"],0) :9_2:UnDeeper:
slAKA base> IN: "spits" ) ) ) MUST ( "sing" )
slAKA base> MATCH (COK): "spits"
slAKA base> VALUE: ((["spits"],0),[])

************************************************************ \ slAKA base has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

*********************************************************** \ $*| has returned (["spits"],0) :9_2:UnDeeper:
*********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / |>>/base :9_2:UnDeeper:
************************************************************ / slAKA optional akapart :9_2:UnDeeper:
************************************************************* / |?| optional something :9_2:UnDeeper:
************************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
************************************************************** / |>>/base :9_2:UnDeeper:
*************************************************************** / PAKA/akapart :9_2:UnDeeper:
**************************************************************** / $>| :9_2:UnDeeper:
***************************************************************** / Aka Token :9_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( "sing" )
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=29:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :9_2:UnDeeper:
$>|> IN: ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting AKA

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :9_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MUST ( "sing" )
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=29:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :9_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :9_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( "sing" )
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional akapart has returned (Nothing,0) :9_2:UnDeeper:
************************************************************ > |>>/base got Nothing :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :9_2:UnDeeper:
*********************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
*********************************************************** / |>>/base :9_2:UnDeeper:
************************************************************ / slAKA optional typically :9_2:UnDeeper:
************************************************************* / |?| optional something :9_2:UnDeeper:
************************************************************** / |>>/recurse :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( "sing" )
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=29:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :9_2:UnDeeper:
************************************************************** / |>>/base :9_2:UnDeeper:
*************************************************************** / typically :9_2:UnDeeper:
**************************************************************** / $>| :9_2:UnDeeper:
$>|> IN: ) ) ) MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=29:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
typically> IN: ) ) ) MUST ( "sing" )
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=29:
typically> unexpected )
typically> expecting TYPICALLY

*************************************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=29:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :9_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( "sing" )
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************************************* \ |?| optional something has returned (Nothing,0) :9_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( "sing" )
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************************************ \ slAKA optional typically has returned (Nothing,0) :9_2:UnDeeper:
************************************************************ > |>>/base got Nothing :9_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( "sing" )
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************************************** \ |>>/base has returned (Nothing,0) :9_2:UnDeeper:
*********************************************************** > slAKA: proceeding after base and entityalias are retrieved ... :9_2:UnDeeper:
*********************************************************** > pAKA: entityalias = Nothing :9_2:UnDeeper:
slAKA> IN: "spits" ) ) ) MUST ( "sing" )
slAKA> MATCH (COK): "spits"
slAKA> VALUE: ((["spits"],0),[])

********************************************************** \ slAKA has returned (["spits"],0) :9_2:UnDeeper:
$*|> IN: "spits" ) ) ) MUST ( "sing" )
$*|> MATCH (COK): "spits"
$*|> VALUE: ((["spits"],0),[])

********************************************************* \ $*| has returned (["spits"],0) :9_2:UnDeeper:
RPMT> IN: "spits" ) ) ) MUST ( "sing" )
RPMT> MATCH (COK): "spits"
RPMT> VALUE: ((RPMT ["spits"],0),[])

******************************************************** \ RPMT has returned (RPMT ["spits"],0) :9_2:UnDeeper:
slRelPred> IN: "spits" ) ) ) MUST ( "sing" )
slRelPred> MATCH (COK): "spits"
slRelPred> VALUE: ((RPMT ["spits"],0),[])

******************************************************* \ slRelPred has returned (RPMT ["spits"],0) :9_2:UnDeeper:
******************************************************* / undeepers  :9_2:UnDeeper:
******************************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :9_2:UnDeeper:
******************************************************** > sameLine: success! :9_2:UnDeeper:
undeepers> IN: ) ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************************************* \ undeepers has returned () :9_2:UnDeeper:
pRelPred> IN: "spits" ) ) ) MUST ( "sing" )
pRelPred> MATCH (COK): "spits"
pRelPred> VALUE: (RPMT ["spits"],[])

****************************************************** \ pRelPred has returned RPMT ["spits"] :9_2:UnDeeper:
term p/3:plain p> IN: "spits" ) ) ) MUST ( "sing" )
term p/3:plain p> MATCH (COK): "spits"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["spits"]),[])

***************************************************** \ term p/3:plain p has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
term p/notLabelTerm> IN: "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (COK): "spits"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["spits"]),[])

**************************************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
termIndent p> IN: "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (COK): "spits"
termIndent p> VALUE: (MyLeaf (RPMT ["spits"]),[])

*************************************************** \ termIndent p has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
*************************************************** / binary(Or)         :9_2:UnDeeper:
binary(Or)> IN: ) ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=29:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_2:UnDeeper:
*************************************************** / binary(And)        :9_2:UnDeeper:
binary(And)> IN: ) ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=29:
binary(And)> unexpected )
binary(And)> expecting AND

*************************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_2:UnDeeper:
*************************************************** / binary(SetLess)    :9_2:UnDeeper:
binary(SetLess)> IN: ) ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=29:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_2:UnDeeper:
*************************************************** / binary(SetPlus)    :9_2:UnDeeper:
binary(SetPlus)> IN: ) ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=29:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_2:UnDeeper:
expression> IN: "spits" ) ) ) MUST ( "sing" )
expression> MATCH (COK): "spits"
expression> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************** \ expression has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
ppp inner> IN: "spits" ) ) ) MUST ( "sing" )
ppp inner> MATCH (COK): "spits"
ppp inner> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************* \ ppp inner has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
manyIndentation/leaf?> IN: "spits" ) ) ) MUST ( "sing" )
manyIndentation/leaf?> MATCH (COK): "spits"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["spits"]),[])

************************************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["spits"]) :9_2:UnDeeper:
************************************************ / myindented-UnDeeper      :9_2:UnDeeper:
myindented-UnDeeper> IN: ) ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************************************ \ myindented-UnDeeper has returned UnDeeper :9_3:UnDeeper:
someIndentation> IN: ( "spits" ) ) ) MUST ( "sing" )
someIndentation> MATCH (COK): ( "spits" )
someIndentation> VALUE: (MyLeaf (RPMT ["spits"]),[])

*********************************************** \ someIndentation has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/2:someIndentation expr p> MATCH (COK): ( "spits" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["spits"]),[])

********************************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
term p/notLabelTerm> IN: ( "spits" ) ) ) MUST ( "sing" )
term p/notLabelTerm> MATCH (COK): ( "spits" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["spits"]),[])

********************************************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
termIndent p> IN: ( "spits" ) ) ) MUST ( "sing" )
termIndent p> MATCH (COK): ( "spits" )
termIndent p> VALUE: (MyLeaf (RPMT ["spits"]),[])

******************************************** \ termIndent p has returned MyLeaf (RPMT ["spits"]) :9_3:UnDeeper:
******************************************** / binary(Or)                         :9_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_3:UnDeeper:
******************************************** / binary(And)                        :9_3:UnDeeper:
binary(And)> IN: ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

******************************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_3:UnDeeper:
******************************************** / binary(SetLess)                    :9_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_3:UnDeeper:
******************************************** / binary(SetPlus)                    :9_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_3:UnDeeper:
expression> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
expression> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]],[])

******************************************* \ expression has returned MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]] :9_3:UnDeeper:
ppp inner> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
ppp inner> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]],[])

****************************************** \ ppp inner has returned MyAll [MyLeaf (RPMT ["drinks"]),MyAny [MyLeaf (RPMT ["swallows"]),MyLeaf (RPMT ["spits"])]] :9_3:UnDeeper:
pBSR> IN: ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pBSR> MATCH (COK): ( "drinks" ) AND ( "swallows" ) OR ( "sp <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]],[])

***************************************** \ pBSR has returned All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]] :9_3:UnDeeper:
***************************************** > constructed simpleHorn; running tellIdFirst :9_3:UnDeeper:
nested simpleHorn> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
nested simpleHorn> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
nested simpleHorn> VALUE: ((RPMT ["imbibes"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

**************************************** \ nested simpleHorn has returned (RPMT ["imbibes"],0) :9_3:UnDeeper:
slRelPred> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slRelPred> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
slRelPred> VALUE: ((RPMT ["imbibes"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*************************************** \ slRelPred has returned (RPMT ["imbibes"],0)  :9_3:UnDeeper:
*************************************** / undeepers                                    :9_3:UnDeeper:
**************************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :9_3:UnDeeper:
**************************************** > sameLine: success!                         :9_3:UnDeeper:
undeepers> IN: ) ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*************************************** \ undeepers has returned ()                    :9_3:UnDeeper:
pRelPred> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
pRelPred> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
pRelPred> VALUE: (RPMT ["imbibes"],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************** \ pRelPred has returned RPMT ["imbibes"]         :9_3:UnDeeper:
term p/3:plain p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/3:plain p> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************* \ term p/3:plain p has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
term p/notLabelTerm> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
termIndent p> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
termIndent p> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*********************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])  :9_3:UnDeeper:
*********************************** / binary(Or)                                           :9_3:UnDeeper:
binary(Or)> IN: ) ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR :9_3:UnDeeper:
*********************************** / binary(And)                                          :9_3:UnDeeper:
binary(And)> IN: ) ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

*********************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND :9_3:UnDeeper:
*********************************** / binary(SetLess)                                      :9_3:UnDeeper:
binary(SetLess)> IN: ) ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS :9_3:UnDeeper:
*********************************** / binary(SetPlus)                                      :9_3:UnDeeper:
binary(SetPlus)> IN: ) ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS :9_3:UnDeeper:
expression> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
expression> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
expression> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

********************************** \ expression has returned MyLeaf (RPMT ["imbibes"])      :9_3:UnDeeper:
ppp inner> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
ppp inner> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
ppp inner> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

********************************* \ ppp inner has returned MyLeaf (RPMT ["imbibes"])         :9_3:UnDeeper:
manyIndentation/leaf?> IN: "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
manyIndentation/leaf?> MATCH (COK): "imbibes" MEANS ( "drinks" ) AND ( "swal <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

******************************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["imbibes"]) :9_3:UnDeeper:
******************************** / myindented-UnDeeper                                        :9_3:UnDeeper:
myindented-UnDeeper> IN: ) ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************************** \ myindented-UnDeeper has returned UnDeeper                    :9_4:UnDeeper:
someIndentation> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someIndentation> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
someIndentation> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

******************************* \ someIndentation has returned MyLeaf (RPMT ["imbibes"])         :9_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/2:someIndentation expr p> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

****************************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["imbibes"]) :9_4:UnDeeper:
term p/notLabelTerm> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/notLabelTerm> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

***************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["imbibes"])         :9_4:UnDeeper:
termIndent p> IN: ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
termIndent p> MATCH (COK): ( "imbibes" MEANS ( "drinks" ) AND ( "sw <…>
termIndent p> VALUE: (MyLeaf (RPMT ["imbibes"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

**************************** \ termIndent p has returned MyLeaf (RPMT ["imbibes"])                  :9_4:UnDeeper:
**************************** / binary(Or)                                                           :9_4:UnDeeper:
binary(Or)> IN: ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :9_4:UnDeeper:
**************************** / binary(And)                                                          :9_4:UnDeeper:
binary(And)> IN: ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

**************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :9_4:UnDeeper:
**************************** / binary(SetLess)                                                      :9_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :9_4:UnDeeper:
**************************** / binary(SetPlus)                                                      :9_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :9_4:UnDeeper:
expression> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
expression> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
expression> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

*************************** \ expression has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :9_4:UnDeeper:
ppp inner> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
ppp inner> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
ppp inner> VALUE: (MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************** \ ppp inner has returned MyAny [MyLeaf (RPMT ["eats"]),MyLeaf (RPMT ["imbibes"])] :9_4:UnDeeper:
pBSR> IN: ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pBSR> MATCH (COK): ( "eats" ) OR ( "imbibes" MEANS ( "drink <…>
pBSR> VALUE: (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []}])

************************* \ pBSR has returned Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])] :9_4:UnDeeper:
************************* > constructed simpleHorn; running tellIdFirst                                :9_4:UnDeeper:
nested simpleHorn> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
nested simpleHorn> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************************ \ nested simpleHorn has returned (RPMT ["degustates"],0)                       :9_4:UnDeeper:
slRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
slRelPred> VALUE: ((RPMT ["degustates"],0),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********************** \ slRelPred has returned (RPMT ["degustates"],0)                                 :9_4:UnDeeper:
*********************** / undeepers                                                                      :9_4:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers       :9_4:UnDeeper:
************************ > sameLine: success!                                                           :9_4:UnDeeper:
undeepers> IN: ) MUST ( "sing" )
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                      :9_4:UnDeeper:
pRelPred> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
pRelPred> VALUE: (RPMT ["degustates"],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************** \ pRelPred has returned RPMT ["degustates"]                                        :9_4:UnDeeper:
term p/3:plain p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["degustates"])                         :9_4:UnDeeper:
term p/notLabelTerm> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                        :9_4:UnDeeper:
termIndent p> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******************* \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                 :9_4:UnDeeper:
******************* / binary(Or)                                                                             :9_4:UnDeeper:
binary(Or)> IN: ) MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :9_4:UnDeeper:
******************* / binary(And)                                                                            :9_4:UnDeeper:
binary(And)> IN: ) MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :9_4:UnDeeper:
******************* / binary(SetLess)                                                                        :9_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :9_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :9_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :9_4:UnDeeper:
expression> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
expression> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

****************** \ expression has returned MyLeaf (RPMT ["degustates"])                                     :9_4:UnDeeper:
ppp inner> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
ppp inner> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

***************** \ ppp inner has returned MyLeaf (RPMT ["degustates"])                                        :9_4:UnDeeper:
manyIndentation/leaf?> IN: "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> MATCH (COK): "degustates" MEANS ( "eats" ) OR ( "imbi <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["degustates"])                              :9_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :9_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "sing" )
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :9_1:Must:
someIndentation> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
someIndentation> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*************** \ someIndentation has returned MyLeaf (RPMT ["degustates"])                               :9_1:Must:
term p/2:someIndentation expr p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["degustates"])                 :9_1:Must:
term p/notLabelTerm> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["degustates"])                               :9_1:Must:
termIndent p> IN: ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> MATCH (COK): ( "degustates" MEANS ( "eats" ) OR ( "im <…>
termIndent p> VALUE: (MyLeaf (RPMT ["degustates"]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

************ \ termIndent p has returned MyLeaf (RPMT ["degustates"])                                        :9_1:Must:
************ / binary(Or)                                                                                    :9_1:Must:
binary(Or)> IN: MUST ( "sing" )
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :9_1:Must:
************ / binary(And)                                                                                   :9_1:Must:
binary(And)> IN: MUST ( "sing" )
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :9_1:Must:
************ / binary(SetLess)                                                                               :9_1:Must:
binary(SetLess)> IN: MUST ( "sing" )
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :9_1:Must:
************ / binary(SetPlus)                                                                               :9_1:Must:
binary(SetPlus)> IN: MUST ( "sing" )
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :9_1:Must:
expression> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
expression> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

*********** \ expression has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]            :9_1:Must:
ppp inner> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
ppp inner> VALUE: (MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********** \ ppp inner has returned MyAll [MyLeaf (RPMT ["walks"]),MyLeaf (RPMT ["degustates"])]               :9_1:Must:
pBSR> IN: ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> MATCH (COK): ( "walks" ) AND ( "degustates" MEANS ( " <…>
pBSR> VALUE: (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])],[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

********* \ pBSR has returned All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]                    :9_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :9_1:Must:
manyIndentation/leaf?> IN: WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "walks" ) AND ( "degustates" MEANS <…>
manyIndentation/leaf?> VALUE: ((Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]),[Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}])

******* \ manyIndentation/leaf? has returned (Who,All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]) :9_1:Must:
******* / WHERE                                                                                                   :9_1:Must:
WHERE> IN: MUST ( "sing" )
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=32:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :9_1:Must:
******* / preambleParamText:[Having]                                                                              :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :9_1:Must:
preambleParamText:[Having]> IN: MUST ( "sing" )
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=32:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :9_1:Must:
******* / preambleParamText:[Given]                                                                               :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :9_1:Must:
preambleParamText:[Given]> IN: MUST ( "sing" )
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=32:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :9_1:Must:
******* / preambleParamText:[Upon]                                                                                :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :9_1:Must:
preambleParamText:[Upon]> IN: MUST ( "sing" )
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=32:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :9_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :9_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "sing" )
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=32:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :9_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :9_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "sing" )
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=32:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :9_1:Must:
******* / pTemporal/eventually                                                                                    :9_1:Must:
pTemporal/eventually> IN: MUST ( "sing" )
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=32:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY                          :9_1:Must:
******* / pTemporal/specifically                                                                                  :9_1:Must:
******** / $>|                                                                                                   :9_1:Must:
$>|> IN: MUST ( "sing" )
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=32:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON                                 :9_1:Must:
pTemporal/specifically> IN: MUST ( "sing" )
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=32:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON                :9_1:Must:
******* / pTemporal/vaguely                                                                                       :9_1:Must:
pTemporal/vaguely> IN: MUST ( "sing" )
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=32:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text                             :9_1:Must:
******* / pDA                                                                                                     :9_1:Must:
******** / pAction calling pParamText                                                                             :9_2:GoDeeper:
********* / pParamText                                                                                           :9_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :9_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :9_2:GoDeeper:
************ / slAKA                                                                                          :9_2:GoDeeper:
************* / $*|                                                                                          :9_2:GoDeeper:
************** / slAKA base                                                                                 :9_2:GoDeeper:
*************** / slKeyValues                                                                              :9_2:GoDeeper:
**************** / $*|                                                                                    :9_2:GoDeeper:
***************** / someSL                                                                               :9_2:GoDeeper:
****************** / pNumAsText                                                                         :9_2:GoDeeper:
pNumAsText> IN: ( "sing" )
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :9_2:GoDeeper:
someSL> IN: ( "sing" )
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :9_2:GoDeeper:
$*|> IN: ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :9_2:GoDeeper:
slKeyValues> IN: ( "sing" )
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=33:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :9_2:GoDeeper:
slAKA base> IN: ( "sing" )
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=33:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :9_2:GoDeeper:
$*|> IN: ( "sing" )
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :9_2:GoDeeper:
slAKA> IN: ( "sing" )
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=33:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :9_2:GoDeeper:
pKeyValuesAka> IN: ( "sing" )
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=33:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :9_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "sing" )
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=33:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :9_2:GoDeeper:
pParamText> IN: ( "sing" )
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=33:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :9_2:GoDeeper:
pAction calling pParamText> IN: ( "sing" )
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=33:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :9_2:GoDeeper:
pDA> IN: MUST ( "sing" )
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=33:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :9_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=33:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :9_1:Must:
permutationsReg> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=36:
permutationsReg> unexpected end of input
permutationsReg> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

***** \ !Unconsumed Error: permutationsReg: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRuleNormal> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=36:
pRegRuleNormal> unexpected end of input
pRegRuleNormal> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, or any token

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected end of input Expecting: GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
pRegRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=36:
pRegRule> unexpected end of input
pRegRule> expecting DO, GIVEN, HAVING, IF, UNLESS, UPON, WHEN, WHERE, any token, or §

*** \ !Unconsumed Error: pRegRule: Unexpected end of input Expecting: § GIVEN HAVING UPON WHERE DO UNLESS IF WHEN any token :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "person" ) WHO ( "walks" ) AND ( <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=36:
pRule> unexpected end of input
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected end of input Expecting: EOL regulative rule                                  :1_1:Every:
Loading env

Parser tests
  megaparsing
Loaded env
    indented-3 FAILED [1]

Failures:

  test/Spec.hs:329:7: 
  1) Parser tests, megaparsing, indented-3
       expected: [[Regulative {subj = Leaf (("person" :| [],Nothing) :| []), rkeyword = REvery, who = Just (All Nothing [Leaf (RPMT ["walks"]),Leaf (RPMT ["degustates"])]), cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},Hornlike {name = ["imbibes"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["imbibes"] RPis (All Nothing [Leaf (RPMT ["drinks"]),Any Nothing [Leaf (RPMT ["swallows"]),Leaf (RPMT ["spits"])]]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 3, srccol = 5, version = Nothing}), defaults = [], symtab = []},Hornlike {name = ["degustates"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["degustates"] RPis (Any Nothing [Leaf (RPMT ["eats"]),Leaf (RPMT ["imbibes"])]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       1:2:
       unexpected end of input
       expecting EOL or regulative rule
       
       EVERY   ✳ person                       
       WHO     walks                          
       AND     degustates                     
               MEANS        eats              
               OR           imbibes           
                            MEANS     drinks  
                            AND       swallows
                            OR        spits   
       MUST    sing                           
       
       
       Stream:
       EVERY "✳"
           ( "✳" "person" ) WHO ( "walks" ) AND
           ( "degustates" MEANS ( "eats" ) OR
               ( "imbibes" MEANS ( "drinks" ) AND ( "swallows" ) OR ( "spits" ) )
           ) MUST
           ( "sing" "✳" )

  To rerun use: --match "/Parser tests/megaparsing/indented-3/"

Randomized with seed 813520442

Finished in 1.4638 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

