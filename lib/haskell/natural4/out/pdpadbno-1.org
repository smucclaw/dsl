* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/PDPA/pdpadbno-1/")

* Tokens
Lib preprocessor: inserting EOL between Other "respond" and Other "to"
§§ ( "Assess" ) EVERY
    ( "Organisation"
        (
            (
                ( AKA ( "You" ) )
            )
        )
    ) WHO
    ( "is"
        ( "not" ( "a Public Agency" ) )
    ) MUST
    ( BEFORE
        ( 30 ( "days" ) )
    ) UPON ( "becoming aware a data breach may have occurred" ) WHEN ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" ) DO
    ( "assess" ( "if it is a Notifiable Data Breach" ) "by"
        ( "performing" ( ( "NDB Qualification" ) ) )
    ) HENCE ( "Notification" ) LEST
    ( PARTY ( "the PDPC" ) MAY
        ( "demand" ( "an explanation for your inaction" ) ) HENCE
        ( PARTY ( "You" ) MUST
            ( "respond" EOL
                ( "to" ( "the PDPC" ) "about" ( "your inaction" ) )
            )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Assess" Expecting: (                                            :1_2:Other "Asse:
****** / |>>/base                                                                                                    :1_2:Other "Asse:
******* / |.| manyLike                                                                                              :1_2:Other "Asse:
******** / someSL                                                                                                  :1_2:Other "Asse:
someSL> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
someSL> MATCH (COK): "Assess"
someSL> VALUE: ((["Assess"],0),[])

******** \ someSL has returned (["Assess"],0)                                                                       :2_2:UnDeeper:
|.| manyLike> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|.| manyLike> MATCH (COK): "Assess"
|.| manyLike> VALUE: ((["Assess"],0),[])

******* \ |.| manyLike has returned (["Assess"],0)                                                                   :2_2:UnDeeper:
******* > |>>/base got "Assess"                                                                                      :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

****** \ |>>/base has returned ("Assess",0)                                                                           :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

***** \ |>>/recurse has returned ("Assess",1)                                                                          :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Every:
upToNUndeepers/done> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Every:
upToNUndeepers/undeeper> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (EOK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :2_1:Every:
someDeep> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :2_1:Every:
pRegRuleSugary> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :2_1:Every:
**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :2_1:Every:
******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :2_1:Every:
preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :2_1:Every:
******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :2_1:Every:
******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :2_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :2_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :2_1:Every:
******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :2_1:Every:
pDT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :2_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected AKA Expecting: number                             :2_5:Aka:
someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                                   :2_5:Aka:
**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                             :2_5:Aka:
******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "You" Expecting: (                       :2_6:Other "You":
********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :3_2:UnDeeper:
************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :3_2:UnDeeper:
**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :3_2:UnDeeper:
typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :3_2:UnDeeper:
|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented-UnDeeper                                                                                            :3_6:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("Organisation" :| [],Nothing) :| []))        :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / ppp inner                                                                             :3_2:Other "is":
****************** / expression                                                                          :3_2:Other "is":
******************* / termIndent p                                                                      :3_2:Other "is":
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
********************** / pNumAsText                                                                   :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (CERR): "is" ( "not" ( "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

********************* \ $*| has returned (["is","not","a Public Agency"],2)                            :4_2:UnDeeper:
********************* / matching EOL                                                                   :4_2:UnDeeper:
matching EOL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "is":
********************* > |<|                                                                           :3_2:Other "is":
********************* > |<* starting                                                                  :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

********************* \ $*| has returned (["is","not","a Public Agency"],2)                            :4_2:UnDeeper:
********************* / |<*/parent                                                                     :4_2:UnDeeper:
********************** > |<*/recurse                                                                  :4_2:UnDeeper:
********************** / ppp inner                                                                 :4_1:Must:
*********************** / expression                                                              :4_1:Must:
************************ / termIndent p                                                          :4_1:Must:
************************* / term p/1a:label ends directly above next line                       :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=28:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/1b:label ends to the left of line below, with EOL            :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=28:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/1c:label ends to the right of line below                     :4_1:Must:
************************** > |<|                                                               :4_1:Must:
************************** > |<* starting                                                      :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/notLabelTerm                                                 :4_1:Must:
************************** / term p/2:someIndentation expr p                                   :4_1:Must:
*************************** / someIndentation                                                 :4_1:Must:
**************************** / myindented-GoDeeper                                           :4_1:Must:
myindented-GoDeeper> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=28:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :4_1:Must:
someIndentation> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected MUST
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :4_1:Must:
term p/2:someIndentation expr p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :4_1:Must:
************************** / term p/3:plain p                                                  :4_1:Must:
*************************** / pRelPred                                                        :4_1:Must:
**************************** / slRelPred                                                     :4_1:Must:
***************************** / nested simpleHorn                                           :4_1:Must:
****************************** > |^|                                                       :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
nested simpleHorn> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPConstraint                                                :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPConstraint> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=28:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPBoolStructR                                               :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPBoolStructR> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=28:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPMT                                                        :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slAKA                                                   :4_1:Must:
******************************** / $*|                                                   :4_1:Must:
********************************* / slAKA base                                          :4_1:Must:
********************************** / slMultiTerm                                       :4_1:Must:
*********************************** / someSL                                          :4_1:Must:
************************************ / pNumAsText                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
slAKA base> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=28:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
slAKA> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=28:
slAKA> unexpected MUST
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPMT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=28:
RPMT> unexpected MUST
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :4_1:Must:
slRelPred> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=28:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :4_1:Must:
pRelPred> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=28:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/3:plain p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=28:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/notLabelTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=28:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :4_1:Must:
termIndent p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=28:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :4_1:Must:
expression> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=28:
expression> unexpected MUST
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression    :4_1:Must:
ppp inner> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> unexpected MUST
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression       :4_1:Must:
********************** / withPrePost                                                               :4_1:Must:
*********************** > |<* starting                                                            :4_1:Must:
*********************** / $*|                                                                     :4_1:Must:
************************ / pre part                                                              :4_1:Must:
pre part> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=28:
pre part> unexpected MUST
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text  :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text         :4_1:Must:
withPrePost> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text   :4_1:Must:
********************** / $*|                                                                       :4_1:Must:
*********************** / pre part                                                                :4_1:Must:
pre part> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=28:
pre part> unexpected MUST
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text    :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text           :4_1:Must:
********************** / |<*/base                                                                     :4_2:UnDeeper:
*********************** / ppp inner                                                                  :4_2:UnDeeper:
************************ / expression                                                               :4_2:UnDeeper:
************************* / termIndent p                                                           :4_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :4_2:UnDeeper:
*************************** > |<|                                                                :4_2:UnDeeper:
*************************** > |<* starting                                                       :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :4_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :4_2:UnDeeper:
**************************** / someIndentation                                                  :4_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
*************************** / term p/3:plain p                                                   :4_2:UnDeeper:
**************************** / pRelPred                                                         :4_2:UnDeeper:
***************************** / slRelPred                                                      :4_2:UnDeeper:
****************************** / nested simpleHorn                                            :4_2:UnDeeper:
******************************* > |^|                                                        :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPConstraint                                                 :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPBoolStructR                                                :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPMT                                                         :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slAKA                                                    :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / slAKA base                                           :4_2:UnDeeper:
*********************************** / slMultiTerm                                        :4_2:UnDeeper:
************************************ / someSL                                           :4_2:UnDeeper:
************************************* / pNumAsText                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :4_2:UnDeeper:
ppp inner> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :4_2:UnDeeper:
*********************** / withPrePost                                                                :4_2:UnDeeper:
************************ > |<* starting                                                             :4_2:UnDeeper:
************************ / $*|                                                                      :4_2:UnDeeper:
************************* / pre part                                                               :4_2:UnDeeper:
pre part> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :4_2:UnDeeper:
withPrePost> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :4_2:UnDeeper:
*********************** / $*|                                                                        :4_2:UnDeeper:
************************ / pre part                                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :4_2:UnDeeper:
|<*/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :3_2:Other "is":
********************* / term p/2:someIndentation expr p                                               :3_2:Other "is":
********************** / someIndentation                                                             :3_2:Other "is":
*********************** / myindented-GoDeeper                                                       :3_2:Other "is":
myindented-GoDeeper> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: (      :3_2:Other "is":
someIndentation> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "is"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: (            :3_2:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :3_2:Other "is":
********************* / term p/3:plain p                                                              :3_2:Other "is":
********************** / pRelPred                                                                    :3_2:Other "is":
*********************** / slRelPred                                                                 :3_2:Other "is":
************************ / nested simpleHorn                                                       :3_2:Other "is":
************************* > |^|                                                                   :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |^| deeps                                                              :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************* \ |^| deeps has returned ([(),(),()],-3)                              :4_1:Must:
nested simpleHorn> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
nested simpleHorn> MATCH (CERR): "is" ( "not" ( "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :4_1:Must:
************************ / RPConstraint                                                            :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |>| calling $>>                                                        :4_2:UnDeeper:
************************** / |>>/recurse                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :4_2:UnDeeper:
************************** / |>>/base                                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPConstraint> MATCH (CERR): "is" ( "not" ( "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
************************ / RPBoolStructR                                                           :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |>| calling $>>                                                        :4_2:UnDeeper:
************************** / |>>/recurse                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :4_2:UnDeeper:
************************** / |>>/base                                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPBoolStructR> MATCH (CERR): "is" ( "not" ( "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
************************ / RPMT                                                                    :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slAKA                                                               :3_2:Other "is":
*************************** / $*|                                                               :3_2:Other "is":
**************************** / slAKA base                                                      :3_2:Other "is":
***************************** / slMultiTerm                                                   :3_2:Other "is":
****************************** / someSL                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

****************************** \ someSL has returned (["is","not","a Public Agency"],2)       :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

***************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)    :4_2:UnDeeper:
slAKA base> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slAKA base> MATCH (COK): "is" ( "not" ( "a Public Agency"
slAKA base> VALUE: ((["is","not","a Public Agency"],2),[])

**************************** \ slAKA base has returned (["is","not","a Public Agency"],2)       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ $*| has returned (["is","not","a Public Agency"],2)                :4_2:UnDeeper:
*************************** / |>>/recurse                                                        :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_2:UnDeeper:
*************************** / |>>/base                                                           :4_2:UnDeeper:
**************************** / slAKA optional akapart                                           :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :4_2:UnDeeper:
****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / PAKA/akapart                                               :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
********************************* / Aka Token                                              :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :4_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :4_2:UnDeeper:
*************************** / |>>/recurse                                                        :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_2:UnDeeper:
*************************** / |>>/base                                                           :4_2:UnDeeper:
**************************** / slAKA optional typically                                         :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :4_2:UnDeeper:
****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / typically                                                  :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :4_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :4_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :4_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :4_2:UnDeeper:
slAKA> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slAKA> MATCH (COK): "is" ( "not" ( "a Public Agency"
slAKA> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slAKA has returned (["is","not","a Public Agency"],2)                :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
RPMT> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPMT> MATCH (COK): "is" ( "not" ( "a Public Agency"
RPMT> VALUE: ((RPMT ["is","not","a Public Agency"],2),[])

************************ \ RPMT has returned (RPMT ["is","not","a Public Agency"],2)                :4_2:UnDeeper:
slRelPred> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slRelPred> MATCH (COK): "is" ( "not" ( "a Public Agency"
slRelPred> VALUE: ((RPMT ["is","not","a Public Agency"],2),[])

*********************** \ slRelPred has returned (RPMT ["is","not","a Public Agency"],2)             :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                           :4_4:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                      :4_4:UnDeeper:
pRelPred> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
pRelPred> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
pRelPred> VALUE: (RPMT ["is","not","a Public Agency"],[])

********************** \ pRelPred has returned RPMT ["is","not","a Public Agency"]                        :4_4:UnDeeper:
term p/3:plain p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/3:plain p> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["is","not","a Public Agency"])         :4_4:UnDeeper:
term p/notLabelTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/notLabelTerm> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","not","a Public Agency"])        :4_4:UnDeeper:
termIndent p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
termIndent p> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","not","a Public Agency"])                 :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["is","not","a Public Agency"])                     :4_4:UnDeeper:
ppp inner> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
ppp inner> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["is","not","a Public Agency"])                        :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","not","a Public Agency"])              :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["is","not","a Public Agency"])               :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","not","a Public Agency"]) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","not","a Public Agency"])               :4_1:Must:
termIndent p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
termIndent p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["is","not","a Public Agency"])                        :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :4_1:Must:
************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :4_1:Must:
************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :4_1:Must:
************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :4_1:Must:
expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["is","not","a Public Agency"])                            :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned MyLeaf (RPMT ["is","not","a Public Agency"])                               :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :4_1:Must:
******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :4_1:Must:
preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :4_1:Must:
******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :4_1:Must:
preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :4_1:Must:
******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :4_1:Must:
preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :4_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :4_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :4_1:Must:
******* / pDT                                                                                                     :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Before:
|>>/recurse> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected BEFORE Expecting: (                                      :4_2:Before:
********** / |>>/base                                                                                            :4_2:Before:
*********** / pTemporal/eventually                                                                              :4_2:Before:
pTemporal/eventually> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected BEFORE Expecting: EVENTUALLY                  :4_2:Before:
*********** / pTemporal/specifically                                                                            :4_2:Before:
************ / $>|                                                                                             :4_2:Before:
$>|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************ \ $>| has returned Before                                                                          :4_3:GoDeeper:
************ / |>>/recurse                                                                                      :4_3:GoDeeper:
************* / |>>/recurse                                                                                     :4_3:TNumber 30:
|>>/recurse> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected 30
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected 30 Expecting: (                                      :4_3:TNumber 30:
************* / |>>/base                                                                                        :4_3:TNumber 30:
************** > |>>/base got Just 30                                                                           :4_4:GoDeeper:
|>>/base> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/base> MATCH (COK): 30
|>>/base> VALUE: ((Just 30,0),[])

************* \ |>>/base has returned (Just 30,0)                                                                :4_4:GoDeeper:
|>>/recurse> IN: ( 30 ( "days" ) ) ) UPON ( "becoming awa <…>
|>>/recurse> MATCH (COK): ( 30
|>>/recurse> VALUE: ((Just 30,1),[])

************ \ |>>/recurse has returned (Just 30,1)                                                               :4_4:GoDeeper:
************ / |>| calling $>>                                                                                    :4_4:GoDeeper:
************* / |>>/recurse                                                                                      :4_4:GoDeeper:
************** / |>>/recurse                                                                                     :4_4:Other "days:
|>>/recurse> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=34:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected "days" Expecting: (                                  :4_4:Other "days:
************** / |>>/base                                                                                        :4_4:Other "days:
*************** > |>>/base got "days"                                                                        :5_2:UnDeeper:
|>>/base> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

************** \ |>>/base has returned ("days",0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************* \ |>>/recurse has returned ("days",1)                                                            :5_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************ \ |>| calling $>> has returned ("days",1)                                                          :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                                 :5_4:UnDeeper:
undeepers> IN: ) ) ) UPON ( "becoming aware a data brea <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :5_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 30 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 30) "days"),[])

*********** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 30) "days")                 :5_4:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 30) "days"))                                 :5_4:UnDeeper:
|>>/base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/base> MATCH (COK): BEFORE ( 30 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),0)                      :5_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                     :5_4:UnDeeper:
|>| calling $>>> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>| calling $>>> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                   :5_4:UnDeeper:
******** / undeepers                                                                                                    :5_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :5_4:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach m <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Upon:
pDT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDT> MATCH (COK): MUST ( BEFORE ( 30 ( "days" ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 30) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 30) "days"))                             :5_1:Upon:
******* / WHERE                                                                                                   :5_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach may <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=38:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected UPON Expecting: WHERE                                              :5_1:Upon:
******* / preambleParamText:[Having]                                                                              :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: HAVING                                             :5_1:Upon:
preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=38:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UPON Expecting: HAVING                        :5_1:Upon:
******* / preambleParamText:[Given]                                                                               :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: GIVEN                                              :5_1:Upon:
preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=38:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UPON Expecting: GIVEN                          :5_1:Upon:
******* / preambleParamText:[Upon]                                                                                :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                         :5_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach may have o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=40:
|>>/recurse> unexpected "becoming aware a data breach may have occurred"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "becoming aware a data breach may have occurred" Expecting: ( :5_2:Other "beco:
********** / |>>/base                                                                                            :5_2:Other "beco:
*********** / pParamText                                                                                        :5_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :5_2:Other "beco:
************* / pKeyValuesAka                                                                                 :5_2:Other "beco:
************** / slAKA                                                                                       :5_2:Other "beco:
*************** / $*|                                                                                       :5_2:Other "beco:
**************** / slAKA base                                                                              :5_2:Other "beco:
***************** / slKeyValues                                                                           :5_2:Other "beco:
****************** / $*|                                                                                 :5_2:Other "beco:
******************* / someSL                                                                            :5_2:Other "beco:
someSL> IN: "becoming aware a data breach may have o <…>
someSL> MATCH (COK): "becoming aware a data breach may have o <…>
someSL> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach may have occurred"],0)         :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach may have occurred"],0)              :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / |?| optional something                                                             :6_2:UnDeeper:
******************** / |>>/recurse                                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :6_2:UnDeeper:
******************** / |>>/base                                                                         :6_2:UnDeeper:
********************* / slTypeSig                                                                      :6_2:UnDeeper:
********************** / $>|                                                                          :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                        :6_2:UnDeeper:
slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                    :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                       :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :6_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :6_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach may have o <…>
slKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
slKeyValues> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach may have o <…>
slAKA base> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :6_2:UnDeeper:
*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / PAKA/akapart                                                                       :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
********************* / Aka Token                                                                      :6_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                      :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                              :6_2:UnDeeper:
PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                       :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                             :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :6_2:UnDeeper:
*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional typically                                                                 :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / typically                                                                          :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                        :6_2:UnDeeper:
typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                    :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                       :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :6_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :6_2:UnDeeper:
slAKA> IN: "becoming aware a data breach may have o <…>
slAKA> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
************** / undeepers                                                                                    :6_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :6_2:UnDeeper:
*************** > sameLine: success!                                                                         :6_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :6_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach may have o <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach may have o <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach may have occurred" :| [],Nothing)    :6_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :6_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :6_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :6_2:UnDeeper:
************** / sameMany                                                                                     :6_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :6_2:UnDeeper:
**************** / slAKA                                                                                    :6_2:UnDeeper:
***************** / $*|                                                                                    :6_2:UnDeeper:
****************** / slAKA base                                                                           :6_2:UnDeeper:
******************* / slKeyValues                                                                        :6_2:UnDeeper:
******************** / $*|                                                                              :6_2:UnDeeper:
********************* / someSL                                                                         :6_2:UnDeeper:
********************** / pNumAsText                                                                   :6_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :6_2:UnDeeper:
someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number        :6_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number             :6_2:UnDeeper:
slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number       :6_2:UnDeeper:
slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number          :6_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :6_2:UnDeeper:
slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                   :6_2:UnDeeper:
pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number             :6_2:UnDeeper:
sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :6_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :6_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :6_2:UnDeeper:
pParamText> IN: "becoming aware a data breach may have o <…>
pParamText> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :| []     :6_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach may have occurred" :| [],Nothing) :| []                :6_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach may have o <…>
|>>/base> MATCH (COK): "becoming aware a data breach may have o <…>
|>>/base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0)     :6_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach may have <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach may have <…>
|>>/recurse> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)    :6_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach may have <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach may have <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)  :6_2:UnDeeper:
******** / undeepers                                                                                                :6_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :6_2:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []) :6_1:When:
******* / preambleParamText:[Upon]                                                                                :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: UPON                                               :6_1:When:
preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=42:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected WHEN Expecting: UPON                            :6_1:When:
******* / WHERE                                                                                                   :6_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=42:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected WHEN Expecting: WHERE                                              :6_1:When:
******* / preambleParamText:[Having]                                                                              :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: HAVING                                             :6_1:When:
preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=42:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected WHEN Expecting: HAVING                        :6_1:When:
******* / preambleParamText:[Given]                                                                               :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: GIVEN                                              :6_1:When:
preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=42:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected WHEN Expecting: GIVEN                          :6_1:When:
******* / preambleBoolStructR [Unless]                                                                            :6_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=42:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected WHEN Expecting: UNLESS                      :6_1:When:
******* / preambleBoolStructR [When,If]                                                                           :6_1:When:
******** / pBSR                                                                                                   :6_2:GoDeeper:
********* / ppp inner                                                                                            :6_2:GoDeeper:
********** / expression                                                                                         :6_2:GoDeeper:
*********** / termIndent p                                                                                     :6_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "the data breach occurs on or after th <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=43:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "the data breach occurs on or after th <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=43:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :6_2:GoDeeper:
************* > |<|                                                                                          :6_2:GoDeeper:
************* > |<* starting                                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "the data breach occurs on or after th <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=43:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :6_2:GoDeeper:
myindented-GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                 :6_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :6_2:Other "the:
**************** / ppp inner                                                                               :6_2:Other "the:
***************** / expression                                                                            :6_2:Other "the:
****************** / termIndent p                                                                        :6_2:Other "the:
******************* / term p/1a:label ends directly above next line                                     :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************* / pNumAsText                                                                     :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (CERR): "the data breach occurs on or after the  <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or other text or number

******************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number             :7_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=45:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************* \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_2:UnDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                          :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
******************** / matching EOL                                                                     :7_2:UnDeeper:
matching EOL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected )
matching EOL> expecting EOL

******************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                     :7_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=45:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************* \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_2:UnDeeper:
******************* / term p/1c:label ends to the right of line below                                   :6_2:Other "the:
******************** > |<|                                                                             :6_2:Other "the:
******************** > |<* starting                                                                    :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
******************** / |<*/parent                                                                       :7_2:UnDeeper:
********************* > |<*/recurse                                                                    :7_2:UnDeeper:
********************* / ppp inner                                                                   :7_1:Do:
********************** / expression                                                                :7_1:Do:
*********************** / termIndent p                                                            :7_1:Do:
************************ / term p/1a:label ends directly above next line                         :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1a:label ends directly above next line> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=46:
term p/1a:label ends directly above next line> unexpected DO
term p/1a:label ends directly above next line> expecting other text or number

************************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/1b:label ends to the left of line below, with EOL              :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1b:label ends to the left of line below, with EOL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=46:
term p/1b:label ends to the left of line below, with EOL> unexpected DO
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/1c:label ends to the right of line below                       :7_1:Do:
************************* > |<|                                                                 :7_1:Do:
************************* > |<* starting                                                        :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1c:label ends to the right of line below> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=46:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting other text or number

************************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/notLabelTerm                                                   :7_1:Do:
************************* / term p/2:someIndentation expr p                                     :7_1:Do:
************************** / someIndentation                                                   :7_1:Do:
*************************** / myindented-GoDeeper                                             :7_1:Do:
myindented-GoDeeper> IN: DO ( "assess" ( "if it is a Notifiable D <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=46:
myindented-GoDeeper> unexpected DO
myindented-GoDeeper> expecting (

*************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected DO Expecting: ( :7_1:Do:
someIndentation> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=46:
someIndentation> unexpected DO
someIndentation> expecting (

************************** \ !Unconsumed Error: someIndentation: Unexpected DO Expecting: (    :7_1:Do:
term p/2:someIndentation expr p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=46:
term p/2:someIndentation expr p> unexpected DO
term p/2:someIndentation expr p> expecting (

************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected DO Expecting: ( :7_1:Do:
************************* / term p/3:plain p                                                    :7_1:Do:
************************** / pRelPred                                                          :7_1:Do:
*************************** / slRelPred                                                       :7_1:Do:
**************************** / nested simpleHorn                                             :7_1:Do:
***************************** > |^|                                                         :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
nested simpleHorn> IN: DO ( "assess" ( "if it is a Notifiable D <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

**************************** \ !Unconsumed Error: nested simpleHorn: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPConstraint                                                  :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPConstraint> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=46:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

**************************** \ !Unconsumed Error: RPConstraint: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPBoolStructR                                                 :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPBoolStructR> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=46:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

**************************** \ !Unconsumed Error: RPBoolStructR: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPMT                                                          :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slAKA                                                     :7_1:Do:
******************************* / $*|                                                     :7_1:Do:
******************************** / slAKA base                                            :7_1:Do:
********************************* / slMultiTerm                                         :7_1:Do:
********************************** / someSL                                            :7_1:Do:
*********************************** / pNumAsText                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
slAKA base> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=46:
slAKA base> unexpected DO
slAKA base> expecting other text or number

******************************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
slAKA> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=46:
slAKA> unexpected DO
slAKA> expecting other text or number

****************************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPMT> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=46:
RPMT> unexpected DO
RPMT> expecting other text or number

**************************** \ !Unconsumed Error: RPMT: Unexpected DO Expecting: other text or number :7_1:Do:
slRelPred> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=46:
slRelPred> unexpected DO
slRelPred> expecting other text or number

*************************** \ !Unconsumed Error: slRelPred: Unexpected DO Expecting: other text or number :7_1:Do:
pRelPred> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=46:
pRelPred> unexpected DO
pRelPred> expecting other text or number

************************** \ !Unconsumed Error: pRelPred: Unexpected DO Expecting: other text or number :7_1:Do:
term p/3:plain p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=46:
term p/3:plain p> unexpected DO
term p/3:plain p> expecting other text or number

************************* \ !Unconsumed Error: term p/3:plain p: Unexpected DO Expecting: other text or number :7_1:Do:
term p/notLabelTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=46:
term p/notLabelTerm> unexpected DO
term p/notLabelTerm> expecting ( or term

************************ \ !Unconsumed Error: term p/notLabelTerm: Unexpected DO Expecting: ( term :7_1:Do:
termIndent p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=46:
termIndent p> unexpected DO
termIndent p> expecting (, other text or number, or term

*********************** \ !Unconsumed Error: termIndent p: Unexpected DO Expecting: ( other text or number term :7_1:Do:
expression> IN: DO ( "assess" ( "if it is a Notifiable D <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=46:
expression> unexpected DO
expression> expecting expression

********************** \ !Unconsumed Error: expression: Unexpected DO Expecting: expression        :7_1:Do:
ppp inner> IN: DO ( "assess" ( "if it is a Notifiable D <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=46:
ppp inner> unexpected DO
ppp inner> expecting expression

********************* \ !Unconsumed Error: ppp inner: Unexpected DO Expecting: expression           :7_1:Do:
********************* / withPrePost                                                                 :7_1:Do:
********************** > |<* starting                                                              :7_1:Do:
********************** / $*|                                                                       :7_1:Do:
*********************** / pre part                                                                :7_1:Do:
pre part> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=46:
pre part> unexpected DO
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text      :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text             :7_1:Do:
withPrePost> IN: DO ( "assess" ( "if it is a Notifiable D <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=46:
withPrePost> unexpected DO
withPrePost> expecting ( or Other text

********************* \ !Unconsumed Error: withPrePost: Unexpected DO Expecting: ( Other text       :7_1:Do:
********************* / $*|                                                                         :7_1:Do:
********************** / pre part                                                                  :7_1:Do:
pre part> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=46:
pre part> unexpected DO
pre part> expecting ( or Other text

********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text        :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting ( or Other text

********************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text               :7_1:Do:
********************* / |<*/base                                                                       :7_2:UnDeeper:
********************** / ppp inner                                                                    :7_2:UnDeeper:
*********************** / expression                                                                 :7_2:UnDeeper:
************************ / termIndent p                                                             :7_2:UnDeeper:
************************* / term p/1a:label ends directly above next line                          :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=45:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/1b:label ends to the left of line below, with EOL               :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=45:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/1c:label ends to the right of line below                        :7_2:UnDeeper:
************************** > |<|                                                                  :7_2:UnDeeper:
************************** > |<* starting                                                         :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=45:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/notLabelTerm                                                    :7_2:UnDeeper:
************************** / term p/2:someIndentation expr p                                      :7_2:UnDeeper:
*************************** / someIndentation                                                    :7_2:UnDeeper:
**************************** / myindented-GoDeeper                                              :7_2:UnDeeper:
myindented-GoDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=45:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_2:UnDeeper:
someIndentation> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected )
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (      :7_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=45:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_2:UnDeeper:
************************** / term p/3:plain p                                                     :7_2:UnDeeper:
*************************** / pRelPred                                                           :7_2:UnDeeper:
**************************** / slRelPred                                                        :7_2:UnDeeper:
***************************** / nested simpleHorn                                              :7_2:UnDeeper:
****************************** > |^|                                                          :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
nested simpleHorn> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=45:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPConstraint                                                   :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPConstraint> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPBoolStructR                                                  :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPBoolStructR> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPMT                                                           :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slAKA                                                      :7_2:UnDeeper:
******************************** / $*|                                                      :7_2:UnDeeper:
********************************* / slAKA base                                             :7_2:UnDeeper:
********************************** / slMultiTerm                                          :7_2:UnDeeper:
*********************************** / someSL                                             :7_2:UnDeeper:
************************************ / pNumAsText                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slAKA base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=45:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slAKA> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=45:
slAKA> unexpected )
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPMT> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=45:
RPMT> unexpected )
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slRelPred> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=45:
slRelPred> unexpected )
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
pRelPred> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=45:
pRelPred> unexpected )
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/3:plain p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=45:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/notLabelTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=45:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_2:UnDeeper:
termIndent p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=45:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_2:UnDeeper:
expression> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=45:
expression> unexpected )
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression          :7_2:UnDeeper:
ppp inner> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=45:
ppp inner> unexpected )
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression             :7_2:UnDeeper:
********************** / withPrePost                                                                  :7_2:UnDeeper:
*********************** > |<* starting                                                               :7_2:UnDeeper:
*********************** / $*|                                                                        :7_2:UnDeeper:
************************ / pre part                                                                 :7_2:UnDeeper:
pre part> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=45:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :7_2:UnDeeper:
withPrePost> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=45:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text         :7_2:UnDeeper:
********************** / $*|                                                                          :7_2:UnDeeper:
*********************** / pre part                                                                   :7_2:UnDeeper:
pre part> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=45:
pre part> unexpected )
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text          :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text                 :7_2:UnDeeper:
|<*/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=45:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_2:UnDeeper:
|<*/parent> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=46:
|<*/parent> unexpected DO
|<*/parent> expecting (, ), Other text, or expression

******************** \ !Unconsumed Error: |<*/parent: Unexpected DO Expecting: ( ( ) Other text expression :7_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=46:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************* \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: ( ( ( ) Other text expression :7_2:UnDeeper:
******************* / term p/notLabelTerm                                                               :6_2:Other "the:
******************** / term p/2:someIndentation expr p                                                 :6_2:Other "the:
********************* / someIndentation                                                               :6_2:Other "the:
********************** / myindented-GoDeeper                                                         :6_2:Other "the:
myindented-GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=44:
myindented-GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented-GoDeeper> expecting (

********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

********************* \ !Unconsumed Error: someIndentation: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
******************** / term p/3:plain p                                                                :6_2:Other "the:
********************* / pRelPred                                                                      :6_2:Other "the:
********************** / slRelPred                                                                   :6_2:Other "the:
*********************** / nested simpleHorn                                                         :6_2:Other "the:
************************ > |^|                                                                     :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |^| deeps                                                                :7_2:UnDeeper:
|^| deeps> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :7_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

*********************** \ !Consumed Error: nested simpleHorn: Unexpected DO Expecting: MEANS )    :7_1:Do:
*********************** / RPConstraint                                                              :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |>| calling $>>                                                          :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :7_2:UnDeeper:
************************* / |>>/base                                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
*********************** / RPBoolStructR                                                             :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |>| calling $>>                                                          :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :7_2:UnDeeper:
************************* / |>>/base                                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
*********************** / RPMT                                                                      :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slAKA                                                                 :6_2:Other "the:
************************** / $*|                                                                 :6_2:Other "the:
*************************** / slAKA base                                                        :6_2:Other "the:
**************************** / slMultiTerm                                                     :6_2:Other "the:
***************************** / someSL                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

***************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************** / |>>/recurse                                                          :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :7_2:UnDeeper:
************************** / |>>/base                                                             :7_2:UnDeeper:
*************************** / slAKA optional akapart                                             :7_2:UnDeeper:
**************************** / |?| optional something                                           :7_2:UnDeeper:
***************************** / |>>/recurse                                                    :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :7_2:UnDeeper:
***************************** / |>>/base                                                       :7_2:UnDeeper:
****************************** / PAKA/akapart                                                 :7_2:UnDeeper:
******************************* / $>|                                                        :7_2:UnDeeper:
******************************** / Aka Token                                                :7_2:UnDeeper:
Aka Token> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting AKA

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA        :7_2:UnDeeper:
PAKA/akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

****************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting AKA

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA       :7_2:UnDeeper:
|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :7_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :7_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :7_2:UnDeeper:
************************** / |>>/recurse                                                          :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :7_2:UnDeeper:
************************** / |>>/base                                                             :7_2:UnDeeper:
*************************** / slAKA optional typically                                           :7_2:UnDeeper:
**************************** / |?| optional something                                           :7_2:UnDeeper:
***************************** / |>>/recurse                                                    :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :7_2:UnDeeper:
***************************** / |>>/base                                                       :7_2:UnDeeper:
****************************** / typically                                                    :7_2:UnDeeper:
******************************* / $>|                                                        :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY  :7_2:UnDeeper:
typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected )
typically> expecting TYPICALLY

****************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_2:UnDeeper:
|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :7_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :7_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :7_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :7_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :7_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************** / undeepers                                                                    :7_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :7_2:UnDeeper:
*********************** > sameLine: success!                                                         :7_2:UnDeeper:
undeepers> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :7_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

********************* \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :7_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
termIndent p> IN: "the data breach occurs on or after the  <…>
termIndent p> MATCH (COK): "the data breach occurs on or after the  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
****************** / binary(Or)                                                                           :7_2:UnDeeper:
binary(Or)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :7_2:UnDeeper:
****************** / binary(And)                                                                          :7_2:UnDeeper:
binary(And)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :7_2:UnDeeper:
****************** / binary(SetLess)                                                                      :7_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :7_2:UnDeeper:
****************** / binary(SetPlus)                                                                      :7_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :7_2:UnDeeper:
expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
ppp inner> IN: "the data breach occurs on or after the  <…>
ppp inner> MATCH (COK): "the data breach occurs on or after the  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
*************** / myindented-UnDeeper                                                                        :7_2:UnDeeper:
myindented-UnDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :7_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
termIndent p> IN: ( "the data breach occurs on or after th <…>
termIndent p> MATCH (COK): ( "the data breach occurs on or after th <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
*********** / binary(Or)                                                                                      :7_1:Do:
binary(Or)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected DO Expecting: OR                                      :7_1:Do:
*********** / binary(And)                                                                                     :7_1:Do:
binary(And)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected DO Expecting: AND                                    :7_1:Do:
*********** / binary(SetLess)                                                                                 :7_1:Do:
binary(SetLess)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected DO Expecting: LESS                               :7_1:Do:
*********** / binary(SetPlus)                                                                                 :7_1:Do:
binary(SetPlus)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected DO Expecting: PLUS                               :7_1:Do:
expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :7_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :7_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=46:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DO Expecting: IF WHEN                      :7_1:Do:
******* / WHERE                                                                                                   :7_1:Do:
WHERE> IN: DO ( "assess" ( "if it is a Notifiable D <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=46:
WHERE> unexpected DO
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                                :7_1:Do:
******* / preambleParamText:[Having]                                                                              :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                               :7_1:Do:
preambleParamText:[Having]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=46:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                          :7_1:Do:
******* / preambleParamText:[Given]                                                                               :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                                :7_1:Do:
preambleParamText:[Given]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=46:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                            :7_1:Do:
******* / preambleBoolStructR [Unless]                                                                            :7_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=46:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                        :7_1:Do:
******* / pDoAction/Do                                                                                            :7_1:Do:
pDoAction/Do> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :7_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :7_2:GoDeeper:
******** / someIndentation                                                                                        :7_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :7_2:GoDeeper:
myindented-GoDeeper> IN: ( "assess" ( "if it is a Notifiable Data <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :7_2:Other "asse:
********* / manyIndentation/leaf?                                                                                 :7_2:Other "asse:
********** / pAction calling pParamText                                                                          :7_2:Other "asse:
*********** / pParamText                                                                                        :7_2:Other "asse:
************ / pParamText(flat) first line: pKeyValues                                                         :7_2:Other "asse:
************* / pKeyValuesAka                                                                                 :7_2:Other "asse:
************** / slAKA                                                                                       :7_2:Other "asse:
*************** / $*|                                                                                       :7_2:Other "asse:
**************** / slAKA base                                                                              :7_2:Other "asse:
***************** / slKeyValues                                                                           :7_2:Other "asse:
****************** / $*|                                                                                 :7_2:Other "asse:
******************* / someSL                                                                            :7_2:Other "asse:
someSL> IN: "assess" ( "if it is a Notifiable Data B <…>
someSL> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
someSL> VALUE: ((["assess","if it is a Notifiable Data Breach"],1),[])

******************* \ someSL has returned (["assess","if it is a Notifiable Data Breach"],1)               :8_3:UnDeeper:
$*|> IN: "assess" ( "if it is a Notifiable Data B <…>
$*|> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
$*|> VALUE: ((["assess","if it is a Notifiable Data Breach"],1),[])

****************** \ $*| has returned (["assess","if it is a Notifiable Data Breach"],1)                    :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / |?| optional something                                                               :8_3:UnDeeper:
******************** / |>>/recurse                                                                        :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :8_3:UnDeeper:
******************** / |>>/base                                                                           :8_3:UnDeeper:
********************* / slTypeSig                                                                        :8_3:UnDeeper:
********************** / $>|                                                                            :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                          :8_3:UnDeeper:
slTypeSig> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=51:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                      :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                         :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                      :8_3:UnDeeper:
******************* > |>>/base got Nothing                                                                 :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                      :8_3:UnDeeper:
slKeyValues> IN: "assess" ( "if it is a Notifiable Data B <…>
slKeyValues> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slKeyValues> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

***************** \ slKeyValues has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1) :8_3:UnDeeper:
slAKA base> IN: "assess" ( "if it is a Notifiable Data B <…>
slAKA base> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slAKA base> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

**************** \ slAKA base has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)    :8_3:UnDeeper:
$*|> IN: "assess" ( "if it is a Notifiable Data B <…>
$*|> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
$*|> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

*************** \ $*| has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)             :8_3:UnDeeper:
*************** / |>>/recurse                                                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :8_3:UnDeeper:
*************** / |>>/base                                                                                     :8_3:UnDeeper:
**************** / slAKA optional akapart                                                                     :8_3:UnDeeper:
***************** / |?| optional something                                                                   :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / PAKA/akapart                                                                         :8_3:UnDeeper:
******************** / $>|                                                                                :8_3:UnDeeper:
********************* / Aka Token                                                                        :8_3:UnDeeper:
Aka Token> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=51:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                        :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                :8_3:UnDeeper:
PAKA/akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=51:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                         :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                               :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :8_3:UnDeeper:
slAKA optional akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                            :8_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :8_3:UnDeeper:
*************** / |>>/recurse                                                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :8_3:UnDeeper:
*************** / |>>/base                                                                                     :8_3:UnDeeper:
**************** / slAKA optional typically                                                                   :8_3:UnDeeper:
***************** / |?| optional something                                                                   :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / typically                                                                            :8_3:UnDeeper:
******************** / $>|                                                                                :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                          :8_3:UnDeeper:
typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=51:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                      :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                         :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :8_3:UnDeeper:
slAKA optional typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                          :8_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :8_3:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                               :8_3:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                  :8_3:UnDeeper:
slAKA> IN: "assess" ( "if it is a Notifiable Data B <…>
slAKA> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slAKA> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

************** \ slAKA has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)             :8_3:UnDeeper:
************** / undeepers                                                                                      :8_3:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                       :8_3:UnDeeper:
*************** > sameLine: success!                                                                        :8_2:Other "by":
undeepers> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :8_2:Other "by":
pKeyValuesAka> IN: "assess" ( "if it is a Notifiable Data B <…>
pKeyValuesAka> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pKeyValuesAka> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),[])

************* \ pKeyValuesAka has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing)        :8_2:Other "by":
pParamText(flat) first line: pKeyValues> IN: "assess" ( "if it is a Notifiable Data B <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pParamText(flat) first line: pKeyValues> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :8_2:Other "by":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :8_2:Other "by":
************* / manyIndentation/leaf?                                                                         :8_2:Other "by":
************** / sameMany                                                                                    :8_2:Other "by":
*************** / pKeyValuesAka                                                                             :8_2:Other "by":
**************** / slAKA                                                                                   :8_2:Other "by":
***************** / $*|                                                                                   :8_2:Other "by":
****************** / slAKA base                                                                          :8_2:Other "by":
******************* / slKeyValues                                                                       :8_2:Other "by":
******************** / $*|                                                                             :8_2:Other "by":
********************* / someSL                                                                        :8_2:Other "by":
someSL> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
someSL> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
someSL> VALUE: ((["by","performing","NDB Qualification"],3),[])

********************* \ someSL has returned (["by","performing","NDB Qualification"],3)                :9_2:UnDeeper:
$*|> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> VALUE: ((["by","performing","NDB Qualification"],3),[])

******************** \ $*| has returned (["by","performing","NDB Qualification"],3)                     :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / |?| optional something                                                         :9_2:UnDeeper:
********************** / |>>/recurse                                                                  :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :9_2:UnDeeper:
********************** / |>>/base                                                                     :9_2:UnDeeper:
*********************** / slTypeSig                                                                  :9_2:UnDeeper:
************************ / $>|                                                                      :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :9_2:UnDeeper:
slTypeSig> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=58:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :9_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :9_2:UnDeeper:
slKeyValues> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slKeyValues> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slKeyValues> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

******************* \ slKeyValues has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)  :9_2:UnDeeper:
slAKA base> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA base> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA base> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

****************** \ slAKA base has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)     :9_2:UnDeeper:
$*|> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

***************** \ $*| has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)              :9_2:UnDeeper:
***************** / |>>/recurse                                                                            :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :9_2:UnDeeper:
***************** / |>>/base                                                                               :9_2:UnDeeper:
****************** / slAKA optional akapart                                                               :9_2:UnDeeper:
******************* / |?| optional something                                                             :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / PAKA/akapart                                                                   :9_2:UnDeeper:
********************** / $>|                                                                          :9_2:UnDeeper:
*********************** / Aka Token                                                                  :9_2:UnDeeper:
Aka Token> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=58:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :9_2:UnDeeper:
PAKA/akapart> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=58:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :9_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :9_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :9_2:UnDeeper:
***************** / |>>/recurse                                                                            :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :9_2:UnDeeper:
***************** / |>>/base                                                                               :9_2:UnDeeper:
****************** / slAKA optional typically                                                             :9_2:UnDeeper:
******************* / |?| optional something                                                             :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / typically                                                                      :9_2:UnDeeper:
********************** / $>|                                                                          :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :9_2:UnDeeper:
typically> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=58:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :9_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :9_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :9_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :9_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :9_2:UnDeeper:
slAKA> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

**************** \ slAKA has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)              :9_2:UnDeeper:
**************** / undeepers                                                                                :9_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                 :9_2:UnDeeper:
***************** > sameLine: success!                                                                           :9_5:UnDeeper:
undeepers> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                      :9_5:UnDeeper:
pKeyValuesAka> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
pKeyValuesAka> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
pKeyValuesAka> VALUE: (("by" :| ["performing","NDB Qualification"],Nothing),[])

*************** \ pKeyValuesAka has returned ("by" :| ["performing","NDB Qualification"],Nothing)                  :9_5:UnDeeper:
*************** / pKeyValuesAka                                                                                    :9_5:UnDeeper:
**************** / slAKA                                                                                          :9_5:UnDeeper:
***************** / $*|                                                                                          :9_5:UnDeeper:
****************** / slAKA base                                                                                 :9_5:UnDeeper:
******************* / slKeyValues                                                                              :9_5:UnDeeper:
******************** / $*|                                                                                    :9_5:UnDeeper:
********************* / someSL                                                                               :9_5:UnDeeper:
********************** / pNumAsText                                                                         :9_5:UnDeeper:
pNumAsText> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=61:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :9_5:UnDeeper:
someSL> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=61:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number              :9_5:UnDeeper:
$*|> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=61:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :9_5:UnDeeper:
slKeyValues> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=61:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number             :9_5:UnDeeper:
slAKA base> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=61:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number                :9_5:UnDeeper:
$*|> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=61:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                         :9_5:UnDeeper:
slAKA> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=61:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                         :9_5:UnDeeper:
pKeyValuesAka> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=61:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number                   :9_5:UnDeeper:
sameMany> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
sameMany> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
sameMany> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************** \ sameMany has returned [("by" :| ["performing","NDB Qualification"],Nothing)]                       :9_5:UnDeeper:
manyIndentation/leaf?> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
manyIndentation/leaf?> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
manyIndentation/leaf?> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("by" :| ["performing","NDB Qualification"],Nothing)]            :9_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("by" :| ["performing","NDB Qualification"],Nothing)] :9_5:UnDeeper:
pParamText> IN: "assess" ( "if it is a Notifiable Data B <…>
pParamText> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pParamText> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)],[])

*********** \ pParamText has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)] :9_5:UnDeeper:
pAction calling pParamText> IN: "assess" ( "if it is a Notifiable Data B <…>
pAction calling pParamText> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pAction calling pParamText> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

********** \ pAction calling pParamText has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_5:UnDeeper:
manyIndentation/leaf?> IN: "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

********* \ manyIndentation/leaf? has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_5:UnDeeper:
********* / myindented-UnDeeper                                                                                          :9_5:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :9_1:Hence:
someIndentation> IN: ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> MATCH (COK): ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

******** \ someIndentation has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_1:Hence:
pDoAction/pAction> IN: ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> MATCH (COK): ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

******* \ pDoAction/pAction has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_1:Hence:
******* / WHERE                                                                                                   :9_1:Hence:
WHERE> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=62:
WHERE> unexpected HENCE
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                             :9_1:Hence:
******* / preambleParamText:[Having]                                                                              :9_1:Hence:
******** / $>|                                                                                                   :9_1:Hence:
$>|> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected HENCE
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                            :9_1:Hence:
preambleParamText:[Having]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=62:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING                       :9_1:Hence:
******* / preambleParamText:[Given]                                                                               :9_1:Hence:
******** / $>|                                                                                                   :9_1:Hence:
$>|> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected HENCE
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                             :9_1:Hence:
preambleParamText:[Given]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=62:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN                         :9_1:Hence:
******* / preambleBoolStructR [Unless]                                                                            :9_1:Hence:
preambleBoolStructR [Unless]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=62:
preambleBoolStructR [Unless]> unexpected HENCE
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected HENCE Expecting: UNLESS                     :9_1:Hence:
regulative permutation with deontic-temporal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> VALUE: (RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-temporal has returned RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []} :9_1:Hence:
permutationsReg> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []} :9_1:Hence:
***** / pHenceLest-Hence                                                                                            :9_1:Hence:
****** / someIndentation                                                                                            :9_2:GoDeeper:
******* / myindented-GoDeeper                                                                                      :9_2:GoDeeper:
myindented-GoDeeper> IN: ( "Notification" ) LEST ( PARTY ( "the P <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented-GoDeeper has returned GoDeeper                                                                 :9_2:Other "Noti:
******* / manyIndentation/leaf?                                                                                     :9_2:Other "Noti:
******** / pHenceLest -> innerRule -> pRegRule                                                                     :9_2:Other "Noti:
********* / pRegRule                                                                                              :9_2:Other "Noti:
********** / pRuleLabel                                                                                          :9_2:Other "Noti:
*********** / $>|                                                                                               :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting §

*********** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: §                                   :9_2:Other "Noti:
pRuleLabel> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=64:
pRuleLabel> unexpected "Notification"
pRuleLabel> expecting §

********** \ !Unconsumed Error: pRuleLabel: Unexpected "Notification" Expecting: §                              :9_2:Other "Noti:
********** / pRegRuleSugary                                                                                      :9_2:Other "Noti:
*********** / someDeep                                                                                          :9_2:Other "Noti:
************ / someDeep first part calls base directly                                                         :9_2:Other "Noti:
someDeep first part calls base directly> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep first part calls base directly> MATCH (COK): "Notification"
someDeep first part calls base directly> VALUE: ("Notification",[])

************ \ someDeep first part calls base directly has returned "Notification"                              :10_2:UnDeeper:
************ / someDeep second part recurses with someIndentation                                               :10_2:UnDeeper:
************* / someIndentation                                                                                :10_2:UnDeeper:
************** / myindented-GoDeeper                                                                          :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                            :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                  :10_2:UnDeeper:
someDeep second part recurses with someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=65:
someDeep second part recurses with someIndentation> unexpected )
someDeep second part recurses with someIndentation> expecting (

************ \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected ) Expecting: ( :10_2:UnDeeper:
************ > someDeep no luck, returning []                                                                   :10_2:UnDeeper:
someDeep> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep> MATCH (COK): "Notification"
someDeep> VALUE: (["Notification"],[])

*********** \ someDeep has returned ["Notification"]                                                             :10_2:UnDeeper:
*********** / someIndentation                                                                                    :10_2:UnDeeper:
************ / myindented-GoDeeper                                                                              :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                                :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

*********** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                      :10_2:UnDeeper:
pRegRuleSugary> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRuleSugary> MATCH (CERR): "Notification"
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=65:
pRegRuleSugary> unexpected )
pRegRuleSugary> expecting (

********** \ !Consumed Error: pRegRuleSugary: Unexpected ) Expecting: ( (                                         :10_2:UnDeeper:
********** / pRegRuleNormal                                                                                      :9_2:Other "Noti:
*********** / permutationsReg                                                                                   :9_2:Other "Noti:
************ / regulative permutation with deontic-temporal                                                    :9_2:Other "Noti:
************* / WHERE                                                                                         :9_2:Other "Noti:
WHERE> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=64:
WHERE> unexpected "Notification"
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected "Notification" Expecting: WHERE                          :9_2:Other "Noti:
************* / preambleParamText:[Having]                                                                    :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: HAVING                         :9_2:Other "Noti:
preambleParamText:[Having]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=64:
preambleParamText:[Having]> unexpected "Notification"
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "Notification" Expecting: HAVING    :9_2:Other "Noti:
************* / preambleParamText:[Given]                                                                     :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: GIVEN                          :9_2:Other "Noti:
preambleParamText:[Given]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=64:
preambleParamText:[Given]> unexpected "Notification"
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "Notification" Expecting: GIVEN      :9_2:Other "Noti:
************* / preambleParamText:[Upon]                                                                      :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: UPON                           :9_2:Other "Noti:
preambleParamText:[Upon]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=64:
preambleParamText:[Upon]> unexpected "Notification"
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "Notification" Expecting: UPON        :9_2:Other "Noti:
************* / preambleBoolStructR [Unless]                                                                  :9_2:Other "Noti:
preambleBoolStructR [Unless]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=64:
preambleBoolStructR [Unless]> unexpected "Notification"
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "Notification" Expecting: UNLESS  :9_2:Other "Noti:
************* / preambleBoolStructR [When,If]                                                                 :9_2:Other "Noti:
preambleBoolStructR [When,If]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=64:
preambleBoolStructR [When,If]> unexpected "Notification"
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "Notification" Expecting: IF WHEN :9_2:Other "Noti:
************* / pDT                                                                                           :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: MUST MAY SHANT                 :9_2:Other "Noti:
pDT> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=64:
pDT> unexpected "Notification"
pDT> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDT: Unexpected "Notification" Expecting: MUST MAY SHANT                   :9_2:Other "Noti:
************* / pActor [REvery,RParty,RTokAll]                                                                :9_2:Other "Noti:
pActor [REvery,RParty,RTokAll]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=64:
pActor [REvery,RParty,RTokAll]> unexpected "Notification"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "Notification" Expecting: EVERY PARTY ALL :9_2:Other "Noti:
************* / pDoAction/Do                                                                                  :9_2:Other "Noti:
pDoAction/Do> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=64:
pDoAction/Do> unexpected "Notification"
pDoAction/Do> expecting DO

************* \ !Unconsumed Error: pDoAction/Do: Unexpected "Notification" Expecting: DO                      :9_2:Other "Noti:
regulative permutation with deontic-temporal> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=64:
regulative permutation with deontic-temporal> unexpected "Notification"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "Notification" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :9_2:Other "Noti:
************ / regulative permutation with deontic-action                                                      :9_2:Other "Noti:
************* / WHERE                                                                                         :9_2:Other "Noti:
WHERE> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=64:
WHERE> unexpected "Notification"
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected "Notification" Expecting: WHERE                          :9_2:Other "Noti:
************* / preambleParamText:[Having]                                                                    :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: HAVING                         :9_2:Other "Noti:
preambleParamText:[Having]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=64:
preambleParamText:[Having]> unexpected "Notification"
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "Notification" Expecting: HAVING    :9_2:Other "Noti:
************* / preambleParamText:[Given]                                                                     :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: GIVEN                          :9_2:Other "Noti:
preambleParamText:[Given]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=64:
preambleParamText:[Given]> unexpected "Notification"
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "Notification" Expecting: GIVEN      :9_2:Other "Noti:
************* / preambleParamText:[Upon]                                                                      :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: UPON                           :9_2:Other "Noti:
preambleParamText:[Upon]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=64:
preambleParamText:[Upon]> unexpected "Notification"
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "Notification" Expecting: UPON        :9_2:Other "Noti:
************* / preambleBoolStructR [Unless]                                                                  :9_2:Other "Noti:
preambleBoolStructR [Unless]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=64:
preambleBoolStructR [Unless]> unexpected "Notification"
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "Notification" Expecting: UNLESS  :9_2:Other "Noti:
************* / preambleBoolStructR [When,If]                                                                 :9_2:Other "Noti:
preambleBoolStructR [When,If]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=64:
preambleBoolStructR [When,If]> unexpected "Notification"
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "Notification" Expecting: IF WHEN :9_2:Other "Noti:
************* / pTemporal/eventually                                                                          :9_2:Other "Noti:
pTemporal/eventually> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=64:
pTemporal/eventually> unexpected "Notification"
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected "Notification" Expecting: EVENTUALLY      :9_2:Other "Noti:
************* / pTemporal/specifically                                                                        :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: BEFORE AFTER BY ON             :9_2:Other "Noti:
pTemporal/specifically> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=64:
pTemporal/specifically> unexpected "Notification"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected "Notification" Expecting: BEFORE AFTER BY ON :9_2:Other "Noti:
************* / pTemporal/vaguely                                                                             :9_2:Other "Noti:
pTemporal/vaguely> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/vaguely> MATCH (COK): "Notification"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "Notification"),[])

************* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "Notification")        :10_2:UnDeeper:
************* / WHERE                                                                                          :10_2:UnDeeper:
WHERE> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=65:
WHERE> unexpected )
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected ) Expecting: WHERE                                        :10_2:UnDeeper:
************* / preambleParamText:[Having]                                                                     :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: HAVING                                       :10_2:UnDeeper:
preambleParamText:[Having]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=65:
preambleParamText:[Having]> unexpected )
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ) Expecting: HAVING                  :10_2:UnDeeper:
************* / preambleParamText:[Given]                                                                      :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: GIVEN                                        :10_2:UnDeeper:
preambleParamText:[Given]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=65:
preambleParamText:[Given]> unexpected )
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ) Expecting: GIVEN                    :10_2:UnDeeper:
************* / preambleParamText:[Upon]                                                                       :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: UPON                                         :10_2:UnDeeper:
preambleParamText:[Upon]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=65:
preambleParamText:[Upon]> unexpected )
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ) Expecting: UPON                      :10_2:UnDeeper:
************* / preambleBoolStructR [Unless]                                                                   :10_2:UnDeeper:
preambleBoolStructR [Unless]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=65:
preambleBoolStructR [Unless]> unexpected )
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ) Expecting: UNLESS                :10_2:UnDeeper:
************* / preambleBoolStructR [When,If]                                                                  :10_2:UnDeeper:
preambleBoolStructR [When,If]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=65:
preambleBoolStructR [When,If]> unexpected )
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ) Expecting: IF WHEN              :10_2:UnDeeper:
************* / pActor [REvery,RParty,RTokAll]                                                                 :10_2:UnDeeper:
pActor [REvery,RParty,RTokAll]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=65:
pActor [REvery,RParty,RTokAll]> unexpected )
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ) Expecting: EVERY PARTY ALL     :10_2:UnDeeper:
************* / pDA                                                                                            :10_2:UnDeeper:
pDA> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=65:
pDA> unexpected )
pDA> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDA: Unexpected ) Expecting: MUST MAY SHANT                                 :10_2:UnDeeper:
regulative permutation with deontic-action> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
regulative permutation with deontic-action> MATCH (CERR): "Notification"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=65:
regulative permutation with deontic-action> unexpected )
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Consumed Error: regulative permutation with deontic-action: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :10_2:UnDeeper:
permutationsReg> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=65:
permutationsReg> unexpected )
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*********** \ !Unconsumed Error: permutationsReg: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pRegRuleNormal> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=65:
pRegRuleNormal> unexpected )
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

********** \ !Unconsumed Error: pRegRuleNormal: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pRegRule> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=65:
pRegRule> unexpected )
pRegRule> expecting (, ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********* \ !Unconsumed Error: pRegRule: Unexpected ) Expecting: § GIVEN HAVING UPON WHERE ( ( EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pHenceLest -> innerRule -> pRegRule> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=65:
pHenceLest -> innerRule -> pRegRule> unexpected )
pHenceLest -> innerRule -> pRegRule> expecting (, ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

******** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ) Expecting: § GIVEN HAVING UPON WHERE ( ( EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
******** / someDeep                                                                                                :9_2:Other "Noti:
********* / someDeep first part calls base directly                                                               :9_2:Other "Noti:
someDeep first part calls base directly> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep first part calls base directly> MATCH (COK): "Notification"
someDeep first part calls base directly> VALUE: ("Notification",[])

********* \ someDeep first part calls base directly has returned "Notification"                                    :10_2:UnDeeper:
********* / someDeep second part recurses with someIndentation                                                     :10_2:UnDeeper:
********** / someIndentation                                                                                      :10_2:UnDeeper:
*********** / myindented-GoDeeper                                                                                :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                                  :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

********** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                        :10_2:UnDeeper:
someDeep second part recurses with someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=65:
someDeep second part recurses with someIndentation> unexpected )
someDeep second part recurses with someIndentation> expecting (

********* \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected ) Expecting: (       :10_2:UnDeeper:
********* > someDeep no luck, returning []                                                                         :10_2:UnDeeper:
someDeep> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep> MATCH (COK): "Notification"
someDeep> VALUE: (["Notification"],[])

******** \ someDeep has returned ["Notification"]                                                                   :10_2:UnDeeper:
manyIndentation/leaf?> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
manyIndentation/leaf?> MATCH (COK): "Notification"
manyIndentation/leaf?> VALUE: (RuleAlias ["Notification"],[])

******* \ manyIndentation/leaf? has returned RuleAlias ["Notification"]                                              :10_2:UnDeeper:
******* / myindented-UnDeeper                                                                                        :10_2:UnDeeper:
myindented-UnDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******* \ myindented-UnDeeper has returned UnDeeper                                                               :10_1:Lest:
someIndentation> IN: ( "Notification" ) LEST ( PARTY ( "the P <…>
someIndentation> MATCH (COK): ( "Notification" )
someIndentation> VALUE: (RuleAlias ["Notification"],[])

****** \ someIndentation has returned RuleAlias ["Notification"]                                                   :10_1:Lest:
pHenceLest-Hence> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
pHenceLest-Hence> MATCH (COK): HENCE ( "Notification" )
pHenceLest-Hence> VALUE: (RuleAlias ["Notification"],[])

***** \ pHenceLest-Hence has returned RuleAlias ["Notification"]                                                    :10_1:Lest:
***** / pHenceLest-Lest                                                                                             :10_1:Lest:
****** / someIndentation                                                                                            :10_2:GoDeeper:
******* / myindented-GoDeeper                                                                                      :10_2:GoDeeper:
myindented-GoDeeper> IN: ( PARTY ( "the PDPC" ) MAY ( "demand" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented-GoDeeper has returned GoDeeper                                                                 :10_2:Party:
******* / manyIndentation/leaf?                                                                                     :10_2:Party:
******** / pHenceLest -> innerRule -> pRegRule                                                                     :10_2:Party:
********* / pRegRule                                                                                              :10_2:Party:
********** / pRuleLabel                                                                                          :10_2:Party:
*********** / $>|                                                                                               :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting §

*********** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: §                                            :10_2:Party:
pRuleLabel> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=68:
pRuleLabel> unexpected PARTY
pRuleLabel> expecting §

********** \ !Unconsumed Error: pRuleLabel: Unexpected PARTY Expecting: §                                       :10_2:Party:
********** / pRegRuleSugary                                                                                      :10_2:Party:
*********** / someDeep                                                                                          :10_2:Party:
************ / someDeep first part calls base directly                                                         :10_2:Party:
someDeep first part calls base directly> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=68:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

************ \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :10_2:Party:
someDeep> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=68:
someDeep> unexpected PARTY
someDeep> expecting Other text

*********** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                               :10_2:Party:
pRegRuleSugary> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=68:
pRegRuleSugary> unexpected PARTY
pRegRuleSugary> expecting Other text

********** \ !Unconsumed Error: pRegRuleSugary: Unexpected PARTY Expecting: Other text                           :10_2:Party:
********** / pRegRuleNormal                                                                                      :10_2:Party:
*********** / permutationsReg                                                                                   :10_2:Party:
************ / regulative permutation with deontic-temporal                                                    :10_2:Party:
************* / WHERE                                                                                         :10_2:Party:
WHERE> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=68:
WHERE> unexpected PARTY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                   :10_2:Party:
************* / preambleParamText:[Having]                                                                    :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                  :10_2:Party:
preambleParamText:[Having]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=68:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING             :10_2:Party:
************* / preambleParamText:[Given]                                                                     :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                   :10_2:Party:
preambleParamText:[Given]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=68:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN               :10_2:Party:
************* / preambleParamText:[Upon]                                                                      :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                    :10_2:Party:
preambleParamText:[Upon]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=68:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                 :10_2:Party:
************* / preambleBoolStructR [Unless]                                                                  :10_2:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=68:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS           :10_2:Party:
************* / preambleBoolStructR [When,If]                                                                 :10_2:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=68:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN         :10_2:Party:
************* / pDT                                                                                           :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: MUST MAY SHANT                          :10_2:Party:
pDT> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=68:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDT: Unexpected PARTY Expecting: MUST MAY SHANT                            :10_2:Party:
************* / pActor [REvery,RParty,RTokAll]                                                                :10_2:Party:
************** / someIndentation                                                                              :10_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :10_3:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :10_3:Other "the:
*************** / manyIndentation/leaf?                                                                       :10_3:Other "the:
**************** / pMultiTermAka                                                                             :10_3:Other "the:
***************** / pAKA                                                                                    :10_3:Other "the:
****************** / slAKA                                                                                 :10_3:Other "the:
******************* / $*|                                                                                 :10_3:Other "the:
******************** / slAKA base                                                                        :10_3:Other "the:
********************* / slMultiTerm                                                                     :10_3:Other "the:
********************** / someSL                                                                        :10_3:Other "the:
someSL> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
someSL> MATCH (COK): "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

********************** \ someSL has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
slMultiTerm> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slMultiTerm> MATCH (COK): "the PDPC"
slMultiTerm> VALUE: ((["the PDPC"],0),[])

********************* \ slMultiTerm has returned (["the PDPC"],0)                                        :11_3:UnDeeper:
slAKA base> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA base> MATCH (COK): "the PDPC"
slAKA base> VALUE: ((["the PDPC"],0),[])

******************** \ slAKA base has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
$*|> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
$*|> MATCH (COK): "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

******************* \ $*| has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional akapart                                                             :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / PAKA/akapart                                                                 :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
************************* / Aka Token                                                                :11_3:UnDeeper:
Aka Token> IN: ) MAY ( "demand" ( "an explanation for y <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=71:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :11_3:UnDeeper:
PAKA/akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=71:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                    :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional typically                                                           :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / typically                                                                    :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :11_3:UnDeeper:
typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=71:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                  :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                       :11_3:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                          :11_3:UnDeeper:
slAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA> MATCH (COK): "the PDPC"
slAKA> VALUE: ((["the PDPC"],0),[])

****************** \ slAKA has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
****************** / undeepers                                                                              :11_3:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :11_3:UnDeeper:
******************* > sameLine: success!                                                                   :11_3:UnDeeper:
undeepers> IN: ) MAY ( "demand" ( "an explanation for y <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                              :11_3:UnDeeper:
pAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pAKA> MATCH (COK): "the PDPC"
pAKA> VALUE: (["the PDPC"],[])

***************** \ pAKA has returned ["the PDPC"]                                                           :11_3:UnDeeper:
pMultiTermAka> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pMultiTermAka> MATCH (COK): "the PDPC"
pMultiTermAka> VALUE: (["the PDPC"],[])

**************** \ pMultiTermAka has returned ["the PDPC"]                                                    :11_3:UnDeeper:
manyIndentation/leaf?> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (["the PDPC"],[])

*************** \ manyIndentation/leaf? has returned ["the PDPC"]                                              :11_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :11_3:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "demand" ( "an explanation for y <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :11_2:May:
someIndentation> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
someIndentation> MATCH (COK): ( "the PDPC" )
someIndentation> VALUE: (["the PDPC"],[])

************** \ someIndentation has returned ["the PDPC"]                                                   :11_2:May:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "the PDPC" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("the PDPC" :| [],Nothing) :| [])),[])

************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("the PDPC" :| [],Nothing) :| []))  :11_2:May:
************* / manyIndentation/leaf?                                                                         :11_2:May:
************** / preambleBoolStructR [Who,Which,Whose]                                                       :11_2:May:
preambleBoolStructR [Who,Which,Whose]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=72:
preambleBoolStructR [Who,Which,Whose]> unexpected MAY
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MAY Expecting: WHO WHICH WHOSE :11_2:May:
manyIndentation/leaf?> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=72:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: WHO WHICH WHOSE           :11_2:May:
************* / manyIndentation/deeper; calling someIndentation                                               :11_2:May:
************** / someIndentation                                                                             :11_2:May:
*************** / myindented-GoDeeper                                                                       :11_2:May:
myindented-GoDeeper> IN: MAY ( "demand" ( "an explanation for you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=72:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                       :11_2:May:
someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=72:
someIndentation> unexpected MAY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                             :11_2:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=72:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_2:May:
************* / WHERE                                                                                         :11_2:May:
WHERE> IN: MAY ( "demand" ( "an explanation for you <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=72:
WHERE> unexpected MAY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                     :11_2:May:
************* / preambleParamText:[Having]                                                                    :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                    :11_2:May:
preambleParamText:[Having]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=72:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING               :11_2:May:
************* / preambleParamText:[Given]                                                                     :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                     :11_2:May:
preambleParamText:[Given]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=72:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                 :11_2:May:
************* / preambleParamText:[Upon]                                                                      :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                      :11_2:May:
preambleParamText:[Upon]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=72:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                   :11_2:May:
************* / preambleBoolStructR [Unless]                                                                  :11_2:May:
preambleBoolStructR [Unless]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=72:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS             :11_2:May:
************* / preambleBoolStructR [When,If]                                                                 :11_2:May:
preambleBoolStructR [When,If]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=72:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN           :11_2:May:
************* / pDT                                                                                           :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

************** \ $>| has returned DMay                                                                        :11_3:GoDeeper:
************** / |>| calling $>>                                                                              :11_3:GoDeeper:
*************** / |>>/recurse                                                                                :11_3:GoDeeper:
**************** / |>>/recurse                                                                               :11_3:Other "dem:
|>>/recurse> IN: "demand" ( "an explanation for your inac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=74:
|>>/recurse> unexpected "demand"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "demand" Expecting: (                          :11_3:Other "dem:
**************** / |>>/base                                                                                  :11_3:Other "dem:
***************** / pTemporal/eventually                                                                    :11_3:Other "dem:
pTemporal/eventually> IN: "demand" ( "an explanation for your inac <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=74:
pTemporal/eventually> unexpected "demand"
pTemporal/eventually> expecting EVENTUALLY

***************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "demand" Expecting: EVENTUALLY      :11_3:Other "dem:
***************** / pTemporal/specifically                                                                  :11_3:Other "dem:
****************** / $>|                                                                                   :11_3:Other "dem:
$>|> IN: "demand" ( "an explanation for your inac <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=74:
$>|> unexpected "demand"
$>|> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: $>|: Unexpected "demand" Expecting: BEFORE AFTER BY ON             :11_3:Other "dem:
pTemporal/specifically> IN: "demand" ( "an explanation for your inac <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=74:
pTemporal/specifically> unexpected "demand"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

***************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "demand" Expecting: BEFORE AFTER BY ON :11_3:Other "dem:
***************** / pTemporal/vaguely                                                                       :11_3:Other "dem:
pTemporal/vaguely> IN: "demand" ( "an explanation for your inac <…>
pTemporal/vaguely> MATCH (COK): "demand"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "demand"),[])

***************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "demand")        :11_4:GoDeeper:
***************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "demand"))                   :11_4:GoDeeper:
|>>/base> IN: "demand" ( "an explanation for your inac <…>
|>>/base> MATCH (COK): "demand"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),0),[])

**************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),0)        :11_4:GoDeeper:
|>>/recurse> IN: ( "demand" ( "an explanation for your in <…>
|>>/recurse> MATCH (COK): ( "demand"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),1),[])

*************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),1)       :11_4:GoDeeper:
|>| calling $>>> IN: ( "demand" ( "an explanation for your in <…>
|>| calling $>>> MATCH (COK): ( "demand"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),1),[])

************** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),1)     :11_4:GoDeeper:
************** / undeepers                                                                                      :11_4:GoDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                       :11_4:GoDeeper:
undeepers> IN: ( "an explanation for your inaction" ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=75:
undeepers> unexpected (
undeepers> expecting )

************** \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                        :11_4:GoDeeper:
pDT> IN: MAY ( "demand" ( "an explanation for you <…>
pDT> MATCH (CERR): MAY ( "demand"
pDT> ERROR:
pDT> offset=75:
pDT> unexpected (
pDT> expecting )

************* \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                  :11_4:GoDeeper:
************* / pDoAction/Do                                                                                  :11_2:May:
pDoAction/Do> IN: MAY ( "demand" ( "an explanation for you <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=72:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

************* \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                                 :11_2:May:
regulative permutation with deontic-temporal> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-temporal> MATCH (CERR): PARTY ( "the PDPC" )
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=75:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting (, ), WHICH, WHO, or WHOSE

************ \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: ( WHO WHICH WHOSE ) :11_2:May:
************ / regulative permutation with deontic-action                                                      :10_2:Party:
************* / WHERE                                                                                         :10_2:Party:
WHERE> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=68:
WHERE> unexpected PARTY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                   :10_2:Party:
************* / preambleParamText:[Having]                                                                    :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                  :10_2:Party:
preambleParamText:[Having]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=68:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING             :10_2:Party:
************* / preambleParamText:[Given]                                                                     :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                   :10_2:Party:
preambleParamText:[Given]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=68:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN               :10_2:Party:
************* / preambleParamText:[Upon]                                                                      :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                    :10_2:Party:
preambleParamText:[Upon]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=68:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                 :10_2:Party:
************* / preambleBoolStructR [Unless]                                                                  :10_2:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=68:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS           :10_2:Party:
************* / preambleBoolStructR [When,If]                                                                 :10_2:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=68:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN         :10_2:Party:
************* / pTemporal/eventually                                                                          :10_2:Party:
pTemporal/eventually> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=68:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected PARTY Expecting: EVENTUALLY               :10_2:Party:
************* / pTemporal/specifically                                                                        :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: BEFORE AFTER BY ON                      :10_2:Party:
pTemporal/specifically> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=68:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected PARTY Expecting: BEFORE AFTER BY ON     :10_2:Party:
************* / pTemporal/vaguely                                                                             :10_2:Party:
pTemporal/vaguely> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=68:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected PARTY Expecting: Other text                  :10_2:Party:
************* / pActor [REvery,RParty,RTokAll]                                                                :10_2:Party:
************** / someIndentation                                                                              :10_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :10_3:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :10_3:Other "the:
*************** / manyIndentation/leaf?                                                                       :10_3:Other "the:
**************** / pMultiTermAka                                                                             :10_3:Other "the:
***************** / pAKA                                                                                    :10_3:Other "the:
****************** / slAKA                                                                                 :10_3:Other "the:
******************* / $*|                                                                                 :10_3:Other "the:
******************** / slAKA base                                                                        :10_3:Other "the:
********************* / slMultiTerm                                                                     :10_3:Other "the:
********************** / someSL                                                                        :10_3:Other "the:
someSL> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
someSL> MATCH (COK): "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

********************** \ someSL has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
slMultiTerm> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slMultiTerm> MATCH (COK): "the PDPC"
slMultiTerm> VALUE: ((["the PDPC"],0),[])

********************* \ slMultiTerm has returned (["the PDPC"],0)                                        :11_3:UnDeeper:
slAKA base> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA base> MATCH (COK): "the PDPC"
slAKA base> VALUE: ((["the PDPC"],0),[])

******************** \ slAKA base has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
$*|> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
$*|> MATCH (COK): "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

******************* \ $*| has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional akapart                                                             :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / PAKA/akapart                                                                 :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
************************* / Aka Token                                                                :11_3:UnDeeper:
Aka Token> IN: ) MAY ( "demand" ( "an explanation for y <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=71:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :11_3:UnDeeper:
PAKA/akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=71:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                    :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional typically                                                           :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / typically                                                                    :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :11_3:UnDeeper:
typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=71:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                  :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                       :11_3:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                          :11_3:UnDeeper:
slAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA> MATCH (COK): "the PDPC"
slAKA> VALUE: ((["the PDPC"],0),[])

****************** \ slAKA has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
****************** / undeepers                                                                              :11_3:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :11_3:UnDeeper:
******************* > sameLine: success!                                                                   :11_3:UnDeeper:
undeepers> IN: ) MAY ( "demand" ( "an explanation for y <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                              :11_3:UnDeeper:
pAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pAKA> MATCH (COK): "the PDPC"
pAKA> VALUE: (["the PDPC"],[])

***************** \ pAKA has returned ["the PDPC"]                                                           :11_3:UnDeeper:
pMultiTermAka> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pMultiTermAka> MATCH (COK): "the PDPC"
pMultiTermAka> VALUE: (["the PDPC"],[])

**************** \ pMultiTermAka has returned ["the PDPC"]                                                    :11_3:UnDeeper:
manyIndentation/leaf?> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (["the PDPC"],[])

*************** \ manyIndentation/leaf? has returned ["the PDPC"]                                              :11_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :11_3:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "demand" ( "an explanation for y <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :11_2:May:
someIndentation> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
someIndentation> MATCH (COK): ( "the PDPC" )
someIndentation> VALUE: (["the PDPC"],[])

************** \ someIndentation has returned ["the PDPC"]                                                   :11_2:May:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "the PDPC" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("the PDPC" :| [],Nothing) :| [])),[])

************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("the PDPC" :| [],Nothing) :| []))  :11_2:May:
************* / manyIndentation/leaf?                                                                         :11_2:May:
************** / preambleBoolStructR [Who,Which,Whose]                                                       :11_2:May:
preambleBoolStructR [Who,Which,Whose]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=72:
preambleBoolStructR [Who,Which,Whose]> unexpected MAY
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MAY Expecting: WHO WHICH WHOSE :11_2:May:
manyIndentation/leaf?> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=72:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: WHO WHICH WHOSE           :11_2:May:
************* / manyIndentation/deeper; calling someIndentation                                               :11_2:May:
************** / someIndentation                                                                             :11_2:May:
*************** / myindented-GoDeeper                                                                       :11_2:May:
myindented-GoDeeper> IN: MAY ( "demand" ( "an explanation for you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=72:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                       :11_2:May:
someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=72:
someIndentation> unexpected MAY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                             :11_2:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=72:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_2:May:
************* / WHERE                                                                                         :11_2:May:
WHERE> IN: MAY ( "demand" ( "an explanation for you <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=72:
WHERE> unexpected MAY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                     :11_2:May:
************* / preambleParamText:[Having]                                                                    :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                    :11_2:May:
preambleParamText:[Having]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=72:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING               :11_2:May:
************* / preambleParamText:[Given]                                                                     :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                     :11_2:May:
preambleParamText:[Given]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=72:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                 :11_2:May:
************* / preambleParamText:[Upon]                                                                      :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                      :11_2:May:
preambleParamText:[Upon]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=72:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                   :11_2:May:
************* / preambleBoolStructR [Unless]                                                                  :11_2:May:
preambleBoolStructR [Unless]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=72:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS             :11_2:May:
************* / preambleBoolStructR [When,If]                                                                 :11_2:May:
preambleBoolStructR [When,If]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=72:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN           :11_2:May:
************* / pTemporal/eventually                                                                          :11_2:May:
pTemporal/eventually> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=72:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                 :11_2:May:
************* / pTemporal/specifically                                                                        :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                        :11_2:May:
pTemporal/specifically> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=72:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON       :11_2:May:
************* / pTemporal/vaguely                                                                             :11_2:May:
pTemporal/vaguely> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=72:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                    :11_2:May:
************* / pDA                                                                                           :11_2:May:
************** / someIndentation                                                                              :11_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :11_3:GoDeeper:
myindented-GoDeeper> IN: ( "demand" ( "an explanation for your in <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :11_3:Other "dem:
*************** / manyIndentation/leaf?                                                                       :11_3:Other "dem:
**************** / pAction calling pParamText                                                                :11_3:Other "dem:
***************** / pParamText                                                                              :11_3:Other "dem:
****************** / pParamText(flat) first line: pKeyValues                                               :11_3:Other "dem:
******************* / pKeyValuesAka                                                                       :11_3:Other "dem:
******************** / slAKA                                                                             :11_3:Other "dem:
********************* / $*|                                                                             :11_3:Other "dem:
********************** / slAKA base                                                                    :11_3:Other "dem:
*********************** / slKeyValues                                                                 :11_3:Other "dem:
************************ / $*|                                                                       :11_3:Other "dem:
************************* / someSL                                                                  :11_3:Other "dem:
someSL> IN: "demand" ( "an explanation for your inac <…>
someSL> MATCH (COK): "demand" ( "an explanation for your inac <…>
someSL> VALUE: ((["demand","an explanation for your inaction"],1),[])

************************* \ someSL has returned (["demand","an explanation for your inaction"],1)    :12_3:UnDeeper:
$*|> IN: "demand" ( "an explanation for your inac <…>
$*|> MATCH (COK): "demand" ( "an explanation for your inac <…>
$*|> VALUE: ((["demand","an explanation for your inaction"],1),[])

************************ \ $*| has returned (["demand","an explanation for your inaction"],1)         :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / |?| optional something                                                   :12_3:UnDeeper:
************************** / |>>/recurse                                                            :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :12_3:UnDeeper:
************************** / |>>/base                                                               :12_3:UnDeeper:
*************************** / slTypeSig                                                            :12_3:UnDeeper:
**************************** / $>|                                                                :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::              :12_3:UnDeeper:
slTypeSig> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=77:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::          :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::             :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                          :12_3:UnDeeper:
************************* > |>>/base got Nothing                                                     :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                          :12_3:UnDeeper:
slKeyValues> IN: "demand" ( "an explanation for your inac <…>
slKeyValues> MATCH (COK): "demand" ( "an explanation for your inac <…>
slKeyValues> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

*********************** \ slKeyValues has returned (("demand" :| ["an explanation for your inaction"],Nothing),1) :12_3:UnDeeper:
slAKA base> IN: "demand" ( "an explanation for your inac <…>
slAKA base> MATCH (COK): "demand" ( "an explanation for your inac <…>
slAKA base> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

********************** \ slAKA base has returned (("demand" :| ["an explanation for your inaction"],Nothing),1) :12_3:UnDeeper:
$*|> IN: "demand" ( "an explanation for your inac <…>
$*|> MATCH (COK): "demand" ( "an explanation for your inac <…>
$*|> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

********************* \ $*| has returned (("demand" :| ["an explanation for your inaction"],Nothing),1)  :12_3:UnDeeper:
********************* / |>>/recurse                                                                      :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :12_3:UnDeeper:
********************* / |>>/base                                                                         :12_3:UnDeeper:
********************** / slAKA optional akapart                                                         :12_3:UnDeeper:
*********************** / |?| optional something                                                       :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / PAKA/akapart                                                             :12_3:UnDeeper:
************************** / $>|                                                                    :12_3:UnDeeper:
*************************** / Aka Token                                                            :12_3:UnDeeper:
Aka Token> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=77:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA            :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                    :12_3:UnDeeper:
PAKA/akapart> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=77:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA             :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                   :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :12_3:UnDeeper:
slAKA optional akapart> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                :12_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :12_3:UnDeeper:
********************* / |>>/recurse                                                                      :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :12_3:UnDeeper:
********************* / |>>/base                                                                         :12_3:UnDeeper:
********************** / slAKA optional typically                                                       :12_3:UnDeeper:
*********************** / |?| optional something                                                       :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / typically                                                                :12_3:UnDeeper:
************************** / $>|                                                                    :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY              :12_3:UnDeeper:
typically> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=77:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY          :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY             :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :12_3:UnDeeper:
slAKA optional typically> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                              :12_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :12_3:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                   :12_3:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                      :12_3:UnDeeper:
slAKA> IN: "demand" ( "an explanation for your inac <…>
slAKA> MATCH (COK): "demand" ( "an explanation for your inac <…>
slAKA> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

******************** \ slAKA has returned (("demand" :| ["an explanation for your inaction"],Nothing),1)  :12_3:UnDeeper:
******************** / undeepers                                                                          :12_3:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers           :12_3:UnDeeper:
********************* > sameLine: success!                                                                 :12_4:UnDeeper:
undeepers> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                            :12_4:UnDeeper:
pKeyValuesAka> IN: "demand" ( "an explanation for your inac <…>
pKeyValuesAka> MATCH (COK): "demand" ( "an explanation for your inac <…>
pKeyValuesAka> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing),[])

******************* \ pKeyValuesAka has returned ("demand" :| ["an explanation for your inaction"],Nothing)  :12_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "demand" ( "an explanation for your inac <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "demand" ( "an explanation for your inac <…>
pParamText(flat) first line: pKeyValues> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing),[])

****************** \ pParamText(flat) first line: pKeyValues has returned ("demand" :| ["an explanation for your inaction"],Nothing) :12_4:UnDeeper:
****************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                   :12_4:UnDeeper:
******************* / manyIndentation/leaf?                                                                  :12_4:UnDeeper:
******************** / sameMany                                                                             :12_4:UnDeeper:
********************* / pKeyValuesAka                                                                      :12_4:UnDeeper:
********************** / slAKA                                                                            :12_4:UnDeeper:
*********************** / $*|                                                                            :12_4:UnDeeper:
************************ / slAKA base                                                                   :12_4:UnDeeper:
************************* / slKeyValues                                                                :12_4:UnDeeper:
************************** / $*|                                                                      :12_4:UnDeeper:
*************************** / someSL                                                                 :12_4:UnDeeper:
**************************** / pNumAsText                                                           :12_4:UnDeeper:
pNumAsText> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=78:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number        :12_4:UnDeeper:
someSL> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=78:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :12_4:UnDeeper:
$*|> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=78:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number     :12_4:UnDeeper:
slKeyValues> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=78:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

************************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number :12_4:UnDeeper:
slAKA base> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=78:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number  :12_4:UnDeeper:
$*|> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=78:
$*|> unexpected )
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number           :12_4:UnDeeper:
slAKA> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=78:
slAKA> unexpected )
slAKA> expecting other text or number

********************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number           :12_4:UnDeeper:
pKeyValuesAka> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=78:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

********************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number     :12_4:UnDeeper:
sameMany> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************** \ sameMany has returned []                                                             :12_4:UnDeeper:
manyIndentation/leaf?> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************* \ manyIndentation/leaf? has returned []                                                  :12_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                   :12_4:UnDeeper:
pParamText> IN: "demand" ( "an explanation for your inac <…>
pParamText> MATCH (COK): "demand" ( "an explanation for your inac <…>
pParamText> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing) :| [],[])

***************** \ pParamText has returned ("demand" :| ["an explanation for your inaction"],Nothing) :| []   :12_4:UnDeeper:
pAction calling pParamText> IN: "demand" ( "an explanation for your inac <…>
pAction calling pParamText> MATCH (COK): "demand" ( "an explanation for your inac <…>
pAction calling pParamText> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

**************** \ pAction calling pParamText has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_4:UnDeeper:
manyIndentation/leaf?> IN: "demand" ( "an explanation for your inac <…>
manyIndentation/leaf?> MATCH (COK): "demand" ( "an explanation for your inac <…>
manyIndentation/leaf?> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

*************** \ manyIndentation/leaf? has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_4:UnDeeper:
*************** / myindented-UnDeeper                                                                            :12_4:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :12_2:Hence:
someIndentation> IN: ( "demand" ( "an explanation for your in <…>
someIndentation> MATCH (COK): ( "demand" ( "an explanation for your in <…>
someIndentation> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

************** \ someIndentation has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_2:Hence:
pDA> IN: MAY ( "demand" ( "an explanation for you <…>
pDA> MATCH (COK): MAY ( "demand" ( "an explanation for you <…>
pDA> VALUE: ((DMay,Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| [])),[])

************* \ pDA has returned (DMay,Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| [])) :12_2:Hence:
************* / WHERE                                                                                         :12_2:Hence:
WHERE> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=79:
WHERE> unexpected HENCE
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                   :12_2:Hence:
************* / preambleParamText:[Having]                                                                    :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                  :12_2:Hence:
preambleParamText:[Having]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=79:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING             :12_2:Hence:
************* / preambleParamText:[Given]                                                                     :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                   :12_2:Hence:
preambleParamText:[Given]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=79:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN               :12_2:Hence:
************* / preambleParamText:[Upon]                                                                      :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: UPON                                    :12_2:Hence:
preambleParamText:[Upon]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=79:
preambleParamText:[Upon]> unexpected HENCE
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected HENCE Expecting: UPON                 :12_2:Hence:
************* / preambleBoolStructR [Unless]                                                                  :12_2:Hence:
preambleBoolStructR [Unless]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=79:
preambleBoolStructR [Unless]> unexpected HENCE
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected HENCE Expecting: UNLESS           :12_2:Hence:
************* / preambleBoolStructR [When,If]                                                                 :12_2:Hence:
preambleBoolStructR [When,If]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=79:
preambleBoolStructR [When,If]> unexpected HENCE
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected HENCE Expecting: IF WHEN         :12_2:Hence:
************* / pTemporal/eventually                                                                          :12_2:Hence:
pTemporal/eventually> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=79:
pTemporal/eventually> unexpected HENCE
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected HENCE Expecting: EVENTUALLY               :12_2:Hence:
************* / pTemporal/specifically                                                                        :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: BEFORE AFTER BY ON                      :12_2:Hence:
pTemporal/specifically> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=79:
pTemporal/specifically> unexpected HENCE
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected HENCE Expecting: BEFORE AFTER BY ON     :12_2:Hence:
************* / pTemporal/vaguely                                                                             :12_2:Hence:
pTemporal/vaguely> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=79:
pTemporal/vaguely> unexpected HENCE
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected HENCE Expecting: Other text                  :12_2:Hence:
regulative permutation with deontic-action> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-action> MATCH (COK): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

************ \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :12_2:Hence:
permutationsReg> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
permutationsReg> MATCH (COK): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

*********** \ permutationsReg has returned RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :12_2:Hence:
*********** / pHenceLest-Hence                                                                                  :12_2:Hence:
************ / someIndentation                                                                                  :12_3:GoDeeper:
************* / myindented-GoDeeper                                                                            :12_3:GoDeeper:
myindented-GoDeeper> IN: ( PARTY ( "You" ) MUST ( "respond" EOL ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented-GoDeeper has returned GoDeeper                                                       :12_3:Party:
************* / manyIndentation/leaf?                                                                           :12_3:Party:
************** / pHenceLest -> innerRule -> pRegRule                                                           :12_3:Party:
*************** / pRegRule                                                                                    :12_3:Party:
**************** / pRuleLabel                                                                                :12_3:Party:
***************** / $>|                                                                                     :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting §

***************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: §                                  :12_3:Party:
pRuleLabel> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=81:
pRuleLabel> unexpected PARTY
pRuleLabel> expecting §

**************** \ !Unconsumed Error: pRuleLabel: Unexpected PARTY Expecting: §                             :12_3:Party:
**************** / pRegRuleSugary                                                                            :12_3:Party:
***************** / someDeep                                                                                :12_3:Party:
****************** / someDeep first part calls base directly                                               :12_3:Party:
someDeep first part calls base directly> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=81:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

****************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :12_3:Party:
someDeep> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=81:
someDeep> unexpected PARTY
someDeep> expecting Other text

***************** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                     :12_3:Party:
pRegRuleSugary> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=81:
pRegRuleSugary> unexpected PARTY
pRegRuleSugary> expecting Other text

**************** \ !Unconsumed Error: pRegRuleSugary: Unexpected PARTY Expecting: Other text                 :12_3:Party:
**************** / pRegRuleNormal                                                                            :12_3:Party:
***************** / permutationsReg                                                                         :12_3:Party:
****************** / regulative permutation with deontic-temporal                                          :12_3:Party:
******************* / WHERE                                                                               :12_3:Party:
WHERE> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=81:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                         :12_3:Party:
******************* / preambleParamText:[Having]                                                          :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                        :12_3:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=81:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING   :12_3:Party:
******************* / preambleParamText:[Given]                                                           :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                         :12_3:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=81:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN     :12_3:Party:
******************* / preambleParamText:[Upon]                                                            :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                          :12_3:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=81:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON       :12_3:Party:
******************* / preambleBoolStructR [Unless]                                                        :12_3:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=81:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS :12_3:Party:
******************* / preambleBoolStructR [When,If]                                                       :12_3:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=81:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN :12_3:Party:
******************* / pDT                                                                                 :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: MUST MAY SHANT                :12_3:Party:
pDT> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=81:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

******************* \ !Unconsumed Error: pDT: Unexpected PARTY Expecting: MUST MAY SHANT                  :12_3:Party:
******************* / pActor [REvery,RParty,RTokAll]                                                      :12_3:Party:
******************** / someIndentation                                                                    :12_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :12_4:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :12_4:Other "You:
********************* / manyIndentation/leaf?                                                             :12_4:Other "You:
********************** / pMultiTermAka                                                                   :12_4:Other "You:
*********************** / pAKA                                                                          :12_4:Other "You:
************************ / slAKA                                                                       :12_4:Other "You:
************************* / $*|                                                                       :12_4:Other "You:
************************** / slAKA base                                                              :12_4:Other "You:
*************************** / slMultiTerm                                                           :12_4:Other "You:
**************************** / someSL                                                              :12_4:Other "You:
someSL> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************************** \ someSL has returned (["You"],0)                                      :13_4:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************************** \ slMultiTerm has returned (["You"],0)                                   :13_4:UnDeeper:
slAKA base> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************************** \ slAKA base has returned (["You"],0)                                      :13_4:UnDeeper:
$*|> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************************* \ $*| has returned (["You"],0)                                               :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional akapart                                                   :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / PAKA/akapart                                                       :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
******************************* / Aka Token                                                      :13_4:UnDeeper:
Aka Token> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=84:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA      :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting AKA

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA              :13_4:UnDeeper:
PAKA/akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=84:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA       :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting AKA

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA             :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                          :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional typically                                                 :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / typically                                                          :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting TYPICALLY

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY        :13_4:UnDeeper:
typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=84:
typically> unexpected )
typically> expecting TYPICALLY

***************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY    :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY       :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                        :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...             :13_4:UnDeeper:
************************* > pAKA: entityalias = Nothing                                                :13_4:UnDeeper:
slAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************************ \ slAKA has returned (["You"],0)                                               :13_4:UnDeeper:
************************ / undeepers                                                                    :13_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :13_4:UnDeeper:
************************* > sameLine: success!                                                         :13_4:UnDeeper:
undeepers> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :13_4:UnDeeper:
pAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********************** \ pAKA has returned ["You"]                                                      :13_4:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********************** \ pMultiTermAka has returned ["You"]                                               :13_4:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********************* \ manyIndentation/leaf? has returned ["You"]                                         :13_4:UnDeeper:
********************* / myindented-UnDeeper                                                                :13_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented-UnDeeper has returned UnDeeper                                       :13_3:Must:
someIndentation> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******************** \ someIndentation has returned ["You"]                                              :13_3:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| [])) :13_3:Must:
******************* / manyIndentation/leaf?                                                               :13_3:Must:
******************** / preambleBoolStructR [Who,Which,Whose]                                             :13_3:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=85:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
manyIndentation/leaf?> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=85:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
******************* / manyIndentation/deeper; calling someIndentation                                     :13_3:Must:
******************** / someIndentation                                                                   :13_3:Must:
********************* / myindented-GoDeeper                                                             :13_3:Must:
myindented-GoDeeper> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=85:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (            :13_3:Must:
someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=85:
someIndentation> unexpected MUST
someIndentation> expecting (

******************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                  :13_3:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=85:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: ( :13_3:Must:
******************* / WHERE                                                                               :13_3:Must:
WHERE> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=85:
WHERE> unexpected MUST
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                          :13_3:Must:
******************* / preambleParamText:[Having]                                                          :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                         :13_3:Must:
preambleParamText:[Having]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=85:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING    :13_3:Must:
******************* / preambleParamText:[Given]                                                           :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                          :13_3:Must:
preambleParamText:[Given]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=85:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN      :13_3:Must:
******************* / preambleParamText:[Upon]                                                            :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                           :13_3:Must:
preambleParamText:[Upon]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=85:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON        :13_3:Must:
******************* / preambleBoolStructR [Unless]                                                        :13_3:Must:
preambleBoolStructR [Unless]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=85:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS  :13_3:Must:
******************* / preambleBoolStructR [When,If]                                                       :13_3:Must:
preambleBoolStructR [When,If]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=85:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN :13_3:Must:
******************* / pDT                                                                                 :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******************** \ $>| has returned DMust                                                             :13_4:GoDeeper:
******************** / |>| calling $>>                                                                    :13_4:GoDeeper:
********************* / |>>/recurse                                                                      :13_4:GoDeeper:
********************** / |>>/recurse                                                                     :13_4:Other "res:
|>>/recurse> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=87:
|>>/recurse> unexpected "respond"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "respond" Expecting: (               :13_4:Other "res:
********************** / |>>/base                                                                        :13_4:Other "res:
*********************** / pTemporal/eventually                                                          :13_4:Other "res:
pTemporal/eventually> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=87:
pTemporal/eventually> unexpected "respond"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "respond" Expecting: EVENTUALLY :13_4:Other "res:
*********************** / pTemporal/specifically                                                        :13_4:Other "res:
************************ / $>|                                                                         :13_4:Other "res:
$>|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=87:
$>|> unexpected "respond"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "respond" Expecting: BEFORE AFTER BY ON  :13_4:Other "res:
pTemporal/specifically> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=87:
pTemporal/specifically> unexpected "respond"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "respond" Expecting: BEFORE AFTER BY ON :13_4:Other "res:
*********************** / pTemporal/vaguely                                                             :13_4:Other "res:
pTemporal/vaguely> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/vaguely> MATCH (COK): "respond"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "respond"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "respond") :13_4:EOL:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "respond"))       :13_4:EOL:
|>>/base> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
|>>/base> MATCH (COK): "respond"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),0) :13_4:EOL:
|>>/recurse> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
|>>/recurse> MATCH (COK): ( "respond"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),1) :13_4:EOL:
|>| calling $>>> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
|>| calling $>>> MATCH (COK): ( "respond"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),1),[])

******************** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),1) :13_4:EOL:
******************** / undeepers                                                                           :13_4:EOL:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers            :13_4:EOL:
undeepers> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=88:
undeepers> unexpected EOL
undeepers> expecting )

******************** \ !Unconsumed Error: undeepers: Unexpected EOL Expecting: )                           :13_4:EOL:
pDT> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDT> MATCH (CERR): MUST ( "respond"
pDT> ERROR:
pDT> offset=88:
pDT> unexpected EOL
pDT> expecting )

******************* \ !Consumed Error: pDT: Unexpected EOL Expecting: )                                     :13_4:EOL:
******************* / pDoAction/Do                                                                        :13_3:Must:
pDoAction/Do> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=85:
pDoAction/Do> unexpected MUST
pDoAction/Do> expecting DO

******************* \ !Unconsumed Error: pDoAction/Do: Unexpected MUST Expecting: DO                      :13_3:Must:
regulative permutation with deontic-temporal> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
regulative permutation with deontic-temporal> MATCH (CERR): PARTY ( "You" )
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=88:
regulative permutation with deontic-temporal> unexpected EOL
regulative permutation with deontic-temporal> expecting (, ), WHICH, WHO, or WHOSE

****************** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected EOL Expecting: ( WHO WHICH WHOSE ) :13_3:Must:
****************** / regulative permutation with deontic-action                                            :12_3:Party:
******************* / WHERE                                                                               :12_3:Party:
WHERE> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=81:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                         :12_3:Party:
******************* / preambleParamText:[Having]                                                          :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                        :12_3:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=81:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING   :12_3:Party:
******************* / preambleParamText:[Given]                                                           :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                         :12_3:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=81:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN     :12_3:Party:
******************* / preambleParamText:[Upon]                                                            :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                          :12_3:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=81:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON       :12_3:Party:
******************* / preambleBoolStructR [Unless]                                                        :12_3:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=81:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS :12_3:Party:
******************* / preambleBoolStructR [When,If]                                                       :12_3:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=81:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN :12_3:Party:
******************* / pTemporal/eventually                                                                :12_3:Party:
pTemporal/eventually> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=81:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

******************* \ !Unconsumed Error: pTemporal/eventually: Unexpected PARTY Expecting: EVENTUALLY     :12_3:Party:
******************* / pTemporal/specifically                                                              :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: BEFORE AFTER BY ON            :12_3:Party:
pTemporal/specifically> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=81:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: pTemporal/specifically: Unexpected PARTY Expecting: BEFORE AFTER BY ON :12_3:Party:
******************* / pTemporal/vaguely                                                                   :12_3:Party:
pTemporal/vaguely> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=81:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

******************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected PARTY Expecting: Other text        :12_3:Party:
******************* / pActor [REvery,RParty,RTokAll]                                                      :12_3:Party:
******************** / someIndentation                                                                    :12_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :12_4:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :12_4:Other "You:
********************* / manyIndentation/leaf?                                                             :12_4:Other "You:
********************** / pMultiTermAka                                                                   :12_4:Other "You:
*********************** / pAKA                                                                          :12_4:Other "You:
************************ / slAKA                                                                       :12_4:Other "You:
************************* / $*|                                                                       :12_4:Other "You:
************************** / slAKA base                                                              :12_4:Other "You:
*************************** / slMultiTerm                                                           :12_4:Other "You:
**************************** / someSL                                                              :12_4:Other "You:
someSL> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************************** \ someSL has returned (["You"],0)                                      :13_4:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************************** \ slMultiTerm has returned (["You"],0)                                   :13_4:UnDeeper:
slAKA base> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************************** \ slAKA base has returned (["You"],0)                                      :13_4:UnDeeper:
$*|> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************************* \ $*| has returned (["You"],0)                                               :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional akapart                                                   :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / PAKA/akapart                                                       :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
******************************* / Aka Token                                                      :13_4:UnDeeper:
Aka Token> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=84:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA      :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting AKA

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA              :13_4:UnDeeper:
PAKA/akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=84:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA       :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting AKA

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA             :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                          :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional typically                                                 :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / typically                                                          :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting TYPICALLY

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY        :13_4:UnDeeper:
typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=84:
typically> unexpected )
typically> expecting TYPICALLY

***************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY    :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY       :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                        :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...             :13_4:UnDeeper:
************************* > pAKA: entityalias = Nothing                                                :13_4:UnDeeper:
slAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************************ \ slAKA has returned (["You"],0)                                               :13_4:UnDeeper:
************************ / undeepers                                                                    :13_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :13_4:UnDeeper:
************************* > sameLine: success!                                                         :13_4:UnDeeper:
undeepers> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :13_4:UnDeeper:
pAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********************** \ pAKA has returned ["You"]                                                      :13_4:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********************** \ pMultiTermAka has returned ["You"]                                               :13_4:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********************* \ manyIndentation/leaf? has returned ["You"]                                         :13_4:UnDeeper:
********************* / myindented-UnDeeper                                                                :13_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented-UnDeeper has returned UnDeeper                                       :13_3:Must:
someIndentation> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******************** \ someIndentation has returned ["You"]                                              :13_3:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| [])) :13_3:Must:
******************* / manyIndentation/leaf?                                                               :13_3:Must:
******************** / preambleBoolStructR [Who,Which,Whose]                                             :13_3:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=85:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
manyIndentation/leaf?> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=85:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
******************* / manyIndentation/deeper; calling someIndentation                                     :13_3:Must:
******************** / someIndentation                                                                   :13_3:Must:
********************* / myindented-GoDeeper                                                             :13_3:Must:
myindented-GoDeeper> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=85:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (            :13_3:Must:
someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=85:
someIndentation> unexpected MUST
someIndentation> expecting (

******************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                  :13_3:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=85:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: ( :13_3:Must:
******************* / WHERE                                                                               :13_3:Must:
WHERE> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=85:
WHERE> unexpected MUST
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                          :13_3:Must:
******************* / preambleParamText:[Having]                                                          :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                         :13_3:Must:
preambleParamText:[Having]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=85:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING    :13_3:Must:
******************* / preambleParamText:[Given]                                                           :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                          :13_3:Must:
preambleParamText:[Given]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=85:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN      :13_3:Must:
******************* / preambleParamText:[Upon]                                                            :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                           :13_3:Must:
preambleParamText:[Upon]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=85:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON        :13_3:Must:
******************* / preambleBoolStructR [Unless]                                                        :13_3:Must:
preambleBoolStructR [Unless]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=85:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS  :13_3:Must:
******************* / preambleBoolStructR [When,If]                                                       :13_3:Must:
preambleBoolStructR [When,If]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=85:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN :13_3:Must:
******************* / pTemporal/eventually                                                                :13_3:Must:
pTemporal/eventually> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=85:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******************* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY      :13_3:Must:
******************* / pTemporal/specifically                                                              :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON             :13_3:Must:
pTemporal/specifically> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=85:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON :13_3:Must:
******************* / pTemporal/vaguely                                                                   :13_3:Must:
pTemporal/vaguely> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=85:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text         :13_3:Must:
******************* / pDA                                                                                 :13_3:Must:
******************** / someIndentation                                                                    :13_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :13_4:GoDeeper:
myindented-GoDeeper> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :13_4:Other "res:
********************* / manyIndentation/leaf?                                                             :13_4:Other "res:
********************** / pAction calling pParamText                                                      :13_4:Other "res:
*********************** / pParamText                                                                    :13_4:Other "res:
************************ / pParamText(flat) first line: pKeyValues                                     :13_4:Other "res:
************************* / pKeyValuesAka                                                             :13_4:Other "res:
************************** / slAKA                                                                   :13_4:Other "res:
*************************** / $*|                                                                   :13_4:Other "res:
**************************** / slAKA base                                                          :13_4:Other "res:
***************************** / slKeyValues                                                       :13_4:Other "res:
****************************** / $*|                                                             :13_4:Other "res:
******************************* / someSL                                                        :13_4:Other "res:
someSL> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
someSL> MATCH (COK): "respond"
someSL> VALUE: ((["respond"],0),[])

******************************* \ someSL has returned (["respond"],0)                           :13_4:EOL:
$*|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$*|> MATCH (COK): "respond"
$*|> VALUE: ((["respond"],0),[])

****************************** \ $*| has returned (["respond"],0)                                :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / |?| optional something                                        :13_4:EOL:
******************************** / |>>/recurse                                                 :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: ( :13_4:EOL:
******************************** / |>>/base                                                    :13_4:EOL:
********************************* / slTypeSig                                                 :13_4:EOL:
********************************** / $>|                                                     :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting :: or IS

********************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: IS :: :13_4:EOL:
slTypeSig> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=88:
slTypeSig> unexpected EOL
slTypeSig> expecting :: or IS

********************************* \ !Unconsumed Error: slTypeSig: Unexpected EOL Expecting: IS :: :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting :: or IS

******************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: IS :: :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)               :13_4:EOL:
******************************* > |>>/base got Nothing                                          :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************************** \ |>>/base has returned (Nothing,0)                               :13_4:EOL:
slKeyValues> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slKeyValues> MATCH (COK): "respond"
slKeyValues> VALUE: ((("respond" :| [],Nothing),0),[])

***************************** \ slKeyValues has returned (("respond" :| [],Nothing),0)            :13_4:EOL:
slAKA base> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slAKA base> MATCH (COK): "respond"
slAKA base> VALUE: ((("respond" :| [],Nothing),0),[])

**************************** \ slAKA base has returned (("respond" :| [],Nothing),0)               :13_4:EOL:
$*|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$*|> MATCH (COK): "respond"
$*|> VALUE: ((("respond" :| [],Nothing),0),[])

*************************** \ $*| has returned (("respond" :| [],Nothing),0)                        :13_4:EOL:
*************************** / |>>/recurse                                                           :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (           :13_4:EOL:
*************************** / |>>/base                                                              :13_4:EOL:
**************************** / slAKA optional akapart                                              :13_4:EOL:
***************************** / |?| optional something                                            :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / PAKA/akapart                                                  :13_4:EOL:
******************************** / $>|                                                         :13_4:EOL:
********************************* / Aka Token                                                 :13_4:EOL:
Aka Token> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=88:
Aka Token> unexpected EOL
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected EOL Expecting: AKA :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: AKA       :13_4:EOL:
PAKA/akapart> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=88:
PAKA/akapart> unexpected EOL
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected EOL Expecting: AKA :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: AKA      :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                   :13_4:EOL:
slAKA optional akapart> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                     :13_4:EOL:
**************************** > |>>/base got Nothing                                                :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                     :13_4:EOL:
*************************** / |>>/recurse                                                           :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (           :13_4:EOL:
*************************** / |>>/base                                                              :13_4:EOL:
**************************** / slAKA optional typically                                            :13_4:EOL:
***************************** / |?| optional something                                            :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / typically                                                     :13_4:EOL:
******************************** / $>|                                                         :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
typically> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=88:
typically> unexpected EOL
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                   :13_4:EOL:
slAKA optional typically> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                   :13_4:EOL:
**************************** > |>>/base got Nothing                                                :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                     :13_4:EOL:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...        :13_4:EOL:
*************************** > pAKA: entityalias = Nothing                                           :13_4:EOL:
slAKA> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slAKA> MATCH (COK): "respond"
slAKA> VALUE: ((("respond" :| [],Nothing),0),[])

************************** \ slAKA has returned (("respond" :| [],Nothing),0)                        :13_4:EOL:
************************** / undeepers                                                               :13_4:EOL:
*************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :13_4:EOL:
*************************** > sameLine: success!                                                    :13_4:EOL:
undeepers> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************** \ undeepers has returned ()                                               :13_4:EOL:
pKeyValuesAka> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pKeyValuesAka> MATCH (COK): "respond"
pKeyValuesAka> VALUE: (("respond" :| [],Nothing),[])

************************* \ pKeyValuesAka has returned ("respond" :| [],Nothing)                      :13_4:EOL:
pParamText(flat) first line: pKeyValues> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "respond"
pParamText(flat) first line: pKeyValues> VALUE: (("respond" :| [],Nothing),[])

************************ \ pParamText(flat) first line: pKeyValues has returned ("respond" :| [],Nothing) :13_4:EOL:
************************ / pParamText(flat) subsequent lines: sameMany pKeyValues                       :13_5:GoDeeper:
************************* / manyIndentation/leaf?                                                      :13_5:GoDeeper:
************************** / sameMany                                                                 :13_5:GoDeeper:
*************************** / pKeyValuesAka                                                          :13_5:GoDeeper:
**************************** / slAKA                                                                :13_5:GoDeeper:
***************************** / $*|                                                                :13_5:GoDeeper:
****************************** / slAKA base                                                       :13_5:GoDeeper:
******************************* / slKeyValues                                                    :13_5:GoDeeper:
******************************** / $*|                                                          :13_5:GoDeeper:
********************************* / someSL                                                     :13_5:GoDeeper:
********************************** / pNumAsText                                               :13_5:GoDeeper:
pNumAsText> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=89:
pNumAsText> unexpected (
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :13_5:GoDeeper:
someSL> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=89:
someSL> unexpected (
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
$*|> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=89:
$*|> unexpected (
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slKeyValues> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=89:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

******************************* \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slAKA base> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=89:
slAKA base> unexpected (
slAKA base> expecting other text or number

****************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
$*|> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=89:
$*|> unexpected (
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slAKA> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=89:
slAKA> unexpected (
slAKA> expecting other text or number

**************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
pKeyValuesAka> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=89:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*************************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
sameMany> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************** \ sameMany has returned []                                                 :13_5:GoDeeper:
manyIndentation/leaf?> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************************* \ manyIndentation/leaf? has returned []                                      :13_5:GoDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :13_5:GoDeeper:
pParamText> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pParamText> MATCH (COK): "respond" EOL
pParamText> VALUE: (("respond" :| [],Nothing) :| [],[])

*********************** \ pParamText has returned ("respond" :| [],Nothing) :| []                        :13_5:GoDeeper:
pAction calling pParamText> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pAction calling pParamText> MATCH (COK): "respond" EOL
pAction calling pParamText> VALUE: (Leaf (("respond" :| [],Nothing) :| []),[])

********************** \ pAction calling pParamText has returned Leaf (("respond" :| [],Nothing) :| [])   :13_5:GoDeeper:
manyIndentation/leaf?> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
manyIndentation/leaf?> MATCH (COK): "respond" EOL
manyIndentation/leaf?> VALUE: (Leaf (("respond" :| [],Nothing) :| []),[])

********************* \ manyIndentation/leaf? has returned Leaf (("respond" :| [],Nothing) :| [])          :13_5:GoDeeper:
********************* / myindented-UnDeeper                                                                :13_5:GoDeeper:
myindented-UnDeeper> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
myindented-UnDeeper> MATCH (EERR): <EMPTY>
myindented-UnDeeper> ERROR:
myindented-UnDeeper> offset=89:
myindented-UnDeeper> unexpected (
myindented-UnDeeper> expecting )

********************* \ !Unconsumed Error: myindented-UnDeeper: Unexpected ( Expecting: )                  :13_5:GoDeeper:
someIndentation> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
someIndentation> MATCH (CERR): ( "respond" EOL
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting ) or other text or number

******************** \ !Consumed Error: someIndentation: Unexpected ( Expecting: ) other text or number     :13_5:GoDeeper:
pDA> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDA> MATCH (CERR): MUST ( "respond" EOL
pDA> ERROR:
pDA> offset=89:
pDA> unexpected (
pDA> expecting ) or other text or number

******************* \ !Consumed Error: pDA: Unexpected ( Expecting: ) other text or number                   :13_5:GoDeeper:
regulative permutation with deontic-action> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
regulative permutation with deontic-action> MATCH (CERR): PARTY ( "You" )
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=89:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting (, ), WHICH, WHO, WHOSE, or other text or number

****************** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :13_3:Must:
permutationsReg> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=89:
permutationsReg> unexpected (
permutationsReg> expecting (, ), WHICH, WHO, WHOSE, or other text or number

***************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRuleNormal> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, or other text or number

**************** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRule> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

*************** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pHenceLest -> innerRule -> pRegRule> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=89:
pHenceLest -> innerRule -> pRegRule> unexpected (
pHenceLest -> innerRule -> pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
************** / someDeep                                                                                      :12_3:Party:
*************** / someDeep first part calls base directly                                                     :12_3:Party:
someDeep first part calls base directly> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=81:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

*************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :12_3:Party:
someDeep> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=81:
someDeep> unexpected PARTY
someDeep> expecting Other text

************** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                           :12_3:Party:
manyIndentation/leaf?> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=89:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
************* / manyIndentation/deeper; calling someIndentation                                                 :12_3:Party:
************** / someIndentation                                                                               :12_3:Party:
*************** / myindented-GoDeeper                                                                         :12_3:Party:
myindented-GoDeeper> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=81:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: (                       :12_3:Party:
someIndentation> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=81:
someIndentation> unexpected PARTY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: (                             :12_3:Party:
manyIndentation/deeper; calling someIndentation> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=81:
manyIndentation/deeper; calling someIndentation> unexpected PARTY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected PARTY Expecting: ( :12_3:Party:
someIndentation> IN: ( PARTY ( "You" ) MUST ( "respond" EOL ( <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************ \ !Consumed Error: someIndentation: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pHenceLest-Hence> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pHenceLest-Hence> MATCH (CERR): HENCE (
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=89:
pHenceLest-Hence> unexpected (
pHenceLest-Hence> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

*********** \ !Consumed Error: pHenceLest-Hence: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRuleNormal> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleNormal> MATCH (CERR): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

********** \ !Consumed Error: pRegRuleNormal: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number  :12_3:Party:
pRegRule> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

********* \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number   :10_2:Party:
pHenceLest -> innerRule -> pRegRule> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=89:
pHenceLest -> innerRule -> pRegRule> unexpected (
pHenceLest -> innerRule -> pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

******** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number :10_2:Party:
******** / someDeep                                                                                                :10_2:Party:
********* / someDeep first part calls base directly                                                               :10_2:Party:
someDeep first part calls base directly> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=68:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

********* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text    :10_2:Party:
someDeep> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=68:
someDeep> unexpected PARTY
someDeep> expecting Other text

******** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                                     :10_2:Party:
manyIndentation/leaf?> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=89:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number :10_2:Party:
******* / manyIndentation/deeper; calling someIndentation                                                           :10_2:Party:
******** / someIndentation                                                                                         :10_2:Party:
********* / myindented-GoDeeper                                                                                   :10_2:Party:
myindented-GoDeeper> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=68:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: (                                 :10_2:Party:
someIndentation> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=68:
someIndentation> unexpected PARTY
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: (                                       :10_2:Party:
manyIndentation/deeper; calling someIndentation> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=68:
manyIndentation/deeper; calling someIndentation> unexpected PARTY
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected PARTY Expecting: (         :10_2:Party:
someIndentation> IN: ( PARTY ( "the PDPC" ) MAY ( "demand" (  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

****** \ !Consumed Error: someIndentation: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number    :10_2:Party:
pHenceLest-Lest> IN: LEST ( PARTY ( "the PDPC" ) MAY ( "deman <…>
pHenceLest-Lest> MATCH (CERR): LEST (
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=89:
pHenceLest-Lest> unexpected (
pHenceLest-Lest> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

***** \ !Consumed Error: pHenceLest-Lest: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number      :10_2:Party:
pRegRuleNormal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

**** \ !Consumed Error: pRegRuleNormal: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number         :10_2:Party:
pRegRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRegRule> MATCH (EERR): §§ ( "Assess" )
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, end of input, other text or number, or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number end of input :2_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Assess" Expecting: (                                            :1_2:Other "Asse:
****** / |>>/base                                                                                                    :1_2:Other "Asse:
******* / |.| manyLike                                                                                              :1_2:Other "Asse:
******** / someSL                                                                                                  :1_2:Other "Asse:
someSL> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
someSL> MATCH (COK): "Assess"
someSL> VALUE: ((["Assess"],0),[])

******** \ someSL has returned (["Assess"],0)                                                                       :2_2:UnDeeper:
|.| manyLike> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|.| manyLike> MATCH (COK): "Assess"
|.| manyLike> VALUE: ((["Assess"],0),[])

******* \ |.| manyLike has returned (["Assess"],0)                                                                   :2_2:UnDeeper:
******* > |>>/base got "Assess"                                                                                      :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

****** \ |>>/base has returned ("Assess",0)                                                                           :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

***** \ |>>/recurse has returned ("Assess",1)                                                                          :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Every:
upToNUndeepers/done> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Every:
upToNUndeepers/undeeper> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (EOK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :2_1:Every:
**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :2_1:Every:
pTypeDefinition> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pTypeDefinition> MATCH (EERR): §§ ( "Assess" )
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or end of input

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: GIVEN UPON DEFINE end of input                  :2_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Assess" Expecting: (                                            :1_2:Other "Asse:
****** / |>>/base                                                                                                    :1_2:Other "Asse:
******* / |.| manyLike                                                                                              :1_2:Other "Asse:
******** / someSL                                                                                                  :1_2:Other "Asse:
someSL> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
someSL> MATCH (COK): "Assess"
someSL> VALUE: ((["Assess"],0),[])

******** \ someSL has returned (["Assess"],0)                                                                       :2_2:UnDeeper:
|.| manyLike> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|.| manyLike> MATCH (COK): "Assess"
|.| manyLike> VALUE: ((["Assess"],0),[])

******* \ |.| manyLike has returned (["Assess"],0)                                                                   :2_2:UnDeeper:
******* > |>>/base got "Assess"                                                                                      :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

****** \ |>>/base has returned ("Assess",0)                                                                           :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

***** \ |>>/recurse has returned ("Assess",1)                                                                          :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Every:
upToNUndeepers/done> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Every:
upToNUndeepers/undeeper> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (EOK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

**** \ pRuleLabel has returned ("\167",2,"Assess")                                                                   :2_1:Every:
**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :2_1:Every:
pAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :2_1:Every:
pMultiTermAka> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented-GoDeeper                                                                                     :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :2_1:Every:
calling myindented pNameParens> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :2_1:Every:
pConstitutiveRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pConstitutiveRule> MATCH (EERR): §§ ( "Assess" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, end of input, or other text or number

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: ( other text or number end of input           :2_1:Every:
*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
pScenarioRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected §§
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected §§ Expecting: SCENARIO                                           :1_1:RuleMarker:
*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Assess" Expecting: (                                          :1_2:Other "Asse:
******* / |>>/base                                                                                                  :1_2:Other "Asse:
******** / |.| manyLike                                                                                            :1_2:Other "Asse:
********* / someSL                                                                                                :1_2:Other "Asse:
someSL> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
someSL> MATCH (COK): "Assess"
someSL> VALUE: ((["Assess"],0),[])

********* \ someSL has returned (["Assess"],0)                                                                     :2_2:UnDeeper:
|.| manyLike> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|.| manyLike> MATCH (COK): "Assess"
|.| manyLike> VALUE: ((["Assess"],0),[])

******** \ |.| manyLike has returned (["Assess"],0)                                                                 :2_2:UnDeeper:
******** > |>>/base got "Assess"                                                                                    :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

******* \ |>>/base has returned ("Assess",0)                                                                         :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

****** \ |>>/recurse has returned ("Assess",1)                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/undeeper                                                                                      :2_2:UnDeeper:
******* / upToNUndeepers/done                                                                                     :2_1:Every:
upToNUndeepers/done> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

******* \ upToNUndeepers/done has returned ((),0)                                                                 :2_1:Every:
upToNUndeepers/undeeper> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

****** \ upToNUndeepers/undeeper has returned ((),-1)                                                              :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (EOK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

***** \ pRuleLabel has returned ("\167",2,"Assess")                                                                 :2_1:Every:
pSrcRef> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pSrcRef> MATCH (EOK): §§ ( "Assess" )
pSrcRef> VALUE: ((Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Assess"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
pHornlike / permute> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :2_1:Every:
pHornlike> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pHornlike> MATCH (EERR): §§ ( "Assess" )
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, end of input, or other text or number

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number end of input :2_1:Every:
*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>>/recurse                                                                                                    :1_2:GoDeeper:
***** / |>>/recurse                                                                                                   :1_2:Other "Asse:
|>>/recurse> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Assess"
|>>/recurse> expecting (

***** \ !Unconsumed Error: |>>/recurse: Unexpected "Assess" Expecting: (                                              :1_2:Other "Asse:
***** / |>>/base                                                                                                      :1_2:Other "Asse:
****** / |.| manyLike                                                                                                :1_2:Other "Asse:
******* / someSL                                                                                                    :1_2:Other "Asse:
someSL> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
someSL> MATCH (COK): "Assess"
someSL> VALUE: ((["Assess"],0),[])

******* \ someSL has returned (["Assess"],0)                                                                         :2_2:UnDeeper:
|.| manyLike> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|.| manyLike> MATCH (COK): "Assess"
|.| manyLike> VALUE: ((["Assess"],0),[])

****** \ |.| manyLike has returned (["Assess"],0)                                                                     :2_2:UnDeeper:
****** > |>>/base got "Assess"                                                                                        :2_2:UnDeeper:
|>>/base> IN: "Assess" ) EVERY ( "Organisation" ( ( (  <…>
|>>/base> MATCH (COK): "Assess"
|>>/base> VALUE: (("Assess",0),[])

***** \ |>>/base has returned ("Assess",0)                                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Assess" ) EVERY ( "Organisation" ( (  <…>
|>>/recurse> MATCH (COK): ( "Assess"
|>>/recurse> VALUE: (("Assess",1),[])

**** \ |>>/recurse has returned ("Assess",1)                                                                            :2_2:UnDeeper:
**** / upToNUndeepers/undeeper                                                                                          :2_2:UnDeeper:
***** / upToNUndeepers/done                                                                                         :2_1:Every:
upToNUndeepers/done> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

***** \ upToNUndeepers/done has returned ((),0)                                                                     :2_1:Every:
upToNUndeepers/undeeper> IN: ) EVERY ( "Organisation" ( ( ( AKA ( "Yo <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

**** \ upToNUndeepers/undeeper has returned ((),-1)                                                                  :2_1:Every:
pRuleLabel> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRuleLabel> MATCH (EOK): §§ ( "Assess" )
pRuleLabel> VALUE: (("\167",2,"Assess"),[])

*** \ pRuleLabel has returned ("\167",2,"Assess")                                                                     :2_1:Every:
pRule> IN: §§ ( "Assess" ) EVERY ( "Organisation" ( <…>
pRule> MATCH (EOK): §§ ( "Assess" )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Assess"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Every:
** / pRule                                                                                                             :2_1:Every:
*** / pRegRule                                                                                                        :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :2_1:Every:
pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :2_1:Every:
**** / pRegRuleSugary                                                                                                :2_1:Every:
***** / someDeep                                                                                                    :2_1:Every:
****** / someDeep first part calls base directly                                                                   :2_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :2_1:Every:
someDeep> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :2_1:Every:
pRegRuleSugary> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :2_1:Every:
**** / pRegRuleNormal                                                                                                :2_1:Every:
***** / permutationsReg                                                                                             :2_1:Every:
****** / regulative permutation with deontic-temporal                                                              :2_1:Every:
******* / WHERE                                                                                                   :2_1:Every:
WHERE> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :2_1:Every:
******* / preambleParamText:[Having]                                                                              :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :2_1:Every:
preambleParamText:[Having]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :2_1:Every:
******* / preambleParamText:[Given]                                                                               :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :2_1:Every:
******* / preambleParamText:[Upon]                                                                                :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :2_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :2_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :2_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :2_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :2_1:Every:
******* / pDT                                                                                                     :2_1:Every:
******** / $>|                                                                                                   :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :2_1:Every:
pDT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :2_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :2_1:Every:
******** / someIndentation                                                                                        :2_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :2_2:Other "Orga:
********* / manyIndentation/leaf?                                                                                 :2_2:Other "Orga:
********** / pMultiTermAka                                                                                       :2_2:Other "Orga:
*********** / pAKA                                                                                              :2_2:Other "Orga:
************ / slAKA                                                                                           :2_2:Other "Orga:
************* / $*|                                                                                           :2_2:Other "Orga:
************** / slAKA base                                                                                  :2_2:Other "Orga:
*************** / slMultiTerm                                                                               :2_2:Other "Orga:
**************** / someSL                                                                                  :2_2:Other "Orga:
***************** / pNumAsText                                                                                  :2_5:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected AKA
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected AKA Expecting: number                             :2_5:Aka:
someSL> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
someSL> MATCH (COK): "Organisation"
someSL> VALUE: ((["Organisation"],0),[])

**************** \ someSL has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
slMultiTerm> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slMultiTerm> MATCH (COK): "Organisation"
slMultiTerm> VALUE: ((["Organisation"],0),[])

*************** \ slMultiTerm has returned (["Organisation"],0)                                              :2_3:GoDeeper:
slAKA base> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA base> MATCH (COK): "Organisation"
slAKA base> VALUE: ((["Organisation"],0),[])

************** \ slAKA base has returned (["Organisation"],0)                                                 :2_3:GoDeeper:
$*|> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
$*|> MATCH (COK): "Organisation"
$*|> VALUE: ((["Organisation"],0),[])

************* \ $*| has returned (["Organisation"],0)                                                          :2_3:GoDeeper:
************* / |>>/recurse                                                                                    :2_3:GoDeeper:
************** / |>>/recurse                                                                                    :2_4:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                                   :2_5:Aka:
**************** / |>>/base                                                                                      :2_5:Aka:
***************** / slAKA optional akapart                                                                      :2_5:Aka:
****************** / |?| optional something                                                                    :2_5:Aka:
******************* / |>>/recurse                                                                             :2_5:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                             :2_5:Aka:
******************* / |>>/base                                                                                :2_5:Aka:
******************** / PAKA/akapart                                                                          :2_5:Aka:
********************* / $>|                                                                                 :2_5:Aka:
********************** / Aka Token                                                                         :2_5:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************** \ Aka Token has returned Aka                                                         :2_6:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

********************* \ $>| has returned Aka                                                                 :2_6:GoDeeper:
********************* / |>>/recurse                                                                          :2_6:GoDeeper:
********************** / |>>/recurse                                                                         :2_6:Other "You":
|>>/recurse> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=12:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "You" Expecting: (                       :2_6:Other "You":
********************** / |>>/base                                                                            :2_6:Other "You":
*********************** / someSL                                                                            :2_6:Other "You":
someSL> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

*********************** \ someSL has returned (["You"],0)                                            :3_2:UnDeeper:
*********************** > |>>/base got ["You"]                                                       :3_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) ) WHO ( "is" ( "not" ( "a  <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************** \ |>>/base has returned (["You"],0)                                            :3_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) ) WHO ( "is" ( "not" ( " <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

********************* \ |>>/recurse has returned (["You"],1)                                           :3_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************** \ PAKA/akapart has returned (["You"],1)                                            :3_2:UnDeeper:
******************** > |>>/base got ["You"]                                                             :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

******************* \ |>>/base has returned (["You"],1)                                                  :3_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

****************** \ |?| optional something has returned (Just ["You"],1)                                 :3_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

***************** \ slAKA optional akapart has returned (Just ["You"],1)                                   :3_2:UnDeeper:
***************** > |>>/base got Just ["You"]                                                              :3_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) ) WHO ( "is" ( "not" <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

**************** \ |>>/base has returned (Just ["You"],1)                                                   :3_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( "no <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

*************** \ |>>/recurse has returned (Just ["You"],2)                                                  :3_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( " <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************** \ |>>/recurse has returned (Just ["You"],3)                                                    :3_2:UnDeeper:
|>>/recurse> IN: ( ( ( AKA ( "You" ) ) ) ) ) WHO ( "is" ( <…>
|>>/recurse> MATCH (COK): ( ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],4),[])

************* \ |>>/recurse has returned (Just ["You"],4)                                                      :3_2:UnDeeper:
************* / |>>/recurse                                                                                    :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :3_2:UnDeeper:
************* / |>>/base                                                                                       :3_2:UnDeeper:
************** / slAKA optional typically                                                                     :3_2:UnDeeper:
*************** / |?| optional something                                                                     :3_2:UnDeeper:
**************** / |>>/recurse                                                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :3_2:UnDeeper:
**************** / |>>/base                                                                                 :3_2:UnDeeper:
***************** / typically                                                                              :3_2:UnDeeper:
****************** / $>|                                                                                  :3_2:UnDeeper:
$>|> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :3_2:UnDeeper:
typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=13:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=13:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :3_2:UnDeeper:
|?| optional something> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :3_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :3_2:UnDeeper:
|>>/base> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :3_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :3_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :3_2:UnDeeper:
slAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
slAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You"
slAKA> VALUE: ((["Organisation"],4),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

************ \ slAKA has returned (["Organisation"],4)                                                          :3_2:UnDeeper:
************ / undeepers                                                                                        :3_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 4 UnDeepers                         :3_2:UnDeeper:
************* > sameLine: success!                                                                                     :3_6:UnDeeper:
undeepers> IN: ) ) ) ) ) WHO ( "is" ( "not" ( "a Public <…>
undeepers> MATCH (COK): ) ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                                :3_6:UnDeeper:
pAKA> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pAKA> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pAKA> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

*********** \ pAKA has returned ["Organisation"]                                                                         :3_6:UnDeeper:
pMultiTermAka> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
pMultiTermAka> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
pMultiTermAka> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********** \ pMultiTermAka has returned ["Organisation"]                                                                  :3_6:UnDeeper:
manyIndentation/leaf?> IN: "Organisation" ( ( ( AKA ( "You" ) ) ) ) <…>
manyIndentation/leaf?> MATCH (COK): "Organisation" ( ( ( AKA ( "You" ) ) ) )
manyIndentation/leaf?> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Organisation"]                                                            :3_6:UnDeeper:
********* / myindented-UnDeeper                                                                                            :3_6:UnDeeper:
myindented-UnDeeper> IN: ) WHO ( "is" ( "not" ( "a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :3_1:Who:
someIndentation> IN: ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> MATCH (COK): ( "Organisation" ( ( ( AKA ( "You" ) ) ) <…>
someIndentation> VALUE: (["Organisation"],[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******** \ someIndentation has returned ["Organisation"]                                                         :3_1:Who:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("Organisation" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("Organisation" :| [],Nothing) :| []))        :3_1:Who:
******* / manyIndentation/leaf?                                                                                   :3_1:Who:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :3_1:Who:
********* / pBSR                                                                                                 :3_2:GoDeeper:
********** / ppp inner                                                                                          :3_2:GoDeeper:
*********** / expression                                                                                       :3_2:GoDeeper:
************ / termIndent p                                                                                   :3_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :3_2:GoDeeper:
************** > |<|                                                                                        :3_2:GoDeeper:
************** > |<* starting                                                                               :3_2:GoDeeper:
************** / $*|                                                                                        :3_2:GoDeeper:
*************** / someSL                                                                                   :3_2:GoDeeper:
**************** / pNumAsText                                                                             :3_2:GoDeeper:
pNumAsText> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_2:GoDeeper:
someSL> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_2:GoDeeper:
$*|> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :3_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :3_2:GoDeeper:
*************** / someIndentation                                                                          :3_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :3_2:GoDeeper:
myindented-GoDeeper> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :3_2:Other "is":
**************** / manyIndentation/leaf?                                                                   :3_2:Other "is":
***************** / ppp inner                                                                             :3_2:Other "is":
****************** / expression                                                                          :3_2:Other "is":
******************* / termIndent p                                                                      :3_2:Other "is":
******************** / term p/1a:label ends directly above next line                                   :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
********************** / pNumAsText                                                                   :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (CERR): "is" ( "not" ( "a Public Agency"
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

********************* \ $*| has returned (["is","not","a Public Agency"],2)                            :4_2:UnDeeper:
********************* / matching EOL                                                                   :4_2:UnDeeper:
matching EOL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=25:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :3_2:Other "is":
********************* > |<|                                                                           :3_2:Other "is":
********************* > |<* starting                                                                  :3_2:Other "is":
********************* / $*|                                                                           :3_2:Other "is":
********************** / someSL                                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

********************** \ someSL has returned (["is","not","a Public Agency"],2)                       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

********************* \ $*| has returned (["is","not","a Public Agency"],2)                            :4_2:UnDeeper:
********************* / |<*/parent                                                                     :4_2:UnDeeper:
********************** > |<*/recurse                                                                  :4_2:UnDeeper:
********************** / ppp inner                                                                 :4_1:Must:
*********************** / expression                                                              :4_1:Must:
************************ / termIndent p                                                          :4_1:Must:
************************* / term p/1a:label ends directly above next line                       :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=28:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/1b:label ends to the left of line below, with EOL            :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=28:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/1c:label ends to the right of line below                     :4_1:Must:
************************** > |<|                                                               :4_1:Must:
************************** > |<* starting                                                      :4_1:Must:
************************** / $*|                                                               :4_1:Must:
*************************** / someSL                                                          :4_1:Must:
**************************** / pNumAsText                                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :4_1:Must:
************************* / term p/notLabelTerm                                                 :4_1:Must:
************************** / term p/2:someIndentation expr p                                   :4_1:Must:
*************************** / someIndentation                                                 :4_1:Must:
**************************** / myindented-GoDeeper                                           :4_1:Must:
myindented-GoDeeper> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=28:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :4_1:Must:
someIndentation> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=28:
someIndentation> unexpected MUST
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :4_1:Must:
term p/2:someIndentation expr p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=28:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :4_1:Must:
************************** / term p/3:plain p                                                  :4_1:Must:
*************************** / pRelPred                                                        :4_1:Must:
**************************** / slRelPred                                                     :4_1:Must:
***************************** / nested simpleHorn                                           :4_1:Must:
****************************** > |^|                                                       :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
nested simpleHorn> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPConstraint                                                :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPConstraint> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=28:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPBoolStructR                                               :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slMultiTerm                                             :4_1:Must:
******************************** / someSL                                                :4_1:Must:
********************************* / pNumAsText                                          :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPBoolStructR> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=28:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :4_1:Must:
***************************** / RPMT                                                        :4_1:Must:
****************************** / $*|                                                       :4_1:Must:
******************************* / slAKA                                                   :4_1:Must:
******************************** / $*|                                                   :4_1:Must:
********************************* / slAKA base                                          :4_1:Must:
********************************** / slMultiTerm                                       :4_1:Must:
*********************************** / someSL                                          :4_1:Must:
************************************ / pNumAsText                                    :4_1:Must:
pNumAsText> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :4_1:Must:
someSL> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :4_1:Must:
slMultiTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=28:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :4_1:Must:
slAKA base> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=28:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
slAKA> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=28:
slAKA> unexpected MUST
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :4_1:Must:
RPMT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=28:
RPMT> unexpected MUST
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :4_1:Must:
slRelPred> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=28:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :4_1:Must:
pRelPred> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=28:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/3:plain p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=28:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :4_1:Must:
term p/notLabelTerm> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=28:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :4_1:Must:
termIndent p> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=28:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :4_1:Must:
expression> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=28:
expression> unexpected MUST
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression    :4_1:Must:
ppp inner> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=28:
ppp inner> unexpected MUST
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression       :4_1:Must:
********************** / withPrePost                                                               :4_1:Must:
*********************** > |<* starting                                                            :4_1:Must:
*********************** / $*|                                                                     :4_1:Must:
************************ / pre part                                                              :4_1:Must:
pre part> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=28:
pre part> unexpected MUST
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text  :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text         :4_1:Must:
withPrePost> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=28:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text   :4_1:Must:
********************** / $*|                                                                       :4_1:Must:
*********************** / pre part                                                                :4_1:Must:
pre part> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=28:
pre part> unexpected MUST
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text    :4_1:Must:
$*|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected MUST
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text           :4_1:Must:
********************** / |<*/base                                                                     :4_2:UnDeeper:
*********************** / ppp inner                                                                  :4_2:UnDeeper:
************************ / expression                                                               :4_2:UnDeeper:
************************* / termIndent p                                                           :4_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=25:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=25:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :4_2:UnDeeper:
*************************** > |<|                                                                :4_2:UnDeeper:
*************************** > |<* starting                                                       :4_2:UnDeeper:
*************************** / $*|                                                                :4_2:UnDeeper:
**************************** / someSL                                                           :4_2:UnDeeper:
***************************** / pNumAsText                                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=25:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :4_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :4_2:UnDeeper:
**************************** / someIndentation                                                  :4_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=25:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=25:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=25:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
*************************** / term p/3:plain p                                                   :4_2:UnDeeper:
**************************** / pRelPred                                                         :4_2:UnDeeper:
***************************** / slRelPred                                                      :4_2:UnDeeper:
****************************** / nested simpleHorn                                            :4_2:UnDeeper:
******************************* > |^|                                                        :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=25:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPConstraint                                                 :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPBoolStructR                                                :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slMultiTerm                                              :4_2:UnDeeper:
********************************* / someSL                                                 :4_2:UnDeeper:
********************************** / pNumAsText                                           :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
****************************** / RPMT                                                         :4_2:UnDeeper:
******************************* / $*|                                                        :4_2:UnDeeper:
******************************** / slAKA                                                    :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / slAKA base                                           :4_2:UnDeeper:
*********************************** / slMultiTerm                                        :4_2:UnDeeper:
************************************ / someSL                                           :4_2:UnDeeper:
************************************* / pNumAsText                                     :4_2:UnDeeper:
pNumAsText> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=25:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=25:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=25:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=25:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=25:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=25:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=25:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=25:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=25:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=25:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=25:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=25:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :4_2:UnDeeper:
ppp inner> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=25:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :4_2:UnDeeper:
*********************** / withPrePost                                                                :4_2:UnDeeper:
************************ > |<* starting                                                             :4_2:UnDeeper:
************************ / $*|                                                                      :4_2:UnDeeper:
************************* / pre part                                                               :4_2:UnDeeper:
pre part> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :4_2:UnDeeper:
withPrePost> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=25:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :4_2:UnDeeper:
*********************** / $*|                                                                        :4_2:UnDeeper:
************************ / pre part                                                                 :4_2:UnDeeper:
pre part> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=25:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :4_2:UnDeeper:
$*|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=25:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :4_2:UnDeeper:
|<*/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=25:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=28:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is" ( "not" ( "a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :3_2:Other "is":
********************* / term p/2:someIndentation expr p                                               :3_2:Other "is":
********************** / someIndentation                                                             :3_2:Other "is":
*********************** / myindented-GoDeeper                                                       :3_2:Other "is":
myindented-GoDeeper> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=20:
myindented-GoDeeper> unexpected "is"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is" Expecting: (      :3_2:Other "is":
someIndentation> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=20:
someIndentation> unexpected "is"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "is" Expecting: (            :3_2:Other "is":
term p/2:someIndentation expr p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=20:
term p/2:someIndentation expr p> unexpected "is"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is" Expecting: ( :3_2:Other "is":
********************* / term p/3:plain p                                                              :3_2:Other "is":
********************** / pRelPred                                                                    :3_2:Other "is":
*********************** / slRelPred                                                                 :3_2:Other "is":
************************ / nested simpleHorn                                                       :3_2:Other "is":
************************* > |^|                                                                   :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |^| deeps                                                              :4_2:UnDeeper:
|^| deeps> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

************************* \ |^| deeps has returned ([(),(),()],-3)                              :4_1:Must:
nested simpleHorn> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
nested simpleHorn> MATCH (CERR): "is" ( "not" ( "a Public Agency" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=28:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :4_1:Must:
************************ / RPConstraint                                                            :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |>| calling $>>                                                        :4_2:UnDeeper:
************************** / |>>/recurse                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :4_2:UnDeeper:
************************** / |>>/base                                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPConstraint> MATCH (CERR): "is" ( "not" ( "a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=25:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
************************ / RPBoolStructR                                                           :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slMultiTerm                                                         :3_2:Other "is":
*************************** / someSL                                                            :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ someSL has returned (["is","not","a Public Agency"],2)             :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)          :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
************************* / |>| calling $>>                                                        :4_2:UnDeeper:
************************** / |>>/recurse                                                          :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :4_2:UnDeeper:
************************** / |>>/base                                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=25:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPBoolStructR> MATCH (CERR): "is" ( "not" ( "a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=25:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
************************ / RPMT                                                                    :3_2:Other "is":
************************* / $*|                                                                   :3_2:Other "is":
************************** / slAKA                                                               :3_2:Other "is":
*************************** / $*|                                                               :3_2:Other "is":
**************************** / slAKA base                                                      :3_2:Other "is":
***************************** / slMultiTerm                                                   :3_2:Other "is":
****************************** / someSL                                                      :3_2:Other "is":
someSL> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
someSL> MATCH (COK): "is" ( "not" ( "a Public Agency"
someSL> VALUE: ((["is","not","a Public Agency"],2),[])

****************************** \ someSL has returned (["is","not","a Public Agency"],2)       :4_2:UnDeeper:
slMultiTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slMultiTerm> MATCH (COK): "is" ( "not" ( "a Public Agency"
slMultiTerm> VALUE: ((["is","not","a Public Agency"],2),[])

***************************** \ slMultiTerm has returned (["is","not","a Public Agency"],2)    :4_2:UnDeeper:
slAKA base> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slAKA base> MATCH (COK): "is" ( "not" ( "a Public Agency"
slAKA base> VALUE: ((["is","not","a Public Agency"],2),[])

**************************** \ slAKA base has returned (["is","not","a Public Agency"],2)       :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

*************************** \ $*| has returned (["is","not","a Public Agency"],2)                :4_2:UnDeeper:
*************************** / |>>/recurse                                                        :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_2:UnDeeper:
*************************** / |>>/base                                                           :4_2:UnDeeper:
**************************** / slAKA optional akapart                                           :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :4_2:UnDeeper:
****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / PAKA/akapart                                               :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
********************************* / Aka Token                                              :4_2:UnDeeper:
Aka Token> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=25:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :4_2:UnDeeper:
PAKA/akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=25:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :4_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :4_2:UnDeeper:
*************************** / |>>/recurse                                                        :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :4_2:UnDeeper:
*************************** / |>>/base                                                           :4_2:UnDeeper:
**************************** / slAKA optional typically                                         :4_2:UnDeeper:
***************************** / |?| optional something                                         :4_2:UnDeeper:
****************************** / |>>/recurse                                                  :4_2:UnDeeper:
|>>/recurse> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :4_2:UnDeeper:
****************************** / |>>/base                                                     :4_2:UnDeeper:
******************************* / typically                                                  :4_2:UnDeeper:
******************************** / $>|                                                      :4_2:UnDeeper:
$>|> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=25:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=25:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=25:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :4_2:UnDeeper:
slAKA optional typically> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :4_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :4_2:UnDeeper:
|>>/base> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :4_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :4_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :4_2:UnDeeper:
slAKA> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slAKA> MATCH (COK): "is" ( "not" ( "a Public Agency"
slAKA> VALUE: ((["is","not","a Public Agency"],2),[])

************************** \ slAKA has returned (["is","not","a Public Agency"],2)                :4_2:UnDeeper:
$*|> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
$*|> MATCH (COK): "is" ( "not" ( "a Public Agency"
$*|> VALUE: ((["is","not","a Public Agency"],2),[])

************************* \ $*| has returned (["is","not","a Public Agency"],2)                    :4_2:UnDeeper:
RPMT> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
RPMT> MATCH (COK): "is" ( "not" ( "a Public Agency"
RPMT> VALUE: ((RPMT ["is","not","a Public Agency"],2),[])

************************ \ RPMT has returned (RPMT ["is","not","a Public Agency"],2)                :4_2:UnDeeper:
slRelPred> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
slRelPred> MATCH (COK): "is" ( "not" ( "a Public Agency"
slRelPred> VALUE: ((RPMT ["is","not","a Public Agency"],2),[])

*********************** \ slRelPred has returned (RPMT ["is","not","a Public Agency"],2)             :4_2:UnDeeper:
*********************** / undeepers                                                                  :4_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers   :4_2:UnDeeper:
************************ > sameLine: success!                                                           :4_4:UnDeeper:
undeepers> IN: ) ) ) MUST ( BEFORE ( 30 ( "days" ) ) )  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                      :4_4:UnDeeper:
pRelPred> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
pRelPred> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
pRelPred> VALUE: (RPMT ["is","not","a Public Agency"],[])

********************** \ pRelPred has returned RPMT ["is","not","a Public Agency"]                        :4_4:UnDeeper:
term p/3:plain p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/3:plain p> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["is","not","a Public Agency"])         :4_4:UnDeeper:
term p/notLabelTerm> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
term p/notLabelTerm> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","not","a Public Agency"])        :4_4:UnDeeper:
termIndent p> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
termIndent p> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["is","not","a Public Agency"])                 :4_4:UnDeeper:
******************* / binary(Or)                                                                             :4_4:UnDeeper:
binary(Or)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_4:UnDeeper:
******************* / binary(And)                                                                            :4_4:UnDeeper:
binary(And)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_4:UnDeeper:
******************* / binary(SetLess)                                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_4:UnDeeper:
******************* / binary(SetPlus)                                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_4:UnDeeper:
expression> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
expression> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["is","not","a Public Agency"])                     :4_4:UnDeeper:
ppp inner> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
ppp inner> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["is","not","a Public Agency"])                        :4_4:UnDeeper:
manyIndentation/leaf?> IN: "is" ( "not" ( "a Public Agency" ) ) ) M <…>
manyIndentation/leaf?> MATCH (COK): "is" ( "not" ( "a Public Agency" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is","not","a Public Agency"])              :4_4:UnDeeper:
**************** / myindented-UnDeeper                                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( BEFORE ( 30 ( "days" ) ) ) UPON <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :4_1:Must:
someIndentation> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
someIndentation> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["is","not","a Public Agency"])               :4_1:Must:
term p/2:someIndentation expr p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is","not","a Public Agency"]) :4_1:Must:
term p/notLabelTerm> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
term p/notLabelTerm> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["is","not","a Public Agency"])               :4_1:Must:
termIndent p> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
termIndent p> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["is","not","a Public Agency"])                        :4_1:Must:
************ / binary(Or)                                                                                    :4_1:Must:
binary(Or)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=28:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :4_1:Must:
************ / binary(And)                                                                                   :4_1:Must:
binary(And)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=28:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :4_1:Must:
************ / binary(SetLess)                                                                               :4_1:Must:
binary(SetLess)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=28:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :4_1:Must:
************ / binary(SetPlus)                                                                               :4_1:Must:
binary(SetPlus)> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=28:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :4_1:Must:
expression> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
expression> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
expression> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["is","not","a Public Agency"])                            :4_1:Must:
ppp inner> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
ppp inner> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["is","not","a Public Agency"]),[])

********** \ ppp inner has returned MyLeaf (RPMT ["is","not","a Public Agency"])                               :4_1:Must:
pBSR> IN: ( "is" ( "not" ( "a Public Agency" ) ) ) <…>
pBSR> MATCH (COK): ( "is" ( "not" ( "a Public Agency" ) ) )
pBSR> VALUE: (Leaf (RPMT ["is","not","a Public Agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is","not","a Public Agency"])                                        :4_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))   :4_1:Must:
manyIndentation/leaf?> IN: WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> MATCH (COK): WHO ( "is" ( "not" ( "a Public Agency" ) <…>
manyIndentation/leaf?> VALUE: ((Who,Leaf (RPMT ["is","not","a Public Agency"])),[])

******* \ manyIndentation/leaf? has returned (Who,Leaf (RPMT ["is","not","a Public Agency"]))                     :4_1:Must:
******* / WHERE                                                                                                   :4_1:Must:
WHERE> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=28:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :4_1:Must:
******* / preambleParamText:[Having]                                                                              :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :4_1:Must:
preambleParamText:[Having]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=28:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :4_1:Must:
******* / preambleParamText:[Given]                                                                               :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :4_1:Must:
preambleParamText:[Given]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=28:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :4_1:Must:
******* / preambleParamText:[Upon]                                                                                :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=28:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :4_1:Must:
preambleParamText:[Upon]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=28:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :4_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=28:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :4_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :4_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=28:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :4_1:Must:
******* / pDT                                                                                                     :4_1:Must:
******** / $>|                                                                                                   :4_1:Must:
$>|> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Before:
|>>/recurse> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected BEFORE Expecting: (                                      :4_2:Before:
********** / |>>/base                                                                                            :4_2:Before:
*********** / pTemporal/eventually                                                                              :4_2:Before:
pTemporal/eventually> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=30:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected BEFORE Expecting: EVENTUALLY                  :4_2:Before:
*********** / pTemporal/specifically                                                                            :4_2:Before:
************ / $>|                                                                                             :4_2:Before:
$>|> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************ \ $>| has returned Before                                                                          :4_3:GoDeeper:
************ / |>>/recurse                                                                                      :4_3:GoDeeper:
************* / |>>/recurse                                                                                     :4_3:TNumber 30:
|>>/recurse> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=32:
|>>/recurse> unexpected 30
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected 30 Expecting: (                                      :4_3:TNumber 30:
************* / |>>/base                                                                                        :4_3:TNumber 30:
************** > |>>/base got Just 30                                                                           :4_4:GoDeeper:
|>>/base> IN: 30 ( "days" ) ) ) UPON ( "becoming aware <…>
|>>/base> MATCH (COK): 30
|>>/base> VALUE: ((Just 30,0),[])

************* \ |>>/base has returned (Just 30,0)                                                                :4_4:GoDeeper:
|>>/recurse> IN: ( 30 ( "days" ) ) ) UPON ( "becoming awa <…>
|>>/recurse> MATCH (COK): ( 30
|>>/recurse> VALUE: ((Just 30,1),[])

************ \ |>>/recurse has returned (Just 30,1)                                                               :4_4:GoDeeper:
************ / |>| calling $>>                                                                                    :4_4:GoDeeper:
************* / |>>/recurse                                                                                      :4_4:GoDeeper:
************** / |>>/recurse                                                                                     :4_4:Other "days:
|>>/recurse> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=34:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected "days" Expecting: (                                  :4_4:Other "days:
************** / |>>/base                                                                                        :4_4:Other "days:
*************** > |>>/base got "days"                                                                        :5_2:UnDeeper:
|>>/base> IN: "days" ) ) ) UPON ( "becoming aware a da <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

************** \ |>>/base has returned ("days",0)                                                             :5_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************* \ |>>/recurse has returned ("days",1)                                                            :5_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) UPON ( "becoming aware a  <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************ \ |>| calling $>> has returned ("days",1)                                                          :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                                 :5_4:UnDeeper:
undeepers> IN: ) ) ) UPON ( "becoming aware a data brea <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                            :5_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 30 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 30) "days"),[])

*********** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 30) "days")                 :5_4:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 30) "days"))                                 :5_4:UnDeeper:
|>>/base> IN: BEFORE ( 30 ( "days" ) ) ) UPON ( "becom <…>
|>>/base> MATCH (COK): BEFORE ( 30 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),0)                      :5_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                     :5_4:UnDeeper:
|>| calling $>>> IN: ( BEFORE ( 30 ( "days" ) ) ) UPON ( "bec <…>
|>| calling $>>> MATCH (COK): ( BEFORE ( 30 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 30) "days")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 30) "days")),1)                   :5_4:UnDeeper:
******** / undeepers                                                                                                    :5_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                     :5_4:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach m <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:Upon:
pDT> IN: MUST ( BEFORE ( 30 ( "days" ) ) ) UPON ( <…>
pDT> MATCH (COK): MUST ( BEFORE ( 30 ( "days" ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 30) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 30) "days"))                             :5_1:Upon:
******* / WHERE                                                                                                   :5_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach may <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=38:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected UPON Expecting: WHERE                                              :5_1:Upon:
******* / preambleParamText:[Having]                                                                              :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: HAVING                                             :5_1:Upon:
preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=38:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UPON Expecting: HAVING                        :5_1:Upon:
******* / preambleParamText:[Given]                                                                               :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=38:
$>|> unexpected UPON
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: GIVEN                                              :5_1:Upon:
preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=38:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UPON Expecting: GIVEN                          :5_1:Upon:
******* / preambleParamText:[Upon]                                                                                :5_1:Upon:
******** / $>|                                                                                                   :5_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach may <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                         :5_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach may have o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=40:
|>>/recurse> unexpected "becoming aware a data breach may have occurred"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "becoming aware a data breach may have occurred" Expecting: ( :5_2:Other "beco:
********** / |>>/base                                                                                            :5_2:Other "beco:
*********** / pParamText                                                                                        :5_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :5_2:Other "beco:
************* / pKeyValuesAka                                                                                 :5_2:Other "beco:
************** / slAKA                                                                                       :5_2:Other "beco:
*************** / $*|                                                                                       :5_2:Other "beco:
**************** / slAKA base                                                                              :5_2:Other "beco:
***************** / slKeyValues                                                                           :5_2:Other "beco:
****************** / $*|                                                                                 :5_2:Other "beco:
******************* / someSL                                                                            :5_2:Other "beco:
someSL> IN: "becoming aware a data breach may have o <…>
someSL> MATCH (COK): "becoming aware a data breach may have o <…>
someSL> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach may have occurred"],0)         :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((["becoming aware a data breach may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach may have occurred"],0)              :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / |?| optional something                                                             :6_2:UnDeeper:
******************** / |>>/recurse                                                                      :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :6_2:UnDeeper:
******************** / |>>/base                                                                         :6_2:UnDeeper:
********************* / slTypeSig                                                                      :6_2:UnDeeper:
********************** / $>|                                                                          :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                        :6_2:UnDeeper:
slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=41:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                    :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                       :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :6_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :6_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach may have o <…>
slKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
slKeyValues> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach may have o <…>
slAKA base> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0) :6_2:UnDeeper:
$*|> IN: "becoming aware a data breach may have o <…>
$*|> MATCH (COK): "becoming aware a data breach may have o <…>
$*|> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :6_2:UnDeeper:
*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / PAKA/akapart                                                                       :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
********************* / Aka Token                                                                      :6_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=41:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                      :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                              :6_2:UnDeeper:
PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=41:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                       :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                             :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** / |>>/recurse                                                                                :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :6_2:UnDeeper:
*************** / |>>/base                                                                                   :6_2:UnDeeper:
**************** / slAKA optional typically                                                                 :6_2:UnDeeper:
***************** / |?| optional something                                                                 :6_2:UnDeeper:
****************** / |>>/recurse                                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=41:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :6_2:UnDeeper:
****************** / |>>/base                                                                             :6_2:UnDeeper:
******************* / typically                                                                          :6_2:UnDeeper:
******************** / $>|                                                                              :6_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=41:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                        :6_2:UnDeeper:
typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=41:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                    :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=41:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                       :6_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :6_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :6_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :6_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :6_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :6_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :6_2:UnDeeper:
slAKA> IN: "becoming aware a data breach may have o <…>
slAKA> MATCH (COK): "becoming aware a data breach may have o <…>
slAKA> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach may have occurred" :| [],Nothing),0)      :6_2:UnDeeper:
************** / undeepers                                                                                    :6_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :6_2:UnDeeper:
*************** > sameLine: success!                                                                         :6_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :6_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach may have o <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach may have o <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach may have occurred" :| [],Nothing)    :6_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :6_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :6_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :6_2:UnDeeper:
************** / sameMany                                                                                     :6_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :6_2:UnDeeper:
**************** / slAKA                                                                                    :6_2:UnDeeper:
***************** / $*|                                                                                    :6_2:UnDeeper:
****************** / slAKA base                                                                           :6_2:UnDeeper:
******************* / slKeyValues                                                                        :6_2:UnDeeper:
******************** / $*|                                                                              :6_2:UnDeeper:
********************* / someSL                                                                         :6_2:UnDeeper:
********************** / pNumAsText                                                                   :6_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=41:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :6_2:UnDeeper:
someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=41:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number        :6_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number             :6_2:UnDeeper:
slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=41:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number       :6_2:UnDeeper:
slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=41:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number          :6_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=41:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :6_2:UnDeeper:
slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=41:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                   :6_2:UnDeeper:
pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=41:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number             :6_2:UnDeeper:
sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :6_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :6_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :6_2:UnDeeper:
pParamText> IN: "becoming aware a data breach may have o <…>
pParamText> MATCH (COK): "becoming aware a data breach may have o <…>
pParamText> VALUE: (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach may have occurred" :| [],Nothing) :| []     :6_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach may have occurred" :| [],Nothing) :| []                :6_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach may have o <…>
|>>/base> MATCH (COK): "becoming aware a data breach may have o <…>
|>>/base> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],0)     :6_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach may have <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach may have <…>
|>>/recurse> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)    :6_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach may have <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach may have <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach may have occurred" :| [],Nothing) :| [],1)  :6_2:UnDeeper:
******** / undeepers                                                                                                :6_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :6_2:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach may <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| []) :6_1:When:
******* / preambleParamText:[Upon]                                                                                :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: UPON                                               :6_1:When:
preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=42:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected WHEN Expecting: UPON                            :6_1:When:
******* / WHERE                                                                                                   :6_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=42:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected WHEN Expecting: WHERE                                              :6_1:When:
******* / preambleParamText:[Having]                                                                              :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: HAVING                                             :6_1:When:
preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=42:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected WHEN Expecting: HAVING                        :6_1:When:
******* / preambleParamText:[Given]                                                                               :6_1:When:
******** / $>|                                                                                                   :6_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=42:
$>|> unexpected WHEN
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: GIVEN                                              :6_1:When:
preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=42:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected WHEN Expecting: GIVEN                          :6_1:When:
******* / preambleBoolStructR [Unless]                                                                            :6_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=42:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected WHEN Expecting: UNLESS                      :6_1:When:
******* / preambleBoolStructR [When,If]                                                                           :6_1:When:
******** / pBSR                                                                                                   :6_2:GoDeeper:
********* / ppp inner                                                                                            :6_2:GoDeeper:
********** / expression                                                                                         :6_2:GoDeeper:
*********** / termIndent p                                                                                     :6_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "the data breach occurs on or after th <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=43:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "the data breach occurs on or after th <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=43:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :6_2:GoDeeper:
************* > |<|                                                                                          :6_2:GoDeeper:
************* > |<* starting                                                                                 :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / someSL                                                                                     :6_2:GoDeeper:
*************** / pNumAsText                                                                               :6_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=43:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :6_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=43:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :6_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=43:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "the data breach occurs on or after th <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=43:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :6_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :6_2:GoDeeper:
************** / someIndentation                                                                            :6_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :6_2:GoDeeper:
myindented-GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                 :6_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :6_2:Other "the:
**************** / ppp inner                                                                               :6_2:Other "the:
***************** / expression                                                                            :6_2:Other "the:
****************** / termIndent p                                                                        :6_2:Other "the:
******************* / term p/1a:label ends directly above next line                                     :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************* / pNumAsText                                                                     :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (CERR): "the data breach occurs on or after the  <…>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or other text or number

******************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number             :7_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=45:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************* \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :7_2:UnDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                          :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
******************** / matching EOL                                                                     :7_2:UnDeeper:
matching EOL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=45:
matching EOL> unexpected )
matching EOL> expecting EOL

******************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                     :7_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=45:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************* \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :7_2:UnDeeper:
******************* / term p/1c:label ends to the right of line below                                   :6_2:Other "the:
******************** > |<|                                                                             :6_2:Other "the:
******************** > |<* starting                                                                    :6_2:Other "the:
******************** / $*|                                                                             :6_2:Other "the:
********************* / someSL                                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
******************** / |<*/parent                                                                       :7_2:UnDeeper:
********************* > |<*/recurse                                                                    :7_2:UnDeeper:
********************* / ppp inner                                                                   :7_1:Do:
********************** / expression                                                                :7_1:Do:
*********************** / termIndent p                                                            :7_1:Do:
************************ / term p/1a:label ends directly above next line                         :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1a:label ends directly above next line> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=46:
term p/1a:label ends directly above next line> unexpected DO
term p/1a:label ends directly above next line> expecting other text or number

************************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/1b:label ends to the left of line below, with EOL              :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1b:label ends to the left of line below, with EOL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=46:
term p/1b:label ends to the left of line below, with EOL> unexpected DO
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/1c:label ends to the right of line below                       :7_1:Do:
************************* > |<|                                                                 :7_1:Do:
************************* > |<* starting                                                        :7_1:Do:
************************* / $*|                                                                 :7_1:Do:
************************** / someSL                                                            :7_1:Do:
*************************** / pNumAsText                                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
term p/1c:label ends to the right of line below> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=46:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting other text or number

************************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: other text or number :7_1:Do:
************************ / term p/notLabelTerm                                                   :7_1:Do:
************************* / term p/2:someIndentation expr p                                     :7_1:Do:
************************** / someIndentation                                                   :7_1:Do:
*************************** / myindented-GoDeeper                                             :7_1:Do:
myindented-GoDeeper> IN: DO ( "assess" ( "if it is a Notifiable D <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=46:
myindented-GoDeeper> unexpected DO
myindented-GoDeeper> expecting (

*************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected DO Expecting: ( :7_1:Do:
someIndentation> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=46:
someIndentation> unexpected DO
someIndentation> expecting (

************************** \ !Unconsumed Error: someIndentation: Unexpected DO Expecting: (    :7_1:Do:
term p/2:someIndentation expr p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=46:
term p/2:someIndentation expr p> unexpected DO
term p/2:someIndentation expr p> expecting (

************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected DO Expecting: ( :7_1:Do:
************************* / term p/3:plain p                                                    :7_1:Do:
************************** / pRelPred                                                          :7_1:Do:
*************************** / slRelPred                                                       :7_1:Do:
**************************** / nested simpleHorn                                             :7_1:Do:
***************************** > |^|                                                         :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
nested simpleHorn> IN: DO ( "assess" ( "if it is a Notifiable D <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

**************************** \ !Unconsumed Error: nested simpleHorn: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPConstraint                                                  :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPConstraint> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=46:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

**************************** \ !Unconsumed Error: RPConstraint: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPBoolStructR                                                 :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slMultiTerm                                               :7_1:Do:
******************************* / someSL                                                  :7_1:Do:
******************************** / pNumAsText                                            :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPBoolStructR> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=46:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

**************************** \ !Unconsumed Error: RPBoolStructR: Unexpected DO Expecting: other text or number :7_1:Do:
**************************** / RPMT                                                          :7_1:Do:
***************************** / $*|                                                         :7_1:Do:
****************************** / slAKA                                                     :7_1:Do:
******************************* / $*|                                                     :7_1:Do:
******************************** / slAKA base                                            :7_1:Do:
********************************* / slMultiTerm                                         :7_1:Do:
********************************** / someSL                                            :7_1:Do:
*********************************** / pNumAsText                                      :7_1:Do:
pNumAsText> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=46:
pNumAsText> unexpected DO
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :7_1:Do:
someSL> IN: DO ( "assess" ( "if it is a Notifiable D <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=46:
someSL> unexpected DO
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :7_1:Do:
slMultiTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=46:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :7_1:Do:
slAKA base> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=46:
slAKA base> unexpected DO
slAKA base> expecting other text or number

******************************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
slAKA> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=46:
slAKA> unexpected DO
slAKA> expecting other text or number

****************************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :7_1:Do:
RPMT> IN: DO ( "assess" ( "if it is a Notifiable D <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=46:
RPMT> unexpected DO
RPMT> expecting other text or number

**************************** \ !Unconsumed Error: RPMT: Unexpected DO Expecting: other text or number :7_1:Do:
slRelPred> IN: DO ( "assess" ( "if it is a Notifiable D <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=46:
slRelPred> unexpected DO
slRelPred> expecting other text or number

*************************** \ !Unconsumed Error: slRelPred: Unexpected DO Expecting: other text or number :7_1:Do:
pRelPred> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=46:
pRelPred> unexpected DO
pRelPred> expecting other text or number

************************** \ !Unconsumed Error: pRelPred: Unexpected DO Expecting: other text or number :7_1:Do:
term p/3:plain p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=46:
term p/3:plain p> unexpected DO
term p/3:plain p> expecting other text or number

************************* \ !Unconsumed Error: term p/3:plain p: Unexpected DO Expecting: other text or number :7_1:Do:
term p/notLabelTerm> IN: DO ( "assess" ( "if it is a Notifiable D <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=46:
term p/notLabelTerm> unexpected DO
term p/notLabelTerm> expecting ( or term

************************ \ !Unconsumed Error: term p/notLabelTerm: Unexpected DO Expecting: ( term :7_1:Do:
termIndent p> IN: DO ( "assess" ( "if it is a Notifiable D <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=46:
termIndent p> unexpected DO
termIndent p> expecting (, other text or number, or term

*********************** \ !Unconsumed Error: termIndent p: Unexpected DO Expecting: ( other text or number term :7_1:Do:
expression> IN: DO ( "assess" ( "if it is a Notifiable D <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=46:
expression> unexpected DO
expression> expecting expression

********************** \ !Unconsumed Error: expression: Unexpected DO Expecting: expression        :7_1:Do:
ppp inner> IN: DO ( "assess" ( "if it is a Notifiable D <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=46:
ppp inner> unexpected DO
ppp inner> expecting expression

********************* \ !Unconsumed Error: ppp inner: Unexpected DO Expecting: expression           :7_1:Do:
********************* / withPrePost                                                                 :7_1:Do:
********************** > |<* starting                                                              :7_1:Do:
********************** / $*|                                                                       :7_1:Do:
*********************** / pre part                                                                :7_1:Do:
pre part> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=46:
pre part> unexpected DO
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text      :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text             :7_1:Do:
withPrePost> IN: DO ( "assess" ( "if it is a Notifiable D <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=46:
withPrePost> unexpected DO
withPrePost> expecting ( or Other text

********************* \ !Unconsumed Error: withPrePost: Unexpected DO Expecting: ( Other text       :7_1:Do:
********************* / $*|                                                                         :7_1:Do:
********************** / pre part                                                                  :7_1:Do:
pre part> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=46:
pre part> unexpected DO
pre part> expecting ( or Other text

********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text        :7_1:Do:
$*|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=46:
$*|> unexpected DO
$*|> expecting ( or Other text

********************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text               :7_1:Do:
********************* / |<*/base                                                                       :7_2:UnDeeper:
********************** / ppp inner                                                                    :7_2:UnDeeper:
*********************** / expression                                                                 :7_2:UnDeeper:
************************ / termIndent p                                                             :7_2:UnDeeper:
************************* / term p/1a:label ends directly above next line                          :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=45:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/1b:label ends to the left of line below, with EOL               :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=45:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/1c:label ends to the right of line below                        :7_2:UnDeeper:
************************** > |<|                                                                  :7_2:UnDeeper:
************************** > |<* starting                                                         :7_2:UnDeeper:
************************** / $*|                                                                  :7_2:UnDeeper:
*************************** / someSL                                                             :7_2:UnDeeper:
**************************** / pNumAsText                                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=45:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
************************* / term p/notLabelTerm                                                    :7_2:UnDeeper:
************************** / term p/2:someIndentation expr p                                      :7_2:UnDeeper:
*************************** / someIndentation                                                    :7_2:UnDeeper:
**************************** / myindented-GoDeeper                                              :7_2:UnDeeper:
myindented-GoDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=45:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :7_2:UnDeeper:
someIndentation> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=45:
someIndentation> unexpected )
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (      :7_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=45:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :7_2:UnDeeper:
************************** / term p/3:plain p                                                     :7_2:UnDeeper:
*************************** / pRelPred                                                           :7_2:UnDeeper:
**************************** / slRelPred                                                        :7_2:UnDeeper:
***************************** / nested simpleHorn                                              :7_2:UnDeeper:
****************************** > |^|                                                          :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
nested simpleHorn> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=45:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPConstraint                                                   :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPConstraint> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPBoolStructR                                                  :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slMultiTerm                                                :7_2:UnDeeper:
******************************** / someSL                                                   :7_2:UnDeeper:
********************************* / pNumAsText                                             :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPBoolStructR> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
***************************** / RPMT                                                           :7_2:UnDeeper:
****************************** / $*|                                                          :7_2:UnDeeper:
******************************* / slAKA                                                      :7_2:UnDeeper:
******************************** / $*|                                                      :7_2:UnDeeper:
********************************* / slAKA base                                             :7_2:UnDeeper:
********************************** / slMultiTerm                                          :7_2:UnDeeper:
*********************************** / someSL                                             :7_2:UnDeeper:
************************************ / pNumAsText                                       :7_2:UnDeeper:
pNumAsText> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=45:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :7_2:UnDeeper:
someSL> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=45:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slMultiTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=45:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slAKA base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=45:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slAKA> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=45:
slAKA> unexpected )
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
RPMT> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=45:
RPMT> unexpected )
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
slRelPred> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=45:
slRelPred> unexpected )
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
pRelPred> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=45:
pRelPred> unexpected )
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/3:plain p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=45:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :7_2:UnDeeper:
term p/notLabelTerm> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=45:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :7_2:UnDeeper:
termIndent p> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=45:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :7_2:UnDeeper:
expression> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=45:
expression> unexpected )
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression          :7_2:UnDeeper:
ppp inner> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=45:
ppp inner> unexpected )
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression             :7_2:UnDeeper:
********************** / withPrePost                                                                  :7_2:UnDeeper:
*********************** > |<* starting                                                               :7_2:UnDeeper:
*********************** / $*|                                                                        :7_2:UnDeeper:
************************ / pre part                                                                 :7_2:UnDeeper:
pre part> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=45:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :7_2:UnDeeper:
withPrePost> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=45:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text         :7_2:UnDeeper:
********************** / $*|                                                                          :7_2:UnDeeper:
*********************** / pre part                                                                   :7_2:UnDeeper:
pre part> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=45:
pre part> unexpected )
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text          :7_2:UnDeeper:
$*|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=45:
$*|> unexpected )
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text                 :7_2:UnDeeper:
|<*/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=45:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :7_2:UnDeeper:
|<*/parent> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=46:
|<*/parent> unexpected DO
|<*/parent> expecting (, ), Other text, or expression

******************** \ !Unconsumed Error: |<*/parent: Unexpected DO Expecting: ( ( ) Other text expression :7_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=46:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************* \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: ( ( ( ) Other text expression :7_2:UnDeeper:
******************* / term p/notLabelTerm                                                               :6_2:Other "the:
******************** / term p/2:someIndentation expr p                                                 :6_2:Other "the:
********************* / someIndentation                                                               :6_2:Other "the:
********************** / myindented-GoDeeper                                                         :6_2:Other "the:
myindented-GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=44:
myindented-GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented-GoDeeper> expecting (

********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=44:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

********************* \ !Unconsumed Error: someIndentation: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=44:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :6_2:Other "the:
******************** / term p/3:plain p                                                                :6_2:Other "the:
********************* / pRelPred                                                                      :6_2:Other "the:
********************** / slRelPred                                                                   :6_2:Other "the:
*********************** / nested simpleHorn                                                         :6_2:Other "the:
************************ > |^|                                                                     :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |^| deeps                                                                :7_2:UnDeeper:
|^| deeps> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :7_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=46:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

*********************** \ !Consumed Error: nested simpleHorn: Unexpected DO Expecting: MEANS )    :7_1:Do:
*********************** / RPConstraint                                                              :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |>| calling $>>                                                          :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :7_2:UnDeeper:
************************* / |>>/base                                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=45:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
*********************** / RPBoolStructR                                                             :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slMultiTerm                                                           :6_2:Other "the:
************************** / someSL                                                              :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************ / |>| calling $>>                                                          :7_2:UnDeeper:
************************* / |>>/recurse                                                            :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :7_2:UnDeeper:
************************* / |>>/base                                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :7_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=45:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=45:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :7_2:UnDeeper:
*********************** / RPMT                                                                      :6_2:Other "the:
************************ / $*|                                                                     :6_2:Other "the:
************************* / slAKA                                                                 :6_2:Other "the:
************************** / $*|                                                                 :6_2:Other "the:
*************************** / slAKA base                                                        :6_2:Other "the:
**************************** / slMultiTerm                                                     :6_2:Other "the:
***************************** / someSL                                                        :6_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

***************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
************************** / |>>/recurse                                                          :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :7_2:UnDeeper:
************************** / |>>/base                                                             :7_2:UnDeeper:
*************************** / slAKA optional akapart                                             :7_2:UnDeeper:
**************************** / |?| optional something                                           :7_2:UnDeeper:
***************************** / |>>/recurse                                                    :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :7_2:UnDeeper:
***************************** / |>>/base                                                       :7_2:UnDeeper:
****************************** / PAKA/akapart                                                 :7_2:UnDeeper:
******************************* / $>|                                                        :7_2:UnDeeper:
******************************** / Aka Token                                                :7_2:UnDeeper:
Aka Token> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=45:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting AKA

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA        :7_2:UnDeeper:
PAKA/akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=45:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

****************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting AKA

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA       :7_2:UnDeeper:
|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :7_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :7_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :7_2:UnDeeper:
************************** / |>>/recurse                                                          :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :7_2:UnDeeper:
************************** / |>>/base                                                             :7_2:UnDeeper:
*************************** / slAKA optional typically                                           :7_2:UnDeeper:
**************************** / |?| optional something                                           :7_2:UnDeeper:
***************************** / |>>/recurse                                                    :7_2:UnDeeper:
|>>/recurse> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=45:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :7_2:UnDeeper:
***************************** / |>>/base                                                       :7_2:UnDeeper:
****************************** / typically                                                    :7_2:UnDeeper:
******************************* / $>|                                                        :7_2:UnDeeper:
$>|> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=45:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY  :7_2:UnDeeper:
typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=45:
typically> unexpected )
typically> expecting TYPICALLY

****************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=45:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :7_2:UnDeeper:
|?| optional something> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :7_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :7_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :7_2:UnDeeper:
|>>/base> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :7_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :7_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :7_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :7_2:UnDeeper:
********************** / undeepers                                                                    :7_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :7_2:UnDeeper:
*********************** > sameLine: success!                                                         :7_2:UnDeeper:
undeepers> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :7_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

********************* \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :7_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
termIndent p> IN: "the data breach occurs on or after the  <…>
termIndent p> MATCH (COK): "the data breach occurs on or after the  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
****************** / binary(Or)                                                                           :7_2:UnDeeper:
binary(Or)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=45:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :7_2:UnDeeper:
****************** / binary(And)                                                                          :7_2:UnDeeper:
binary(And)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=45:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :7_2:UnDeeper:
****************** / binary(SetLess)                                                                      :7_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=45:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :7_2:UnDeeper:
****************** / binary(SetPlus)                                                                      :7_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=45:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :7_2:UnDeeper:
expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
ppp inner> IN: "the data breach occurs on or after the  <…>
ppp inner> MATCH (COK): "the data breach occurs on or after the  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_2:UnDeeper:
*************** / myindented-UnDeeper                                                                        :7_2:UnDeeper:
myindented-UnDeeper> IN: ) DO ( "assess" ( "if it is a Notifiable <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :7_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
termIndent p> IN: ( "the data breach occurs on or after th <…>
termIndent p> MATCH (COK): ( "the data breach occurs on or after th <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
*********** / binary(Or)                                                                                      :7_1:Do:
binary(Or)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=46:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected DO Expecting: OR                                      :7_1:Do:
*********** / binary(And)                                                                                     :7_1:Do:
binary(And)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=46:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected DO Expecting: AND                                    :7_1:Do:
*********** / binary(SetLess)                                                                                 :7_1:Do:
binary(SetLess)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=46:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected DO Expecting: LESS                               :7_1:Do:
*********** / binary(SetPlus)                                                                                 :7_1:Do:
binary(SetPlus)> IN: DO ( "assess" ( "if it is a Notifiable D <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=46:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected DO Expecting: PLUS                               :7_1:Do:
expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :7_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :7_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :7_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=46:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DO Expecting: IF WHEN                      :7_1:Do:
******* / WHERE                                                                                                   :7_1:Do:
WHERE> IN: DO ( "assess" ( "if it is a Notifiable D <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=46:
WHERE> unexpected DO
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                                :7_1:Do:
******* / preambleParamText:[Having]                                                                              :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                               :7_1:Do:
preambleParamText:[Having]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=46:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                          :7_1:Do:
******* / preambleParamText:[Given]                                                                               :7_1:Do:
******** / $>|                                                                                                   :7_1:Do:
$>|> IN: DO ( "assess" ( "if it is a Notifiable D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=46:
$>|> unexpected DO
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                                :7_1:Do:
preambleParamText:[Given]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=46:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                            :7_1:Do:
******* / preambleBoolStructR [Unless]                                                                            :7_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "assess" ( "if it is a Notifiable D <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=46:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                        :7_1:Do:
******* / pDoAction/Do                                                                                            :7_1:Do:
pDoAction/Do> IN: DO ( "assess" ( "if it is a Notifiable D <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :7_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :7_2:GoDeeper:
******** / someIndentation                                                                                        :7_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :7_2:GoDeeper:
myindented-GoDeeper> IN: ( "assess" ( "if it is a Notifiable Data <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :7_2:Other "asse:
********* / manyIndentation/leaf?                                                                                 :7_2:Other "asse:
********** / pAction calling pParamText                                                                          :7_2:Other "asse:
*********** / pParamText                                                                                        :7_2:Other "asse:
************ / pParamText(flat) first line: pKeyValues                                                         :7_2:Other "asse:
************* / pKeyValuesAka                                                                                 :7_2:Other "asse:
************** / slAKA                                                                                       :7_2:Other "asse:
*************** / $*|                                                                                       :7_2:Other "asse:
**************** / slAKA base                                                                              :7_2:Other "asse:
***************** / slKeyValues                                                                           :7_2:Other "asse:
****************** / $*|                                                                                 :7_2:Other "asse:
******************* / someSL                                                                            :7_2:Other "asse:
someSL> IN: "assess" ( "if it is a Notifiable Data B <…>
someSL> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
someSL> VALUE: ((["assess","if it is a Notifiable Data Breach"],1),[])

******************* \ someSL has returned (["assess","if it is a Notifiable Data Breach"],1)               :8_3:UnDeeper:
$*|> IN: "assess" ( "if it is a Notifiable Data B <…>
$*|> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
$*|> VALUE: ((["assess","if it is a Notifiable Data Breach"],1),[])

****************** \ $*| has returned (["assess","if it is a Notifiable Data Breach"],1)                    :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / |?| optional something                                                               :8_3:UnDeeper:
******************** / |>>/recurse                                                                        :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :8_3:UnDeeper:
******************** / |>>/base                                                                           :8_3:UnDeeper:
********************* / slTypeSig                                                                        :8_3:UnDeeper:
********************** / $>|                                                                            :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                          :8_3:UnDeeper:
slTypeSig> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=51:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                      :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                         :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                      :8_3:UnDeeper:
******************* > |>>/base got Nothing                                                                 :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                      :8_3:UnDeeper:
slKeyValues> IN: "assess" ( "if it is a Notifiable Data B <…>
slKeyValues> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slKeyValues> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

***************** \ slKeyValues has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1) :8_3:UnDeeper:
slAKA base> IN: "assess" ( "if it is a Notifiable Data B <…>
slAKA base> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slAKA base> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

**************** \ slAKA base has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)    :8_3:UnDeeper:
$*|> IN: "assess" ( "if it is a Notifiable Data B <…>
$*|> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
$*|> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

*************** \ $*| has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)             :8_3:UnDeeper:
*************** / |>>/recurse                                                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :8_3:UnDeeper:
*************** / |>>/base                                                                                     :8_3:UnDeeper:
**************** / slAKA optional akapart                                                                     :8_3:UnDeeper:
***************** / |?| optional something                                                                   :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / PAKA/akapart                                                                         :8_3:UnDeeper:
******************** / $>|                                                                                :8_3:UnDeeper:
********************* / Aka Token                                                                        :8_3:UnDeeper:
Aka Token> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=51:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                        :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                :8_3:UnDeeper:
PAKA/akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=51:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                         :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                               :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :8_3:UnDeeper:
slAKA optional akapart> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                            :8_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :8_3:UnDeeper:
*************** / |>>/recurse                                                                                  :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                    :8_3:UnDeeper:
*************** / |>>/base                                                                                     :8_3:UnDeeper:
**************** / slAKA optional typically                                                                   :8_3:UnDeeper:
***************** / |?| optional something                                                                   :8_3:UnDeeper:
****************** / |>>/recurse                                                                            :8_3:UnDeeper:
|>>/recurse> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=51:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :8_3:UnDeeper:
****************** / |>>/base                                                                               :8_3:UnDeeper:
******************* / typically                                                                            :8_3:UnDeeper:
******************** / $>|                                                                                :8_3:UnDeeper:
$>|> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=51:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                          :8_3:UnDeeper:
typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=51:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                      :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=51:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                         :8_3:UnDeeper:
|?| optional something> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                          :8_3:UnDeeper:
slAKA optional typically> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                          :8_3:UnDeeper:
**************** > |>>/base got Nothing                                                                       :8_3:UnDeeper:
|>>/base> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                            :8_3:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                               :8_3:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                  :8_3:UnDeeper:
slAKA> IN: "assess" ( "if it is a Notifiable Data B <…>
slAKA> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
slAKA> VALUE: ((("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1),[])

************** \ slAKA has returned (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),1)             :8_3:UnDeeper:
************** / undeepers                                                                                      :8_3:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                       :8_3:UnDeeper:
*************** > sameLine: success!                                                                        :8_2:Other "by":
undeepers> IN: ) "by" ( "performing" ( ( "NDB Qualifica <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                   :8_2:Other "by":
pKeyValuesAka> IN: "assess" ( "if it is a Notifiable Data B <…>
pKeyValuesAka> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pKeyValuesAka> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),[])

************* \ pKeyValuesAka has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing)        :8_2:Other "by":
pParamText(flat) first line: pKeyValues> IN: "assess" ( "if it is a Notifiable Data B <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pParamText(flat) first line: pKeyValues> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :8_2:Other "by":
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                          :8_2:Other "by":
************* / manyIndentation/leaf?                                                                         :8_2:Other "by":
************** / sameMany                                                                                    :8_2:Other "by":
*************** / pKeyValuesAka                                                                             :8_2:Other "by":
**************** / slAKA                                                                                   :8_2:Other "by":
***************** / $*|                                                                                   :8_2:Other "by":
****************** / slAKA base                                                                          :8_2:Other "by":
******************* / slKeyValues                                                                       :8_2:Other "by":
******************** / $*|                                                                             :8_2:Other "by":
********************* / someSL                                                                        :8_2:Other "by":
someSL> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
someSL> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
someSL> VALUE: ((["by","performing","NDB Qualification"],3),[])

********************* \ someSL has returned (["by","performing","NDB Qualification"],3)                :9_2:UnDeeper:
$*|> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> VALUE: ((["by","performing","NDB Qualification"],3),[])

******************** \ $*| has returned (["by","performing","NDB Qualification"],3)                     :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / |?| optional something                                                         :9_2:UnDeeper:
********************** / |>>/recurse                                                                  :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                    :9_2:UnDeeper:
********************** / |>>/base                                                                     :9_2:UnDeeper:
*********************** / slTypeSig                                                                  :9_2:UnDeeper:
************************ / $>|                                                                      :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting :: or IS

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                    :9_2:UnDeeper:
slTypeSig> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=58:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*********************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting :: or IS

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                   :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                :9_2:UnDeeper:
********************* > |>>/base got Nothing                                                           :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************** \ |>>/base has returned (Nothing,0)                                                :9_2:UnDeeper:
slKeyValues> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slKeyValues> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slKeyValues> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

******************* \ slKeyValues has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)  :9_2:UnDeeper:
slAKA base> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA base> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA base> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

****************** \ slAKA base has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)     :9_2:UnDeeper:
$*|> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
$*|> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

***************** \ $*| has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)              :9_2:UnDeeper:
***************** / |>>/recurse                                                                            :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :9_2:UnDeeper:
***************** / |>>/base                                                                               :9_2:UnDeeper:
****************** / slAKA optional akapart                                                               :9_2:UnDeeper:
******************* / |?| optional something                                                             :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / PAKA/akapart                                                                   :9_2:UnDeeper:
********************** / $>|                                                                          :9_2:UnDeeper:
*********************** / Aka Token                                                                  :9_2:UnDeeper:
Aka Token> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=58:
Aka Token> unexpected )
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                  :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                          :9_2:UnDeeper:
PAKA/akapart> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=58:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                   :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                         :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :9_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                      :9_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :9_2:UnDeeper:
***************** / |>>/recurse                                                                            :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                              :9_2:UnDeeper:
***************** / |>>/base                                                                               :9_2:UnDeeper:
****************** / slAKA optional typically                                                             :9_2:UnDeeper:
******************* / |?| optional something                                                             :9_2:UnDeeper:
******************** / |>>/recurse                                                                      :9_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=58:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :9_2:UnDeeper:
******************** / |>>/base                                                                         :9_2:UnDeeper:
********************* / typically                                                                      :9_2:UnDeeper:
********************** / $>|                                                                          :9_2:UnDeeper:
$>|> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected )
$>|> expecting TYPICALLY

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                    :9_2:UnDeeper:
typically> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=58:
typically> unexpected )
typically> expecting TYPICALLY

********************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=58:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                   :9_2:UnDeeper:
|?| optional something> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :9_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

****************** \ slAKA optional typically has returned (Nothing,0)                                    :9_2:UnDeeper:
****************** > |>>/base got Nothing                                                                 :9_2:UnDeeper:
|>>/base> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                      :9_2:UnDeeper:
***************** > slAKA: proceeding after base and entityalias are retrieved ...                         :9_2:UnDeeper:
***************** > pAKA: entityalias = Nothing                                                            :9_2:UnDeeper:
slAKA> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
slAKA> VALUE: ((("by" :| ["performing","NDB Qualification"],Nothing),3),[])

**************** \ slAKA has returned (("by" :| ["performing","NDB Qualification"],Nothing),3)              :9_2:UnDeeper:
**************** / undeepers                                                                                :9_2:UnDeeper:
***************** > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                 :9_2:UnDeeper:
***************** > sameLine: success!                                                                           :9_5:UnDeeper:
undeepers> IN: ) ) ) ) HENCE ( "Notification" ) LEST (  <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

**************** \ undeepers has returned ()                                                                      :9_5:UnDeeper:
pKeyValuesAka> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
pKeyValuesAka> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
pKeyValuesAka> VALUE: (("by" :| ["performing","NDB Qualification"],Nothing),[])

*************** \ pKeyValuesAka has returned ("by" :| ["performing","NDB Qualification"],Nothing)                  :9_5:UnDeeper:
*************** / pKeyValuesAka                                                                                    :9_5:UnDeeper:
**************** / slAKA                                                                                          :9_5:UnDeeper:
***************** / $*|                                                                                          :9_5:UnDeeper:
****************** / slAKA base                                                                                 :9_5:UnDeeper:
******************* / slKeyValues                                                                              :9_5:UnDeeper:
******************** / $*|                                                                                    :9_5:UnDeeper:
********************* / someSL                                                                               :9_5:UnDeeper:
********************** / pNumAsText                                                                         :9_5:UnDeeper:
pNumAsText> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=61:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                      :9_5:UnDeeper:
someSL> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=61:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number              :9_5:UnDeeper:
$*|> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=61:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :9_5:UnDeeper:
slKeyValues> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=61:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number             :9_5:UnDeeper:
slAKA base> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=61:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number                :9_5:UnDeeper:
$*|> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=61:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                         :9_5:UnDeeper:
slAKA> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=61:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                         :9_5:UnDeeper:
pKeyValuesAka> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=61:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number                   :9_5:UnDeeper:
sameMany> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
sameMany> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
sameMany> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************** \ sameMany has returned [("by" :| ["performing","NDB Qualification"],Nothing)]                       :9_5:UnDeeper:
manyIndentation/leaf?> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
manyIndentation/leaf?> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
manyIndentation/leaf?> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************* \ manyIndentation/leaf? has returned [("by" :| ["performing","NDB Qualification"],Nothing)]            :9_5:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "by" ( "performing" ( ( "NDB Qualificati <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "by" ( "performing" ( ( "NDB Qualificati <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("by" :| ["performing","NDB Qualification"],Nothing)],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("by" :| ["performing","NDB Qualification"],Nothing)] :9_5:UnDeeper:
pParamText> IN: "assess" ( "if it is a Notifiable Data B <…>
pParamText> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pParamText> VALUE: (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)],[])

*********** \ pParamText has returned ("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)] :9_5:UnDeeper:
pAction calling pParamText> IN: "assess" ( "if it is a Notifiable Data B <…>
pAction calling pParamText> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
pAction calling pParamText> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

********** \ pAction calling pParamText has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_5:UnDeeper:
manyIndentation/leaf?> IN: "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> MATCH (COK): "assess" ( "if it is a Notifiable Data B <…>
manyIndentation/leaf?> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

********* \ manyIndentation/leaf? has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_5:UnDeeper:
********* / myindented-UnDeeper                                                                                          :9_5:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( "Notification" ) LEST ( PARTY  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :9_1:Hence:
someIndentation> IN: ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> MATCH (COK): ( "assess" ( "if it is a Notifiable Data <…>
someIndentation> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

******** \ someIndentation has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_1:Hence:
pDoAction/pAction> IN: ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> MATCH (COK): ( "assess" ( "if it is a Notifiable Data <…>
pDoAction/pAction> VALUE: (Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]),[])

******* \ pDoAction/pAction has returned Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]) :9_1:Hence:
******* / WHERE                                                                                                   :9_1:Hence:
WHERE> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=62:
WHERE> unexpected HENCE
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                             :9_1:Hence:
******* / preambleParamText:[Having]                                                                              :9_1:Hence:
******** / $>|                                                                                                   :9_1:Hence:
$>|> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected HENCE
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                            :9_1:Hence:
preambleParamText:[Having]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=62:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING                       :9_1:Hence:
******* / preambleParamText:[Given]                                                                               :9_1:Hence:
******** / $>|                                                                                                   :9_1:Hence:
$>|> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected HENCE
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                             :9_1:Hence:
preambleParamText:[Given]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=62:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN                         :9_1:Hence:
******* / preambleBoolStructR [Unless]                                                                            :9_1:Hence:
preambleBoolStructR [Unless]> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=62:
preambleBoolStructR [Unless]> unexpected HENCE
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected HENCE Expecting: UNLESS                     :9_1:Hence:
regulative permutation with deontic-temporal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
regulative permutation with deontic-temporal> VALUE: (RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

****** \ regulative permutation with deontic-temporal has returned RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []} :9_1:Hence:
permutationsReg> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> MATCH (COK): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []},[DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}])

***** \ permutationsReg has returned RuleBody {rbaction = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), rbpbrs = [(When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]))], rbpbrneg = [], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 30) "days"), rbupon = [(Upon,("becoming aware a data breach may have occurred" :| [],Nothing) :| [])], rbgiven = [], rbhaving = Nothing, rbkeyname = (REvery,Leaf (("Organisation" :| [],Nothing) :| [])), rbwho = Just (Who,Leaf (RPMT ["is","not","a Public Agency"])), rbwhere = []} :9_1:Hence:
***** / pHenceLest-Hence                                                                                            :9_1:Hence:
****** / someIndentation                                                                                            :9_2:GoDeeper:
******* / myindented-GoDeeper                                                                                      :9_2:GoDeeper:
myindented-GoDeeper> IN: ( "Notification" ) LEST ( PARTY ( "the P <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented-GoDeeper has returned GoDeeper                                                                 :9_2:Other "Noti:
******* / manyIndentation/leaf?                                                                                     :9_2:Other "Noti:
******** / pHenceLest -> innerRule -> pRegRule                                                                     :9_2:Other "Noti:
********* / pRegRule                                                                                              :9_2:Other "Noti:
********** / pRuleLabel                                                                                          :9_2:Other "Noti:
*********** / $>|                                                                                               :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting §

*********** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: §                                   :9_2:Other "Noti:
pRuleLabel> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=64:
pRuleLabel> unexpected "Notification"
pRuleLabel> expecting §

********** \ !Unconsumed Error: pRuleLabel: Unexpected "Notification" Expecting: §                              :9_2:Other "Noti:
********** / pRegRuleSugary                                                                                      :9_2:Other "Noti:
*********** / someDeep                                                                                          :9_2:Other "Noti:
************ / someDeep first part calls base directly                                                         :9_2:Other "Noti:
someDeep first part calls base directly> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep first part calls base directly> MATCH (COK): "Notification"
someDeep first part calls base directly> VALUE: ("Notification",[])

************ \ someDeep first part calls base directly has returned "Notification"                              :10_2:UnDeeper:
************ / someDeep second part recurses with someIndentation                                               :10_2:UnDeeper:
************* / someIndentation                                                                                :10_2:UnDeeper:
************** / myindented-GoDeeper                                                                          :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                            :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

************* \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                  :10_2:UnDeeper:
someDeep second part recurses with someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=65:
someDeep second part recurses with someIndentation> unexpected )
someDeep second part recurses with someIndentation> expecting (

************ \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected ) Expecting: ( :10_2:UnDeeper:
************ > someDeep no luck, returning []                                                                   :10_2:UnDeeper:
someDeep> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep> MATCH (COK): "Notification"
someDeep> VALUE: (["Notification"],[])

*********** \ someDeep has returned ["Notification"]                                                             :10_2:UnDeeper:
*********** / someIndentation                                                                                    :10_2:UnDeeper:
************ / myindented-GoDeeper                                                                              :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                                :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

*********** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                      :10_2:UnDeeper:
pRegRuleSugary> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRuleSugary> MATCH (CERR): "Notification"
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=65:
pRegRuleSugary> unexpected )
pRegRuleSugary> expecting (

********** \ !Consumed Error: pRegRuleSugary: Unexpected ) Expecting: ( (                                         :10_2:UnDeeper:
********** / pRegRuleNormal                                                                                      :9_2:Other "Noti:
*********** / permutationsReg                                                                                   :9_2:Other "Noti:
************ / regulative permutation with deontic-temporal                                                    :9_2:Other "Noti:
************* / WHERE                                                                                         :9_2:Other "Noti:
WHERE> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=64:
WHERE> unexpected "Notification"
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected "Notification" Expecting: WHERE                          :9_2:Other "Noti:
************* / preambleParamText:[Having]                                                                    :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: HAVING                         :9_2:Other "Noti:
preambleParamText:[Having]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=64:
preambleParamText:[Having]> unexpected "Notification"
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "Notification" Expecting: HAVING    :9_2:Other "Noti:
************* / preambleParamText:[Given]                                                                     :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: GIVEN                          :9_2:Other "Noti:
preambleParamText:[Given]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=64:
preambleParamText:[Given]> unexpected "Notification"
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "Notification" Expecting: GIVEN      :9_2:Other "Noti:
************* / preambleParamText:[Upon]                                                                      :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: UPON                           :9_2:Other "Noti:
preambleParamText:[Upon]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=64:
preambleParamText:[Upon]> unexpected "Notification"
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "Notification" Expecting: UPON        :9_2:Other "Noti:
************* / preambleBoolStructR [Unless]                                                                  :9_2:Other "Noti:
preambleBoolStructR [Unless]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=64:
preambleBoolStructR [Unless]> unexpected "Notification"
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "Notification" Expecting: UNLESS  :9_2:Other "Noti:
************* / preambleBoolStructR [When,If]                                                                 :9_2:Other "Noti:
preambleBoolStructR [When,If]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=64:
preambleBoolStructR [When,If]> unexpected "Notification"
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "Notification" Expecting: IF WHEN :9_2:Other "Noti:
************* / pDT                                                                                           :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: MUST MAY SHANT                 :9_2:Other "Noti:
pDT> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=64:
pDT> unexpected "Notification"
pDT> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDT: Unexpected "Notification" Expecting: MUST MAY SHANT                   :9_2:Other "Noti:
************* / pActor [REvery,RParty,RTokAll]                                                                :9_2:Other "Noti:
pActor [REvery,RParty,RTokAll]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=64:
pActor [REvery,RParty,RTokAll]> unexpected "Notification"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "Notification" Expecting: EVERY PARTY ALL :9_2:Other "Noti:
************* / pDoAction/Do                                                                                  :9_2:Other "Noti:
pDoAction/Do> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=64:
pDoAction/Do> unexpected "Notification"
pDoAction/Do> expecting DO

************* \ !Unconsumed Error: pDoAction/Do: Unexpected "Notification" Expecting: DO                      :9_2:Other "Noti:
regulative permutation with deontic-temporal> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=64:
regulative permutation with deontic-temporal> unexpected "Notification"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "Notification" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :9_2:Other "Noti:
************ / regulative permutation with deontic-action                                                      :9_2:Other "Noti:
************* / WHERE                                                                                         :9_2:Other "Noti:
WHERE> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=64:
WHERE> unexpected "Notification"
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected "Notification" Expecting: WHERE                          :9_2:Other "Noti:
************* / preambleParamText:[Having]                                                                    :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: HAVING                         :9_2:Other "Noti:
preambleParamText:[Having]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=64:
preambleParamText:[Having]> unexpected "Notification"
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "Notification" Expecting: HAVING    :9_2:Other "Noti:
************* / preambleParamText:[Given]                                                                     :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: GIVEN                          :9_2:Other "Noti:
preambleParamText:[Given]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=64:
preambleParamText:[Given]> unexpected "Notification"
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "Notification" Expecting: GIVEN      :9_2:Other "Noti:
************* / preambleParamText:[Upon]                                                                      :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: UPON                           :9_2:Other "Noti:
preambleParamText:[Upon]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=64:
preambleParamText:[Upon]> unexpected "Notification"
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "Notification" Expecting: UPON        :9_2:Other "Noti:
************* / preambleBoolStructR [Unless]                                                                  :9_2:Other "Noti:
preambleBoolStructR [Unless]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=64:
preambleBoolStructR [Unless]> unexpected "Notification"
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "Notification" Expecting: UNLESS  :9_2:Other "Noti:
************* / preambleBoolStructR [When,If]                                                                 :9_2:Other "Noti:
preambleBoolStructR [When,If]> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=64:
preambleBoolStructR [When,If]> unexpected "Notification"
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "Notification" Expecting: IF WHEN :9_2:Other "Noti:
************* / pTemporal/eventually                                                                          :9_2:Other "Noti:
pTemporal/eventually> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=64:
pTemporal/eventually> unexpected "Notification"
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected "Notification" Expecting: EVENTUALLY      :9_2:Other "Noti:
************* / pTemporal/specifically                                                                        :9_2:Other "Noti:
************** / $>|                                                                                         :9_2:Other "Noti:
$>|> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=64:
$>|> unexpected "Notification"
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected "Notification" Expecting: BEFORE AFTER BY ON             :9_2:Other "Noti:
pTemporal/specifically> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=64:
pTemporal/specifically> unexpected "Notification"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected "Notification" Expecting: BEFORE AFTER BY ON :9_2:Other "Noti:
************* / pTemporal/vaguely                                                                             :9_2:Other "Noti:
pTemporal/vaguely> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pTemporal/vaguely> MATCH (COK): "Notification"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "Notification"),[])

************* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "Notification")        :10_2:UnDeeper:
************* / WHERE                                                                                          :10_2:UnDeeper:
WHERE> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=65:
WHERE> unexpected )
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected ) Expecting: WHERE                                        :10_2:UnDeeper:
************* / preambleParamText:[Having]                                                                     :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: HAVING                                       :10_2:UnDeeper:
preambleParamText:[Having]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=65:
preambleParamText:[Having]> unexpected )
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ) Expecting: HAVING                  :10_2:UnDeeper:
************* / preambleParamText:[Given]                                                                      :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: GIVEN                                        :10_2:UnDeeper:
preambleParamText:[Given]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=65:
preambleParamText:[Given]> unexpected )
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ) Expecting: GIVEN                    :10_2:UnDeeper:
************* / preambleParamText:[Upon]                                                                       :10_2:UnDeeper:
************** / $>|                                                                                          :10_2:UnDeeper:
$>|> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=65:
$>|> unexpected )
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: UPON                                         :10_2:UnDeeper:
preambleParamText:[Upon]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=65:
preambleParamText:[Upon]> unexpected )
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ) Expecting: UPON                      :10_2:UnDeeper:
************* / preambleBoolStructR [Unless]                                                                   :10_2:UnDeeper:
preambleBoolStructR [Unless]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=65:
preambleBoolStructR [Unless]> unexpected )
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ) Expecting: UNLESS                :10_2:UnDeeper:
************* / preambleBoolStructR [When,If]                                                                  :10_2:UnDeeper:
preambleBoolStructR [When,If]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=65:
preambleBoolStructR [When,If]> unexpected )
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ) Expecting: IF WHEN              :10_2:UnDeeper:
************* / pActor [REvery,RParty,RTokAll]                                                                 :10_2:UnDeeper:
pActor [REvery,RParty,RTokAll]> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=65:
pActor [REvery,RParty,RTokAll]> unexpected )
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ) Expecting: EVERY PARTY ALL     :10_2:UnDeeper:
************* / pDA                                                                                            :10_2:UnDeeper:
pDA> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=65:
pDA> unexpected )
pDA> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDA: Unexpected ) Expecting: MUST MAY SHANT                                 :10_2:UnDeeper:
regulative permutation with deontic-action> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
regulative permutation with deontic-action> MATCH (CERR): "Notification"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=65:
regulative permutation with deontic-action> unexpected )
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Consumed Error: regulative permutation with deontic-action: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :10_2:UnDeeper:
permutationsReg> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=65:
permutationsReg> unexpected )
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*********** \ !Unconsumed Error: permutationsReg: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pRegRuleNormal> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=65:
pRegRuleNormal> unexpected )
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

********** \ !Unconsumed Error: pRegRuleNormal: Unexpected ) Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pRegRule> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=65:
pRegRule> unexpected )
pRegRule> expecting (, ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********* \ !Unconsumed Error: pRegRule: Unexpected ) Expecting: § GIVEN HAVING UPON WHERE ( ( EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
pHenceLest -> innerRule -> pRegRule> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=65:
pHenceLest -> innerRule -> pRegRule> unexpected )
pHenceLest -> innerRule -> pRegRule> expecting (, ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

******** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ) Expecting: § GIVEN HAVING UPON WHERE ( ( EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :9_2:Other "Noti:
******** / someDeep                                                                                                :9_2:Other "Noti:
********* / someDeep first part calls base directly                                                               :9_2:Other "Noti:
someDeep first part calls base directly> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep first part calls base directly> MATCH (COK): "Notification"
someDeep first part calls base directly> VALUE: ("Notification",[])

********* \ someDeep first part calls base directly has returned "Notification"                                    :10_2:UnDeeper:
********* / someDeep second part recurses with someIndentation                                                     :10_2:UnDeeper:
********** / someIndentation                                                                                      :10_2:UnDeeper:
*********** / myindented-GoDeeper                                                                                :10_2:UnDeeper:
myindented-GoDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=65:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: (                                  :10_2:UnDeeper:
someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=65:
someIndentation> unexpected )
someIndentation> expecting (

********** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (                                        :10_2:UnDeeper:
someDeep second part recurses with someIndentation> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=65:
someDeep second part recurses with someIndentation> unexpected )
someDeep second part recurses with someIndentation> expecting (

********* \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected ) Expecting: (       :10_2:UnDeeper:
********* > someDeep no luck, returning []                                                                         :10_2:UnDeeper:
someDeep> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
someDeep> MATCH (COK): "Notification"
someDeep> VALUE: (["Notification"],[])

******** \ someDeep has returned ["Notification"]                                                                   :10_2:UnDeeper:
manyIndentation/leaf?> IN: "Notification" ) LEST ( PARTY ( "the PDP <…>
manyIndentation/leaf?> MATCH (COK): "Notification"
manyIndentation/leaf?> VALUE: (RuleAlias ["Notification"],[])

******* \ manyIndentation/leaf? has returned RuleAlias ["Notification"]                                              :10_2:UnDeeper:
******* / myindented-UnDeeper                                                                                        :10_2:UnDeeper:
myindented-UnDeeper> IN: ) LEST ( PARTY ( "the PDPC" ) MAY ( "dem <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******* \ myindented-UnDeeper has returned UnDeeper                                                               :10_1:Lest:
someIndentation> IN: ( "Notification" ) LEST ( PARTY ( "the P <…>
someIndentation> MATCH (COK): ( "Notification" )
someIndentation> VALUE: (RuleAlias ["Notification"],[])

****** \ someIndentation has returned RuleAlias ["Notification"]                                                   :10_1:Lest:
pHenceLest-Hence> IN: HENCE ( "Notification" ) LEST ( PARTY (  <…>
pHenceLest-Hence> MATCH (COK): HENCE ( "Notification" )
pHenceLest-Hence> VALUE: (RuleAlias ["Notification"],[])

***** \ pHenceLest-Hence has returned RuleAlias ["Notification"]                                                    :10_1:Lest:
***** / pHenceLest-Lest                                                                                             :10_1:Lest:
****** / someIndentation                                                                                            :10_2:GoDeeper:
******* / myindented-GoDeeper                                                                                      :10_2:GoDeeper:
myindented-GoDeeper> IN: ( PARTY ( "the PDPC" ) MAY ( "demand" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******* \ myindented-GoDeeper has returned GoDeeper                                                                 :10_2:Party:
******* / manyIndentation/leaf?                                                                                     :10_2:Party:
******** / pHenceLest -> innerRule -> pRegRule                                                                     :10_2:Party:
********* / pRegRule                                                                                              :10_2:Party:
********** / pRuleLabel                                                                                          :10_2:Party:
*********** / $>|                                                                                               :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting §

*********** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: §                                            :10_2:Party:
pRuleLabel> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=68:
pRuleLabel> unexpected PARTY
pRuleLabel> expecting §

********** \ !Unconsumed Error: pRuleLabel: Unexpected PARTY Expecting: §                                       :10_2:Party:
********** / pRegRuleSugary                                                                                      :10_2:Party:
*********** / someDeep                                                                                          :10_2:Party:
************ / someDeep first part calls base directly                                                         :10_2:Party:
someDeep first part calls base directly> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=68:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

************ \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :10_2:Party:
someDeep> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=68:
someDeep> unexpected PARTY
someDeep> expecting Other text

*********** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                               :10_2:Party:
pRegRuleSugary> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=68:
pRegRuleSugary> unexpected PARTY
pRegRuleSugary> expecting Other text

********** \ !Unconsumed Error: pRegRuleSugary: Unexpected PARTY Expecting: Other text                           :10_2:Party:
********** / pRegRuleNormal                                                                                      :10_2:Party:
*********** / permutationsReg                                                                                   :10_2:Party:
************ / regulative permutation with deontic-temporal                                                    :10_2:Party:
************* / WHERE                                                                                         :10_2:Party:
WHERE> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=68:
WHERE> unexpected PARTY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                   :10_2:Party:
************* / preambleParamText:[Having]                                                                    :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                  :10_2:Party:
preambleParamText:[Having]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=68:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING             :10_2:Party:
************* / preambleParamText:[Given]                                                                     :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                   :10_2:Party:
preambleParamText:[Given]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=68:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN               :10_2:Party:
************* / preambleParamText:[Upon]                                                                      :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                    :10_2:Party:
preambleParamText:[Upon]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=68:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                 :10_2:Party:
************* / preambleBoolStructR [Unless]                                                                  :10_2:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=68:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS           :10_2:Party:
************* / preambleBoolStructR [When,If]                                                                 :10_2:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=68:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN         :10_2:Party:
************* / pDT                                                                                           :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: MUST MAY SHANT                          :10_2:Party:
pDT> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=68:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

************* \ !Unconsumed Error: pDT: Unexpected PARTY Expecting: MUST MAY SHANT                            :10_2:Party:
************* / pActor [REvery,RParty,RTokAll]                                                                :10_2:Party:
************** / someIndentation                                                                              :10_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :10_3:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :10_3:Other "the:
*************** / manyIndentation/leaf?                                                                       :10_3:Other "the:
**************** / pMultiTermAka                                                                             :10_3:Other "the:
***************** / pAKA                                                                                    :10_3:Other "the:
****************** / slAKA                                                                                 :10_3:Other "the:
******************* / $*|                                                                                 :10_3:Other "the:
******************** / slAKA base                                                                        :10_3:Other "the:
********************* / slMultiTerm                                                                     :10_3:Other "the:
********************** / someSL                                                                        :10_3:Other "the:
someSL> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
someSL> MATCH (COK): "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

********************** \ someSL has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
slMultiTerm> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slMultiTerm> MATCH (COK): "the PDPC"
slMultiTerm> VALUE: ((["the PDPC"],0),[])

********************* \ slMultiTerm has returned (["the PDPC"],0)                                        :11_3:UnDeeper:
slAKA base> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA base> MATCH (COK): "the PDPC"
slAKA base> VALUE: ((["the PDPC"],0),[])

******************** \ slAKA base has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
$*|> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
$*|> MATCH (COK): "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

******************* \ $*| has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional akapart                                                             :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / PAKA/akapart                                                                 :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
************************* / Aka Token                                                                :11_3:UnDeeper:
Aka Token> IN: ) MAY ( "demand" ( "an explanation for y <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=71:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :11_3:UnDeeper:
PAKA/akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=71:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                    :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional typically                                                           :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / typically                                                                    :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :11_3:UnDeeper:
typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=71:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                  :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                       :11_3:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                          :11_3:UnDeeper:
slAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA> MATCH (COK): "the PDPC"
slAKA> VALUE: ((["the PDPC"],0),[])

****************** \ slAKA has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
****************** / undeepers                                                                              :11_3:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :11_3:UnDeeper:
******************* > sameLine: success!                                                                   :11_3:UnDeeper:
undeepers> IN: ) MAY ( "demand" ( "an explanation for y <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                              :11_3:UnDeeper:
pAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pAKA> MATCH (COK): "the PDPC"
pAKA> VALUE: (["the PDPC"],[])

***************** \ pAKA has returned ["the PDPC"]                                                           :11_3:UnDeeper:
pMultiTermAka> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pMultiTermAka> MATCH (COK): "the PDPC"
pMultiTermAka> VALUE: (["the PDPC"],[])

**************** \ pMultiTermAka has returned ["the PDPC"]                                                    :11_3:UnDeeper:
manyIndentation/leaf?> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (["the PDPC"],[])

*************** \ manyIndentation/leaf? has returned ["the PDPC"]                                              :11_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :11_3:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "demand" ( "an explanation for y <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :11_2:May:
someIndentation> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
someIndentation> MATCH (COK): ( "the PDPC" )
someIndentation> VALUE: (["the PDPC"],[])

************** \ someIndentation has returned ["the PDPC"]                                                   :11_2:May:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "the PDPC" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("the PDPC" :| [],Nothing) :| [])),[])

************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("the PDPC" :| [],Nothing) :| []))  :11_2:May:
************* / manyIndentation/leaf?                                                                         :11_2:May:
************** / preambleBoolStructR [Who,Which,Whose]                                                       :11_2:May:
preambleBoolStructR [Who,Which,Whose]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=72:
preambleBoolStructR [Who,Which,Whose]> unexpected MAY
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MAY Expecting: WHO WHICH WHOSE :11_2:May:
manyIndentation/leaf?> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=72:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: WHO WHICH WHOSE           :11_2:May:
************* / manyIndentation/deeper; calling someIndentation                                               :11_2:May:
************** / someIndentation                                                                             :11_2:May:
*************** / myindented-GoDeeper                                                                       :11_2:May:
myindented-GoDeeper> IN: MAY ( "demand" ( "an explanation for you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=72:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                       :11_2:May:
someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=72:
someIndentation> unexpected MAY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                             :11_2:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=72:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_2:May:
************* / WHERE                                                                                         :11_2:May:
WHERE> IN: MAY ( "demand" ( "an explanation for you <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=72:
WHERE> unexpected MAY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                     :11_2:May:
************* / preambleParamText:[Having]                                                                    :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                    :11_2:May:
preambleParamText:[Having]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=72:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING               :11_2:May:
************* / preambleParamText:[Given]                                                                     :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                     :11_2:May:
preambleParamText:[Given]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=72:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                 :11_2:May:
************* / preambleParamText:[Upon]                                                                      :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                      :11_2:May:
preambleParamText:[Upon]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=72:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                   :11_2:May:
************* / preambleBoolStructR [Unless]                                                                  :11_2:May:
preambleBoolStructR [Unless]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=72:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS             :11_2:May:
************* / preambleBoolStructR [When,If]                                                                 :11_2:May:
preambleBoolStructR [When,If]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=72:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN           :11_2:May:
************* / pDT                                                                                           :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

************** \ $>| has returned DMay                                                                        :11_3:GoDeeper:
************** / |>| calling $>>                                                                              :11_3:GoDeeper:
*************** / |>>/recurse                                                                                :11_3:GoDeeper:
**************** / |>>/recurse                                                                               :11_3:Other "dem:
|>>/recurse> IN: "demand" ( "an explanation for your inac <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=74:
|>>/recurse> unexpected "demand"
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected "demand" Expecting: (                          :11_3:Other "dem:
**************** / |>>/base                                                                                  :11_3:Other "dem:
***************** / pTemporal/eventually                                                                    :11_3:Other "dem:
pTemporal/eventually> IN: "demand" ( "an explanation for your inac <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=74:
pTemporal/eventually> unexpected "demand"
pTemporal/eventually> expecting EVENTUALLY

***************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "demand" Expecting: EVENTUALLY      :11_3:Other "dem:
***************** / pTemporal/specifically                                                                  :11_3:Other "dem:
****************** / $>|                                                                                   :11_3:Other "dem:
$>|> IN: "demand" ( "an explanation for your inac <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=74:
$>|> unexpected "demand"
$>|> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: $>|: Unexpected "demand" Expecting: BEFORE AFTER BY ON             :11_3:Other "dem:
pTemporal/specifically> IN: "demand" ( "an explanation for your inac <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=74:
pTemporal/specifically> unexpected "demand"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

***************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "demand" Expecting: BEFORE AFTER BY ON :11_3:Other "dem:
***************** / pTemporal/vaguely                                                                       :11_3:Other "dem:
pTemporal/vaguely> IN: "demand" ( "an explanation for your inac <…>
pTemporal/vaguely> MATCH (COK): "demand"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "demand"),[])

***************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "demand")        :11_4:GoDeeper:
***************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "demand"))                   :11_4:GoDeeper:
|>>/base> IN: "demand" ( "an explanation for your inac <…>
|>>/base> MATCH (COK): "demand"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),0),[])

**************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),0)        :11_4:GoDeeper:
|>>/recurse> IN: ( "demand" ( "an explanation for your in <…>
|>>/recurse> MATCH (COK): ( "demand"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),1),[])

*************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),1)       :11_4:GoDeeper:
|>| calling $>>> IN: ( "demand" ( "an explanation for your in <…>
|>| calling $>>> MATCH (COK): ( "demand"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "demand")),1),[])

************** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "demand")),1)     :11_4:GoDeeper:
************** / undeepers                                                                                      :11_4:GoDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                       :11_4:GoDeeper:
undeepers> IN: ( "an explanation for your inaction" ) ) <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=75:
undeepers> unexpected (
undeepers> expecting )

************** \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                        :11_4:GoDeeper:
pDT> IN: MAY ( "demand" ( "an explanation for you <…>
pDT> MATCH (CERR): MAY ( "demand"
pDT> ERROR:
pDT> offset=75:
pDT> unexpected (
pDT> expecting )

************* \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                  :11_4:GoDeeper:
************* / pDoAction/Do                                                                                  :11_2:May:
pDoAction/Do> IN: MAY ( "demand" ( "an explanation for you <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=72:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

************* \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                                 :11_2:May:
regulative permutation with deontic-temporal> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-temporal> MATCH (CERR): PARTY ( "the PDPC" )
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=75:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting (, ), WHICH, WHO, or WHOSE

************ \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: ( WHO WHICH WHOSE ) :11_2:May:
************ / regulative permutation with deontic-action                                                      :10_2:Party:
************* / WHERE                                                                                         :10_2:Party:
WHERE> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=68:
WHERE> unexpected PARTY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                   :10_2:Party:
************* / preambleParamText:[Having]                                                                    :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                  :10_2:Party:
preambleParamText:[Having]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=68:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING             :10_2:Party:
************* / preambleParamText:[Given]                                                                     :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                   :10_2:Party:
preambleParamText:[Given]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=68:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN               :10_2:Party:
************* / preambleParamText:[Upon]                                                                      :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                    :10_2:Party:
preambleParamText:[Upon]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=68:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                 :10_2:Party:
************* / preambleBoolStructR [Unless]                                                                  :10_2:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=68:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS           :10_2:Party:
************* / preambleBoolStructR [When,If]                                                                 :10_2:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=68:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN         :10_2:Party:
************* / pTemporal/eventually                                                                          :10_2:Party:
pTemporal/eventually> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=68:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected PARTY Expecting: EVENTUALLY               :10_2:Party:
************* / pTemporal/specifically                                                                        :10_2:Party:
************** / $>|                                                                                         :10_2:Party:
$>|> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=68:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: BEFORE AFTER BY ON                      :10_2:Party:
pTemporal/specifically> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=68:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected PARTY Expecting: BEFORE AFTER BY ON     :10_2:Party:
************* / pTemporal/vaguely                                                                             :10_2:Party:
pTemporal/vaguely> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=68:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected PARTY Expecting: Other text                  :10_2:Party:
************* / pActor [REvery,RParty,RTokAll]                                                                :10_2:Party:
************** / someIndentation                                                                              :10_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :10_3:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :10_3:Other "the:
*************** / manyIndentation/leaf?                                                                       :10_3:Other "the:
**************** / pMultiTermAka                                                                             :10_3:Other "the:
***************** / pAKA                                                                                    :10_3:Other "the:
****************** / slAKA                                                                                 :10_3:Other "the:
******************* / $*|                                                                                 :10_3:Other "the:
******************** / slAKA base                                                                        :10_3:Other "the:
********************* / slMultiTerm                                                                     :10_3:Other "the:
********************** / someSL                                                                        :10_3:Other "the:
someSL> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
someSL> MATCH (COK): "the PDPC"
someSL> VALUE: ((["the PDPC"],0),[])

********************** \ someSL has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
slMultiTerm> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slMultiTerm> MATCH (COK): "the PDPC"
slMultiTerm> VALUE: ((["the PDPC"],0),[])

********************* \ slMultiTerm has returned (["the PDPC"],0)                                        :11_3:UnDeeper:
slAKA base> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA base> MATCH (COK): "the PDPC"
slAKA base> VALUE: ((["the PDPC"],0),[])

******************** \ slAKA base has returned (["the PDPC"],0)                                           :11_3:UnDeeper:
$*|> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
$*|> MATCH (COK): "the PDPC"
$*|> VALUE: ((["the PDPC"],0),[])

******************* \ $*| has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional akapart                                                             :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / PAKA/akapart                                                                 :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
************************* / Aka Token                                                                :11_3:UnDeeper:
Aka Token> IN: ) MAY ( "demand" ( "an explanation for y <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=71:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :11_3:UnDeeper:
PAKA/akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=71:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional akapart> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                    :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* / |>>/recurse                                                                          :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :11_3:UnDeeper:
******************* / |>>/base                                                                             :11_3:UnDeeper:
******************** / slAKA optional typically                                                           :11_3:UnDeeper:
********************* / |?| optional something                                                           :11_3:UnDeeper:
********************** / |>>/recurse                                                                    :11_3:UnDeeper:
|>>/recurse> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=71:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :11_3:UnDeeper:
********************** / |>>/base                                                                       :11_3:UnDeeper:
*********************** / typically                                                                    :11_3:UnDeeper:
************************ / $>|                                                                        :11_3:UnDeeper:
$>|> IN: ) MAY ( "demand" ( "an explanation for y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=71:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :11_3:UnDeeper:
typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=71:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=71:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :11_3:UnDeeper:
|?| optional something> IN: ) MAY ( "demand" ( "an explanation for y <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                  :11_3:UnDeeper:
slAKA optional typically> IN: ) MAY ( "demand" ( "an explanation for y <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                  :11_3:UnDeeper:
******************** > |>>/base got Nothing                                                               :11_3:UnDeeper:
|>>/base> IN: ) MAY ( "demand" ( "an explanation for y <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                    :11_3:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                       :11_3:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                          :11_3:UnDeeper:
slAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
slAKA> MATCH (COK): "the PDPC"
slAKA> VALUE: ((["the PDPC"],0),[])

****************** \ slAKA has returned (["the PDPC"],0)                                                    :11_3:UnDeeper:
****************** / undeepers                                                                              :11_3:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers               :11_3:UnDeeper:
******************* > sameLine: success!                                                                   :11_3:UnDeeper:
undeepers> IN: ) MAY ( "demand" ( "an explanation for y <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                              :11_3:UnDeeper:
pAKA> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pAKA> MATCH (COK): "the PDPC"
pAKA> VALUE: (["the PDPC"],[])

***************** \ pAKA has returned ["the PDPC"]                                                           :11_3:UnDeeper:
pMultiTermAka> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
pMultiTermAka> MATCH (COK): "the PDPC"
pMultiTermAka> VALUE: (["the PDPC"],[])

**************** \ pMultiTermAka has returned ["the PDPC"]                                                    :11_3:UnDeeper:
manyIndentation/leaf?> IN: "the PDPC" ) MAY ( "demand" ( "an explan <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (["the PDPC"],[])

*************** \ manyIndentation/leaf? has returned ["the PDPC"]                                              :11_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :11_3:UnDeeper:
myindented-UnDeeper> IN: ) MAY ( "demand" ( "an explanation for y <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :11_2:May:
someIndentation> IN: ( "the PDPC" ) MAY ( "demand" ( "an expl <…>
someIndentation> MATCH (COK): ( "the PDPC" )
someIndentation> VALUE: (["the PDPC"],[])

************** \ someIndentation has returned ["the PDPC"]                                                   :11_2:May:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "the PDPC" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("the PDPC" :| [],Nothing) :| [])),[])

************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("the PDPC" :| [],Nothing) :| []))  :11_2:May:
************* / manyIndentation/leaf?                                                                         :11_2:May:
************** / preambleBoolStructR [Who,Which,Whose]                                                       :11_2:May:
preambleBoolStructR [Who,Which,Whose]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=72:
preambleBoolStructR [Who,Which,Whose]> unexpected MAY
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MAY Expecting: WHO WHICH WHOSE :11_2:May:
manyIndentation/leaf?> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=72:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: WHO WHICH WHOSE           :11_2:May:
************* / manyIndentation/deeper; calling someIndentation                                               :11_2:May:
************** / someIndentation                                                                             :11_2:May:
*************** / myindented-GoDeeper                                                                       :11_2:May:
myindented-GoDeeper> IN: MAY ( "demand" ( "an explanation for you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=72:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                       :11_2:May:
someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=72:
someIndentation> unexpected MAY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                             :11_2:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( "demand" ( "an explanation for you <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=72:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_2:May:
************* / WHERE                                                                                         :11_2:May:
WHERE> IN: MAY ( "demand" ( "an explanation for you <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=72:
WHERE> unexpected MAY
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                     :11_2:May:
************* / preambleParamText:[Having]                                                                    :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                    :11_2:May:
preambleParamText:[Having]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=72:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING               :11_2:May:
************* / preambleParamText:[Given]                                                                     :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                     :11_2:May:
preambleParamText:[Given]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=72:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN                 :11_2:May:
************* / preambleParamText:[Upon]                                                                      :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                      :11_2:May:
preambleParamText:[Upon]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=72:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON                   :11_2:May:
************* / preambleBoolStructR [Unless]                                                                  :11_2:May:
preambleBoolStructR [Unless]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=72:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS             :11_2:May:
************* / preambleBoolStructR [When,If]                                                                 :11_2:May:
preambleBoolStructR [When,If]> IN: MAY ( "demand" ( "an explanation for you <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=72:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN           :11_2:May:
************* / pTemporal/eventually                                                                          :11_2:May:
pTemporal/eventually> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=72:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY                 :11_2:May:
************* / pTemporal/specifically                                                                        :11_2:May:
************** / $>|                                                                                         :11_2:May:
$>|> IN: MAY ( "demand" ( "an explanation for you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=72:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                        :11_2:May:
pTemporal/specifically> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=72:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON       :11_2:May:
************* / pTemporal/vaguely                                                                             :11_2:May:
pTemporal/vaguely> IN: MAY ( "demand" ( "an explanation for you <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=72:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                    :11_2:May:
************* / pDA                                                                                           :11_2:May:
************** / someIndentation                                                                              :11_3:GoDeeper:
*************** / myindented-GoDeeper                                                                        :11_3:GoDeeper:
myindented-GoDeeper> IN: ( "demand" ( "an explanation for your in <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                   :11_3:Other "dem:
*************** / manyIndentation/leaf?                                                                       :11_3:Other "dem:
**************** / pAction calling pParamText                                                                :11_3:Other "dem:
***************** / pParamText                                                                              :11_3:Other "dem:
****************** / pParamText(flat) first line: pKeyValues                                               :11_3:Other "dem:
******************* / pKeyValuesAka                                                                       :11_3:Other "dem:
******************** / slAKA                                                                             :11_3:Other "dem:
********************* / $*|                                                                             :11_3:Other "dem:
********************** / slAKA base                                                                    :11_3:Other "dem:
*********************** / slKeyValues                                                                 :11_3:Other "dem:
************************ / $*|                                                                       :11_3:Other "dem:
************************* / someSL                                                                  :11_3:Other "dem:
someSL> IN: "demand" ( "an explanation for your inac <…>
someSL> MATCH (COK): "demand" ( "an explanation for your inac <…>
someSL> VALUE: ((["demand","an explanation for your inaction"],1),[])

************************* \ someSL has returned (["demand","an explanation for your inaction"],1)    :12_3:UnDeeper:
$*|> IN: "demand" ( "an explanation for your inac <…>
$*|> MATCH (COK): "demand" ( "an explanation for your inac <…>
$*|> VALUE: ((["demand","an explanation for your inaction"],1),[])

************************ \ $*| has returned (["demand","an explanation for your inaction"],1)         :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / |?| optional something                                                   :12_3:UnDeeper:
************************** / |>>/recurse                                                            :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :12_3:UnDeeper:
************************** / |>>/base                                                               :12_3:UnDeeper:
*************************** / slTypeSig                                                            :12_3:UnDeeper:
**************************** / $>|                                                                :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::              :12_3:UnDeeper:
slTypeSig> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=77:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::          :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::             :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                          :12_3:UnDeeper:
************************* > |>>/base got Nothing                                                     :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                          :12_3:UnDeeper:
slKeyValues> IN: "demand" ( "an explanation for your inac <…>
slKeyValues> MATCH (COK): "demand" ( "an explanation for your inac <…>
slKeyValues> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

*********************** \ slKeyValues has returned (("demand" :| ["an explanation for your inaction"],Nothing),1) :12_3:UnDeeper:
slAKA base> IN: "demand" ( "an explanation for your inac <…>
slAKA base> MATCH (COK): "demand" ( "an explanation for your inac <…>
slAKA base> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

********************** \ slAKA base has returned (("demand" :| ["an explanation for your inaction"],Nothing),1) :12_3:UnDeeper:
$*|> IN: "demand" ( "an explanation for your inac <…>
$*|> MATCH (COK): "demand" ( "an explanation for your inac <…>
$*|> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

********************* \ $*| has returned (("demand" :| ["an explanation for your inaction"],Nothing),1)  :12_3:UnDeeper:
********************* / |>>/recurse                                                                      :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :12_3:UnDeeper:
********************* / |>>/base                                                                         :12_3:UnDeeper:
********************** / slAKA optional akapart                                                         :12_3:UnDeeper:
*********************** / |?| optional something                                                       :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / PAKA/akapart                                                             :12_3:UnDeeper:
************************** / $>|                                                                    :12_3:UnDeeper:
*************************** / Aka Token                                                            :12_3:UnDeeper:
Aka Token> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=77:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA            :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                    :12_3:UnDeeper:
PAKA/akapart> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=77:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA             :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                   :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :12_3:UnDeeper:
slAKA optional akapart> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                :12_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :12_3:UnDeeper:
********************* / |>>/recurse                                                                      :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :12_3:UnDeeper:
********************* / |>>/base                                                                         :12_3:UnDeeper:
********************** / slAKA optional typically                                                       :12_3:UnDeeper:
*********************** / |?| optional something                                                       :12_3:UnDeeper:
************************ / |>>/recurse                                                                :12_3:UnDeeper:
|>>/recurse> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=77:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :12_3:UnDeeper:
************************ / |>>/base                                                                   :12_3:UnDeeper:
************************* / typically                                                                :12_3:UnDeeper:
************************** / $>|                                                                    :12_3:UnDeeper:
$>|> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=77:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY              :12_3:UnDeeper:
typically> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=77:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY          :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=77:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY             :12_3:UnDeeper:
|?| optional something> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :12_3:UnDeeper:
slAKA optional typically> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                              :12_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :12_3:UnDeeper:
|>>/base> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :12_3:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                   :12_3:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                      :12_3:UnDeeper:
slAKA> IN: "demand" ( "an explanation for your inac <…>
slAKA> MATCH (COK): "demand" ( "an explanation for your inac <…>
slAKA> VALUE: ((("demand" :| ["an explanation for your inaction"],Nothing),1),[])

******************** \ slAKA has returned (("demand" :| ["an explanation for your inaction"],Nothing),1)  :12_3:UnDeeper:
******************** / undeepers                                                                          :12_3:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers           :12_3:UnDeeper:
********************* > sameLine: success!                                                                 :12_4:UnDeeper:
undeepers> IN: ) ) HENCE ( PARTY ( "You" ) MUST ( "resp <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                            :12_4:UnDeeper:
pKeyValuesAka> IN: "demand" ( "an explanation for your inac <…>
pKeyValuesAka> MATCH (COK): "demand" ( "an explanation for your inac <…>
pKeyValuesAka> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing),[])

******************* \ pKeyValuesAka has returned ("demand" :| ["an explanation for your inaction"],Nothing)  :12_4:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "demand" ( "an explanation for your inac <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "demand" ( "an explanation for your inac <…>
pParamText(flat) first line: pKeyValues> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing),[])

****************** \ pParamText(flat) first line: pKeyValues has returned ("demand" :| ["an explanation for your inaction"],Nothing) :12_4:UnDeeper:
****************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                   :12_4:UnDeeper:
******************* / manyIndentation/leaf?                                                                  :12_4:UnDeeper:
******************** / sameMany                                                                             :12_4:UnDeeper:
********************* / pKeyValuesAka                                                                      :12_4:UnDeeper:
********************** / slAKA                                                                            :12_4:UnDeeper:
*********************** / $*|                                                                            :12_4:UnDeeper:
************************ / slAKA base                                                                   :12_4:UnDeeper:
************************* / slKeyValues                                                                :12_4:UnDeeper:
************************** / $*|                                                                      :12_4:UnDeeper:
*************************** / someSL                                                                 :12_4:UnDeeper:
**************************** / pNumAsText                                                           :12_4:UnDeeper:
pNumAsText> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=78:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number        :12_4:UnDeeper:
someSL> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=78:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :12_4:UnDeeper:
$*|> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=78:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number     :12_4:UnDeeper:
slKeyValues> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=78:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

************************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number :12_4:UnDeeper:
slAKA base> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=78:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************ \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number  :12_4:UnDeeper:
$*|> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=78:
$*|> unexpected )
$*|> expecting other text or number

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number           :12_4:UnDeeper:
slAKA> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=78:
slAKA> unexpected )
slAKA> expecting other text or number

********************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number           :12_4:UnDeeper:
pKeyValuesAka> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=78:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

********************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number     :12_4:UnDeeper:
sameMany> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

******************** \ sameMany has returned []                                                             :12_4:UnDeeper:
manyIndentation/leaf?> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

******************* \ manyIndentation/leaf? has returned []                                                  :12_4:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

****************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                   :12_4:UnDeeper:
pParamText> IN: "demand" ( "an explanation for your inac <…>
pParamText> MATCH (COK): "demand" ( "an explanation for your inac <…>
pParamText> VALUE: (("demand" :| ["an explanation for your inaction"],Nothing) :| [],[])

***************** \ pParamText has returned ("demand" :| ["an explanation for your inaction"],Nothing) :| []   :12_4:UnDeeper:
pAction calling pParamText> IN: "demand" ( "an explanation for your inac <…>
pAction calling pParamText> MATCH (COK): "demand" ( "an explanation for your inac <…>
pAction calling pParamText> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

**************** \ pAction calling pParamText has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_4:UnDeeper:
manyIndentation/leaf?> IN: "demand" ( "an explanation for your inac <…>
manyIndentation/leaf?> MATCH (COK): "demand" ( "an explanation for your inac <…>
manyIndentation/leaf?> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

*************** \ manyIndentation/leaf? has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_4:UnDeeper:
*************** / myindented-UnDeeper                                                                            :12_4:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( PARTY ( "You" ) MUST ( "respon <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                                 :12_2:Hence:
someIndentation> IN: ( "demand" ( "an explanation for your in <…>
someIndentation> MATCH (COK): ( "demand" ( "an explanation for your in <…>
someIndentation> VALUE: (Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []),[])

************** \ someIndentation has returned Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []) :12_2:Hence:
pDA> IN: MAY ( "demand" ( "an explanation for you <…>
pDA> MATCH (COK): MAY ( "demand" ( "an explanation for you <…>
pDA> VALUE: ((DMay,Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| [])),[])

************* \ pDA has returned (DMay,Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| [])) :12_2:Hence:
************* / WHERE                                                                                         :12_2:Hence:
WHERE> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=79:
WHERE> unexpected HENCE
WHERE> expecting WHERE

************* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                   :12_2:Hence:
************* / preambleParamText:[Having]                                                                    :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting HAVING

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                  :12_2:Hence:
preambleParamText:[Having]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=79:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING             :12_2:Hence:
************* / preambleParamText:[Given]                                                                     :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting GIVEN

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                   :12_2:Hence:
preambleParamText:[Given]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=79:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN               :12_2:Hence:
************* / preambleParamText:[Upon]                                                                      :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting UPON

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: UPON                                    :12_2:Hence:
preambleParamText:[Upon]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=79:
preambleParamText:[Upon]> unexpected HENCE
preambleParamText:[Upon]> expecting UPON

************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected HENCE Expecting: UPON                 :12_2:Hence:
************* / preambleBoolStructR [Unless]                                                                  :12_2:Hence:
preambleBoolStructR [Unless]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=79:
preambleBoolStructR [Unless]> unexpected HENCE
preambleBoolStructR [Unless]> expecting UNLESS

************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected HENCE Expecting: UNLESS           :12_2:Hence:
************* / preambleBoolStructR [When,If]                                                                 :12_2:Hence:
preambleBoolStructR [When,If]> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=79:
preambleBoolStructR [When,If]> unexpected HENCE
preambleBoolStructR [When,If]> expecting IF or WHEN

************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected HENCE Expecting: IF WHEN         :12_2:Hence:
************* / pTemporal/eventually                                                                          :12_2:Hence:
pTemporal/eventually> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=79:
pTemporal/eventually> unexpected HENCE
pTemporal/eventually> expecting EVENTUALLY

************* \ !Unconsumed Error: pTemporal/eventually: Unexpected HENCE Expecting: EVENTUALLY               :12_2:Hence:
************* / pTemporal/specifically                                                                        :12_2:Hence:
************** / $>|                                                                                         :12_2:Hence:
$>|> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=79:
$>|> unexpected HENCE
$>|> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: BEFORE AFTER BY ON                      :12_2:Hence:
pTemporal/specifically> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=79:
pTemporal/specifically> unexpected HENCE
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************* \ !Unconsumed Error: pTemporal/specifically: Unexpected HENCE Expecting: BEFORE AFTER BY ON     :12_2:Hence:
************* / pTemporal/vaguely                                                                             :12_2:Hence:
pTemporal/vaguely> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=79:
pTemporal/vaguely> unexpected HENCE
pTemporal/vaguely> expecting Other text

************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected HENCE Expecting: Other text                  :12_2:Hence:
regulative permutation with deontic-action> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-action> MATCH (COK): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
regulative permutation with deontic-action> VALUE: (RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

************ \ regulative permutation with deontic-action has returned RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :12_2:Hence:
permutationsReg> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
permutationsReg> MATCH (COK): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

*********** \ permutationsReg has returned RuleBody {rbaction = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMay, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("the PDPC" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :12_2:Hence:
*********** / pHenceLest-Hence                                                                                  :12_2:Hence:
************ / someIndentation                                                                                  :12_3:GoDeeper:
************* / myindented-GoDeeper                                                                            :12_3:GoDeeper:
myindented-GoDeeper> IN: ( PARTY ( "You" ) MUST ( "respond" EOL ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented-GoDeeper has returned GoDeeper                                                       :12_3:Party:
************* / manyIndentation/leaf?                                                                           :12_3:Party:
************** / pHenceLest -> innerRule -> pRegRule                                                           :12_3:Party:
*************** / pRegRule                                                                                    :12_3:Party:
**************** / pRuleLabel                                                                                :12_3:Party:
***************** / $>|                                                                                     :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting §

***************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: §                                  :12_3:Party:
pRuleLabel> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=81:
pRuleLabel> unexpected PARTY
pRuleLabel> expecting §

**************** \ !Unconsumed Error: pRuleLabel: Unexpected PARTY Expecting: §                             :12_3:Party:
**************** / pRegRuleSugary                                                                            :12_3:Party:
***************** / someDeep                                                                                :12_3:Party:
****************** / someDeep first part calls base directly                                               :12_3:Party:
someDeep first part calls base directly> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=81:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

****************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :12_3:Party:
someDeep> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=81:
someDeep> unexpected PARTY
someDeep> expecting Other text

***************** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                     :12_3:Party:
pRegRuleSugary> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=81:
pRegRuleSugary> unexpected PARTY
pRegRuleSugary> expecting Other text

**************** \ !Unconsumed Error: pRegRuleSugary: Unexpected PARTY Expecting: Other text                 :12_3:Party:
**************** / pRegRuleNormal                                                                            :12_3:Party:
***************** / permutationsReg                                                                         :12_3:Party:
****************** / regulative permutation with deontic-temporal                                          :12_3:Party:
******************* / WHERE                                                                               :12_3:Party:
WHERE> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=81:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                         :12_3:Party:
******************* / preambleParamText:[Having]                                                          :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                        :12_3:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=81:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING   :12_3:Party:
******************* / preambleParamText:[Given]                                                           :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                         :12_3:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=81:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN     :12_3:Party:
******************* / preambleParamText:[Upon]                                                            :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                          :12_3:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=81:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON       :12_3:Party:
******************* / preambleBoolStructR [Unless]                                                        :12_3:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=81:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS :12_3:Party:
******************* / preambleBoolStructR [When,If]                                                       :12_3:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=81:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN :12_3:Party:
******************* / pDT                                                                                 :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: MUST MAY SHANT                :12_3:Party:
pDT> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=81:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

******************* \ !Unconsumed Error: pDT: Unexpected PARTY Expecting: MUST MAY SHANT                  :12_3:Party:
******************* / pActor [REvery,RParty,RTokAll]                                                      :12_3:Party:
******************** / someIndentation                                                                    :12_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :12_4:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :12_4:Other "You:
********************* / manyIndentation/leaf?                                                             :12_4:Other "You:
********************** / pMultiTermAka                                                                   :12_4:Other "You:
*********************** / pAKA                                                                          :12_4:Other "You:
************************ / slAKA                                                                       :12_4:Other "You:
************************* / $*|                                                                       :12_4:Other "You:
************************** / slAKA base                                                              :12_4:Other "You:
*************************** / slMultiTerm                                                           :12_4:Other "You:
**************************** / someSL                                                              :12_4:Other "You:
someSL> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************************** \ someSL has returned (["You"],0)                                      :13_4:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************************** \ slMultiTerm has returned (["You"],0)                                   :13_4:UnDeeper:
slAKA base> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************************** \ slAKA base has returned (["You"],0)                                      :13_4:UnDeeper:
$*|> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************************* \ $*| has returned (["You"],0)                                               :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional akapart                                                   :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / PAKA/akapart                                                       :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
******************************* / Aka Token                                                      :13_4:UnDeeper:
Aka Token> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=84:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA      :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting AKA

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA              :13_4:UnDeeper:
PAKA/akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=84:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA       :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting AKA

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA             :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                          :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional typically                                                 :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / typically                                                          :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting TYPICALLY

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY        :13_4:UnDeeper:
typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=84:
typically> unexpected )
typically> expecting TYPICALLY

***************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY    :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY       :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                        :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...             :13_4:UnDeeper:
************************* > pAKA: entityalias = Nothing                                                :13_4:UnDeeper:
slAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************************ \ slAKA has returned (["You"],0)                                               :13_4:UnDeeper:
************************ / undeepers                                                                    :13_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :13_4:UnDeeper:
************************* > sameLine: success!                                                         :13_4:UnDeeper:
undeepers> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :13_4:UnDeeper:
pAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********************** \ pAKA has returned ["You"]                                                      :13_4:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********************** \ pMultiTermAka has returned ["You"]                                               :13_4:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********************* \ manyIndentation/leaf? has returned ["You"]                                         :13_4:UnDeeper:
********************* / myindented-UnDeeper                                                                :13_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented-UnDeeper has returned UnDeeper                                       :13_3:Must:
someIndentation> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******************** \ someIndentation has returned ["You"]                                              :13_3:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| [])) :13_3:Must:
******************* / manyIndentation/leaf?                                                               :13_3:Must:
******************** / preambleBoolStructR [Who,Which,Whose]                                             :13_3:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=85:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
manyIndentation/leaf?> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=85:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
******************* / manyIndentation/deeper; calling someIndentation                                     :13_3:Must:
******************** / someIndentation                                                                   :13_3:Must:
********************* / myindented-GoDeeper                                                             :13_3:Must:
myindented-GoDeeper> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=85:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (            :13_3:Must:
someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=85:
someIndentation> unexpected MUST
someIndentation> expecting (

******************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                  :13_3:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=85:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: ( :13_3:Must:
******************* / WHERE                                                                               :13_3:Must:
WHERE> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=85:
WHERE> unexpected MUST
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                          :13_3:Must:
******************* / preambleParamText:[Having]                                                          :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                         :13_3:Must:
preambleParamText:[Having]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=85:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING    :13_3:Must:
******************* / preambleParamText:[Given]                                                           :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                          :13_3:Must:
preambleParamText:[Given]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=85:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN      :13_3:Must:
******************* / preambleParamText:[Upon]                                                            :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                           :13_3:Must:
preambleParamText:[Upon]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=85:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON        :13_3:Must:
******************* / preambleBoolStructR [Unless]                                                        :13_3:Must:
preambleBoolStructR [Unless]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=85:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS  :13_3:Must:
******************* / preambleBoolStructR [When,If]                                                       :13_3:Must:
preambleBoolStructR [When,If]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=85:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN :13_3:Must:
******************* / pDT                                                                                 :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******************** \ $>| has returned DMust                                                             :13_4:GoDeeper:
******************** / |>| calling $>>                                                                    :13_4:GoDeeper:
********************* / |>>/recurse                                                                      :13_4:GoDeeper:
********************** / |>>/recurse                                                                     :13_4:Other "res:
|>>/recurse> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=87:
|>>/recurse> unexpected "respond"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "respond" Expecting: (               :13_4:Other "res:
********************** / |>>/base                                                                        :13_4:Other "res:
*********************** / pTemporal/eventually                                                          :13_4:Other "res:
pTemporal/eventually> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=87:
pTemporal/eventually> unexpected "respond"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "respond" Expecting: EVENTUALLY :13_4:Other "res:
*********************** / pTemporal/specifically                                                        :13_4:Other "res:
************************ / $>|                                                                         :13_4:Other "res:
$>|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=87:
$>|> unexpected "respond"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "respond" Expecting: BEFORE AFTER BY ON  :13_4:Other "res:
pTemporal/specifically> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=87:
pTemporal/specifically> unexpected "respond"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "respond" Expecting: BEFORE AFTER BY ON :13_4:Other "res:
*********************** / pTemporal/vaguely                                                             :13_4:Other "res:
pTemporal/vaguely> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pTemporal/vaguely> MATCH (COK): "respond"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "respond"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "respond") :13_4:EOL:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "respond"))       :13_4:EOL:
|>>/base> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
|>>/base> MATCH (COK): "respond"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),0) :13_4:EOL:
|>>/recurse> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
|>>/recurse> MATCH (COK): ( "respond"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),1) :13_4:EOL:
|>| calling $>>> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
|>| calling $>>> MATCH (COK): ( "respond"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "respond")),1),[])

******************** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "respond")),1) :13_4:EOL:
******************** / undeepers                                                                           :13_4:EOL:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers            :13_4:EOL:
undeepers> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=88:
undeepers> unexpected EOL
undeepers> expecting )

******************** \ !Unconsumed Error: undeepers: Unexpected EOL Expecting: )                           :13_4:EOL:
pDT> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDT> MATCH (CERR): MUST ( "respond"
pDT> ERROR:
pDT> offset=88:
pDT> unexpected EOL
pDT> expecting )

******************* \ !Consumed Error: pDT: Unexpected EOL Expecting: )                                     :13_4:EOL:
******************* / pDoAction/Do                                                                        :13_3:Must:
pDoAction/Do> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=85:
pDoAction/Do> unexpected MUST
pDoAction/Do> expecting DO

******************* \ !Unconsumed Error: pDoAction/Do: Unexpected MUST Expecting: DO                      :13_3:Must:
regulative permutation with deontic-temporal> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
regulative permutation with deontic-temporal> MATCH (CERR): PARTY ( "You" )
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=88:
regulative permutation with deontic-temporal> unexpected EOL
regulative permutation with deontic-temporal> expecting (, ), WHICH, WHO, or WHOSE

****************** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected EOL Expecting: ( WHO WHICH WHOSE ) :13_3:Must:
****************** / regulative permutation with deontic-action                                            :12_3:Party:
******************* / WHERE                                                                               :12_3:Party:
WHERE> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=81:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                         :12_3:Party:
******************* / preambleParamText:[Having]                                                          :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                        :12_3:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=81:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING   :12_3:Party:
******************* / preambleParamText:[Given]                                                           :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                         :12_3:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=81:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN     :12_3:Party:
******************* / preambleParamText:[Upon]                                                            :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                          :12_3:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=81:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON       :12_3:Party:
******************* / preambleBoolStructR [Unless]                                                        :12_3:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=81:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS :12_3:Party:
******************* / preambleBoolStructR [When,If]                                                       :12_3:Party:
preambleBoolStructR [When,If]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=81:
preambleBoolStructR [When,If]> unexpected PARTY
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected PARTY Expecting: IF WHEN :12_3:Party:
******************* / pTemporal/eventually                                                                :12_3:Party:
pTemporal/eventually> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=81:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

******************* \ !Unconsumed Error: pTemporal/eventually: Unexpected PARTY Expecting: EVENTUALLY     :12_3:Party:
******************* / pTemporal/specifically                                                              :12_3:Party:
******************** / $>|                                                                               :12_3:Party:
$>|> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=81:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

******************** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: BEFORE AFTER BY ON            :12_3:Party:
pTemporal/specifically> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=81:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: pTemporal/specifically: Unexpected PARTY Expecting: BEFORE AFTER BY ON :12_3:Party:
******************* / pTemporal/vaguely                                                                   :12_3:Party:
pTemporal/vaguely> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=81:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

******************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected PARTY Expecting: Other text        :12_3:Party:
******************* / pActor [REvery,RParty,RTokAll]                                                      :12_3:Party:
******************** / someIndentation                                                                    :12_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :12_4:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :12_4:Other "You:
********************* / manyIndentation/leaf?                                                             :12_4:Other "You:
********************** / pMultiTermAka                                                                   :12_4:Other "You:
*********************** / pAKA                                                                          :12_4:Other "You:
************************ / slAKA                                                                       :12_4:Other "You:
************************* / $*|                                                                       :12_4:Other "You:
************************** / slAKA base                                                              :12_4:Other "You:
*************************** / slMultiTerm                                                           :12_4:Other "You:
**************************** / someSL                                                              :12_4:Other "You:
someSL> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************************** \ someSL has returned (["You"],0)                                      :13_4:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************************** \ slMultiTerm has returned (["You"],0)                                   :13_4:UnDeeper:
slAKA base> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************************** \ slAKA base has returned (["You"],0)                                      :13_4:UnDeeper:
$*|> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************************* \ $*| has returned (["You"],0)                                               :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional akapart                                                   :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / PAKA/akapart                                                       :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
******************************* / Aka Token                                                      :13_4:UnDeeper:
Aka Token> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=84:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA      :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting AKA

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA              :13_4:UnDeeper:
PAKA/akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=84:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA       :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting AKA

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA             :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional akapart> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************** \ slAKA optional akapart has returned (Nothing,0)                          :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* / |>>/recurse                                                                :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :13_4:UnDeeper:
************************* / |>>/base                                                                   :13_4:UnDeeper:
************************** / slAKA optional typically                                                 :13_4:UnDeeper:
*************************** / |?| optional something                                                 :13_4:UnDeeper:
**************************** / |>>/recurse                                                          :13_4:UnDeeper:
|>>/recurse> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=84:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :13_4:UnDeeper:
**************************** / |>>/base                                                             :13_4:UnDeeper:
***************************** / typically                                                          :13_4:UnDeeper:
****************************** / $>|                                                              :13_4:UnDeeper:
$>|> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=84:
$>|> unexpected )
$>|> expecting TYPICALLY

****************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY        :13_4:UnDeeper:
typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=84:
typically> unexpected )
typically> expecting TYPICALLY

***************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY    :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=84:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY       :13_4:UnDeeper:
|?| optional something> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************************** \ |?| optional something has returned (Nothing,0)                        :13_4:UnDeeper:
slAKA optional typically> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************** \ slAKA optional typically has returned (Nothing,0)                        :13_4:UnDeeper:
************************** > |>>/base got Nothing                                                     :13_4:UnDeeper:
|>>/base> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************* \ |>>/base has returned (Nothing,0)                                          :13_4:UnDeeper:
************************* > slAKA: proceeding after base and entityalias are retrieved ...             :13_4:UnDeeper:
************************* > pAKA: entityalias = Nothing                                                :13_4:UnDeeper:
slAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************************ \ slAKA has returned (["You"],0)                                               :13_4:UnDeeper:
************************ / undeepers                                                                    :13_4:UnDeeper:
************************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :13_4:UnDeeper:
************************* > sameLine: success!                                                         :13_4:UnDeeper:
undeepers> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************ \ undeepers has returned ()                                                    :13_4:UnDeeper:
pAKA> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********************** \ pAKA has returned ["You"]                                                      :13_4:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********************** \ pMultiTermAka has returned ["You"]                                               :13_4:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( "respond" EOL ( "to" ( "t <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********************* \ manyIndentation/leaf? has returned ["You"]                                         :13_4:UnDeeper:
********************* / myindented-UnDeeper                                                                :13_4:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "respond" EOL ( "to" ( "the PDP <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************* \ myindented-UnDeeper has returned UnDeeper                                       :13_3:Must:
someIndentation> IN: ( "You" ) MUST ( "respond" EOL ( "to" (  <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******************** \ someIndentation has returned ["You"]                                              :13_3:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******************* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| [])) :13_3:Must:
******************* / manyIndentation/leaf?                                                               :13_3:Must:
******************** / preambleBoolStructR [Who,Which,Whose]                                             :13_3:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=85:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******************** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
manyIndentation/leaf?> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=85:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE :13_3:Must:
******************* / manyIndentation/deeper; calling someIndentation                                     :13_3:Must:
******************** / someIndentation                                                                   :13_3:Must:
********************* / myindented-GoDeeper                                                             :13_3:Must:
myindented-GoDeeper> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=85:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (            :13_3:Must:
someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=85:
someIndentation> unexpected MUST
someIndentation> expecting (

******************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                  :13_3:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=85:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: ( :13_3:Must:
******************* / WHERE                                                                               :13_3:Must:
WHERE> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=85:
WHERE> unexpected MUST
WHERE> expecting WHERE

******************* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                          :13_3:Must:
******************* / preambleParamText:[Having]                                                          :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting HAVING

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                         :13_3:Must:
preambleParamText:[Having]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=85:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******************* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING    :13_3:Must:
******************* / preambleParamText:[Given]                                                           :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting GIVEN

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                          :13_3:Must:
preambleParamText:[Given]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=85:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******************* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN      :13_3:Must:
******************* / preambleParamText:[Upon]                                                            :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting UPON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                           :13_3:Must:
preambleParamText:[Upon]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=85:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******************* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON        :13_3:Must:
******************* / preambleBoolStructR [Unless]                                                        :13_3:Must:
preambleBoolStructR [Unless]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=85:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******************* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS  :13_3:Must:
******************* / preambleBoolStructR [When,If]                                                       :13_3:Must:
preambleBoolStructR [When,If]> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=85:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******************* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN :13_3:Must:
******************* / pTemporal/eventually                                                                :13_3:Must:
pTemporal/eventually> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=85:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******************* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY      :13_3:Must:
******************* / pTemporal/specifically                                                              :13_3:Must:
******************** / $>|                                                                               :13_3:Must:
$>|> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=85:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON             :13_3:Must:
pTemporal/specifically> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=85:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON :13_3:Must:
******************* / pTemporal/vaguely                                                                   :13_3:Must:
pTemporal/vaguely> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=85:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******************* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text         :13_3:Must:
******************* / pDA                                                                                 :13_3:Must:
******************** / someIndentation                                                                    :13_4:GoDeeper:
********************* / myindented-GoDeeper                                                              :13_4:GoDeeper:
myindented-GoDeeper> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************* \ myindented-GoDeeper has returned GoDeeper                                         :13_4:Other "res:
********************* / manyIndentation/leaf?                                                             :13_4:Other "res:
********************** / pAction calling pParamText                                                      :13_4:Other "res:
*********************** / pParamText                                                                    :13_4:Other "res:
************************ / pParamText(flat) first line: pKeyValues                                     :13_4:Other "res:
************************* / pKeyValuesAka                                                             :13_4:Other "res:
************************** / slAKA                                                                   :13_4:Other "res:
*************************** / $*|                                                                   :13_4:Other "res:
**************************** / slAKA base                                                          :13_4:Other "res:
***************************** / slKeyValues                                                       :13_4:Other "res:
****************************** / $*|                                                             :13_4:Other "res:
******************************* / someSL                                                        :13_4:Other "res:
someSL> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
someSL> MATCH (COK): "respond"
someSL> VALUE: ((["respond"],0),[])

******************************* \ someSL has returned (["respond"],0)                           :13_4:EOL:
$*|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$*|> MATCH (COK): "respond"
$*|> VALUE: ((["respond"],0),[])

****************************** \ $*| has returned (["respond"],0)                                :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / |?| optional something                                        :13_4:EOL:
******************************** / |>>/recurse                                                 :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: ( :13_4:EOL:
******************************** / |>>/base                                                    :13_4:EOL:
********************************* / slTypeSig                                                 :13_4:EOL:
********************************** / $>|                                                     :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting :: or IS

********************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: IS :: :13_4:EOL:
slTypeSig> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=88:
slTypeSig> unexpected EOL
slTypeSig> expecting :: or IS

********************************* \ !Unconsumed Error: slTypeSig: Unexpected EOL Expecting: IS :: :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting :: or IS

******************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: IS :: :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************************* \ |?| optional something has returned (Nothing,0)               :13_4:EOL:
******************************* > |>>/base got Nothing                                          :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************************** \ |>>/base has returned (Nothing,0)                               :13_4:EOL:
slKeyValues> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slKeyValues> MATCH (COK): "respond"
slKeyValues> VALUE: ((("respond" :| [],Nothing),0),[])

***************************** \ slKeyValues has returned (("respond" :| [],Nothing),0)            :13_4:EOL:
slAKA base> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slAKA base> MATCH (COK): "respond"
slAKA base> VALUE: ((("respond" :| [],Nothing),0),[])

**************************** \ slAKA base has returned (("respond" :| [],Nothing),0)               :13_4:EOL:
$*|> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
$*|> MATCH (COK): "respond"
$*|> VALUE: ((("respond" :| [],Nothing),0),[])

*************************** \ $*| has returned (("respond" :| [],Nothing),0)                        :13_4:EOL:
*************************** / |>>/recurse                                                           :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (           :13_4:EOL:
*************************** / |>>/base                                                              :13_4:EOL:
**************************** / slAKA optional akapart                                              :13_4:EOL:
***************************** / |?| optional something                                            :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / PAKA/akapart                                                  :13_4:EOL:
******************************** / $>|                                                         :13_4:EOL:
********************************* / Aka Token                                                 :13_4:EOL:
Aka Token> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=88:
Aka Token> unexpected EOL
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected EOL Expecting: AKA :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: AKA       :13_4:EOL:
PAKA/akapart> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=88:
PAKA/akapart> unexpected EOL
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected EOL Expecting: AKA :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: AKA      :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                   :13_4:EOL:
slAKA optional akapart> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                     :13_4:EOL:
**************************** > |>>/base got Nothing                                                :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                     :13_4:EOL:
*************************** / |>>/recurse                                                           :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (           :13_4:EOL:
*************************** / |>>/base                                                              :13_4:EOL:
**************************** / slAKA optional typically                                            :13_4:EOL:
***************************** / |?| optional something                                            :13_4:EOL:
****************************** / |>>/recurse                                                     :13_4:EOL:
|>>/recurse> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=88:
|>>/recurse> unexpected EOL
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected EOL Expecting: (     :13_4:EOL:
****************************** / |>>/base                                                        :13_4:EOL:
******************************* / typically                                                     :13_4:EOL:
******************************** / $>|                                                         :13_4:EOL:
$>|> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=88:
$>|> unexpected EOL
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
typically> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=88:
typically> unexpected EOL
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=88:
|>>/base> unexpected EOL
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected EOL Expecting: TYPICALLY :13_4:EOL:
|?| optional something> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                   :13_4:EOL:
slAKA optional typically> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                   :13_4:EOL:
**************************** > |>>/base got Nothing                                                :13_4:EOL:
|>>/base> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                     :13_4:EOL:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...        :13_4:EOL:
*************************** > pAKA: entityalias = Nothing                                           :13_4:EOL:
slAKA> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
slAKA> MATCH (COK): "respond"
slAKA> VALUE: ((("respond" :| [],Nothing),0),[])

************************** \ slAKA has returned (("respond" :| [],Nothing),0)                        :13_4:EOL:
************************** / undeepers                                                               :13_4:EOL:
*************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :13_4:EOL:
*************************** > sameLine: success!                                                    :13_4:EOL:
undeepers> IN: EOL ( "to" ( "the PDPC" ) "about" ( "you <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************************** \ undeepers has returned ()                                               :13_4:EOL:
pKeyValuesAka> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pKeyValuesAka> MATCH (COK): "respond"
pKeyValuesAka> VALUE: (("respond" :| [],Nothing),[])

************************* \ pKeyValuesAka has returned ("respond" :| [],Nothing)                      :13_4:EOL:
pParamText(flat) first line: pKeyValues> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "respond"
pParamText(flat) first line: pKeyValues> VALUE: (("respond" :| [],Nothing),[])

************************ \ pParamText(flat) first line: pKeyValues has returned ("respond" :| [],Nothing) :13_4:EOL:
************************ / pParamText(flat) subsequent lines: sameMany pKeyValues                       :13_5:GoDeeper:
************************* / manyIndentation/leaf?                                                      :13_5:GoDeeper:
************************** / sameMany                                                                 :13_5:GoDeeper:
*************************** / pKeyValuesAka                                                          :13_5:GoDeeper:
**************************** / slAKA                                                                :13_5:GoDeeper:
***************************** / $*|                                                                :13_5:GoDeeper:
****************************** / slAKA base                                                       :13_5:GoDeeper:
******************************* / slKeyValues                                                    :13_5:GoDeeper:
******************************** / $*|                                                          :13_5:GoDeeper:
********************************* / someSL                                                     :13_5:GoDeeper:
********************************** / pNumAsText                                               :13_5:GoDeeper:
pNumAsText> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=89:
pNumAsText> unexpected (
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number :13_5:GoDeeper:
someSL> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=89:
someSL> unexpected (
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
$*|> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=89:
$*|> unexpected (
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slKeyValues> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=89:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

******************************* \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slAKA base> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=89:
slAKA base> unexpected (
slAKA base> expecting other text or number

****************************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
$*|> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=89:
$*|> unexpected (
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
slAKA> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=89:
slAKA> unexpected (
slAKA> expecting other text or number

**************************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
pKeyValuesAka> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=89:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*************************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number :13_5:GoDeeper:
sameMany> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************************** \ sameMany has returned []                                                 :13_5:GoDeeper:
manyIndentation/leaf?> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************************* \ manyIndentation/leaf? has returned []                                      :13_5:GoDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []       :13_5:GoDeeper:
pParamText> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pParamText> MATCH (COK): "respond" EOL
pParamText> VALUE: (("respond" :| [],Nothing) :| [],[])

*********************** \ pParamText has returned ("respond" :| [],Nothing) :| []                        :13_5:GoDeeper:
pAction calling pParamText> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
pAction calling pParamText> MATCH (COK): "respond" EOL
pAction calling pParamText> VALUE: (Leaf (("respond" :| [],Nothing) :| []),[])

********************** \ pAction calling pParamText has returned Leaf (("respond" :| [],Nothing) :| [])   :13_5:GoDeeper:
manyIndentation/leaf?> IN: "respond" EOL ( "to" ( "the PDPC" ) "abo <…>
manyIndentation/leaf?> MATCH (COK): "respond" EOL
manyIndentation/leaf?> VALUE: (Leaf (("respond" :| [],Nothing) :| []),[])

********************* \ manyIndentation/leaf? has returned Leaf (("respond" :| [],Nothing) :| [])          :13_5:GoDeeper:
********************* / myindented-UnDeeper                                                                :13_5:GoDeeper:
myindented-UnDeeper> IN: ( "to" ( "the PDPC" ) "about" ( "your in <…>
myindented-UnDeeper> MATCH (EERR): <EMPTY>
myindented-UnDeeper> ERROR:
myindented-UnDeeper> offset=89:
myindented-UnDeeper> unexpected (
myindented-UnDeeper> expecting )

********************* \ !Unconsumed Error: myindented-UnDeeper: Unexpected ( Expecting: )                  :13_5:GoDeeper:
someIndentation> IN: ( "respond" EOL ( "to" ( "the PDPC" ) "a <…>
someIndentation> MATCH (CERR): ( "respond" EOL
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting ) or other text or number

******************** \ !Consumed Error: someIndentation: Unexpected ( Expecting: ) other text or number     :13_5:GoDeeper:
pDA> IN: MUST ( "respond" EOL ( "to" ( "the PDPC" <…>
pDA> MATCH (CERR): MUST ( "respond" EOL
pDA> ERROR:
pDA> offset=89:
pDA> unexpected (
pDA> expecting ) or other text or number

******************* \ !Consumed Error: pDA: Unexpected ( Expecting: ) other text or number                   :13_5:GoDeeper:
regulative permutation with deontic-action> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
regulative permutation with deontic-action> MATCH (CERR): PARTY ( "You" )
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=89:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting (, ), WHICH, WHO, WHOSE, or other text or number

****************** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :13_3:Must:
permutationsReg> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=89:
permutationsReg> unexpected (
permutationsReg> expecting (, ), WHICH, WHO, WHOSE, or other text or number

***************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRuleNormal> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, or other text or number

**************** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRule> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

*************** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pHenceLest -> innerRule -> pRegRule> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=89:
pHenceLest -> innerRule -> pRegRule> unexpected (
pHenceLest -> innerRule -> pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
************** / someDeep                                                                                      :12_3:Party:
*************** / someDeep first part calls base directly                                                     :12_3:Party:
someDeep first part calls base directly> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=81:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

*************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text :12_3:Party:
someDeep> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=81:
someDeep> unexpected PARTY
someDeep> expecting Other text

************** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                           :12_3:Party:
manyIndentation/leaf?> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=89:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
************* / manyIndentation/deeper; calling someIndentation                                                 :12_3:Party:
************** / someIndentation                                                                               :12_3:Party:
*************** / myindented-GoDeeper                                                                         :12_3:Party:
myindented-GoDeeper> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=81:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

*************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: (                       :12_3:Party:
someIndentation> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=81:
someIndentation> unexpected PARTY
someIndentation> expecting (

************** \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: (                             :12_3:Party:
manyIndentation/deeper; calling someIndentation> IN: PARTY ( "You" ) MUST ( "respond" EOL ( " <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=81:
manyIndentation/deeper; calling someIndentation> unexpected PARTY
manyIndentation/deeper; calling someIndentation> expecting (

************* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected PARTY Expecting: ( :12_3:Party:
someIndentation> IN: ( PARTY ( "You" ) MUST ( "respond" EOL ( <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

************ \ !Consumed Error: someIndentation: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pHenceLest-Hence> IN: HENCE ( PARTY ( "You" ) MUST ( "respond" <…>
pHenceLest-Hence> MATCH (CERR): HENCE (
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=89:
pHenceLest-Hence> unexpected (
pHenceLest-Hence> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

*********** \ !Consumed Error: pHenceLest-Hence: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number :12_3:Party:
pRegRuleNormal> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleNormal> MATCH (CERR): PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

********** \ !Consumed Error: pRegRuleNormal: Unexpected ( Expecting: § ( ) WHO WHICH WHOSE other text or number  :12_3:Party:
pRegRule> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

********* \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number   :10_2:Party:
pHenceLest -> innerRule -> pRegRule> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
pHenceLest -> innerRule -> pRegRule> MATCH (EERR): <EMPTY>
pHenceLest -> innerRule -> pRegRule> ERROR:
pHenceLest -> innerRule -> pRegRule> offset=89:
pHenceLest -> innerRule -> pRegRule> unexpected (
pHenceLest -> innerRule -> pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

******** \ !Unconsumed Error: pHenceLest -> innerRule -> pRegRule: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number :10_2:Party:
******** / someDeep                                                                                                :10_2:Party:
********* / someDeep first part calls base directly                                                               :10_2:Party:
someDeep first part calls base directly> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=68:
someDeep first part calls base directly> unexpected PARTY
someDeep first part calls base directly> expecting Other text

********* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected PARTY Expecting: Other text    :10_2:Party:
someDeep> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=68:
someDeep> unexpected PARTY
someDeep> expecting Other text

******** \ !Unconsumed Error: someDeep: Unexpected PARTY Expecting: Other text                                     :10_2:Party:
manyIndentation/leaf?> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=89:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number :10_2:Party:
******* / manyIndentation/deeper; calling someIndentation                                                           :10_2:Party:
******** / someIndentation                                                                                         :10_2:Party:
********* / myindented-GoDeeper                                                                                   :10_2:Party:
myindented-GoDeeper> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=68:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: (                                 :10_2:Party:
someIndentation> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=68:
someIndentation> unexpected PARTY
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: (                                       :10_2:Party:
manyIndentation/deeper; calling someIndentation> IN: PARTY ( "the PDPC" ) MAY ( "demand" ( "a <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=68:
manyIndentation/deeper; calling someIndentation> unexpected PARTY
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected PARTY Expecting: (         :10_2:Party:
someIndentation> IN: ( PARTY ( "the PDPC" ) MAY ( "demand" (  <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=89:
someIndentation> unexpected (
someIndentation> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

****** \ !Consumed Error: someIndentation: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number    :10_2:Party:
pHenceLest-Lest> IN: LEST ( PARTY ( "the PDPC" ) MAY ( "deman <…>
pHenceLest-Lest> MATCH (CERR): LEST (
pHenceLest-Lest> ERROR:
pHenceLest-Lest> offset=89:
pHenceLest-Lest> unexpected (
pHenceLest-Lest> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

***** \ !Consumed Error: pHenceLest-Lest: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number      :10_2:Party:
pRegRuleNormal> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> MATCH (CERR): EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=89:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

**** \ !Consumed Error: pRegRuleNormal: Unexpected ( Expecting: § § ( ) WHO WHICH WHOSE other text or number         :10_2:Party:
pRegRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=89:
pRegRule> unexpected (
pRegRule> expecting (, ), WHICH, WHO, WHOSE, other text or number, or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § § § ( ) WHO WHICH WHOSE other text or number          :2_1:Every:
*** / pTypeDefinition                                                                                                 :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :2_1:Every:
pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :2_1:Every:
**** / pHornlike/uponLimb                                                                                            :2_1:Every:
***** / preambleParamText:[Upon]                                                                                    :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :2_1:Every:
**** / pHornlike/givenLimb                                                                                           :2_1:Every:
***** / preambleParamText:[Given]                                                                                   :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :2_1:Every:
pTypeDefinition> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :2_1:Every:
*** / pConstitutiveRule                                                                                               :2_1:Every:
**** / pRuleLabel                                                                                                    :2_1:Every:
***** / $>|                                                                                                         :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :2_1:Every:
pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :2_1:Every:
**** / calling myindented pNameParens                                                                                :2_1:Every:
***** / manyIndentation/leaf?                                                                                       :2_1:Every:
****** / pMultiTermAka                                                                                             :2_1:Every:
******* / pAKA                                                                                                    :2_1:Every:
******** / slAKA                                                                                                 :2_1:Every:
********* / $*|                                                                                                 :2_1:Every:
********** / slAKA base                                                                                        :2_1:Every:
*********** / slMultiTerm                                                                                     :2_1:Every:
************ / someSL                                                                                        :2_1:Every:
************* / pNumAsText                                                                                  :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :2_1:Every:
pAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :2_1:Every:
pMultiTermAka> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Every:
****** / someIndentation                                                                                           :2_1:Every:
******* / myindented-GoDeeper                                                                                     :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :2_1:Every:
calling myindented pNameParens> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :2_1:Every:
pConstitutiveRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :2_1:Every:
*** / pScenarioRule                                                                                                   :2_1:Every:
pScenarioRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :2_1:Every:
*** / pHornlike                                                                                                       :2_1:Every:
**** / pSrcRef                                                                                                       :2_1:Every:
***** / pRuleLabel                                                                                                  :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :2_1:Every:
pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :2_1:Every:
pSrcRef> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Every:
**** / pHornlike / permute                                                                                           :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/givenLimb                                                                                         :2_1:Every:
****** / preambleParamText:[Given]                                                                                 :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :2_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :2_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/uponLimb                                                                                          :2_1:Every:
****** / preambleParamText:[Upon]                                                                                  :2_1:Every:
******* / $>|                                                                                                     :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :2_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :2_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :2_1:Every:
***** / whenCase                                                                                                    :2_1:Every:
****** / whenMeansIf                                                                                               :2_1:Every:
whenMeansIf> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :2_1:Every:
****** / Otherwise                                                                                                 :2_1:Every:
Otherwise> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :2_1:Every:
whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
***** / pHornlike/ambitious                                                                                         :2_1:Every:
****** / $>|                                                                                                       :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :2_1:Every:
pHornlike/ambitious> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :2_1:Every:
***** / pHornlike/someStructure                                                                                     :2_1:Every:
****** / manyIndentation/leaf?                                                                                     :2_1:Every:
******* / relPredNextlineWhen                                                                                     :2_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Every:
********* / optIndentedTuple                                                                                    :2_1:Every:
********** / optIndented                                                                                       :2_1:Every:
*********** / pRelPred                                                                                        :2_1:Every:
************ / slRelPred                                                                                     :2_1:Every:
************* / nested simpleHorn                                                                           :2_1:Every:
************** > |^|                                                                                       :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :2_1:Every:
************* / RPConstraint                                                                                :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :2_1:Every:
************* / RPBoolStructR                                                                               :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :2_1:Every:
************* / RPMT                                                                                        :2_1:Every:
************** / $*|                                                                                       :2_1:Every:
*************** / slAKA                                                                                   :2_1:Every:
**************** / $*|                                                                                   :2_1:Every:
***************** / slAKA base                                                                          :2_1:Every:
****************** / slMultiTerm                                                                       :2_1:Every:
******************* / someSL                                                                          :2_1:Every:
******************** / pNumAsText                                                                    :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :2_1:Every:
pRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=4:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :2_1:Every:
optIndented> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=4:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :2_1:Every:
optIndentedTuple> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=4:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :2_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=4:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :2_1:Every:
relPredNextlineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=4:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
******* / relPredSamelineWhen                                                                                     :2_1:Every:
******** / $*|                                                                                                   :2_1:Every:
********* / slRelPred                                                                                           :2_1:Every:
********** / nested simpleHorn                                                                                 :2_1:Every:
*********** > |^|                                                                                             :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
nested simpleHorn> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=4:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :2_1:Every:
********** / RPConstraint                                                                                      :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPConstraint> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=4:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
********** / RPBoolStructR                                                                                     :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slMultiTerm                                                                                   :2_1:Every:
************* / someSL                                                                                      :2_1:Every:
************** / pNumAsText                                                                                :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPBoolStructR> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=4:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :2_1:Every:
********** / RPMT                                                                                              :2_1:Every:
*********** / $*|                                                                                             :2_1:Every:
************ / slAKA                                                                                         :2_1:Every:
************* / $*|                                                                                         :2_1:Every:
************** / slAKA base                                                                                :2_1:Every:
*************** / slMultiTerm                                                                             :2_1:Every:
**************** / someSL                                                                                :2_1:Every:
***************** / pNumAsText                                                                          :2_1:Every:
pNumAsText> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :2_1:Every:
someSL> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :2_1:Every:
slMultiTerm> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :2_1:Every:
slAKA base> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
slAKA> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :2_1:Every:
RPMT> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=4:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :2_1:Every:
slRelPred> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=4:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :2_1:Every:
$*|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :2_1:Every:
relPredSamelineWhen> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=4:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :2_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :2_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Every:
******* / someIndentation                                                                                         :2_1:Every:
******** / myindented-GoDeeper                                                                                   :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :2_1:Every:
someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :2_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :2_1:Every:
pHornlike/someStructure> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=4:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :2_1:Every:
pHornlike / permute> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=4:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :2_1:Every:
pHornlike> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=4:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :2_1:Every:
*** / pRuleLabel                                                                                                      :2_1:Every:
**** / $>|                                                                                                           :2_1:Every:
$>|> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :2_1:Every:
pRuleLabel> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :2_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Every:
**** / myindented-GoDeeper                                                                                           :2_1:Every:
myindented-GoDeeper> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :2_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :2_1:Every:
pRule> IN: EVERY ( "Organisation" ( ( ( AKA ( "You" <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=89:
pRule> unexpected (
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                             :2_1:Every:
Loading env

Parser tests
  PDPA
    pdpadbno-1 FAILED [1]

Failures:

  test/Spec.hs:834:7: 
  1) Parser tests, PDPA, pdpadbno-1
       expected: [[Regulative {subj = Leaf (("Organisation" :| [],Nothing) :| []), rkeyword = REvery, who = Just (Leaf (RPMT ["is","not","a Public Agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("assess" :| ["if it is a Notifiable Data Breach"],Nothing) :| [("by" :| ["performing","NDB Qualification"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 30) "days"), hence = Just (RuleAlias ["Notification"]), lest = Just (Regulative {subj = Leaf (("the PDPC" :| [],Nothing) :| []), rkeyword = RParty, who = Nothing, cond = Nothing, deontic = DMay, action = Leaf (("demand" :| ["an explanation for your inaction"],Nothing) :| []), temporal = Nothing, hence = Just (Regulative {subj = Leaf (("You" :| [],Nothing) :| []), rkeyword = RParty, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("respond" :| [],Nothing) :| [("to" :| ["the PDPC"],Nothing),("about" :| ["your inaction"],Nothing)]), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), rlabel = Just ("\167",2,"Assess"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Organisation"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 3, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected EVERY
       expecting EOL, end of input, or standalone rule section heading
       
       §§        Assess                                                                                                                                        
       ✳ EVERY   Organisation                                                                                                 AKA                 You          
       WHO       is                                    not                                 a Public Agency                                                     
       MUST      WITHIN                                30                                  days                                                                
       UPON      becoming aware a data breach may                                                                                                              
                 have occurred                                                                                                                                 
       WHEN      the data breach occurs on or after                                                                                                            
                 the date of commencement of PDP(A)A                                                                                                           
                 2020 §13                                                                                                                                      
       ->        assess                                if it is a Notifiable Data Breach                                                                       
                 by                                    performing                                                             NDB Qualification                
       HENCE     Notification                                                                                                                                  
       LEST      PARTY                                 the PDPC                                                                                                
                 MAY                                   demand                              an explanation for your inaction                                    
                 HENCE                                 PARTY                               You                                                                 
                                                       MUST                                respond                                                             
                                                                                                                              to                  the PDPC     
                                                                                                                              about               your inaction
       
       
       Stream:
       §§ ( "Assess" ) "✳" EVERY
           ( "Organisation"
               (
                   (
                       ( AKA ( "You" ) )
                   )
               )
           ) WHO
           ( "is"
               ( "not" ( "a Public Agency" ) )
           ) MUST
           ( BEFORE
               ( 30 ( "days" ) )
           ) UPON ( "becoming aware a data breach may have occurred" ) WHEN ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" ) DO
           ( "assess" ( "if it is a Notifiable Data Breach" ) "by"
               ( "performing" ( ( "NDB Qualification" ) ) )
           ) HENCE ( "Notification" ) LEST
           ( PARTY ( "the PDPC" ) MAY
               ( "demand" ( "an explanation for your inaction" ) ) HENCE
               ( PARTY ( "You" ) MUST
                   ( "respond" EOL
                       ( "to" ( "the PDPC" ) "about" ( "your inaction" ) )
                   )
               )
           )

  To rerun use: --match "/Parser tests/PDPA/pdpadbno-1/"

Randomized with seed 1961429912

Finished in 0.8948 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

