* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/PDPA/pdpadbno-2/")

* Tokens
EVERY
    ( "Data Intermediary"
        (
            ( AKA ( "You" ) )
        )
    ) WHICH
    ( "is not" ( "processing personal data on behalf of and for the purposes of a public agency" ) ) MUST ( "without undue delay" ) UPON ( "becoming aware a data breach involving a client Organisation may have occurred" ) WHEN ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" ) DO
    ( "NOTIFY" ( "the Organisation" ) "for which" ( "you act as a Data Intermediary" ) )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:Every:
*** / pRegRule                                                                                                        :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pRegRuleSugary                                                                                                :1_1:Every:
***** / someDeep                                                                                                    :1_1:Every:
****** / someDeep first part calls base directly                                                                   :1_1:Every:
someDeep first part calls base directly> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=0:
someDeep first part calls base directly> unexpected EVERY
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected EVERY Expecting: Other text        :1_1:Every:
someDeep> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=0:
someDeep> unexpected EVERY
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected EVERY Expecting: Other text                                         :1_1:Every:
pRegRuleSugary> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=0:
pRegRuleSugary> unexpected EVERY
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected EVERY Expecting: Other text                                     :1_1:Every:
**** / pRegRuleNormal                                                                                                :1_1:Every:
***** / permutationsReg                                                                                             :1_1:Every:
****** / regulative permutation with deontic-temporal                                                              :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pDT                                                                                                     :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: MUST MAY SHANT                                    :1_1:Every:
pDT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=0:
pDT> unexpected EVERY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected EVERY Expecting: MUST MAY SHANT                                      :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected AKA
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected AKA Expecting: number                           :1_4:Aka:
someSL> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                                   :1_4:Aka:
*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                             :1_4:Aka:
****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected "You" Expecting: (                       :1_5:Other "You":
********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) WHICH ( "is not" ( "proc <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) WHICH ( "is not" ( <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) WHICH ( "is not" <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented-UnDeeper                                                                                          :2_5:UnDeeper:
myindented-UnDeeper> IN: ) WHICH ( "is not" ( "processing persona <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("Data Intermediary" :| [],Nothing) :| []))   :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is not" ( "processing personal data o <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is not" ( "processing personal data o <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is not" ( "processing personal data o <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "is not" ( "processing personal data o <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / ppp inner                                                                             :2_2:Other "is n:
****************** / expression                                                                          :2_2:Other "is n:
******************* / termIndent p                                                                      :2_2:Other "is n:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (CERR): "is not" ( "processing personal data on  <…>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "is not" ( "processing personal data on  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is not" ( "processing personal data on  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "is n:
********************* > |<|                                                                           :2_2:Other "is n:
********************* > |<* starting                                                                  :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:Must:
*********************** / expression                                                              :3_1:Must:
************************ / termIndent p                                                          :3_1:Must:
************************* / term p/1a:label ends directly above next line                       :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/1c:label ends to the right of line below                     :3_1:Must:
************************** > |<|                                                               :3_1:Must:
************************** > |<* starting                                                      :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/notLabelTerm                                                 :3_1:Must:
************************** / term p/2:someIndentation expr p                                   :3_1:Must:
*************************** / someIndentation                                                 :3_1:Must:
**************************** / myindented-GoDeeper                                           :3_1:Must:
myindented-GoDeeper> IN: MUST ( "without undue delay" ) UPON ( "b <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=19:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :3_1:Must:
someIndentation> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=19:
someIndentation> unexpected MUST
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :3_1:Must:
term p/2:someIndentation expr p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=19:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :3_1:Must:
************************** / term p/3:plain p                                                  :3_1:Must:
*************************** / pRelPred                                                        :3_1:Must:
**************************** / slRelPred                                                     :3_1:Must:
***************************** / nested simpleHorn                                           :3_1:Must:
****************************** > |^|                                                       :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
nested simpleHorn> IN: MUST ( "without undue delay" ) UPON ( "b <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPConstraint                                                :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPConstraint> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=19:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPBoolStructR                                               :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPBoolStructR> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=19:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPMT                                                        :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slAKA                                                   :3_1:Must:
******************************** / $*|                                                   :3_1:Must:
********************************* / slAKA base                                          :3_1:Must:
********************************** / slMultiTerm                                       :3_1:Must:
*********************************** / someSL                                          :3_1:Must:
************************************ / pNumAsText                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
slAKA base> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=19:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
slAKA> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=19:
slAKA> unexpected MUST
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPMT> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=19:
RPMT> unexpected MUST
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :3_1:Must:
slRelPred> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=19:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :3_1:Must:
pRelPred> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=19:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/3:plain p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=19:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/notLabelTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=19:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :3_1:Must:
termIndent p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=19:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :3_1:Must:
expression> IN: MUST ( "without undue delay" ) UPON ( "b <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=19:
expression> unexpected MUST
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression    :3_1:Must:
ppp inner> IN: MUST ( "without undue delay" ) UPON ( "b <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> unexpected MUST
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression       :3_1:Must:
********************** / withPrePost                                                               :3_1:Must:
*********************** > |<* starting                                                            :3_1:Must:
*********************** / $*|                                                                     :3_1:Must:
************************ / pre part                                                              :3_1:Must:
pre part> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected MUST
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text  :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text         :3_1:Must:
withPrePost> IN: MUST ( "without undue delay" ) UPON ( "b <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text   :3_1:Must:
********************** / $*|                                                                       :3_1:Must:
*********************** / pre part                                                                :3_1:Must:
pre part> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected MUST
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text    :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text           :3_1:Must:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "is not" ( "processing personal data on  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "is n:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "is n:
********************** / someIndentation                                                             :2_2:Other "is n:
*********************** / myindented-GoDeeper                                                       :2_2:Other "is n:
myindented-GoDeeper> IN: "is not" ( "processing personal data on  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected "is not"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is not" Expecting: (  :2_2:Other "is n:
someIndentation> IN: "is not" ( "processing personal data on  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected "is not"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "is not" Expecting: (        :2_2:Other "is n:
term p/2:someIndentation expr p> IN: "is not" ( "processing personal data on  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected "is not"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is not" Expecting: ( :2_2:Other "is n:
********************* / term p/3:plain p                                                              :2_2:Other "is n:
********************** / pRelPred                                                                    :2_2:Other "is n:
*********************** / slRelPred                                                                 :2_2:Other "is n:
************************ / nested simpleHorn                                                       :2_2:Other "is n:
************************* > |^|                                                                   :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************* \ |^| deeps has returned ([(),()],-2)                                 :3_1:Must:
nested simpleHorn> IN: "is not" ( "processing personal data on  <…>
nested simpleHorn> MATCH (CERR): "is not" ( "processing personal data on  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :3_1:Must:
************************ / RPConstraint                                                            :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "is not" ( "processing personal data on  <…>
RPConstraint> MATCH (CERR): "is not" ( "processing personal data on  <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "is not" ( "processing personal data on  <…>
RPBoolStructR> MATCH (CERR): "is not" ( "processing personal data on  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slAKA                                                               :2_2:Other "is n:
*************************** / $*|                                                               :2_2:Other "is n:
**************************** / slAKA base                                                      :2_2:Other "is n:
***************************** / slMultiTerm                                                   :2_2:Other "is n:
****************************** / someSL                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

****************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

***************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slAKA base> IN: "is not" ( "processing personal data on  <…>
slAKA base> MATCH (COK): "is not" ( "processing personal data on  <…>
slAKA base> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

**************************** \ slAKA base has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "is not" ( "processing personal data on  <…>
slAKA> MATCH (COK): "is not" ( "processing personal data on  <…>
slAKA> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slAKA has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
RPMT> IN: "is not" ( "processing personal data on  <…>
RPMT> MATCH (COK): "is not" ( "processing personal data on  <…>
RPMT> VALUE: ((RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************ \ RPMT has returned (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slRelPred> IN: "is not" ( "processing personal data on  <…>
slRelPred> MATCH (COK): "is not" ( "processing personal data on  <…>
slRelPred> VALUE: ((RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*********************** \ slRelPred has returned (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                         :3_3:UnDeeper:
undeepers> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                    :3_3:UnDeeper:
pRelPred> IN: "is not" ( "processing personal data on  <…>
pRelPred> MATCH (COK): "is not" ( "processing personal data on  <…>
pRelPred> VALUE: (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],[])

********************** \ pRelPred has returned RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"] :3_3:UnDeeper:
term p/3:plain p> IN: "is not" ( "processing personal data on  <…>
term p/3:plain p> MATCH (COK): "is not" ( "processing personal data on  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: "is not" ( "processing personal data on  <…>
term p/notLabelTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
termIndent p> IN: "is not" ( "processing personal data on  <…>
termIndent p> MATCH (COK): "is not" ( "processing personal data on  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
******************* / binary(Or)                                                                           :3_3:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :3_3:UnDeeper:
******************* / binary(And)                                                                          :3_3:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :3_3:UnDeeper:
******************* / binary(SetLess)                                                                      :3_3:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :3_3:UnDeeper:
******************* / binary(SetPlus)                                                                      :3_3:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :3_3:UnDeeper:
expression> IN: "is not" ( "processing personal data on  <…>
expression> MATCH (COK): "is not" ( "processing personal data on  <…>
expression> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
ppp inner> IN: "is not" ( "processing personal data on  <…>
ppp inner> MATCH (COK): "is not" ( "processing personal data on  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
manyIndentation/leaf?> IN: "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> MATCH (COK): "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
**************** / myindented-UnDeeper                                                                        :3_3:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:Must:
someIndentation> IN: ( "is not" ( "processing personal data o <…>
someIndentation> MATCH (COK): ( "is not" ( "processing personal data o <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/notLabelTerm> IN: ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
termIndent p> IN: ( "is not" ( "processing personal data o <…>
termIndent p> MATCH (COK): ( "is not" ( "processing personal data o <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :3_1:Must:
************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :3_1:Must:
************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :3_1:Must:
************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :3_1:Must:
expression> IN: ( "is not" ( "processing personal data o <…>
expression> MATCH (COK): ( "is not" ( "processing personal data o <…>
expression> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
ppp inner> IN: ( "is not" ( "processing personal data o <…>
ppp inner> MATCH (COK): ( "is not" ( "processing personal data o <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "is not" ( "processing personal data o <…>
pBSR> MATCH (COK): ( "is not" ( "processing personal data o <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :3_1:Must:
******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :3_1:Must:
preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :3_1:Must:
******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :3_1:Must:
preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :3_1:Must:
******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :3_1:Must:
preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :3_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :3_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :3_1:Must:
******* / pDT                                                                                                     :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :3_2:GoDeeper:
******** / |>| calling $>>                                                                                        :3_2:GoDeeper:
********* / |>>/recurse                                                                                          :3_2:GoDeeper:
********** / |>>/recurse                                                                                         :3_2:Other "with:
|>>/recurse> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=21:
|>>/recurse> unexpected "without undue delay"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "without undue delay" Expecting: (                       :3_2:Other "with:
********** / |>>/base                                                                                            :3_2:Other "with:
*********** / pTemporal/eventually                                                                              :3_2:Other "with:
pTemporal/eventually> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=21:
pTemporal/eventually> unexpected "without undue delay"
pTemporal/eventually> expecting EVENTUALLY

*********** \ !Unconsumed Error: pTemporal/eventually: Unexpected "without undue delay" Expecting: EVENTUALLY   :3_2:Other "with:
*********** / pTemporal/specifically                                                                            :3_2:Other "with:
************ / $>|                                                                                             :3_2:Other "with:
$>|> IN: "without undue delay" ) UPON ( "becoming <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=21:
$>|> unexpected "without undue delay"
$>|> expecting AFTER, BEFORE, BY, or ON

************ \ !Unconsumed Error: $>|: Unexpected "without undue delay" Expecting: BEFORE AFTER BY ON          :3_2:Other "with:
pTemporal/specifically> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=21:
pTemporal/specifically> unexpected "without undue delay"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********** \ !Unconsumed Error: pTemporal/specifically: Unexpected "without undue delay" Expecting: BEFORE AFTER BY ON :3_2:Other "with:
*********** / pTemporal/vaguely                                                                                 :3_2:Other "with:
pTemporal/vaguely> IN: "without undue delay" ) UPON ( "becoming <…>
pTemporal/vaguely> MATCH (COK): "without undue delay"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "without undue delay"),[])

*********** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "without undue delay")     :4_2:UnDeeper:
*********** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_2:UnDeeper:
|>>/base> IN: "without undue delay" ) UPON ( "becoming <…>
|>>/base> MATCH (COK): "without undue delay"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0),[])

********** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),0)     :4_2:UnDeeper:
|>>/recurse> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>>/recurse> MATCH (COK): ( "without undue delay"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)    :4_2:UnDeeper:
|>| calling $>>> IN: ( "without undue delay" ) UPON ( "becomi <…>
|>| calling $>>> MATCH (COK): ( "without undue delay"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "without undue delay")),1)  :4_2:UnDeeper:
******** / undeepers                                                                                                :4_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :4_2:UnDeeper:
********* > sameLine: success!                                                                                  :4_1:Upon:
undeepers> IN: ) UPON ( "becoming aware a data breach i <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :4_1:Upon:
pDT> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDT> MATCH (COK): MUST ( "without undue delay" )
pDT> VALUE: ((DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TVague (Just 0) "without undue delay"))                :4_1:Upon:
******* / WHERE                                                                                                   :4_1:Upon:
WHERE> IN: UPON ( "becoming aware a data breach inv <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected UPON
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected UPON Expecting: WHERE                                              :4_1:Upon:
******* / preambleParamText:[Having]                                                                              :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: HAVING                                             :4_1:Upon:
preambleParamText:[Having]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected UPON
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UPON Expecting: HAVING                        :4_1:Upon:
******* / preambleParamText:[Given]                                                                               :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected UPON
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected UPON Expecting: GIVEN                                              :4_1:Upon:
preambleParamText:[Given]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected UPON
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UPON Expecting: GIVEN                          :4_1:Upon:
******* / preambleParamText:[Upon]                                                                                :4_1:Upon:
******** / $>|                                                                                                   :4_1:Upon:
$>|> IN: UPON ( "becoming aware a data breach inv <…>
$>|> MATCH (COK): UPON
$>|> VALUE: (Upon,[])

******** \ $>| has returned Upon                                                                                  :4_2:GoDeeper:
******** / |>| calling $>>                                                                                        :4_2:GoDeeper:
********* / |>>/recurse                                                                                          :4_2:GoDeeper:
********** / |>>/recurse                                                                                         :4_2:Other "beco:
|>>/recurse> IN: "becoming aware a data breach involving  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=25:
|>>/recurse> unexpected "becoming aware a data breach involving a client Organisation may have occurred"
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected "becoming aware a data breach involving a client Organisation may have occurred" Expecting: ( :4_2:Other "beco:
********** / |>>/base                                                                                            :4_2:Other "beco:
*********** / pParamText                                                                                        :4_2:Other "beco:
************ / pParamText(flat) first line: pKeyValues                                                         :4_2:Other "beco:
************* / pKeyValuesAka                                                                                 :4_2:Other "beco:
************** / slAKA                                                                                       :4_2:Other "beco:
*************** / $*|                                                                                       :4_2:Other "beco:
**************** / slAKA base                                                                              :4_2:Other "beco:
***************** / slKeyValues                                                                           :4_2:Other "beco:
****************** / $*|                                                                                 :4_2:Other "beco:
******************* / someSL                                                                            :4_2:Other "beco:
someSL> IN: "becoming aware a data breach involving  <…>
someSL> MATCH (COK): "becoming aware a data breach involving  <…>
someSL> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

******************* \ someSL has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((["becoming aware a data breach involving a client Organisation may have occurred"],0),[])

****************** \ $*| has returned (["becoming aware a data breach involving a client Organisation may have occurred"],0) :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / |?| optional something                                                             :5_2:UnDeeper:
******************** / |>>/recurse                                                                      :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :5_2:UnDeeper:
******************** / |>>/base                                                                         :5_2:UnDeeper:
********************* / slTypeSig                                                                      :5_2:UnDeeper:
********************** / $>|                                                                          :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting :: or IS

********************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                        :5_2:UnDeeper:
slTypeSig> IN: ) WHEN ( "the data breach occurs on or a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=26:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

********************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                    :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting :: or IS

******************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                       :5_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                    :5_2:UnDeeper:
******************* > |>>/base got Nothing                                                               :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

****************** \ |>>/base has returned (Nothing,0)                                                    :5_2:UnDeeper:
slKeyValues> IN: "becoming aware a data breach involving  <…>
slKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
slKeyValues> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

***************** \ slKeyValues has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
slAKA base> IN: "becoming aware a data breach involving  <…>
slAKA base> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

**************** \ slAKA base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
$*|> IN: "becoming aware a data breach involving  <…>
$*|> MATCH (COK): "becoming aware a data breach involving  <…>
$*|> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

*************** \ $*| has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :5_2:UnDeeper:
*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional akapart                                                                   :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / PAKA/akapart                                                                       :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
********************* / Aka Token                                                                      :5_2:UnDeeper:
Aka Token> IN: ) WHEN ( "the data breach occurs on or a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=26:
Aka Token> unexpected )
Aka Token> expecting AKA

********************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                      :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting AKA

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                              :5_2:UnDeeper:
PAKA/akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=26:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                       :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting AKA

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                             :5_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional akapart> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************** \ slAKA optional akapart has returned (Nothing,0)                                          :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** / |>>/recurse                                                                                :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                  :5_2:UnDeeper:
*************** / |>>/base                                                                                   :5_2:UnDeeper:
**************** / slAKA optional typically                                                                 :5_2:UnDeeper:
***************** / |?| optional something                                                                 :5_2:UnDeeper:
****************** / |>>/recurse                                                                          :5_2:UnDeeper:
|>>/recurse> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :5_2:UnDeeper:
****************** / |>>/base                                                                             :5_2:UnDeeper:
******************* / typically                                                                          :5_2:UnDeeper:
******************** / $>|                                                                              :5_2:UnDeeper:
$>|> IN: ) WHEN ( "the data breach occurs on or a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=26:
$>|> unexpected )
$>|> expecting TYPICALLY

******************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                        :5_2:UnDeeper:
typically> IN: ) WHEN ( "the data breach occurs on or a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=26:
typically> unexpected )
typically> expecting TYPICALLY

******************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                    :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=26:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                       :5_2:UnDeeper:
|?| optional something> IN: ) WHEN ( "the data breach occurs on or a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************** \ |?| optional something has returned (Nothing,0)                                        :5_2:UnDeeper:
slAKA optional typically> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************** \ slAKA optional typically has returned (Nothing,0)                                        :5_2:UnDeeper:
**************** > |>>/base got Nothing                                                                     :5_2:UnDeeper:
|>>/base> IN: ) WHEN ( "the data breach occurs on or a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************** \ |>>/base has returned (Nothing,0)                                                          :5_2:UnDeeper:
*************** > slAKA: proceeding after base and entityalias are retrieved ...                             :5_2:UnDeeper:
*************** > pAKA: entityalias = Nothing                                                                :5_2:UnDeeper:
slAKA> IN: "becoming aware a data breach involving  <…>
slAKA> MATCH (COK): "becoming aware a data breach involving  <…>
slAKA> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0),[])

************** \ slAKA has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),0) :5_2:UnDeeper:
************** / undeepers                                                                                    :5_2:UnDeeper:
*************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                     :5_2:UnDeeper:
*************** > sameLine: success!                                                                         :5_2:UnDeeper:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************** \ undeepers has returned ()                                                                    :5_2:UnDeeper:
pKeyValuesAka> IN: "becoming aware a data breach involving  <…>
pKeyValuesAka> MATCH (COK): "becoming aware a data breach involving  <…>
pKeyValuesAka> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************* \ pKeyValuesAka has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
pParamText(flat) first line: pKeyValues> IN: "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText(flat) first line: pKeyValues> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing),[])

************ \ pParamText(flat) first line: pKeyValues has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :5_2:UnDeeper:
************ / pParamText(flat) subsequent lines: sameMany pKeyValues                                           :5_2:UnDeeper:
************* / manyIndentation/leaf?                                                                          :5_2:UnDeeper:
************** / sameMany                                                                                     :5_2:UnDeeper:
*************** / pKeyValuesAka                                                                              :5_2:UnDeeper:
**************** / slAKA                                                                                    :5_2:UnDeeper:
***************** / $*|                                                                                    :5_2:UnDeeper:
****************** / slAKA base                                                                           :5_2:UnDeeper:
******************* / slKeyValues                                                                        :5_2:UnDeeper:
******************** / $*|                                                                              :5_2:UnDeeper:
********************* / someSL                                                                         :5_2:UnDeeper:
********************** / pNumAsText                                                                   :5_2:UnDeeper:
pNumAsText> IN: ) WHEN ( "the data breach occurs on or a <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=26:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :5_2:UnDeeper:
someSL> IN: ) WHEN ( "the data breach occurs on or a <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=26:
someSL> unexpected )
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number        :5_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number             :5_2:UnDeeper:
slKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=26:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number       :5_2:UnDeeper:
slAKA base> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=26:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number          :5_2:UnDeeper:
$*|> IN: ) WHEN ( "the data breach occurs on or a <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=26:
$*|> unexpected )
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :5_2:UnDeeper:
slAKA> IN: ) WHEN ( "the data breach occurs on or a <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=26:
slAKA> unexpected )
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                   :5_2:UnDeeper:
pKeyValuesAka> IN: ) WHEN ( "the data breach occurs on or a <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=26:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number             :5_2:UnDeeper:
sameMany> IN: ) WHEN ( "the data breach occurs on or a <…>
sameMany> MATCH (EOK): <EMPTY>
sameMany> VALUE: ([],[])

************** \ sameMany has returned []                                                                     :5_2:UnDeeper:
manyIndentation/leaf?> IN: ) WHEN ( "the data breach occurs on or a <…>
manyIndentation/leaf?> MATCH (EOK): <EMPTY>
manyIndentation/leaf?> VALUE: ([],[])

************* \ manyIndentation/leaf? has returned []                                                          :5_2:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: ) WHEN ( "the data breach occurs on or a <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (EOK): <EMPTY>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([],[])

************ \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                           :5_2:UnDeeper:
pParamText> IN: "becoming aware a data breach involving  <…>
pParamText> MATCH (COK): "becoming aware a data breach involving  <…>
pParamText> VALUE: (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],[])

*********** \ pParamText has returned ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
*********** > |>>/base got ("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [] :5_2:UnDeeper:
|>>/base> IN: "becoming aware a data breach involving  <…>
|>>/base> MATCH (COK): "becoming aware a data breach involving  <…>
|>>/base> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0),[])

********** \ |>>/base has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],0) :5_2:UnDeeper:
|>>/recurse> IN: ( "becoming aware a data breach involvin <…>
|>>/recurse> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>>/recurse> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

********* \ |>>/recurse has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
|>| calling $>>> IN: ( "becoming aware a data breach involvin <…>
|>| calling $>>> MATCH (COK): ( "becoming aware a data breach involvin <…>
|>| calling $>>> VALUE: ((("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1),[])

******** \ |>| calling $>> has returned (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| [],1) :5_2:UnDeeper:
******** / undeepers                                                                                                :5_2:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                 :5_2:UnDeeper:
********* > sameLine: success!                                                                                  :5_1:When:
undeepers> IN: ) WHEN ( "the data breach occurs on or a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :5_1:When:
preambleParamText:[Upon]> IN: UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> MATCH (COK): UPON ( "becoming aware a data breach inv <…>
preambleParamText:[Upon]> VALUE: ((Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []),[])

******* \ preambleParamText:[Upon] has returned (Upon,("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []) :5_1:When:
******* / preambleParamText:[Upon]                                                                                :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: UPON                                               :5_1:When:
preambleParamText:[Upon]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected WHEN
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected WHEN Expecting: UPON                            :5_1:When:
******* / WHERE                                                                                                   :5_1:When:
WHERE> IN: WHEN ( "the data breach occurs on or aft <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected WHEN
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected WHEN Expecting: WHERE                                              :5_1:When:
******* / preambleParamText:[Having]                                                                              :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: HAVING                                             :5_1:When:
preambleParamText:[Having]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected WHEN
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected WHEN Expecting: HAVING                        :5_1:When:
******* / preambleParamText:[Given]                                                                               :5_1:When:
******** / $>|                                                                                                   :5_1:When:
$>|> IN: WHEN ( "the data breach occurs on or aft <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected WHEN
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected WHEN Expecting: GIVEN                                              :5_1:When:
preambleParamText:[Given]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected WHEN
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected WHEN Expecting: GIVEN                          :5_1:When:
******* / preambleBoolStructR [Unless]                                                                            :5_1:When:
preambleBoolStructR [Unless]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=27:
preambleBoolStructR [Unless]> unexpected WHEN
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected WHEN Expecting: UNLESS                      :5_1:When:
******* / preambleBoolStructR [When,If]                                                                           :5_1:When:
******** / pBSR                                                                                                   :5_2:GoDeeper:
********* / ppp inner                                                                                            :5_2:GoDeeper:
********** / expression                                                                                         :5_2:GoDeeper:
*********** / termIndent p                                                                                     :5_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / someSL                                                                                     :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :5_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :5_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :5_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "the data breach occurs on or after th <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=28:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :5_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / someSL                                                                                     :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :5_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :5_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :5_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "the data breach occurs on or after th <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=28:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :5_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :5_2:GoDeeper:
************* > |<|                                                                                          :5_2:GoDeeper:
************* > |<* starting                                                                                 :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / someSL                                                                                     :5_2:GoDeeper:
*************** / pNumAsText                                                                               :5_2:GoDeeper:
pNumAsText> IN: ( "the data breach occurs on or after th <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :5_2:GoDeeper:
someSL> IN: ( "the data breach occurs on or after th <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :5_2:GoDeeper:
$*|> IN: ( "the data breach occurs on or after th <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :5_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "the data breach occurs on or after th <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :5_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :5_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :5_2:GoDeeper:
************** / someIndentation                                                                            :5_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :5_2:GoDeeper:
myindented-GoDeeper> IN: ( "the data breach occurs on or after th <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                 :5_2:Other "the:
*************** / manyIndentation/leaf?                                                                     :5_2:Other "the:
**************** / ppp inner                                                                               :5_2:Other "the:
***************** / expression                                                                            :5_2:Other "the:
****************** / termIndent p                                                                        :5_2:Other "the:
******************* / term p/1a:label ends directly above next line                                     :5_2:Other "the:
******************** / $*|                                                                             :5_2:Other "the:
********************* / someSL                                                                        :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************* / pNumAsText                                                                     :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

********************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                  :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (CERR): "the data breach occurs on or after the  <…>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting ( or other text or number

******************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number             :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=30:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************* \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_2:UnDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                          :5_2:Other "the:
******************** / $*|                                                                             :5_2:Other "the:
********************* / someSL                                                                        :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
******************** / matching EOL                                                                     :6_2:UnDeeper:
matching EOL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=30:
matching EOL> unexpected )
matching EOL> expecting EOL

******************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                     :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=30:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************* \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_2:UnDeeper:
******************* / term p/1c:label ends to the right of line below                                   :5_2:Other "the:
******************** > |<|                                                                             :5_2:Other "the:
******************** > |<* starting                                                                    :5_2:Other "the:
******************** / $*|                                                                             :5_2:Other "the:
********************* / someSL                                                                        :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************* \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

******************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
******************** / |<*/parent                                                                       :6_2:UnDeeper:
********************* > |<*/recurse                                                                    :6_2:UnDeeper:
********************* / ppp inner                                                                   :6_1:Do:
********************** / expression                                                                :6_1:Do:
*********************** / termIndent p                                                            :6_1:Do:
************************ / term p/1a:label ends directly above next line                         :6_1:Do:
************************* / $*|                                                                 :6_1:Do:
************************** / someSL                                                            :6_1:Do:
*************************** / pNumAsText                                                      :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
term p/1a:label ends directly above next line> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=31:
term p/1a:label ends directly above next line> unexpected DO
term p/1a:label ends directly above next line> expecting other text or number

************************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected DO Expecting: other text or number :6_1:Do:
************************ / term p/1b:label ends to the left of line below, with EOL              :6_1:Do:
************************* / $*|                                                                 :6_1:Do:
************************** / someSL                                                            :6_1:Do:
*************************** / pNumAsText                                                      :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
term p/1b:label ends to the left of line below, with EOL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=31:
term p/1b:label ends to the left of line below, with EOL> unexpected DO
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected DO Expecting: other text or number :6_1:Do:
************************ / term p/1c:label ends to the right of line below                       :6_1:Do:
************************* > |<|                                                                 :6_1:Do:
************************* > |<* starting                                                        :6_1:Do:
************************* / $*|                                                                 :6_1:Do:
************************** / someSL                                                            :6_1:Do:
*************************** / pNumAsText                                                      :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

*************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number  :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
term p/1c:label ends to the right of line below> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=31:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting other text or number

************************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: other text or number :6_1:Do:
************************ / term p/notLabelTerm                                                   :6_1:Do:
************************* / term p/2:someIndentation expr p                                     :6_1:Do:
************************** / someIndentation                                                   :6_1:Do:
*************************** / myindented-GoDeeper                                             :6_1:Do:
myindented-GoDeeper> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=31:
myindented-GoDeeper> unexpected DO
myindented-GoDeeper> expecting (

*************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected DO Expecting: ( :6_1:Do:
someIndentation> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected DO
someIndentation> expecting (

************************** \ !Unconsumed Error: someIndentation: Unexpected DO Expecting: (    :6_1:Do:
term p/2:someIndentation expr p> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=31:
term p/2:someIndentation expr p> unexpected DO
term p/2:someIndentation expr p> expecting (

************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected DO Expecting: ( :6_1:Do:
************************* / term p/3:plain p                                                    :6_1:Do:
************************** / pRelPred                                                          :6_1:Do:
*************************** / slRelPred                                                       :6_1:Do:
**************************** / nested simpleHorn                                             :6_1:Do:
***************************** > |^|                                                         :6_1:Do:
***************************** / $*|                                                         :6_1:Do:
****************************** / slMultiTerm                                               :6_1:Do:
******************************* / someSL                                                  :6_1:Do:
******************************** / pNumAsText                                            :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
nested simpleHorn> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

**************************** \ !Unconsumed Error: nested simpleHorn: Unexpected DO Expecting: other text or number :6_1:Do:
**************************** / RPConstraint                                                  :6_1:Do:
***************************** / $*|                                                         :6_1:Do:
****************************** / slMultiTerm                                               :6_1:Do:
******************************* / someSL                                                  :6_1:Do:
******************************** / pNumAsText                                            :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
RPConstraint> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

**************************** \ !Unconsumed Error: RPConstraint: Unexpected DO Expecting: other text or number :6_1:Do:
**************************** / RPBoolStructR                                                 :6_1:Do:
***************************** / $*|                                                         :6_1:Do:
****************************** / slMultiTerm                                               :6_1:Do:
******************************* / someSL                                                  :6_1:Do:
******************************** / pNumAsText                                            :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
RPBoolStructR> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

**************************** \ !Unconsumed Error: RPBoolStructR: Unexpected DO Expecting: other text or number :6_1:Do:
**************************** / RPMT                                                          :6_1:Do:
***************************** / $*|                                                         :6_1:Do:
****************************** / slAKA                                                     :6_1:Do:
******************************* / $*|                                                     :6_1:Do:
******************************** / slAKA base                                            :6_1:Do:
********************************* / slMultiTerm                                         :6_1:Do:
********************************** / someSL                                            :6_1:Do:
*********************************** / pNumAsText                                      :6_1:Do:
pNumAsText> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected DO
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_1:Do:
someSL> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected DO
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_1:Do:
slMultiTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

********************************* \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_1:Do:
slAKA base> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected DO
slAKA base> expecting other text or number

******************************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
slAKA> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected DO
slAKA> expecting other text or number

****************************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting other text or number

***************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_1:Do:
RPMT> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected DO
RPMT> expecting other text or number

**************************** \ !Unconsumed Error: RPMT: Unexpected DO Expecting: other text or number :6_1:Do:
slRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected DO
slRelPred> expecting other text or number

*************************** \ !Unconsumed Error: slRelPred: Unexpected DO Expecting: other text or number :6_1:Do:
pRelPred> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected DO
pRelPred> expecting other text or number

************************** \ !Unconsumed Error: pRelPred: Unexpected DO Expecting: other text or number :6_1:Do:
term p/3:plain p> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=31:
term p/3:plain p> unexpected DO
term p/3:plain p> expecting other text or number

************************* \ !Unconsumed Error: term p/3:plain p: Unexpected DO Expecting: other text or number :6_1:Do:
term p/notLabelTerm> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=31:
term p/notLabelTerm> unexpected DO
term p/notLabelTerm> expecting ( or term

************************ \ !Unconsumed Error: term p/notLabelTerm: Unexpected DO Expecting: ( term :6_1:Do:
termIndent p> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=31:
termIndent p> unexpected DO
termIndent p> expecting (, other text or number, or term

*********************** \ !Unconsumed Error: termIndent p: Unexpected DO Expecting: ( other text or number term :6_1:Do:
expression> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=31:
expression> unexpected DO
expression> expecting expression

********************** \ !Unconsumed Error: expression: Unexpected DO Expecting: expression        :6_1:Do:
ppp inner> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=31:
ppp inner> unexpected DO
ppp inner> expecting expression

********************* \ !Unconsumed Error: ppp inner: Unexpected DO Expecting: expression           :6_1:Do:
********************* / withPrePost                                                                 :6_1:Do:
********************** > |<* starting                                                              :6_1:Do:
********************** / $*|                                                                       :6_1:Do:
*********************** / pre part                                                                :6_1:Do:
pre part> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected DO
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text      :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text             :6_1:Do:
withPrePost> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=31:
withPrePost> unexpected DO
withPrePost> expecting ( or Other text

********************* \ !Unconsumed Error: withPrePost: Unexpected DO Expecting: ( Other text       :6_1:Do:
********************* / $*|                                                                         :6_1:Do:
********************** / pre part                                                                  :6_1:Do:
pre part> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected DO
pre part> expecting ( or Other text

********************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text        :6_1:Do:
$*|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected DO
$*|> expecting ( or Other text

********************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text               :6_1:Do:
********************* / |<*/base                                                                       :6_2:UnDeeper:
********************** / ppp inner                                                                    :6_2:UnDeeper:
*********************** / expression                                                                 :6_2:UnDeeper:
************************ / termIndent p                                                             :6_2:UnDeeper:
************************* / term p/1a:label ends directly above next line                          :6_2:UnDeeper:
************************** / $*|                                                                  :6_2:UnDeeper:
*************************** / someSL                                                             :6_2:UnDeeper:
**************************** / pNumAsText                                                       :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=30:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
************************* / term p/1b:label ends to the left of line below, with EOL               :6_2:UnDeeper:
************************** / $*|                                                                  :6_2:UnDeeper:
*************************** / someSL                                                             :6_2:UnDeeper:
**************************** / pNumAsText                                                       :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=30:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
************************* / term p/1c:label ends to the right of line below                        :6_2:UnDeeper:
************************** > |<|                                                                  :6_2:UnDeeper:
************************** > |<* starting                                                         :6_2:UnDeeper:
************************** / $*|                                                                  :6_2:UnDeeper:
*************************** / someSL                                                             :6_2:UnDeeper:
**************************** / pNumAsText                                                       :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=30:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
************************* / term p/notLabelTerm                                                    :6_2:UnDeeper:
************************** / term p/2:someIndentation expr p                                      :6_2:UnDeeper:
*************************** / someIndentation                                                    :6_2:UnDeeper:
**************************** / myindented-GoDeeper                                              :6_2:UnDeeper:
myindented-GoDeeper> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=30:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_2:UnDeeper:
someIndentation> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected )
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (      :6_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_2:UnDeeper:
************************** / term p/3:plain p                                                     :6_2:UnDeeper:
*************************** / pRelPred                                                           :6_2:UnDeeper:
**************************** / slRelPred                                                        :6_2:UnDeeper:
***************************** / nested simpleHorn                                              :6_2:UnDeeper:
****************************** > |^|                                                          :6_2:UnDeeper:
****************************** / $*|                                                          :6_2:UnDeeper:
******************************* / slMultiTerm                                                :6_2:UnDeeper:
******************************** / someSL                                                   :6_2:UnDeeper:
********************************* / pNumAsText                                             :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=30:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
nested simpleHorn> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=30:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
***************************** / RPConstraint                                                   :6_2:UnDeeper:
****************************** / $*|                                                          :6_2:UnDeeper:
******************************* / slMultiTerm                                                :6_2:UnDeeper:
******************************** / someSL                                                   :6_2:UnDeeper:
********************************* / pNumAsText                                             :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=30:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPConstraint> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
***************************** / RPBoolStructR                                                  :6_2:UnDeeper:
****************************** / $*|                                                          :6_2:UnDeeper:
******************************* / slMultiTerm                                                :6_2:UnDeeper:
******************************** / someSL                                                   :6_2:UnDeeper:
********************************* / pNumAsText                                             :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=30:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPBoolStructR> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
***************************** / RPMT                                                           :6_2:UnDeeper:
****************************** / $*|                                                          :6_2:UnDeeper:
******************************* / slAKA                                                      :6_2:UnDeeper:
******************************** / $*|                                                      :6_2:UnDeeper:
********************************* / slAKA base                                             :6_2:UnDeeper:
********************************** / slMultiTerm                                          :6_2:UnDeeper:
*********************************** / someSL                                             :6_2:UnDeeper:
************************************ / pNumAsText                                       :6_2:UnDeeper:
pNumAsText> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=30:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_2:UnDeeper:
someSL> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=30:
someSL> unexpected )
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slMultiTerm> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=30:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=30:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slAKA> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=30:
slAKA> unexpected )
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
RPMT> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=30:
RPMT> unexpected )
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
slRelPred> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=30:
slRelPred> unexpected )
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
pRelPred> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=30:
pRelPred> unexpected )
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/3:plain p> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=30:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_2:UnDeeper:
term p/notLabelTerm> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=30:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_2:UnDeeper:
termIndent p> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=30:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_2:UnDeeper:
expression> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=30:
expression> unexpected )
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression          :6_2:UnDeeper:
ppp inner> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=30:
ppp inner> unexpected )
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression             :6_2:UnDeeper:
********************** / withPrePost                                                                  :6_2:UnDeeper:
*********************** > |<* starting                                                               :6_2:UnDeeper:
*********************** / $*|                                                                        :6_2:UnDeeper:
************************ / pre part                                                                 :6_2:UnDeeper:
pre part> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=30:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :6_2:UnDeeper:
withPrePost> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=30:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text         :6_2:UnDeeper:
********************** / $*|                                                                          :6_2:UnDeeper:
*********************** / pre part                                                                   :6_2:UnDeeper:
pre part> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=30:
pre part> unexpected )
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text          :6_2:UnDeeper:
$*|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=30:
$*|> unexpected )
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text                 :6_2:UnDeeper:
|<*/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=30:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************* \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_2:UnDeeper:
|<*/parent> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=31:
|<*/parent> unexpected DO
|<*/parent> expecting (, ), Other text, or expression

******************** \ !Unconsumed Error: |<*/parent: Unexpected DO Expecting: ( ( ) Other text expression :6_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "the data breach occurs on or after the  <…>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=31:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************* \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: ( ( ( ) Other text expression :6_2:UnDeeper:
******************* / term p/notLabelTerm                                                               :5_2:Other "the:
******************** / term p/2:someIndentation expr p                                                 :5_2:Other "the:
********************* / someIndentation                                                               :5_2:Other "the:
********************** / myindented-GoDeeper                                                         :5_2:Other "the:
myindented-GoDeeper> IN: "the data breach occurs on or after the  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=29:
myindented-GoDeeper> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
myindented-GoDeeper> expecting (

********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :5_2:Other "the:
someIndentation> IN: "the data breach occurs on or after the  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=29:
someIndentation> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
someIndentation> expecting (

********************* \ !Unconsumed Error: someIndentation: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :5_2:Other "the:
term p/2:someIndentation expr p> IN: "the data breach occurs on or after the  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=29:
term p/2:someIndentation expr p> unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"
term p/2:someIndentation expr p> expecting (

******************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13" Expecting: ( :5_2:Other "the:
******************** / term p/3:plain p                                                                :5_2:Other "the:
********************* / pRelPred                                                                      :5_2:Other "the:
********************** / slRelPred                                                                   :5_2:Other "the:
*********************** / nested simpleHorn                                                         :5_2:Other "the:
************************ > |^|                                                                     :5_2:Other "the:
************************ / $*|                                                                     :5_2:Other "the:
************************* / slMultiTerm                                                           :5_2:Other "the:
************************** / someSL                                                              :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************ / |^| deeps                                                                :6_2:UnDeeper:
|^| deeps> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|^| deeps> MATCH (COK): )
|^| deeps> VALUE: (([()],-1),[])

************************ \ |^| deeps has returned ([()],-1)                                      :6_1:Do:
nested simpleHorn> IN: "the data breach occurs on or after the  <…>
nested simpleHorn> MATCH (CERR): "the data breach occurs on or after the  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

*********************** \ !Consumed Error: nested simpleHorn: Unexpected DO Expecting: MEANS )    :6_1:Do:
*********************** / RPConstraint                                                              :5_2:Other "the:
************************ / $*|                                                                     :5_2:Other "the:
************************* / slMultiTerm                                                           :5_2:Other "the:
************************** / someSL                                                              :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************ / |>| calling $>>                                                          :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :6_2:UnDeeper:
************************* / |>>/base                                                               :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPConstraint> IN: "the data breach occurs on or after the  <…>
RPConstraint> MATCH (CERR): "the data breach occurs on or after the  <…>
RPConstraint> ERROR:
RPConstraint> offset=30:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
*********************** / RPBoolStructR                                                             :5_2:Other "the:
************************ / $*|                                                                     :5_2:Other "the:
************************* / slMultiTerm                                                           :5_2:Other "the:
************************** / someSL                                                              :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************ / |>| calling $>>                                                          :6_2:UnDeeper:
************************* / |>>/recurse                                                            :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :6_2:UnDeeper:
************************* / |>>/base                                                               :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_2:UnDeeper:
|>| calling $>>> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=30:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
RPBoolStructR> IN: "the data breach occurs on or after the  <…>
RPBoolStructR> MATCH (CERR): "the data breach occurs on or after the  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=30:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_2:UnDeeper:
*********************** / RPMT                                                                      :5_2:Other "the:
************************ / $*|                                                                     :5_2:Other "the:
************************* / slAKA                                                                 :5_2:Other "the:
************************** / $*|                                                                 :5_2:Other "the:
*************************** / slAKA base                                                        :5_2:Other "the:
**************************** / slMultiTerm                                                     :5_2:Other "the:
***************************** / someSL                                                        :5_2:Other "the:
someSL> IN: "the data breach occurs on or after the  <…>
someSL> MATCH (COK): "the data breach occurs on or after the  <…>
someSL> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

***************************** \ someSL has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slMultiTerm> IN: "the data breach occurs on or after the  <…>
slMultiTerm> MATCH (COK): "the data breach occurs on or after the  <…>
slMultiTerm> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

**************************** \ slMultiTerm has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slAKA base> IN: "the data breach occurs on or after the  <…>
slAKA base> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA base> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*************************** \ slAKA base has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************** \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
************************** / |>>/recurse                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :6_2:UnDeeper:
************************** / |>>/base                                                             :6_2:UnDeeper:
*************************** / slAKA optional akapart                                             :6_2:UnDeeper:
**************************** / |?| optional something                                           :6_2:UnDeeper:
***************************** / |>>/recurse                                                    :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :6_2:UnDeeper:
***************************** / |>>/base                                                       :6_2:UnDeeper:
****************************** / PAKA/akapart                                                 :6_2:UnDeeper:
******************************* / $>|                                                        :6_2:UnDeeper:
******************************** / Aka Token                                                :6_2:UnDeeper:
Aka Token> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=30:
Aka Token> unexpected )
Aka Token> expecting AKA

******************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting AKA

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA        :6_2:UnDeeper:
PAKA/akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=30:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

****************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting AKA

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA       :6_2:UnDeeper:
|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :6_2:UnDeeper:
slAKA optional akapart> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional akapart has returned (Nothing,0)                    :6_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :6_2:UnDeeper:
************************** / |>>/recurse                                                          :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :6_2:UnDeeper:
************************** / |>>/base                                                             :6_2:UnDeeper:
*************************** / slAKA optional typically                                           :6_2:UnDeeper:
**************************** / |?| optional something                                           :6_2:UnDeeper:
***************************** / |>>/recurse                                                    :6_2:UnDeeper:
|>>/recurse> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected )
|>>/recurse> expecting (

***************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (      :6_2:UnDeeper:
***************************** / |>>/base                                                       :6_2:UnDeeper:
****************************** / typically                                                    :6_2:UnDeeper:
******************************* / $>|                                                        :6_2:UnDeeper:
$>|> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=30:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************* \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY  :6_2:UnDeeper:
typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=30:
typically> unexpected )
typically> expecting TYPICALLY

****************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=30:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

***************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_2:UnDeeper:
|?| optional something> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************************** \ |?| optional something has returned (Nothing,0)                  :6_2:UnDeeper:
slAKA optional typically> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

*************************** \ slAKA optional typically has returned (Nothing,0)                  :6_2:UnDeeper:
*************************** > |>>/base got Nothing                                               :6_2:UnDeeper:
|>>/base> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************** \ |>>/base has returned (Nothing,0)                                    :6_2:UnDeeper:
************************** > slAKA: proceeding after base and entityalias are retrieved ...       :6_2:UnDeeper:
************************** > pAKA: entityalias = Nothing                                          :6_2:UnDeeper:
slAKA> IN: "the data breach occurs on or after the  <…>
slAKA> MATCH (COK): "the data breach occurs on or after the  <…>
slAKA> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************* \ slAKA has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
$*|> IN: "the data breach occurs on or after the  <…>
$*|> MATCH (COK): "the data breach occurs on or after the  <…>
$*|> VALUE: ((["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

************************ \ $*| has returned (["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
RPMT> IN: "the data breach occurs on or after the  <…>
RPMT> MATCH (COK): "the data breach occurs on or after the  <…>
RPMT> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

*********************** \ RPMT has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
slRelPred> IN: "the data breach occurs on or after the  <…>
slRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
slRelPred> VALUE: ((RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0),[])

********************** \ slRelPred has returned (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],0) :6_2:UnDeeper:
********************** / undeepers                                                                    :6_2:UnDeeper:
*********************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers     :6_2:UnDeeper:
*********************** > sameLine: success!                                                         :6_2:UnDeeper:
undeepers> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

********************** \ undeepers has returned ()                                                    :6_2:UnDeeper:
pRelPred> IN: "the data breach occurs on or after the  <…>
pRelPred> MATCH (COK): "the data breach occurs on or after the  <…>
pRelPred> VALUE: (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"],[])

********************* \ pRelPred has returned RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"] :6_2:UnDeeper:
term p/3:plain p> IN: "the data breach occurs on or after the  <…>
term p/3:plain p> MATCH (COK): "the data breach occurs on or after the  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************** \ term p/3:plain p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
term p/notLabelTerm> IN: "the data breach occurs on or after the  <…>
term p/notLabelTerm> MATCH (COK): "the data breach occurs on or after the  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
termIndent p> IN: "the data breach occurs on or after the  <…>
termIndent p> MATCH (COK): "the data breach occurs on or after the  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
****************** / binary(Or)                                                                           :6_2:UnDeeper:
binary(Or)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=30:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :6_2:UnDeeper:
****************** / binary(And)                                                                          :6_2:UnDeeper:
binary(And)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=30:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :6_2:UnDeeper:
****************** / binary(SetLess)                                                                      :6_2:UnDeeper:
binary(SetLess)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=30:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :6_2:UnDeeper:
****************** / binary(SetPlus)                                                                      :6_2:UnDeeper:
binary(SetPlus)> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=30:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :6_2:UnDeeper:
expression> IN: "the data breach occurs on or after the  <…>
expression> MATCH (COK): "the data breach occurs on or after the  <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

***************** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
ppp inner> IN: "the data breach occurs on or after the  <…>
ppp inner> MATCH (COK): "the data breach occurs on or after the  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
manyIndentation/leaf?> IN: "the data breach occurs on or after the  <…>
manyIndentation/leaf?> MATCH (COK): "the data breach occurs on or after the  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_2:UnDeeper:
*************** / myindented-UnDeeper                                                                        :6_2:UnDeeper:
myindented-UnDeeper> IN: ) DO ( "NOTIFY" ( "the Organisation" ) " <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :6_1:Do:
someIndentation> IN: ( "the data breach occurs on or after th <…>
someIndentation> MATCH (COK): ( "the data breach occurs on or after th <…>
someIndentation> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/2:someIndentation expr p> IN: ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
term p/notLabelTerm> IN: ( "the data breach occurs on or after th <…>
term p/notLabelTerm> MATCH (COK): ( "the data breach occurs on or after th <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
termIndent p> IN: ( "the data breach occurs on or after th <…>
termIndent p> MATCH (COK): ( "the data breach occurs on or after th <…>
termIndent p> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
*********** / binary(Or)                                                                                      :6_1:Do:
binary(Or)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected DO
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected DO Expecting: OR                                      :6_1:Do:
*********** / binary(And)                                                                                     :6_1:Do:
binary(And)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected DO
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected DO Expecting: AND                                    :6_1:Do:
*********** / binary(SetLess)                                                                                 :6_1:Do:
binary(SetLess)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected DO Expecting: LESS                               :6_1:Do:
*********** / binary(SetPlus)                                                                                 :6_1:Do:
binary(SetPlus)> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected DO Expecting: PLUS                               :6_1:Do:
expression> IN: ( "the data breach occurs on or after th <…>
expression> MATCH (COK): ( "the data breach occurs on or after th <…>
expression> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********** \ expression has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
ppp inner> IN: ( "the data breach occurs on or after th <…>
ppp inner> MATCH (COK): ( "the data breach occurs on or after th <…>
ppp inner> VALUE: (MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
pBSR> IN: ( "the data breach occurs on or after th <…>
pBSR> MATCH (COK): ( "the data breach occurs on or after th <…>
pBSR> VALUE: (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]),[])

******** \ pBSR has returned Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"]) :6_1:Do:
preambleBoolStructR [When,If]> IN: WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> MATCH (COK): WHEN ( "the data breach occurs on or aft <…>
preambleBoolStructR [When,If]> VALUE: ((When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])),[])

******* \ preambleBoolStructR [When,If] has returned (When,Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])) :6_1:Do:
******* / preambleBoolStructR [When,If]                                                                           :6_1:Do:
preambleBoolStructR [When,If]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=31:
preambleBoolStructR [When,If]> unexpected DO
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected DO Expecting: IF WHEN                      :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=31:
WHERE> unexpected DO
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                                :6_1:Do:
******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                               :6_1:Do:
preambleParamText:[Having]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=31:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                          :6_1:Do:
******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected DO
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                                :6_1:Do:
preambleParamText:[Given]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=31:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                            :6_1:Do:
******* / preambleBoolStructR [Unless]                                                                            :6_1:Do:
preambleBoolStructR [Unless]> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=31:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                        :6_1:Do:
******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( "NOTIFY" ( "the Organisation" ) "fo <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling pParamText                                                                             :6_2:GoDeeper:
********* / pParamText                                                                                           :6_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :6_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :6_2:GoDeeper:
************ / slAKA                                                                                          :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / slAKA base                                                                                 :6_2:GoDeeper:
*************** / slKeyValues                                                                              :6_2:GoDeeper:
**************** / $*|                                                                                    :6_2:GoDeeper:
***************** / someSL                                                                               :6_2:GoDeeper:
****************** / pNumAsText                                                                         :6_2:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=32:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :6_2:GoDeeper:
someSL> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=32:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :6_2:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :6_2:GoDeeper:
slKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=32:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :6_2:GoDeeper:
slAKA base> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=32:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :6_2:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=32:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
slAKA> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=32:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
pKeyValuesAka> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=32:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :6_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=32:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=32:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :6_2:GoDeeper:
pAction calling pParamText> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=32:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :6_2:GoDeeper:
pDoAction/pAction> IN: ( "NOTIFY" ( "the Organisation" ) "for w <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=32:
pDoAction/pAction> unexpected (
pDoAction/pAction> expecting other text or number

******* \ !Unconsumed Error: pDoAction/pAction: Unexpected ( Expecting: other text or number                       :6_2:GoDeeper:
regulative permutation with deontic-temporal> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-temporal> MATCH (CERR): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=32:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting other text or number

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                :1_1:Every:
******* / WHERE                                                                                                   :1_1:Every:
WHERE> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=0:
WHERE> unexpected EVERY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected EVERY Expecting: WHERE                                             :1_1:Every:
******* / preambleParamText:[Having]                                                                              :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: HAVING                                            :1_1:Every:
preambleParamText:[Having]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=0:
preambleParamText:[Having]> unexpected EVERY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected EVERY Expecting: HAVING                       :1_1:Every:
******* / preambleParamText:[Given]                                                                               :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                             :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                         :1_1:Every:
******* / preambleParamText:[Upon]                                                                                :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                              :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                           :1_1:Every:
******* / preambleBoolStructR [Unless]                                                                            :1_1:Every:
preambleBoolStructR [Unless]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=0:
preambleBoolStructR [Unless]> unexpected EVERY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected EVERY Expecting: UNLESS                     :1_1:Every:
******* / preambleBoolStructR [When,If]                                                                           :1_1:Every:
preambleBoolStructR [When,If]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=0:
preambleBoolStructR [When,If]> unexpected EVERY
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected EVERY Expecting: IF WHEN                   :1_1:Every:
******* / pTemporal/eventually                                                                                    :1_1:Every:
pTemporal/eventually> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=0:
pTemporal/eventually> unexpected EVERY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected EVERY Expecting: EVENTUALLY                         :1_1:Every:
******* / pTemporal/specifically                                                                                  :1_1:Every:
******** / $>|                                                                                                   :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: BEFORE AFTER BY ON                                :1_1:Every:
pTemporal/specifically> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=0:
pTemporal/specifically> unexpected EVERY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected EVERY Expecting: BEFORE AFTER BY ON               :1_1:Every:
******* / pTemporal/vaguely                                                                                       :1_1:Every:
pTemporal/vaguely> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=0:
pTemporal/vaguely> unexpected EVERY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected EVERY Expecting: Other text                            :1_1:Every:
******* / pActor [REvery,RParty,RTokAll]                                                                          :1_1:Every:
******** / someIndentation                                                                                        :1_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :1_2:GoDeeper:
myindented-GoDeeper> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :1_2:Other "Data:
********* / manyIndentation/leaf?                                                                                 :1_2:Other "Data:
********** / pMultiTermAka                                                                                       :1_2:Other "Data:
*********** / pAKA                                                                                              :1_2:Other "Data:
************ / slAKA                                                                                           :1_2:Other "Data:
************* / $*|                                                                                           :1_2:Other "Data:
************** / slAKA base                                                                                  :1_2:Other "Data:
*************** / slMultiTerm                                                                               :1_2:Other "Data:
**************** / someSL                                                                                  :1_2:Other "Data:
***************** / pNumAsText                                                                                :1_4:Aka:
pNumAsText> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected AKA
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected AKA Expecting: number                           :1_4:Aka:
someSL> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
someSL> MATCH (COK): "Data Intermediary"
someSL> VALUE: ((["Data Intermediary"],0),[])

**************** \ someSL has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
slMultiTerm> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slMultiTerm> MATCH (COK): "Data Intermediary"
slMultiTerm> VALUE: ((["Data Intermediary"],0),[])

*************** \ slMultiTerm has returned (["Data Intermediary"],0)                                         :1_3:GoDeeper:
slAKA base> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA base> MATCH (COK): "Data Intermediary"
slAKA base> VALUE: ((["Data Intermediary"],0),[])

************** \ slAKA base has returned (["Data Intermediary"],0)                                            :1_3:GoDeeper:
$*|> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
$*|> MATCH (COK): "Data Intermediary"
$*|> VALUE: ((["Data Intermediary"],0),[])

************* \ $*| has returned (["Data Intermediary"],0)                                                     :1_3:GoDeeper:
************* / |>>/recurse                                                                                    :1_3:GoDeeper:
************** / |>>/recurse                                                                                    :1_4:GoDeeper:
*************** / |>>/recurse                                                                                   :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                                   :1_4:Aka:
*************** / |>>/base                                                                                      :1_4:Aka:
**************** / slAKA optional akapart                                                                      :1_4:Aka:
***************** / |?| optional something                                                                    :1_4:Aka:
****************** / |>>/recurse                                                                             :1_4:Aka:
|>>/recurse> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=5:
|>>/recurse> unexpected AKA
|>>/recurse> expecting (

****************** \ !Unconsumed Error: |>>/recurse: Unexpected AKA Expecting: (                             :1_4:Aka:
****************** / |>>/base                                                                                :1_4:Aka:
******************* / PAKA/akapart                                                                          :1_4:Aka:
******************** / $>|                                                                                 :1_4:Aka:
********************* / Aka Token                                                                         :1_4:Aka:
Aka Token> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
Aka Token> MATCH (COK): AKA
Aka Token> VALUE: (Aka,[])

********************* \ Aka Token has returned Aka                                                         :1_5:GoDeeper:
$>|> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
$>|> MATCH (COK): AKA
$>|> VALUE: (Aka,[])

******************** \ $>| has returned Aka                                                                 :1_5:GoDeeper:
******************** / |>>/recurse                                                                          :1_5:GoDeeper:
********************* / |>>/recurse                                                                         :1_5:Other "You":
|>>/recurse> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=7:
|>>/recurse> unexpected "You"
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected "You" Expecting: (                       :1_5:Other "You":
********************* / |>>/base                                                                            :1_5:Other "You":
********************** / someSL                                                                            :1_5:Other "You":
someSL> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

********************** \ someSL has returned (["You"],0)                                              :2_2:UnDeeper:
********************** > |>>/base got ["You"]                                                         :2_2:UnDeeper:
|>>/base> IN: "You" ) ) ) ) WHICH ( "is not" ( "proces <…>
|>>/base> MATCH (COK): "You"
|>>/base> VALUE: ((["You"],0),[])

********************* \ |>>/base has returned (["You"],0)                                              :2_2:UnDeeper:
|>>/recurse> IN: ( "You" ) ) ) ) WHICH ( "is not" ( "proc <…>
|>>/recurse> MATCH (COK): ( "You"
|>>/recurse> VALUE: ((["You"],1),[])

******************** \ |>>/recurse has returned (["You"],1)                                             :2_2:UnDeeper:
PAKA/akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
PAKA/akapart> MATCH (COK): AKA ( "You"
PAKA/akapart> VALUE: ((["You"],1),[])

******************* \ PAKA/akapart has returned (["You"],1)                                              :2_2:UnDeeper:
******************* > |>>/base got ["You"]                                                               :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((["You"],1),[])

****************** \ |>>/base has returned (["You"],1)                                                    :2_2:UnDeeper:
|?| optional something> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|?| optional something> MATCH (COK): AKA ( "You"
|?| optional something> VALUE: ((Just ["You"],1),[])

***************** \ |?| optional something has returned (Just ["You"],1)                                   :2_2:UnDeeper:
slAKA optional akapart> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
slAKA optional akapart> MATCH (COK): AKA ( "You"
slAKA optional akapart> VALUE: ((Just ["You"],1),[])

**************** \ slAKA optional akapart has returned (Just ["You"],1)                                     :2_2:UnDeeper:
**************** > |>>/base got Just ["You"]                                                                :2_2:UnDeeper:
|>>/base> IN: AKA ( "You" ) ) ) ) WHICH ( "is not" ( " <…>
|>>/base> MATCH (COK): AKA ( "You"
|>>/base> VALUE: ((Just ["You"],1),[])

*************** \ |>>/base has returned (Just ["You"],1)                                                     :2_2:UnDeeper:
|>>/recurse> IN: ( AKA ( "You" ) ) ) ) WHICH ( "is not" ( <…>
|>>/recurse> MATCH (COK): ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],2),[])

************** \ |>>/recurse has returned (Just ["You"],2)                                                    :2_2:UnDeeper:
|>>/recurse> IN: ( ( AKA ( "You" ) ) ) ) WHICH ( "is not" <…>
|>>/recurse> MATCH (COK): ( ( AKA ( "You"
|>>/recurse> VALUE: ((Just ["You"],3),[])

************* \ |>>/recurse has returned (Just ["You"],3)                                                      :2_2:UnDeeper:
************* / |>>/recurse                                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :2_2:UnDeeper:
************* / |>>/base                                                                                       :2_2:UnDeeper:
************** / slAKA optional typically                                                                     :2_2:UnDeeper:
*************** / |?| optional something                                                                     :2_2:UnDeeper:
**************** / |>>/recurse                                                                              :2_2:UnDeeper:
|>>/recurse> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=8:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :2_2:UnDeeper:
**************** / |>>/base                                                                                 :2_2:UnDeeper:
***************** / typically                                                                              :2_2:UnDeeper:
****************** / $>|                                                                                  :2_2:UnDeeper:
$>|> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=8:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :2_2:UnDeeper:
typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=8:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=8:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :2_2:UnDeeper:
|?| optional something> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :2_2:UnDeeper:
slAKA optional typically> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :2_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :2_2:UnDeeper:
|>>/base> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :2_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :2_2:UnDeeper:
************* > pAKA: entityalias = Just ["You"]                                                               :2_2:UnDeeper:
slAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
slAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You"
slAKA> VALUE: ((["Data Intermediary"],3),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

************ \ slAKA has returned (["Data Intermediary"],3)                                                     :2_2:UnDeeper:
************ / undeepers                                                                                        :2_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers                         :2_2:UnDeeper:
************* > sameLine: success!                                                                                   :2_5:UnDeeper:
undeepers> IN: ) ) ) ) WHICH ( "is not" ( "processing p <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                              :2_5:UnDeeper:
pAKA> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pAKA> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

*********** \ pAKA has returned ["Data Intermediary"]                                                                  :2_5:UnDeeper:
pMultiTermAka> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
pMultiTermAka> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********** \ pMultiTermAka has returned ["Data Intermediary"]                                                           :2_5:UnDeeper:
manyIndentation/leaf?> IN: "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> MATCH (COK): "Data Intermediary" ( ( AKA ( "You" ) )  <…>
manyIndentation/leaf?> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

********* \ manyIndentation/leaf? has returned ["Data Intermediary"]                                                     :2_5:UnDeeper:
********* / myindented-UnDeeper                                                                                          :2_5:UnDeeper:
myindented-UnDeeper> IN: ) WHICH ( "is not" ( "processing persona <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :2_1:Which:
someIndentation> IN: ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> MATCH (COK): ( "Data Intermediary" ( ( AKA ( "You" )  <…>
someIndentation> VALUE: (["Data Intermediary"],[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******** \ someIndentation has returned ["Data Intermediary"]                                                    :2_1:Which:
pActor [REvery,RParty,RTokAll]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pActor [REvery,RParty,RTokAll]> VALUE: ((REvery,Leaf (("Data Intermediary" :| [],Nothing) :| [])),[DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}])

******* \ pActor [REvery,RParty,RTokAll] has returned (REvery,Leaf (("Data Intermediary" :| [],Nothing) :| []))   :2_1:Which:
******* / manyIndentation/leaf?                                                                                   :2_1:Which:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :2_1:Which:
********* / pBSR                                                                                                 :2_2:GoDeeper:
********** / ppp inner                                                                                          :2_2:GoDeeper:
*********** / expression                                                                                       :2_2:GoDeeper:
************ / termIndent p                                                                                   :2_2:GoDeeper:
************* / term p/1a:label ends directly above next line                                                :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "is not" ( "processing personal data o <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1b:label ends to the left of line below, with EOL                                     :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "is not" ( "processing personal data o <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/1c:label ends to the right of line below                                              :2_2:GoDeeper:
************** > |<|                                                                                        :2_2:GoDeeper:
************** > |<* starting                                                                               :2_2:GoDeeper:
************** / $*|                                                                                        :2_2:GoDeeper:
*************** / someSL                                                                                   :2_2:GoDeeper:
**************** / pNumAsText                                                                             :2_2:GoDeeper:
pNumAsText> IN: ( "is not" ( "processing personal data o <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected (
pNumAsText> expecting number

**************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :2_2:GoDeeper:
someSL> IN: ( "is not" ( "processing personal data o <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected (
someSL> expecting other text or number

*************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :2_2:GoDeeper:
$*|> IN: ( "is not" ( "processing personal data o <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected (
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "is not" ( "processing personal data o <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************* / term p/notLabelTerm                                                                          :2_2:GoDeeper:
************** / term p/2:someIndentation expr p                                                            :2_2:GoDeeper:
*************** / someIndentation                                                                          :2_2:GoDeeper:
**************** / myindented-GoDeeper                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( "is not" ( "processing personal data o <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

**************** \ myindented-GoDeeper has returned GoDeeper                                               :2_2:Other "is n:
**************** / manyIndentation/leaf?                                                                   :2_2:Other "is n:
***************** / ppp inner                                                                             :2_2:Other "is n:
****************** / expression                                                                          :2_2:Other "is n:
******************* / termIndent p                                                                      :2_2:Other "is n:
******************** / term p/1a:label ends directly above next line                                   :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************** / pNumAsText                                                                   :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (CERR): "is not" ( "processing personal data on  <…>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or other text or number

********************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number           :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "is not" ( "processing personal data on  <…>
term p/1a:label ends directly above next line> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

******************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
******************** / term p/1b:label ends to the left of line below, with EOL                        :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************* / matching EOL                                                                   :3_2:UnDeeper:
matching EOL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected )
matching EOL> expecting EOL

********************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL                   :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "is not" ( "processing personal data on  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

******************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
******************** / term p/1c:label ends to the right of line below                                 :2_2:Other "is n:
********************* > |<|                                                                           :2_2:Other "is n:
********************* > |<* starting                                                                  :2_2:Other "is n:
********************* / $*|                                                                           :2_2:Other "is n:
********************** / someSL                                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

********************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
********************* / |<*/parent                                                                     :3_2:UnDeeper:
********************** > |<*/recurse                                                                  :3_2:UnDeeper:
********************** / ppp inner                                                                 :3_1:Must:
*********************** / expression                                                              :3_1:Must:
************************ / termIndent p                                                          :3_1:Must:
************************* / term p/1a:label ends directly above next line                       :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1a:label ends directly above next line> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected MUST
term p/1a:label ends directly above next line> expecting other text or number

************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/1b:label ends to the left of line below, with EOL            :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1b:label ends to the left of line below, with EOL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected MUST
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/1c:label ends to the right of line below                     :3_1:Must:
************************** > |<|                                                               :3_1:Must:
************************** > |<* starting                                                      :3_1:Must:
************************** / $*|                                                               :3_1:Must:
*************************** / someSL                                                          :3_1:Must:
**************************** / pNumAsText                                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/1c:label ends to the right of line below> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting other text or number

************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: other text or number :3_1:Must:
************************* / term p/notLabelTerm                                                 :3_1:Must:
************************** / term p/2:someIndentation expr p                                   :3_1:Must:
*************************** / someIndentation                                                 :3_1:Must:
**************************** / myindented-GoDeeper                                           :3_1:Must:
myindented-GoDeeper> IN: MUST ( "without undue delay" ) UPON ( "b <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=19:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

**************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: ( :3_1:Must:
someIndentation> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=19:
someIndentation> unexpected MUST
someIndentation> expecting (

*************************** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: ( :3_1:Must:
term p/2:someIndentation expr p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=19:
term p/2:someIndentation expr p> unexpected MUST
term p/2:someIndentation expr p> expecting (

************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected MUST Expecting: ( :3_1:Must:
************************** / term p/3:plain p                                                  :3_1:Must:
*************************** / pRelPred                                                        :3_1:Must:
**************************** / slRelPred                                                     :3_1:Must:
***************************** / nested simpleHorn                                           :3_1:Must:
****************************** > |^|                                                       :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
nested simpleHorn> IN: MUST ( "without undue delay" ) UPON ( "b <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting other text or number

***************************** \ !Unconsumed Error: nested simpleHorn: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPConstraint                                                :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPConstraint> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=19:
RPConstraint> unexpected MUST
RPConstraint> expecting other text or number

***************************** \ !Unconsumed Error: RPConstraint: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPBoolStructR                                               :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slMultiTerm                                             :3_1:Must:
******************************** / someSL                                                :3_1:Must:
********************************* / pNumAsText                                          :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

******************************* \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPBoolStructR> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=19:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting other text or number

***************************** \ !Unconsumed Error: RPBoolStructR: Unexpected MUST Expecting: other text or number :3_1:Must:
***************************** / RPMT                                                        :3_1:Must:
****************************** / $*|                                                       :3_1:Must:
******************************* / slAKA                                                   :3_1:Must:
******************************** / $*|                                                   :3_1:Must:
********************************* / slAKA base                                          :3_1:Must:
********************************** / slMultiTerm                                       :3_1:Must:
*********************************** / someSL                                          :3_1:Must:
************************************ / pNumAsText                                    :3_1:Must:
pNumAsText> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number :3_1:Must:
someSL> IN: MUST ( "without undue delay" ) UPON ( "b <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected MUST
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected MUST Expecting: other text or number :3_1:Must:
slMultiTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected MUST
slMultiTerm> expecting other text or number

********************************** \ !Unconsumed Error: slMultiTerm: Unexpected MUST Expecting: other text or number :3_1:Must:
slAKA base> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=19:
slAKA base> unexpected MUST
slAKA base> expecting other text or number

********************************* \ !Unconsumed Error: slAKA base: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
slAKA> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=19:
slAKA> unexpected MUST
slAKA> expecting other text or number

******************************* \ !Unconsumed Error: slAKA: Unexpected MUST Expecting: other text or number :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: other text or number :3_1:Must:
RPMT> IN: MUST ( "without undue delay" ) UPON ( "b <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=19:
RPMT> unexpected MUST
RPMT> expecting other text or number

***************************** \ !Unconsumed Error: RPMT: Unexpected MUST Expecting: other text or number :3_1:Must:
slRelPred> IN: MUST ( "without undue delay" ) UPON ( "b <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=19:
slRelPred> unexpected MUST
slRelPred> expecting other text or number

**************************** \ !Unconsumed Error: slRelPred: Unexpected MUST Expecting: other text or number :3_1:Must:
pRelPred> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=19:
pRelPred> unexpected MUST
pRelPred> expecting other text or number

*************************** \ !Unconsumed Error: pRelPred: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/3:plain p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=19:
term p/3:plain p> unexpected MUST
term p/3:plain p> expecting other text or number

************************** \ !Unconsumed Error: term p/3:plain p: Unexpected MUST Expecting: other text or number :3_1:Must:
term p/notLabelTerm> IN: MUST ( "without undue delay" ) UPON ( "b <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=19:
term p/notLabelTerm> unexpected MUST
term p/notLabelTerm> expecting ( or term

************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected MUST Expecting: ( term :3_1:Must:
termIndent p> IN: MUST ( "without undue delay" ) UPON ( "b <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=19:
termIndent p> unexpected MUST
termIndent p> expecting (, other text or number, or term

************************ \ !Unconsumed Error: termIndent p: Unexpected MUST Expecting: ( other text or number term :3_1:Must:
expression> IN: MUST ( "without undue delay" ) UPON ( "b <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=19:
expression> unexpected MUST
expression> expecting expression

*********************** \ !Unconsumed Error: expression: Unexpected MUST Expecting: expression    :3_1:Must:
ppp inner> IN: MUST ( "without undue delay" ) UPON ( "b <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> unexpected MUST
ppp inner> expecting expression

********************** \ !Unconsumed Error: ppp inner: Unexpected MUST Expecting: expression       :3_1:Must:
********************** / withPrePost                                                               :3_1:Must:
*********************** > |<* starting                                                            :3_1:Must:
*********************** / $*|                                                                     :3_1:Must:
************************ / pre part                                                              :3_1:Must:
pre part> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected MUST
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text  :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text         :3_1:Must:
withPrePost> IN: MUST ( "without undue delay" ) UPON ( "b <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected MUST
withPrePost> expecting ( or Other text

********************** \ !Unconsumed Error: withPrePost: Unexpected MUST Expecting: ( Other text   :3_1:Must:
********************** / $*|                                                                       :3_1:Must:
*********************** / pre part                                                                :3_1:Must:
pre part> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected MUST
pre part> expecting ( or Other text

*********************** \ !Unconsumed Error: pre part: Unexpected MUST Expecting: ( Other text    :3_1:Must:
$*|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected MUST
$*|> expecting ( or Other text

********************** \ !Unconsumed Error: $*|: Unexpected MUST Expecting: ( Other text           :3_1:Must:
********************** / |<*/base                                                                     :3_2:UnDeeper:
*********************** / ppp inner                                                                  :3_2:UnDeeper:
************************ / expression                                                               :3_2:UnDeeper:
************************* / termIndent p                                                           :3_2:UnDeeper:
************************** / term p/1a:label ends directly above next line                        :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL             :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                      :3_2:UnDeeper:
*************************** > |<|                                                                :3_2:UnDeeper:
*************************** > |<* starting                                                       :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / someSL                                                           :3_2:UnDeeper:
***************************** / pNumAsText                                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                  :3_2:UnDeeper:
*************************** / term p/2:someIndentation expr p                                    :3_2:UnDeeper:
**************************** / someIndentation                                                  :3_2:UnDeeper:
***************************** / myindented-GoDeeper                                            :3_2:UnDeeper:
myindented-GoDeeper> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected )
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: (    :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
*************************** / term p/3:plain p                                                   :3_2:UnDeeper:
**************************** / pRelPred                                                         :3_2:UnDeeper:
***************************** / slRelPred                                                      :3_2:UnDeeper:
****************************** / nested simpleHorn                                            :3_2:UnDeeper:
******************************* > |^|                                                        :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

****************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPConstraint                                                 :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

****************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPBoolStructR                                                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slMultiTerm                                              :3_2:UnDeeper:
********************************* / someSL                                                 :3_2:UnDeeper:
********************************** / pNumAsText                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

****************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / RPMT                                                         :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / slAKA                                                    :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / slAKA base                                           :3_2:UnDeeper:
*********************************** / slMultiTerm                                        :3_2:UnDeeper:
************************************ / someSL                                           :3_2:UnDeeper:
************************************* / pNumAsText                                     :3_2:UnDeeper:
pNumAsText> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected )
slAKA> expecting other text or number

******************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected )
RPMT> expecting other text or number

****************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected )
slRelPred> expecting other text or number

***************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected )
pRelPred> expecting other text or number

**************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected )
expression> expecting expression

************************ \ !Unconsumed Error: expression: Unexpected ) Expecting: expression        :3_2:UnDeeper:
ppp inner> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected )
ppp inner> expecting expression

*********************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression           :3_2:UnDeeper:
*********************** / withPrePost                                                                :3_2:UnDeeper:
************************ > |<* starting                                                             :3_2:UnDeeper:
************************ / $*|                                                                      :3_2:UnDeeper:
************************* / pre part                                                               :3_2:UnDeeper:
pre part> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text      :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text             :3_2:UnDeeper:
withPrePost> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*********************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
*********************** / $*|                                                                        :3_2:UnDeeper:
************************ / pre part                                                                 :3_2:UnDeeper:
pre part> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

************************ \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text        :3_2:UnDeeper:
$*|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

*********************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text               :3_2:UnDeeper:
|<*/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

********************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected MUST
|<*/parent> expecting (, ), Other text, or expression

********************* \ !Unconsumed Error: |<*/parent: Unexpected MUST Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "is not" ( "processing personal data on  <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "is not" ( "processing personal data on  <…>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected MUST
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

******************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected MUST Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
******************** / term p/notLabelTerm                                                             :2_2:Other "is n:
********************* / term p/2:someIndentation expr p                                               :2_2:Other "is n:
********************** / someIndentation                                                             :2_2:Other "is n:
*********************** / myindented-GoDeeper                                                       :2_2:Other "is n:
myindented-GoDeeper> IN: "is not" ( "processing personal data on  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=14:
myindented-GoDeeper> unexpected "is not"
myindented-GoDeeper> expecting (

*********************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "is not" Expecting: (  :2_2:Other "is n:
someIndentation> IN: "is not" ( "processing personal data on  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=14:
someIndentation> unexpected "is not"
someIndentation> expecting (

********************** \ !Unconsumed Error: someIndentation: Unexpected "is not" Expecting: (        :2_2:Other "is n:
term p/2:someIndentation expr p> IN: "is not" ( "processing personal data on  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=14:
term p/2:someIndentation expr p> unexpected "is not"
term p/2:someIndentation expr p> expecting (

********************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "is not" Expecting: ( :2_2:Other "is n:
********************* / term p/3:plain p                                                              :2_2:Other "is n:
********************** / pRelPred                                                                    :2_2:Other "is n:
*********************** / slRelPred                                                                 :2_2:Other "is n:
************************ / nested simpleHorn                                                       :2_2:Other "is n:
************************* > |^|                                                                   :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |^| deeps                                                              :3_2:UnDeeper:
|^| deeps> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

************************* \ |^| deeps has returned ([(),()],-2)                                 :3_1:Must:
nested simpleHorn> IN: "is not" ( "processing personal data on  <…>
nested simpleHorn> MATCH (CERR): "is not" ( "processing personal data on  <…>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ) or MEANS

************************ \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS ) :3_1:Must:
************************ / RPConstraint                                                            :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "is not" ( "processing personal data on  <…>
RPConstraint> MATCH (CERR): "is not" ( "processing personal data on  <…>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPBoolStructR                                                           :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slMultiTerm                                                         :2_2:Other "is n:
*************************** / someSL                                                            :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
************************* / |>| calling $>>                                                        :3_2:UnDeeper:
************************** / |>>/recurse                                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (            :3_2:UnDeeper:
************************** / |>>/base                                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "is not" ( "processing personal data on  <…>
RPBoolStructR> MATCH (CERR): "is not" ( "processing personal data on  <…>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************************ \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
************************ / RPMT                                                                    :2_2:Other "is n:
************************* / $*|                                                                   :2_2:Other "is n:
************************** / slAKA                                                               :2_2:Other "is n:
*************************** / $*|                                                               :2_2:Other "is n:
**************************** / slAKA base                                                      :2_2:Other "is n:
***************************** / slMultiTerm                                                   :2_2:Other "is n:
****************************** / someSL                                                      :2_2:Other "is n:
someSL> IN: "is not" ( "processing personal data on  <…>
someSL> MATCH (COK): "is not" ( "processing personal data on  <…>
someSL> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

****************************** \ someSL has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slMultiTerm> IN: "is not" ( "processing personal data on  <…>
slMultiTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
slMultiTerm> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

***************************** \ slMultiTerm has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slAKA base> IN: "is not" ( "processing personal data on  <…>
slAKA base> MATCH (COK): "is not" ( "processing personal data on  <…>
slAKA base> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

**************************** \ slAKA base has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*************************** \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional akapart                                           :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / PAKA/akapart                                               :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
********************************* / Aka Token                                              :3_2:UnDeeper:
Aka Token> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

********************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA      :3_2:UnDeeper:
PAKA/akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

******************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA     :3_2:UnDeeper:
|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional akapart has returned (Nothing,0)                  :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** / |>>/recurse                                                        :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (          :3_2:UnDeeper:
*************************** / |>>/base                                                           :3_2:UnDeeper:
**************************** / slAKA optional typically                                         :3_2:UnDeeper:
***************************** / |?| optional something                                         :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
******************************* / typically                                                  :3_2:UnDeeper:
******************************** / $>|                                                      :3_2:UnDeeper:
$>|> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

******************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

******************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

***************************** \ |?| optional something has returned (Nothing,0)                :3_2:UnDeeper:
slAKA optional typically> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

**************************** \ slAKA optional typically has returned (Nothing,0)                :3_2:UnDeeper:
**************************** > |>>/base got Nothing                                             :3_2:UnDeeper:
|>>/base> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*************************** \ |>>/base has returned (Nothing,0)                                  :3_2:UnDeeper:
*************************** > slAKA: proceeding after base and entityalias are retrieved ...     :3_2:UnDeeper:
*************************** > pAKA: entityalias = Nothing                                        :3_2:UnDeeper:
slAKA> IN: "is not" ( "processing personal data on  <…>
slAKA> MATCH (COK): "is not" ( "processing personal data on  <…>
slAKA> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************** \ slAKA has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
$*|> IN: "is not" ( "processing personal data on  <…>
$*|> MATCH (COK): "is not" ( "processing personal data on  <…>
$*|> VALUE: ((["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************* \ $*| has returned (["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
RPMT> IN: "is not" ( "processing personal data on  <…>
RPMT> MATCH (COK): "is not" ( "processing personal data on  <…>
RPMT> VALUE: ((RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

************************ \ RPMT has returned (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
slRelPred> IN: "is not" ( "processing personal data on  <…>
slRelPred> MATCH (COK): "is not" ( "processing personal data on  <…>
slRelPred> VALUE: ((RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1),[])

*********************** \ slRelPred has returned (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],1) :3_2:UnDeeper:
*********************** / undeepers                                                                  :3_2:UnDeeper:
************************ > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers   :3_2:UnDeeper:
************************ > sameLine: success!                                                         :3_3:UnDeeper:
undeepers> IN: ) ) MUST ( "without undue delay" ) UPON  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

*********************** \ undeepers has returned ()                                                    :3_3:UnDeeper:
pRelPred> IN: "is not" ( "processing personal data on  <…>
pRelPred> MATCH (COK): "is not" ( "processing personal data on  <…>
pRelPred> VALUE: (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"],[])

********************** \ pRelPred has returned RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"] :3_3:UnDeeper:
term p/3:plain p> IN: "is not" ( "processing personal data on  <…>
term p/3:plain p> MATCH (COK): "is not" ( "processing personal data on  <…>
term p/3:plain p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********************* \ term p/3:plain p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
term p/notLabelTerm> IN: "is not" ( "processing personal data on  <…>
term p/notLabelTerm> MATCH (COK): "is not" ( "processing personal data on  <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

******************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
termIndent p> IN: "is not" ( "processing personal data on  <…>
termIndent p> MATCH (COK): "is not" ( "processing personal data on  <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

******************* \ termIndent p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
******************* / binary(Or)                                                                           :3_3:UnDeeper:
binary(Or)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :3_3:UnDeeper:
******************* / binary(And)                                                                          :3_3:UnDeeper:
binary(And)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

******************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :3_3:UnDeeper:
******************* / binary(SetLess)                                                                      :3_3:UnDeeper:
binary(SetLess)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :3_3:UnDeeper:
******************* / binary(SetPlus)                                                                      :3_3:UnDeeper:
binary(SetPlus)> IN: ) MUST ( "without undue delay" ) UPON (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :3_3:UnDeeper:
expression> IN: "is not" ( "processing personal data on  <…>
expression> MATCH (COK): "is not" ( "processing personal data on  <…>
expression> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

****************** \ expression has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
ppp inner> IN: "is not" ( "processing personal data on  <…>
ppp inner> MATCH (COK): "is not" ( "processing personal data on  <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

***************** \ ppp inner has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
manyIndentation/leaf?> IN: "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> MATCH (COK): "is not" ( "processing personal data on  <…>
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

**************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_3:UnDeeper:
**************** / myindented-UnDeeper                                                                        :3_3:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( "without undue delay" ) UPON (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

**************** \ myindented-UnDeeper has returned UnDeeper                                             :3_1:Must:
someIndentation> IN: ( "is not" ( "processing personal data o <…>
someIndentation> MATCH (COK): ( "is not" ( "processing personal data o <…>
someIndentation> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

*************** \ someIndentation has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/2:someIndentation expr p> IN: ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
term p/notLabelTerm> IN: ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> MATCH (COK): ( "is not" ( "processing personal data o <…>
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
termIndent p> IN: ( "is not" ( "processing personal data o <…>
termIndent p> MATCH (COK): ( "is not" ( "processing personal data o <…>
termIndent p> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

************ \ termIndent p has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
************ / binary(Or)                                                                                    :3_1:Must:
binary(Or)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected MUST
binary(Or)> expecting OR

************ \ !Unconsumed Error: binary(Or): Unexpected MUST Expecting: OR                                  :3_1:Must:
************ / binary(And)                                                                                   :3_1:Must:
binary(And)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected MUST
binary(And)> expecting AND

************ \ !Unconsumed Error: binary(And): Unexpected MUST Expecting: AND                                :3_1:Must:
************ / binary(SetLess)                                                                               :3_1:Must:
binary(SetLess)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected MUST
binary(SetLess)> expecting LESS

************ \ !Unconsumed Error: binary(SetLess): Unexpected MUST Expecting: LESS                           :3_1:Must:
************ / binary(SetPlus)                                                                               :3_1:Must:
binary(SetPlus)> IN: MUST ( "without undue delay" ) UPON ( "b <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected MUST
binary(SetPlus)> expecting PLUS

************ \ !Unconsumed Error: binary(SetPlus): Unexpected MUST Expecting: PLUS                           :3_1:Must:
expression> IN: ( "is not" ( "processing personal data o <…>
expression> MATCH (COK): ( "is not" ( "processing personal data o <…>
expression> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

*********** \ expression has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
ppp inner> IN: ( "is not" ( "processing personal data o <…>
ppp inner> MATCH (COK): ( "is not" ( "processing personal data o <…>
ppp inner> VALUE: (MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********** \ ppp inner has returned MyLeaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
pBSR> IN: ( "is not" ( "processing personal data o <…>
pBSR> MATCH (COK): ( "is not" ( "processing personal data o <…>
pBSR> VALUE: (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]),[])

********* \ pBSR has returned Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"]) :3_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
preambleBoolStructR [Who,Which,Whose]> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******** \ preambleBoolStructR [Who,Which,Whose] has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
manyIndentation/leaf?> IN: WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> MATCH (COK): WHICH ( "is not" ( "processing personal  <…>
manyIndentation/leaf?> VALUE: ((Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])),[])

******* \ manyIndentation/leaf? has returned (Which,Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])) :3_1:Must:
******* / WHERE                                                                                                   :3_1:Must:
WHERE> IN: MUST ( "without undue delay" ) UPON ( "b <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :3_1:Must:
******* / preambleParamText:[Having]                                                                              :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :3_1:Must:
preambleParamText:[Having]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :3_1:Must:
******* / preambleParamText:[Given]                                                                               :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :3_1:Must:
preambleParamText:[Given]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :3_1:Must:
******* / preambleParamText:[Upon]                                                                                :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :3_1:Must:
preambleParamText:[Upon]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :3_1:Must:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Must:
preambleBoolStructR [Unless]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                      :3_1:Must:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Must:
preambleBoolStructR [When,If]> IN: MUST ( "without undue delay" ) UPON ( "b <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=19:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                    :3_1:Must:
******* / pTemporal/eventually                                                                                    :3_1:Must:
pTemporal/eventually> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY                          :3_1:Must:
******* / pTemporal/specifically                                                                                  :3_1:Must:
******** / $>|                                                                                                   :3_1:Must:
$>|> IN: MUST ( "without undue delay" ) UPON ( "b <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON                                 :3_1:Must:
pTemporal/specifically> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON                :3_1:Must:
******* / pTemporal/vaguely                                                                                       :3_1:Must:
pTemporal/vaguely> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text                             :3_1:Must:
******* / pDA                                                                                                     :3_1:Must:
******** / pAction calling pParamText                                                                             :3_2:GoDeeper:
********* / pParamText                                                                                           :3_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :3_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :3_2:GoDeeper:
************ / slAKA                                                                                          :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / slAKA base                                                                                 :3_2:GoDeeper:
*************** / slKeyValues                                                                              :3_2:GoDeeper:
**************** / $*|                                                                                    :3_2:GoDeeper:
***************** / someSL                                                                               :3_2:GoDeeper:
****************** / pNumAsText                                                                         :3_2:GoDeeper:
pNumAsText> IN: ( "without undue delay" ) UPON ( "becomi <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :3_2:GoDeeper:
someSL> IN: ( "without undue delay" ) UPON ( "becomi <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :3_2:GoDeeper:
$*|> IN: ( "without undue delay" ) UPON ( "becomi <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :3_2:GoDeeper:
slKeyValues> IN: ( "without undue delay" ) UPON ( "becomi <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=20:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :3_2:GoDeeper:
slAKA base> IN: ( "without undue delay" ) UPON ( "becomi <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=20:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :3_2:GoDeeper:
$*|> IN: ( "without undue delay" ) UPON ( "becomi <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
slAKA> IN: ( "without undue delay" ) UPON ( "becomi <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=20:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
pKeyValuesAka> IN: ( "without undue delay" ) UPON ( "becomi <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=20:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :3_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "without undue delay" ) UPON ( "becomi <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=20:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
pParamText> IN: ( "without undue delay" ) UPON ( "becomi <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=20:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :3_2:GoDeeper:
pAction calling pParamText> IN: ( "without undue delay" ) UPON ( "becomi <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=20:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :3_2:GoDeeper:
pDA> IN: MUST ( "without undue delay" ) UPON ( "b <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=20:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :3_2:GoDeeper:
regulative permutation with deontic-action> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-action> MATCH (CERR): EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=20:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AND, LESS, OR, PLUS, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: AND OR LESS PLUS other text or number :3_1:Must:
permutationsReg> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=32:
permutationsReg> unexpected (
permutationsReg> expecting other text or number

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: other text or number                            :1_1:Every:
pRegRuleNormal> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=32:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting other text or number

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: other text or number                               :1_1:Every:
pRegRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=32:
pRegRule> unexpected (
pRegRule> expecting other text or number or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § other text or number                                    :1_1:Every:
*** / pTypeDefinition                                                                                                 :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / pHornlike/uponLimb                                                                                            :1_1:Every:
***** / preambleParamText:[Upon]                                                                                    :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                  :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                               :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                       :1_1:Every:
**** / pHornlike/givenLimb                                                                                           :1_1:Every:
***** / preambleParamText:[Given]                                                                                   :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                                 :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                             :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                     :1_1:Every:
pTypeDefinition> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=0:
pTypeDefinition> unexpected EVERY
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected EVERY Expecting: § GIVEN UPON DEFINE                            :1_1:Every:
*** / pConstitutiveRule                                                                                               :1_1:Every:
**** / pRuleLabel                                                                                                    :1_1:Every:
***** / $>|                                                                                                         :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                      :1_1:Every:
pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                 :1_1:Every:
**** / calling myindented pNameParens                                                                                :1_1:Every:
***** / manyIndentation/leaf?                                                                                       :1_1:Every:
****** / pMultiTermAka                                                                                             :1_1:Every:
******* / pAKA                                                                                                    :1_1:Every:
******** / slAKA                                                                                                 :1_1:Every:
********* / $*|                                                                                                 :1_1:Every:
********** / slAKA base                                                                                        :1_1:Every:
*********** / slMultiTerm                                                                                     :1_1:Every:
************ / someSL                                                                                        :1_1:Every:
************* / pNumAsText                                                                                  :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                           :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number                :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                            :1_1:Every:
pAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=0:
pAKA> unexpected EVERY
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected EVERY Expecting: other text or number                               :1_1:Every:
pMultiTermAka> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=0:
pMultiTermAka> unexpected EVERY
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
***** / manyIndentation/deeper; calling someIndentation                                                             :1_1:Every:
****** / someIndentation                                                                                           :1_1:Every:
******* / myindented-GoDeeper                                                                                     :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                   :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                         :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (           :1_1:Every:
calling myindented pNameParens> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=0:
calling myindented pNameParens> unexpected EVERY
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected EVERY Expecting: ( other text or number         :1_1:Every:
pConstitutiveRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=0:
pConstitutiveRule> unexpected EVERY
pConstitutiveRule> expecting (, other text or number, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected EVERY Expecting: § ( other text or number                     :1_1:Every:
*** / pScenarioRule                                                                                                   :1_1:Every:
pScenarioRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected EVERY
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected EVERY Expecting: SCENARIO                                          :1_1:Every:
*** / pHornlike                                                                                                       :1_1:Every:
**** / pSrcRef                                                                                                       :1_1:Every:
***** / pRuleLabel                                                                                                  :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                    :1_1:Every:
pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                               :1_1:Every:
pSrcRef> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})) :1_1:Every:
**** / pHornlike / permute                                                                                           :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/givenLimb                                                                                         :1_1:Every:
****** / preambleParamText:[Given]                                                                                 :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: GIVEN                                               :1_1:Every:
preambleParamText:[Given]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=0:
preambleParamText:[Given]> unexpected EVERY
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected EVERY Expecting: GIVEN                           :1_1:Every:
pHornlike/givenLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=0:
pHornlike/givenLimb> unexpected EVERY
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected EVERY Expecting: GIVEN                                   :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/uponLimb                                                                                          :1_1:Every:
****** / preambleParamText:[Upon]                                                                                  :1_1:Every:
******* / $>|                                                                                                     :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: UPON                                                :1_1:Every:
preambleParamText:[Upon]> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=0:
preambleParamText:[Upon]> unexpected EVERY
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected EVERY Expecting: UPON                             :1_1:Every:
pHornlike/uponLimb> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=0:
pHornlike/uponLimb> unexpected EVERY
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected EVERY Expecting: UPON                                     :1_1:Every:
***** / whenCase                                                                                                    :1_1:Every:
****** / whenMeansIf                                                                                               :1_1:Every:
whenMeansIf> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=0:
whenMeansIf> unexpected EVERY
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected EVERY Expecting: IF WHEN MEANS                                 :1_1:Every:
****** / Otherwise                                                                                                 :1_1:Every:
Otherwise> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=0:
Otherwise> unexpected EVERY
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected EVERY Expecting: OTHERWISE                                       :1_1:Every:
whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=0:
whenCase> unexpected EVERY
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected EVERY Expecting: OTHERWISE IF WHEN MEANS                            :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
***** / pHornlike/ambitious                                                                                         :1_1:Every:
****** / $>|                                                                                                       :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: DEFINE DECIDE                                         :1_1:Every:
pHornlike/ambitious> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=0:
pHornlike/ambitious> unexpected EVERY
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected EVERY Expecting: DEFINE DECIDE                           :1_1:Every:
***** / pHornlike/someStructure                                                                                     :1_1:Every:
****** / manyIndentation/leaf?                                                                                     :1_1:Every:
******* / relPredNextlineWhen                                                                                     :1_1:Every:
******** / pRelPred optIndentedTuple whenCase                                                                    :1_1:Every:
********* / optIndentedTuple                                                                                    :1_1:Every:
********** / optIndented                                                                                       :1_1:Every:
*********** / pRelPred                                                                                        :1_1:Every:
************ / slRelPred                                                                                     :1_1:Every:
************* / nested simpleHorn                                                                           :1_1:Every:
************** > |^|                                                                                       :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number      :1_1:Every:
************* / RPConstraint                                                                                :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number           :1_1:Every:
************* / RPBoolStructR                                                                               :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number          :1_1:Every:
************* / RPMT                                                                                        :1_1:Every:
************** / $*|                                                                                       :1_1:Every:
*************** / slAKA                                                                                   :1_1:Every:
**************** / $*|                                                                                   :1_1:Every:
***************** / slAKA base                                                                          :1_1:Every:
****************** / slMultiTerm                                                                       :1_1:Every:
******************* / someSL                                                                          :1_1:Every:
******************** / pNumAsText                                                                    :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number             :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number     :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number  :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number     :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number              :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                :1_1:Every:
pRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=0:
pRelPred> unexpected EVERY
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected EVERY Expecting: other text or number                   :1_1:Every:
optIndented> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=0:
optIndented> unexpected EVERY
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected EVERY Expecting: other text or number                  :1_1:Every:
optIndentedTuple> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=0:
optIndentedTuple> unexpected EVERY
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected EVERY Expecting: other text or number               :1_1:Every:
pRelPred optIndentedTuple whenCase> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=0:
pRelPred optIndentedTuple whenCase> unexpected EVERY
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected EVERY Expecting: other text or number :1_1:Every:
relPredNextlineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=0:
relPredNextlineWhen> unexpected EVERY
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
******* / relPredSamelineWhen                                                                                     :1_1:Every:
******** / $*|                                                                                                   :1_1:Every:
********* / slRelPred                                                                                           :1_1:Every:
********** / nested simpleHorn                                                                                 :1_1:Every:
*********** > |^|                                                                                             :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
nested simpleHorn> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=0:
nested simpleHorn> unexpected EVERY
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected EVERY Expecting: other text or number            :1_1:Every:
********** / RPConstraint                                                                                      :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPConstraint> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=0:
RPConstraint> unexpected EVERY
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
********** / RPBoolStructR                                                                                     :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slMultiTerm                                                                                   :1_1:Every:
************* / someSL                                                                                      :1_1:Every:
************** / pNumAsText                                                                                :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                         :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number                 :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number              :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPBoolStructR> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=0:
RPBoolStructR> unexpected EVERY
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected EVERY Expecting: other text or number                :1_1:Every:
********** / RPMT                                                                                              :1_1:Every:
*********** / $*|                                                                                             :1_1:Every:
************ / slAKA                                                                                         :1_1:Every:
************* / $*|                                                                                         :1_1:Every:
************** / slAKA base                                                                                :1_1:Every:
*************** / slMultiTerm                                                                             :1_1:Every:
**************** / someSL                                                                                :1_1:Every:
***************** / pNumAsText                                                                          :1_1:Every:
pNumAsText> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=0:
pNumAsText> unexpected EVERY
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected EVERY Expecting: number                   :1_1:Every:
someSL> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=0:
someSL> unexpected EVERY
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected EVERY Expecting: other text or number           :1_1:Every:
slMultiTerm> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=0:
slMultiTerm> unexpected EVERY
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected EVERY Expecting: other text or number        :1_1:Every:
slAKA base> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=0:
slAKA base> unexpected EVERY
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected EVERY Expecting: other text or number           :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
slAKA> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=0:
slAKA> unexpected EVERY
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected EVERY Expecting: other text or number                    :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                        :1_1:Every:
RPMT> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=0:
RPMT> unexpected EVERY
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected EVERY Expecting: other text or number                         :1_1:Every:
slRelPred> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=0:
slRelPred> unexpected EVERY
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected EVERY Expecting: other text or number                      :1_1:Every:
$*|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=0:
$*|> unexpected EVERY
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected EVERY Expecting: other text or number                              :1_1:Every:
relPredSamelineWhen> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=0:
relPredSamelineWhen> unexpected EVERY
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected EVERY Expecting: other text or number                :1_1:Every:
manyIndentation/leaf?> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=0:
manyIndentation/leaf?> unexpected EVERY
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected EVERY Expecting: other text or number                :1_1:Every:
****** / manyIndentation/deeper; calling someIndentation                                                           :1_1:Every:
******* / someIndentation                                                                                         :1_1:Every:
******** / myindented-GoDeeper                                                                                   :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                 :1_1:Every:
someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=0:
someIndentation> unexpected EVERY
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected EVERY Expecting: (                                       :1_1:Every:
manyIndentation/deeper; calling someIndentation> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=0:
manyIndentation/deeper; calling someIndentation> unexpected EVERY
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected EVERY Expecting: (         :1_1:Every:
pHornlike/someStructure> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=0:
pHornlike/someStructure> unexpected EVERY
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected EVERY Expecting: ( DEFINE DECIDE other text or number :1_1:Every:
pHornlike / permute> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=0:
pHornlike / permute> unexpected EVERY
pHornlike / permute> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, or other text or number

**** \ !Unconsumed Error: pHornlike / permute: Unexpected EVERY Expecting: DEFINE DECIDE GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
pHornlike> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=0:
pHornlike> unexpected EVERY
pHornlike> expecting (, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, UPON, WHEN, other text or number, or §

*** \ !Unconsumed Error: pHornlike: Unexpected EVERY Expecting: DEFINE DECIDE § GIVEN UPON OTHERWISE ( DEFINE DECIDE IF WHEN MEANS other text or number :1_1:Every:
*** / pRuleLabel                                                                                                      :1_1:Every:
**** / $>|                                                                                                           :1_1:Every:
$>|> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=0:
$>|> unexpected EVERY
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected EVERY Expecting: §                                                        :1_1:Every:
pRuleLabel> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=0:
pRuleLabel> unexpected EVERY
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected EVERY Expecting: §                                                   :1_1:Every:
*** / pRule: unwrapping indentation and recursing                                                                     :1_1:Every:
**** / myindented-GoDeeper                                                                                           :1_1:Every:
myindented-GoDeeper> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=0:
myindented-GoDeeper> unexpected EVERY
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected EVERY Expecting: (                                         :1_1:Every:
pRule: unwrapping indentation and recursing> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=0:
pRule: unwrapping indentation and recursing> unexpected EVERY
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected EVERY Expecting: (                   :1_1:Every:
pRule> IN: EVERY ( "Data Intermediary" ( ( AKA ( "Y <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=32:
pRule> unexpected (
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                             :1_1:Every:
Loading env

Parser tests
  PDPA
    pdpadbno-2 FAILED [1]

Failures:

  test/Spec.hs:946:7: 
  1) Parser tests, PDPA, pdpadbno-2
       expected: [[Regulative {subj = Leaf (("Data Intermediary" :| [],Nothing) :| []), rkeyword = REvery, who = Just (Leaf (RPMT ["is not","processing personal data on behalf of and for the purposes of a public agency"])), cond = Just (Leaf (RPMT ["the data breach occurs on or after the date of commencement of PDP(A)A 2020 \167\&13"])), deontic = DMust, action = Leaf (("NOTIFY" :| ["the Organisation"],Nothing) :| [("for which" :| ["you act as a Data Intermediary"],Nothing)]), temporal = Just (TemporalConstraint TVague (Just 0) "without undue delay"), hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Just (("becoming aware a data breach involving a client Organisation may have occurred" :| [],Nothing) :| []), given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["You"], detail = ["Data Intermediary"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 2, version = Nothing})}]]
       but parsing failed with error:
       6:2:
       unexpected (
       expecting EOL or regulative rule
       
       EVERY   Data Intermediary                                                           AKA   You
       WHICH   is not                                processing personal data on behalf             
                                                     of and for the purposes of a public            
                                                     agency                                         
       MUST    without undue delay                                                                  
       UPON    becoming aware a data breach                                                         
               involving a client Organisation may                                                  
               have occurred                                                                        
       WHEN    the data breach occurs on or after                                                   
               the date of commencement of PDP(A)A                                                  
               2020 §13                                                                             
       ➔       ✳ NOTIFY                              the Organisation                               
               for which                             you act as a Data Intermediary                 
       
       
       Stream:
       EVERY
           ( "Data Intermediary"
               (
                   ( AKA ( "You" ) )
               )
           ) WHICH
           ( "is not" ( "processing personal data on behalf of and for the purposes of a public agency" ) ) MUST ( "without undue delay" ) UPON ( "becoming aware a data breach involving a client Organisation may have occurred" ) WHEN
           ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13" "✳" ) DO "✳"
           ( "✳" "NOTIFY" ( "the Organisation" ) "for which" ( "you act as a Data Intermediary" ) )

  To rerun use: --match "/Parser tests/PDPA/pdpadbno-2/"

Randomized with seed 509443567

Finished in 0.2949 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

