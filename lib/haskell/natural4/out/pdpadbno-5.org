* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/PDPA/pdpadbno-5/")

* Tokens
§§ ( "Notify PDPC" ) "You"
    ( MUST
        (
            ( BEFORE
                ( 3 ( "days" ) )
            )
        ) IF
        (
            ( "it is" ( "an NDB" ) )
        ) UNLESS ( ( "you are a Public Agency" ) ) DO
        (
            ( "NOTIFY" ( "the PDPC" ) "in" ( "the form and manner specified at www.pdpc.gov.sg" ) "with" ( "a Notification Message" ) "and" ( ( ( "a list of individuals for whom notification waiver is sought" ) ) ) )
        ) HENCE
        (
            ( "the PDPC"
                ( MAY
                    (
                        ( "NOTIFY" ( "you" ) "with"
                            ( "a list of individuals to exclude from notification"
                                ( AKA ( "the PDPC Exclusion List" ) )
                            )
                        )
                    )
                )
            )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify PDPC"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify PDPC" Expecting: (                                       :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
someSL> MATCH (COK): "Notify PDPC"
someSL> VALUE: ((["Notify PDPC"],0),[])

******** \ someSL has returned (["Notify PDPC"],0)                                                                  :2_2:UnDeeper:
|.| manyLike> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|.| manyLike> MATCH (COK): "Notify PDPC"
|.| manyLike> VALUE: ((["Notify PDPC"],0),[])

******* \ |.| manyLike has returned (["Notify PDPC"],0)                                                              :2_2:UnDeeper:
******* > |>>/base got "Notify PDPC"                                                                                 :2_2:UnDeeper:
|>>/base> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/base> MATCH (COK): "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

****** \ |>>/base has returned ("Notify PDPC",0)                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify PDPC" ) "You" ( MUST ( ( BEFOR <…>
|>>/recurse> MATCH (COK): ( "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

***** \ |>>/recurse has returned ("Notify PDPC",1)                                                                     :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Other "You":
upToNUndeepers/done> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Other "You":
upToNUndeepers/undeeper> IN: ) "You" ( MUST ( ( BEFORE ( 3 ( "days" ) <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Other "You":
pRuleLabel> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify PDPC" )
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / pRegRuleSugary                                                                                                :2_1:Other "You":
***** / someDeep                                                                                                    :2_1:Other "You":
****** / someDeep first part calls base directly                                                                   :2_1:Other "You":
someDeep first part calls base directly> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someDeep first part calls base directly> MATCH (COK): "You"
someDeep first part calls base directly> VALUE: ("You",[])

****** \ someDeep first part calls base directly has returned "You"                                                 :2_2:GoDeeper:
****** / someDeep second part recurses with someIndentation                                                         :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :2_2:Must:
******** / manyIndentation/leaf?                                                                                   :2_2:Must:
********* / someDeep                                                                                              :2_2:Must:
********** / someDeep first part calls base directly                                                             :2_2:Must:
someDeep first part calls base directly> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=6:
someDeep first part calls base directly> unexpected MUST
someDeep first part calls base directly> expecting Other text

********** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MUST Expecting: Other text   :2_2:Must:
someDeep> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=6:
someDeep> unexpected MUST
someDeep> expecting Other text

********* \ !Unconsumed Error: someDeep: Unexpected MUST Expecting: Other text                                    :2_2:Must:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting Other text

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: Other text                         :2_2:Must:
******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Must:
********* / someIndentation                                                                                       :2_2:Must:
********** / myindented-GoDeeper                                                                                 :2_2:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                :2_2:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                      :2_2:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (        :2_2:Must:
someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting ( or Other text

******* \ !Consumed Error: someIndentation: Unexpected MUST Expecting: ( Other text                                 :2_2:Must:
someDeep second part recurses with someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=6:
someDeep second part recurses with someIndentation> unexpected MUST
someDeep second part recurses with someIndentation> expecting ( or Other text

****** \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MUST Expecting: ( Other text :2_2:GoDeeper:
****** > someDeep no luck, returning []                                                                             :2_2:GoDeeper:
someDeep> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someDeep> MATCH (COK): "You"
someDeep> VALUE: (["You"],[])

***** \ someDeep has returned ["You"]                                                                                :2_2:GoDeeper:
***** / someIndentation                                                                                              :2_2:GoDeeper:
****** / myindented-GoDeeper                                                                                        :2_2:GoDeeper:
myindented-GoDeeper> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****** \ myindented-GoDeeper has returned GoDeeper                                                                   :2_2:Must:
****** / manyIndentation/leaf?                                                                                       :2_2:Must:
******* / permutationsReg                                                                                           :2_2:Must:
******** / regulative permutation with deontic-temporal                                                            :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected MUST
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                            :2_2:Must:
********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                           :2_2:Must:
preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                      :2_2:Must:
********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                            :2_2:Must:
preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                        :2_2:Must:
********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                             :2_2:Must:
preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                          :2_2:Must:
********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                    :2_2:Must:
********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                  :2_2:Must:
********* / pDT                                                                                                   :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

********** \ $>| has returned DMust                                                                               :2_3:GoDeeper:
********** / |>| calling $>>                                                                                      :2_3:GoDeeper:
*********** / |>>/recurse                                                                                        :2_3:GoDeeper:
************ / |>>/recurse                                                                                        :2_4:GoDeeper:
************* / |>>/recurse                                                                                       :2_4:Before:
|>>/recurse> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected BEFORE Expecting: (                                    :2_4:Before:
************* / |>>/base                                                                                          :2_4:Before:
************** / pTemporal/eventually                                                                            :2_4:Before:
pTemporal/eventually> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=9:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

************** \ !Unconsumed Error: pTemporal/eventually: Unexpected BEFORE Expecting: EVENTUALLY                :2_4:Before:
************** / pTemporal/specifically                                                                          :2_4:Before:
*************** / $>|                                                                                           :2_4:Before:
$>|> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

*************** \ $>| has returned Before                                                                        :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:TNumber 3:
|>>/recurse> IN: 3 ( "days" ) ) ) ) IF ( ( "it is" ( "an  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 3
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected 3 Expecting: (                                     :2_5:TNumber 3:
**************** / |>>/base                                                                                      :2_5:TNumber 3:
***************** > |>>/base got Just 3                                                                          :2_6:GoDeeper:
|>>/base> IN: 3 ( "days" ) ) ) ) IF ( ( "it is" ( "an  <…>
|>>/base> MATCH (COK): 3
|>>/base> VALUE: ((Just 3,0),[])

**************** \ |>>/base has returned (Just 3,0)                                                               :2_6:GoDeeper:
|>>/recurse> IN: ( 3 ( "days" ) ) ) ) IF ( ( "it is" ( "a <…>
|>>/recurse> MATCH (COK): ( 3
|>>/recurse> VALUE: ((Just 3,1),[])

*************** \ |>>/recurse has returned (Just 3,1)                                                              :2_6:GoDeeper:
*************** / |>| calling $>>                                                                                  :2_6:GoDeeper:
**************** / |>>/recurse                                                                                    :2_6:GoDeeper:
***************** / |>>/recurse                                                                                   :2_6:Other "days:
|>>/recurse> IN: "days" ) ) ) ) IF ( ( "it is" ( "an NDB" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected "days" Expecting: (                                :2_6:Other "days:
***************** / |>>/base                                                                                      :2_6:Other "days:
****************** > |>>/base got "days"                                                                    :3_3:UnDeeper:
|>>/base> IN: "days" ) ) ) ) IF ( ( "it is" ( "an NDB" <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

***************** \ |>>/base has returned ("days",0)                                                         :3_3:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) ) IF ( ( "it is" ( "an ND <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

**************** \ |>>/recurse has returned ("days",1)                                                        :3_3:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) ) IF ( ( "it is" ( "an ND <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

*************** \ |>| calling $>> has returned ("days",1)                                                      :3_3:UnDeeper:
*************** / undeepers                                                                                    :3_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :3_3:UnDeeper:
**************** > sameLine: success!                                                                             :3_5:UnDeeper:
undeepers> IN: ) ) ) ) IF ( ( "it is" ( "an NDB" ) ) )  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                        :3_5:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 3 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")              :3_5:UnDeeper:
************** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                              :3_5:UnDeeper:
|>>/base> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
|>>/base> MATCH (COK): BEFORE ( 3 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

************* \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                   :3_5:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

************ \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                  :3_5:UnDeeper:
|>>/recurse> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( " <…>
|>>/recurse> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

*********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :3_5:UnDeeper:
|>| calling $>>> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( " <…>
|>| calling $>>> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                  :3_5:UnDeeper:
********** / undeepers                                                                                                  :3_5:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                   :3_5:UnDeeper:
*********** > sameLine: success!                                                                                :3_2:If:
undeepers> IN: ) ) IF ( ( "it is" ( "an NDB" ) ) ) UNLE <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :3_2:If:
pDT> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pDT> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

********* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                            :3_2:If:
********* / WHERE                                                                                                 :3_2:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected IF
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected IF Expecting: WHERE                                              :3_2:If:
********* / preambleParamText:[Having]                                                                            :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: HAVING                                             :3_2:If:
preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected IF Expecting: HAVING                        :3_2:If:
********* / preambleParamText:[Given]                                                                             :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: GIVEN                                              :3_2:If:
preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected IF Expecting: GIVEN                          :3_2:If:
********* / preambleParamText:[Upon]                                                                              :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: UPON                                               :3_2:If:
preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected IF Expecting: UPON                            :3_2:If:
********* / preambleBoolStructR [Unless]                                                                          :3_2:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected IF Expecting: UNLESS                      :3_2:If:
********* / preambleBoolStructR [When,If]                                                                         :3_2:If:
********** / pBSR                                                                                                 :3_3:GoDeeper:
*********** / ppp inner                                                                                          :3_3:GoDeeper:
************ / expression                                                                                       :3_3:GoDeeper:
************* / termIndent p                                                                                   :3_3:GoDeeper:
************** / term p/1a:label ends directly above next line                                                :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/1b:label ends to the left of line below, with EOL                                     :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/1c:label ends to the right of line below                                              :3_3:GoDeeper:
*************** > |<|                                                                                        :3_3:GoDeeper:
*************** > |<* starting                                                                               :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :3_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :3_3:GoDeeper:
**************** / someIndentation                                                                          :3_3:GoDeeper:
***************** / myindented-GoDeeper                                                                    :3_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                :3_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :3_4:GoDeeper:
****************** / ppp inner                                                                              :3_4:GoDeeper:
******************* / expression                                                                           :3_4:GoDeeper:
******************** / termIndent p                                                                       :3_4:GoDeeper:
********************* / term p/1a:label ends directly above next line                                    :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=20:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/1b:label ends to the left of line below, with EOL                         :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=20:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/1c:label ends to the right of line below                                  :3_4:GoDeeper:
********************** > |<|                                                                            :3_4:GoDeeper:
********************** > |<* starting                                                                   :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :3_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :3_4:GoDeeper:
*********************** / someIndentation                                                              :3_4:GoDeeper:
************************ / myindented-GoDeeper                                                        :3_4:GoDeeper:
myindented-GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented-GoDeeper has returned GoDeeper                                   :3_4:Other "it i:
************************ / manyIndentation/leaf?                                                       :3_4:Other "it i:
************************* / ppp inner                                                                 :3_4:Other "it i:
************************** / expression                                                              :3_4:Other "it i:
*************************** / termIndent p                                                          :3_4:Other "it i:
**************************** / term p/1a:label ends directly above next line                       :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
****************************** / pNumAsText                                                     :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (CERR): "it is" ( "an NDB"
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1a:label ends directly above next line> MATCH (CERR): "it is" ( "an NDB"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=24:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL            :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                          :4_3:UnDeeper:
***************************** / matching EOL                                                     :4_3:UnDeeper:
matching EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=24:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "it is" ( "an NDB"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=24:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                     :3_4:Other "it i:
***************************** > |<|                                                               :3_4:Other "it i:
***************************** > |<* starting                                                      :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                          :4_3:UnDeeper:
***************************** / |<*/parent                                                       :4_3:UnDeeper:
****************************** > |<*/recurse                                                    :4_3:UnDeeper:
****************************** / ppp inner                                                   :4_2:Unless:
******************************* / expression                                                :4_2:Unless:
******************************** / termIndent p                                            :4_2:Unless:
********************************* / term p/1a:label ends directly above next line         :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1a:label ends directly above next line> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected UNLESS
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1b:label ends to the left of line below, with EOL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected UNLESS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/1c:label ends to the right of line below       :4_2:Unless:
********************************** > |<|                                                 :4_2:Unless:
********************************** > |<* starting                                        :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1c:label ends to the right of line below> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/notLabelTerm                                   :4_2:Unless:
********************************** / term p/2:someIndentation expr p                     :4_2:Unless:
*********************************** / someIndentation                                   :4_2:Unless:
************************************ / myindented-GoDeeper                             :4_2:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=27:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: ( :4_2:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=27:
someIndentation> unexpected UNLESS
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: ( :4_2:Unless:
term p/2:someIndentation expr p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=27:
term p/2:someIndentation expr p> unexpected UNLESS
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected UNLESS Expecting: ( :4_2:Unless:
********************************** / term p/3:plain p                                    :4_2:Unless:
*********************************** / pRelPred                                          :4_2:Unless:
************************************ / slRelPred                                       :4_2:Unless:
************************************* / nested simpleHorn                             :4_2:Unless:
************************************** > |^|                                         :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPConstraint                                  :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=27:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPBoolStructR                                 :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=27:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPMT                                          :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slAKA                                     :4_2:Unless:
**************************************** / $*|                                     :4_2:Unless:
***************************************** / slAKA base                            :4_2:Unless:
****************************************** / slMultiTerm                         :4_2:Unless:
******************************************* / someSL                            :4_2:Unless:
******************************************** / pNumAsText                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=27:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=27:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=27:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/3:plain p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=27:
term p/3:plain p> unexpected UNLESS
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/notLabelTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=27:
term p/notLabelTerm> unexpected UNLESS
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected UNLESS Expecting: ( term :4_2:Unless:
termIndent p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=27:
termIndent p> unexpected UNLESS
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected UNLESS Expecting: ( other text or number term :4_2:Unless:
expression> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=27:
expression> unexpected UNLESS
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected UNLESS Expecting: expression :4_2:Unless:
ppp inner> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=27:
ppp inner> unexpected UNLESS
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected UNLESS Expecting: expression :4_2:Unless:
****************************** / withPrePost                                                 :4_2:Unless:
******************************* > |<* starting                                              :4_2:Unless:
******************************* / $*|                                                       :4_2:Unless:
******************************** / pre part                                                :4_2:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
withPrePost> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=27:
withPrePost> unexpected UNLESS
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
****************************** / $*|                                                         :4_2:Unless:
******************************* / pre part                                                  :4_2:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
****************************** / |<*/base                                                       :4_3:UnDeeper:
******************************* / ppp inner                                                    :4_3:UnDeeper:
******************************** / expression                                                 :4_3:UnDeeper:
********************************* / termIndent p                                             :4_3:UnDeeper:
********************************** / term p/1a:label ends directly above next line          :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=24:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/1b:label ends to the left of line below, with EOL :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=24:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/1c:label ends to the right of line below        :4_3:UnDeeper:
*********************************** > |<|                                                  :4_3:UnDeeper:
*********************************** > |<* starting                                         :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=24:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/notLabelTerm                                    :4_3:UnDeeper:
*********************************** / term p/2:someIndentation expr p                      :4_3:UnDeeper:
************************************ / someIndentation                                    :4_3:UnDeeper:
************************************* / myindented-GoDeeper                              :4_3:UnDeeper:
myindented-GoDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_3:UnDeeper:
someIndentation> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected )
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / term p/3:plain p                                     :4_3:UnDeeper:
************************************ / pRelPred                                           :4_3:UnDeeper:
************************************* / slRelPred                                        :4_3:UnDeeper:
************************************** / nested simpleHorn                              :4_3:UnDeeper:
*************************************** > |^|                                          :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
nested simpleHorn> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=24:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPConstraint                                   :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPConstraint> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPBoolStructR                                  :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPBoolStructR> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPMT                                           :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slAKA                                      :4_3:UnDeeper:
***************************************** / $*|                                      :4_3:UnDeeper:
****************************************** / slAKA base                             :4_3:UnDeeper:
******************************************* / slMultiTerm                          :4_3:UnDeeper:
******************************************** / someSL                             :4_3:UnDeeper:
********************************************* / pNumAsText                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPMT> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=24:
RPMT> unexpected )
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=24:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
pRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=24:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/3:plain p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/notLabelTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=24:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_3:UnDeeper:
termIndent p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=24:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_3:UnDeeper:
expression> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=24:
expression> unexpected )
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_3:UnDeeper:
ppp inner> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=24:
ppp inner> unexpected )
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_3:UnDeeper:
******************************* / withPrePost                                                  :4_3:UnDeeper:
******************************** > |<* starting                                               :4_3:UnDeeper:
******************************** / $*|                                                        :4_3:UnDeeper:
********************************* / pre part                                                 :4_3:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=24:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
withPrePost> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=24:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
******************************* / $*|                                                          :4_3:UnDeeper:
******************************** / pre part                                                   :4_3:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=24:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
|<*/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=24:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_3:UnDeeper:
|<*/parent> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=27:
|<*/parent> unexpected UNLESS
|<*/parent> expecting (, ), Other text, or expression

***************************** \ !Unconsumed Error: |<*/parent: Unexpected UNLESS Expecting: ( ( ) Other text expression :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "it is" ( "an NDB"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: ( ( ( ) Other text expression :4_3:UnDeeper:
**************************** / term p/notLabelTerm                                                 :3_4:Other "it i:
***************************** / term p/2:someIndentation expr p                                   :3_4:Other "it i:
****************************** / someIndentation                                                 :3_4:Other "it i:
******************************* / myindented-GoDeeper                                           :3_4:Other "it i:
myindented-GoDeeper> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected "it is"
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "it is" Expecting: ( :3_4:Other "it i:
someIndentation> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected "it is"
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected "it is" Expecting: ( :3_4:Other "it i:
term p/2:someIndentation expr p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected "it is"
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "it is" Expecting: ( :3_4:Other "it i:
***************************** / term p/3:plain p                                                  :3_4:Other "it i:
****************************** / pRelPred                                                        :3_4:Other "it i:
******************************* / slRelPred                                                     :3_4:Other "it i:
******************************** / nested simpleHorn                                           :3_4:Other "it i:
********************************* > |^|                                                       :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |^| deeps                                                :4_3:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)                :4_2:Unless:
nested simpleHorn> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
nested simpleHorn> MATCH (CERR): "it is" ( "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

******************************** \ !Consumed Error: nested simpleHorn: Unexpected UNLESS Expecting: MEANS ) :4_2:Unless:
******************************** / RPConstraint                                                :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |>| calling $>>                                          :4_3:UnDeeper:
********************************** / |>>/recurse                                            :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
********************************** / |>>/base                                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPConstraint> MATCH (CERR): "it is" ( "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
******************************** / RPBoolStructR                                               :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |>| calling $>>                                          :4_3:UnDeeper:
********************************** / |>>/recurse                                            :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
********************************** / |>>/base                                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPBoolStructR> MATCH (CERR): "it is" ( "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
******************************** / RPMT                                                        :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slAKA                                                   :3_4:Other "it i:
*********************************** / $*|                                                   :3_4:Other "it i:
************************************ / slAKA base                                          :3_4:Other "it i:
************************************* / slMultiTerm                                       :3_4:Other "it i:
************************************** / someSL                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************************** \ someSL has returned (["it is","an NDB"],1)     :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************************************* \ slMultiTerm has returned (["it is","an NDB"],1)  :4_3:UnDeeper:
slAKA base> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA base> MATCH (COK): "it is" ( "an NDB"
slAKA base> VALUE: ((["it is","an NDB"],1),[])

************************************ \ slAKA base has returned (["it is","an NDB"],1)     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ $*| has returned (["it is","an NDB"],1)              :4_3:UnDeeper:
*********************************** / |>>/recurse                                          :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / |>>/base                                             :4_3:UnDeeper:
************************************ / slAKA optional akapart                             :4_3:UnDeeper:
************************************* / |?| optional something                           :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
************************************** / |>>/base                                       :4_3:UnDeeper:
*************************************** / PAKA/akapart                                 :4_3:UnDeeper:
**************************************** / $>|                                        :4_3:UnDeeper:
***************************************** / Aka Token                                :4_3:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=24:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_3:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected )
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_3:UnDeeper:
PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=24:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :4_3:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)    :4_3:UnDeeper:
************************************ > |>>/base got Nothing                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :4_3:UnDeeper:
*********************************** / |>>/recurse                                          :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / |>>/base                                             :4_3:UnDeeper:
************************************ / slAKA optional typically                           :4_3:UnDeeper:
************************************* / |?| optional something                           :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
************************************** / |>>/base                                       :4_3:UnDeeper:
*************************************** / typically                                    :4_3:UnDeeper:
**************************************** / $>|                                        :4_3:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=24:
typically> unexpected )
typically> expecting TYPICALLY

*************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :4_3:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)  :4_3:UnDeeper:
************************************ > |>>/base got Nothing                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :4_3:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_3:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                          :4_3:UnDeeper:
slAKA> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA> MATCH (COK): "it is" ( "an NDB"
slAKA> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slAKA has returned (["it is","an NDB"],1)              :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
RPMT> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPMT> MATCH (COK): "it is" ( "an NDB"
RPMT> VALUE: ((RPMT ["it is","an NDB"],1),[])

******************************** \ RPMT has returned (RPMT ["it is","an NDB"],1)              :4_3:UnDeeper:
slRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slRelPred> MATCH (COK): "it is" ( "an NDB"
slRelPred> VALUE: ((RPMT ["it is","an NDB"],1),[])

******************************* \ slRelPred has returned (RPMT ["it is","an NDB"],1)           :4_3:UnDeeper:
******************************* / undeepers                                                    :4_3:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_3:UnDeeper:
******************************** > sameLine: success!                                           :4_4:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                      :4_4:UnDeeper:
pRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
pRelPred> MATCH (COK): "it is" ( "an NDB" )
pRelPred> VALUE: (RPMT ["it is","an NDB"],[])

****************************** \ pRelPred has returned RPMT ["it is","an NDB"]                    :4_4:UnDeeper:
term p/3:plain p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/3:plain p> MATCH (COK): "it is" ( "an NDB" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])     :4_4:UnDeeper:
term p/notLabelTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/notLabelTerm> MATCH (COK): "it is" ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])    :4_4:UnDeeper:
termIndent p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
termIndent p> MATCH (COK): "it is" ( "an NDB" )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])             :4_4:UnDeeper:
*************************** / binary(Or)                                                             :4_4:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_4:UnDeeper:
*************************** / binary(And)                                                            :4_4:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_4:UnDeeper:
*************************** / binary(SetLess)                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_4:UnDeeper:
*************************** / binary(SetPlus)                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_4:UnDeeper:
expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                 :4_4:UnDeeper:
ppp inner> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
ppp inner> MATCH (COK): "it is" ( "an NDB" )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_4:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])          :4_4:UnDeeper:
************************ / myindented-UnDeeper                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented-UnDeeper has returned UnDeeper                                      :4_5:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_5:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])      :4_5:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_5:UnDeeper:
termIndent p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
termIndent p> MATCH (COK): ( "it is" ( "an NDB" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                             :4_5:UnDeeper:
******************** / binary(Or)                                                                             :4_5:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_5:UnDeeper:
******************** / binary(And)                                                                            :4_5:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_5:UnDeeper:
******************** / binary(SetLess)                                                                        :4_5:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_5:UnDeeper:
******************** / binary(SetPlus)                                                                        :4_5:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_5:UnDeeper:
expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************* \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                 :4_5:UnDeeper:
ppp inner> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
ppp inner> MATCH (COK): ( "it is" ( "an NDB" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

****************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                    :4_5:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                          :4_5:UnDeeper:
***************** / myindented-UnDeeper                                                                          :4_5:UnDeeper:
myindented-UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented-UnDeeper has returned UnDeeper                                             :4_2:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                           :4_2:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])             :4_2:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                           :4_2:Unless:
termIndent p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
termIndent p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************* \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                    :4_2:Unless:
************* / binary(Or)                                                                                    :4_2:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected UNLESS Expecting: OR                                :4_2:Unless:
************* / binary(And)                                                                                   :4_2:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected UNLESS Expecting: AND                              :4_2:Unless:
************* / binary(SetLess)                                                                               :4_2:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected UNLESS Expecting: LESS                         :4_2:Unless:
************* / binary(SetPlus)                                                                               :4_2:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected UNLESS Expecting: PLUS                         :4_2:Unless:
expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************ \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                        :4_2:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                           :4_2:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                    :4_2:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

********* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                        :4_2:Unless:
********* / preambleBoolStructR [When,If]                                                                         :4_2:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected UNLESS Expecting: IF WHEN                :4_2:Unless:
********* / WHERE                                                                                                 :4_2:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected UNLESS Expecting: WHERE                                          :4_2:Unless:
********* / preambleParamText:[Having]                                                                            :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: HAVING                                         :4_2:Unless:
preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UNLESS Expecting: HAVING                    :4_2:Unless:
********* / preambleParamText:[Given]                                                                             :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                          :4_2:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                      :4_2:Unless:
********* / preambleParamText:[Upon]                                                                              :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                           :4_2:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                        :4_2:Unless:
********* / preambleBoolStructR [Unless]                                                                          :4_2:Unless:
********** / pBSR                                                                                                 :4_3:GoDeeper:
*********** / ppp inner                                                                                          :4_3:GoDeeper:
************ / expression                                                                                       :4_3:GoDeeper:
************* / termIndent p                                                                                   :4_3:GoDeeper:
************** / term p/1a:label ends directly above next line                                                :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=28:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/1b:label ends to the left of line below, with EOL                                     :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=28:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/1c:label ends to the right of line below                                              :4_3:GoDeeper:
*************** > |<|                                                                                        :4_3:GoDeeper:
*************** > |<* starting                                                                               :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented-GoDeeper                                                                    :4_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                :4_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :4_4:GoDeeper:
****************** / ppp inner                                                                              :4_4:GoDeeper:
******************* / expression                                                                           :4_4:GoDeeper:
******************** / termIndent p                                                                       :4_4:GoDeeper:
********************* / term p/1a:label ends directly above next line                                    :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/1b:label ends to the left of line below, with EOL                         :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/1c:label ends to the right of line below                                  :4_4:GoDeeper:
********************** > |<|                                                                            :4_4:GoDeeper:
********************** > |<* starting                                                                   :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=29:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :4_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :4_4:GoDeeper:
*********************** / someIndentation                                                              :4_4:GoDeeper:
************************ / myindented-GoDeeper                                                        :4_4:GoDeeper:
myindented-GoDeeper> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented-GoDeeper has returned GoDeeper                                   :4_4:Other "you:
************************ / manyIndentation/leaf?                                                       :4_4:Other "you:
************************* / ppp inner                                                                 :4_4:Other "you:
************************** / expression                                                              :4_4:Other "you:
*************************** / termIndent p                                                          :4_4:Other "you:
**************************** / term p/1a:label ends directly above next line                       :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
****************************** / pNumAsText                                                     :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (CERR): "you are a Public Agency"
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1a:label ends directly above next line> MATCH (CERR): "you are a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=31:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL            :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)                 :6_3:UnDeeper:
***************************** / matching EOL                                                     :6_3:UnDeeper:
matching EOL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=31:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :6_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "you are a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=31:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                     :4_4:Other "you:
***************************** > |<|                                                               :4_4:Other "you:
***************************** > |<* starting                                                      :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)                 :6_3:UnDeeper:
***************************** / |<*/parent                                                       :6_3:UnDeeper:
****************************** > |<*/recurse                                                    :6_3:UnDeeper:
****************************** / ppp inner                                                   :6_2:Do:
******************************* / expression                                                :6_2:Do:
******************************** / termIndent p                                            :6_2:Do:
********************************* / term p/1a:label ends directly above next line         :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1a:label ends directly above next line> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=33:
term p/1a:label ends directly above next line> unexpected DO
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/1b:label ends to the left of line below, with EOL :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1b:label ends to the left of line below, with EOL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=33:
term p/1b:label ends to the left of line below, with EOL> unexpected DO
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/1c:label ends to the right of line below       :6_2:Do:
********************************** > |<|                                                 :6_2:Do:
********************************** > |<* starting                                        :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1c:label ends to the right of line below> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=33:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/notLabelTerm                                   :6_2:Do:
********************************** / term p/2:someIndentation expr p                     :6_2:Do:
*********************************** / someIndentation                                   :6_2:Do:
************************************ / myindented-GoDeeper                             :6_2:Do:
myindented-GoDeeper> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=33:
myindented-GoDeeper> unexpected DO
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected DO Expecting: ( :6_2:Do:
someIndentation> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=33:
someIndentation> unexpected DO
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected DO Expecting: ( :6_2:Do:
term p/2:someIndentation expr p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=33:
term p/2:someIndentation expr p> unexpected DO
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected DO Expecting: ( :6_2:Do:
********************************** / term p/3:plain p                                    :6_2:Do:
*********************************** / pRelPred                                          :6_2:Do:
************************************ / slRelPred                                       :6_2:Do:
************************************* / nested simpleHorn                             :6_2:Do:
************************************** > |^|                                         :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
nested simpleHorn> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPConstraint                                  :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPConstraint> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPBoolStructR                                 :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPBoolStructR> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPMT                                          :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slAKA                                     :6_2:Do:
**************************************** / $*|                                     :6_2:Do:
***************************************** / slAKA base                            :6_2:Do:
****************************************** / slMultiTerm                         :6_2:Do:
******************************************* / someSL                            :6_2:Do:
******************************************** / pNumAsText                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
slAKA base> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=33:
slAKA base> unexpected DO
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
slAKA> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=33:
slAKA> unexpected DO
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPMT> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=33:
RPMT> unexpected DO
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected DO Expecting: other text or number :6_2:Do:
slRelPred> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=33:
slRelPred> unexpected DO
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected DO Expecting: other text or number :6_2:Do:
pRelPred> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=33:
pRelPred> unexpected DO
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected DO Expecting: other text or number :6_2:Do:
term p/3:plain p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=33:
term p/3:plain p> unexpected DO
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected DO Expecting: other text or number :6_2:Do:
term p/notLabelTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=33:
term p/notLabelTerm> unexpected DO
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected DO Expecting: ( term :6_2:Do:
termIndent p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=33:
termIndent p> unexpected DO
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected DO Expecting: ( other text or number term :6_2:Do:
expression> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=33:
expression> unexpected DO
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected DO Expecting: expression :6_2:Do:
ppp inner> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=33:
ppp inner> unexpected DO
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected DO Expecting: expression :6_2:Do:
****************************** / withPrePost                                                 :6_2:Do:
******************************* > |<* starting                                              :6_2:Do:
******************************* / $*|                                                       :6_2:Do:
******************************** / pre part                                                :6_2:Do:
pre part> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=33:
pre part> unexpected DO
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text :6_2:Do:
withPrePost> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=33:
withPrePost> unexpected DO
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected DO Expecting: ( Other text :6_2:Do:
****************************** / $*|                                                         :6_2:Do:
******************************* / pre part                                                  :6_2:Do:
pre part> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=33:
pre part> unexpected DO
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text :6_2:Do:
****************************** / |<*/base                                                       :6_3:UnDeeper:
******************************* / ppp inner                                                    :6_3:UnDeeper:
******************************** / expression                                                 :6_3:UnDeeper:
********************************* / termIndent p                                             :6_3:UnDeeper:
********************************** / term p/1a:label ends directly above next line          :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=31:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/1b:label ends to the left of line below, with EOL :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=31:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/1c:label ends to the right of line below        :6_3:UnDeeper:
*********************************** > |<|                                                  :6_3:UnDeeper:
*********************************** > |<* starting                                         :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=31:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/notLabelTerm                                    :6_3:UnDeeper:
*********************************** / term p/2:someIndentation expr p                      :6_3:UnDeeper:
************************************ / someIndentation                                    :6_3:UnDeeper:
************************************* / myindented-GoDeeper                              :6_3:UnDeeper:
myindented-GoDeeper> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=31:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_3:UnDeeper:
someIndentation> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected )
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=31:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / term p/3:plain p                                     :6_3:UnDeeper:
************************************ / pRelPred                                           :6_3:UnDeeper:
************************************* / slRelPred                                        :6_3:UnDeeper:
************************************** / nested simpleHorn                              :6_3:UnDeeper:
*************************************** > |^|                                          :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
nested simpleHorn> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPConstraint                                   :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPConstraint> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPBoolStructR                                  :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPBoolStructR> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPMT                                           :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slAKA                                      :6_3:UnDeeper:
***************************************** / $*|                                      :6_3:UnDeeper:
****************************************** / slAKA base                             :6_3:UnDeeper:
******************************************* / slMultiTerm                          :6_3:UnDeeper:
******************************************** / someSL                             :6_3:UnDeeper:
********************************************* / pNumAsText                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slAKA base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slAKA> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPMT> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected )
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slRelPred> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
pRelPred> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/3:plain p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=31:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/notLabelTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=31:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_3:UnDeeper:
termIndent p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=31:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_3:UnDeeper:
expression> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=31:
expression> unexpected )
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_3:UnDeeper:
ppp inner> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=31:
ppp inner> unexpected )
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_3:UnDeeper:
******************************* / withPrePost                                                  :6_3:UnDeeper:
******************************** > |<* starting                                               :6_3:UnDeeper:
******************************** / $*|                                                        :6_3:UnDeeper:
********************************* / pre part                                                 :6_3:UnDeeper:
pre part> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
withPrePost> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=31:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
******************************* / $*|                                                          :6_3:UnDeeper:
******************************** / pre part                                                   :6_3:UnDeeper:
pre part> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
|<*/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=31:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_3:UnDeeper:
|<*/parent> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=33:
|<*/parent> unexpected DO
|<*/parent> expecting (, ), Other text, or expression

***************************** \ !Unconsumed Error: |<*/parent: Unexpected DO Expecting: ( ( ) Other text expression :6_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "you are a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=33:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: ( ( ( ) Other text expression :6_3:UnDeeper:
**************************** / term p/notLabelTerm                                                 :4_4:Other "you:
***************************** / term p/2:someIndentation expr p                                   :4_4:Other "you:
****************************** / someIndentation                                                 :4_4:Other "you:
******************************* / myindented-GoDeeper                                           :4_4:Other "you:
myindented-GoDeeper> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=30:
myindented-GoDeeper> unexpected "you are a Public Agency"
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
someIndentation> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
***************************** / term p/3:plain p                                                  :4_4:Other "you:
****************************** / pRelPred                                                        :4_4:Other "you:
******************************* / slRelPred                                                     :4_4:Other "you:
******************************** / nested simpleHorn                                           :4_4:Other "you:
********************************* > |^|                                                       :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |^| deeps                                                :6_3:UnDeeper:
|^| deeps> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

********************************* \ |^| deeps has returned ([(),()],-2)                   :6_2:Do:
nested simpleHorn> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

******************************** \ !Consumed Error: nested simpleHorn: Unexpected DO Expecting: MEANS ) :6_2:Do:
******************************** / RPConstraint                                                :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>| calling $>>                                          :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
********************************** / |>>/base                                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_3:UnDeeper:
|>| calling $>>> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
RPConstraint> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
******************************** / RPBoolStructR                                               :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>| calling $>>                                          :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
********************************** / |>>/base                                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_3:UnDeeper:
|>| calling $>>> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
RPBoolStructR> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
******************************** / RPMT                                                        :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slAKA                                                   :4_4:Other "you:
*********************************** / $*|                                                   :4_4:Other "you:
************************************ / slAKA base                                          :4_4:Other "you:
************************************* / slMultiTerm                                       :4_4:Other "you:
************************************** / someSL                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************** \ someSL has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ slAKA base has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ $*| has returned (["you are a Public Agency"],0)     :6_3:UnDeeper:
*********************************** / |>>/recurse                                          :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / |>>/base                                             :6_3:UnDeeper:
************************************ / slAKA optional akapart                             :6_3:UnDeeper:
************************************* / |?| optional something                           :6_3:UnDeeper:
************************************** / |>>/recurse                                    :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
************************************** / |>>/base                                       :6_3:UnDeeper:
*************************************** / PAKA/akapart                                 :6_3:UnDeeper:
**************************************** / $>|                                        :6_3:UnDeeper:
***************************************** / Aka Token                                :6_3:UnDeeper:
Aka Token> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=31:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_3:UnDeeper:
$>|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected )
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_3:UnDeeper:
PAKA/akapart> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=31:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_3:UnDeeper:
|?| optional something> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :6_3:UnDeeper:
slAKA optional akapart> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)    :6_3:UnDeeper:
************************************ > |>>/base got Nothing                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :6_3:UnDeeper:
*********************************** / |>>/recurse                                          :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / |>>/base                                             :6_3:UnDeeper:
************************************ / slAKA optional typically                           :6_3:UnDeeper:
************************************* / |?| optional something                           :6_3:UnDeeper:
************************************** / |>>/recurse                                    :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
************************************** / |>>/base                                       :6_3:UnDeeper:
*************************************** / typically                                    :6_3:UnDeeper:
**************************************** / $>|                                        :6_3:UnDeeper:
$>|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
typically> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=31:
typically> unexpected )
typically> expecting TYPICALLY

*************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
|?| optional something> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :6_3:UnDeeper:
slAKA optional typically> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)  :6_3:UnDeeper:
************************************ > |>>/base got Nothing                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :6_3:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                          :6_3:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA has returned (["you are a Public Agency"],0)     :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

******************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)     :6_3:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

******************************* \ slRelPred has returned (RPMT ["you are a Public Agency"],0)  :6_3:UnDeeper:
******************************* / undeepers                                                    :6_3:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
******************************** > sameLine: success!                                         :6_3:UnDeeper:
undeepers> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                    :6_3:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

****************************** \ pRelPred has returned RPMT ["you are a Public Agency"]         :6_3:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
termIndent p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
termIndent p> MATCH (COK): "you are a Public Agency"
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])  :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :6_3:UnDeeper:
*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :6_3:UnDeeper:
*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :6_3:UnDeeper:
*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :6_3:UnDeeper:
expression> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])      :6_3:UnDeeper:
ppp inner> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
ppp inner> MATCH (COK): "you are a Public Agency"
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_3:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
************************ / myindented-UnDeeper                                                        :6_3:UnDeeper:
myindented-UnDeeper> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented-UnDeeper has returned UnDeeper                                    :6_4:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_4:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_4:UnDeeper:
termIndent p> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
termIndent p> MATCH (COK): ( "you are a Public Agency" )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_4:UnDeeper:
******************** / binary(Or)                                                                           :6_4:UnDeeper:
binary(Or)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :6_4:UnDeeper:
******************** / binary(And)                                                                          :6_4:UnDeeper:
binary(And)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :6_4:UnDeeper:
******************** / binary(SetLess)                                                                      :6_4:UnDeeper:
binary(SetLess)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :6_4:UnDeeper:
******************** / binary(SetPlus)                                                                      :6_4:UnDeeper:
binary(SetPlus)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :6_4:UnDeeper:
expression> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                      :6_4:UnDeeper:
ppp inner> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
ppp inner> MATCH (COK): ( "you are a Public Agency" )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                         :6_4:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])               :6_4:UnDeeper:
***************** / myindented-UnDeeper                                                                        :6_4:UnDeeper:
myindented-UnDeeper> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented-UnDeeper has returned UnDeeper                                             :6_2:Do:
someIndentation> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])    :6_2:Do:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
termIndent p> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
termIndent p> MATCH (COK): ( ( "you are a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                           :6_2:Do:
************* / binary(Or)                                                                                    :6_2:Do:
binary(Or)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected DO
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected DO Expecting: OR                                    :6_2:Do:
************* / binary(And)                                                                                   :6_2:Do:
binary(And)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected DO
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected DO Expecting: AND                                  :6_2:Do:
************* / binary(SetLess)                                                                               :6_2:Do:
binary(SetLess)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected DO Expecting: LESS                             :6_2:Do:
************* / binary(SetPlus)                                                                               :6_2:Do:
binary(SetPlus)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected DO Expecting: PLUS                             :6_2:Do:
expression> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                               :6_2:Do:
ppp inner> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                                  :6_2:Do:
pBSR> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                           :6_2:Do:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

********* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))            :6_2:Do:
********* / preambleBoolStructR [Unless]                                                                          :6_2:Do:
preambleBoolStructR [Unless]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=33:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                      :6_2:Do:
********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected DO
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                              :6_2:Do:
********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                             :6_2:Do:
preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                        :6_2:Do:
********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                              :6_2:Do:
preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                          :6_2:Do:
********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                               :6_2:Do:
preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                            :6_2:Do:
********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected DO
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                              :6_2:Do:
********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                             :6_2:Do:
preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                        :6_2:Do:
********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                              :6_2:Do:
preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                          :6_2:Do:
********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                               :6_2:Do:
preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                            :6_2:Do:
********* / pDoAction/Do                                                                                          :6_2:Do:
pDoAction/Do> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

********* \ pDoAction/Do has returned Do                                                                           :6_3:GoDeeper:
********* / pDoAction/pAction                                                                                      :6_3:GoDeeper:
********** / someIndentation                                                                                      :6_3:GoDeeper:
*********** / myindented-GoDeeper                                                                                :6_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                            :6_4:GoDeeper:
*********** / manyIndentation/leaf?                                                                                :6_4:GoDeeper:
************ / pAction calling pParamText                                                                         :6_4:GoDeeper:
************* / pParamText                                                                                       :6_4:GoDeeper:
************** / pParamText(flat) first line: pKeyValues                                                        :6_4:GoDeeper:
*************** / pKeyValuesAka                                                                                :6_4:GoDeeper:
**************** / slAKA                                                                                      :6_4:GoDeeper:
***************** / $*|                                                                                      :6_4:GoDeeper:
****************** / slAKA base                                                                             :6_4:GoDeeper:
******************* / slKeyValues                                                                          :6_4:GoDeeper:
******************** / $*|                                                                                :6_4:GoDeeper:
********************* / someSL                                                                           :6_4:GoDeeper:
********************** / pNumAsText                                                                     :6_4:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :6_4:GoDeeper:
someSL> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :6_4:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
slKeyValues> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=35:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
slAKA base> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected (
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number            :6_4:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected (
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :6_4:GoDeeper:
slAKA> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected (
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                     :6_4:GoDeeper:
pKeyValuesAka> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=35:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=35:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

************** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
pParamText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=35:
pParamText> unexpected (
pParamText> expecting other text or number

************* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                      :6_4:GoDeeper:
pAction calling pParamText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=35:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

************ \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number        :6_4:GoDeeper:
manyIndentation/leaf?> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=35:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

*********** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
*********** / manyIndentation/deeper; calling someIndentation                                                      :6_4:GoDeeper:
************ / someIndentation                                                                                    :6_4:GoDeeper:
************* / myindented-GoDeeper                                                                              :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented-GoDeeper has returned GoDeeper                                                         :6_4:Other "NOTI:
************* / manyIndentation/leaf?                                                                             :6_4:Other "NOTI:
************** / pAction calling pParamText                                                                      :6_4:Other "NOTI:
*************** / pParamText                                                                                    :6_4:Other "NOTI:
**************** / pParamText(flat) first line: pKeyValues                                                     :6_4:Other "NOTI:
***************** / pKeyValuesAka                                                                             :6_4:Other "NOTI:
****************** / slAKA                                                                                   :6_4:Other "NOTI:
******************* / $*|                                                                                   :6_4:Other "NOTI:
******************** / slAKA base                                                                          :6_4:Other "NOTI:
********************* / slKeyValues                                                                       :6_4:Other "NOTI:
********************** / $*|                                                                             :6_4:Other "NOTI:
*********************** / someSL                                                                        :6_4:Other "NOTI:
someSL> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
someSL> MATCH (COK): "NOTIFY" ( "the PDPC"
someSL> VALUE: ((["NOTIFY","the PDPC"],1),[])

*********************** \ someSL has returned (["NOTIFY","the PDPC"],1)                                    :7_5:UnDeeper:
$*|> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
$*|> MATCH (COK): "NOTIFY" ( "the PDPC"
$*|> VALUE: ((["NOTIFY","the PDPC"],1),[])

********************** \ $*| has returned (["NOTIFY","the PDPC"],1)                                         :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / |?| optional something                                                           :7_5:UnDeeper:
************************ / |>>/recurse                                                                    :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :7_5:UnDeeper:
************************ / |>>/base                                                                       :7_5:UnDeeper:
************************* / slTypeSig                                                                    :7_5:UnDeeper:
************************** / $>|                                                                        :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting :: or IS

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                      :7_5:UnDeeper:
slTypeSig> IN: ) "in" ( "the form and manner specified  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

************************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                  :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                     :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :7_5:UnDeeper:
*********************** > |>>/base got Nothing                                                             :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                                  :7_5:UnDeeper:
slKeyValues> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slKeyValues> MATCH (COK): "NOTIFY" ( "the PDPC"
slKeyValues> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

********************* \ slKeyValues has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                      :7_5:UnDeeper:
slAKA base> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slAKA base> MATCH (COK): "NOTIFY" ( "the PDPC"
slAKA base> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

******************** \ slAKA base has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                         :7_5:UnDeeper:
$*|> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
$*|> MATCH (COK): "NOTIFY" ( "the PDPC"
$*|> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

******************* \ $*| has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                                  :7_5:UnDeeper:
******************* / |>>/recurse                                                                              :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :7_5:UnDeeper:
******************* / |>>/base                                                                                 :7_5:UnDeeper:
******************** / slAKA optional akapart                                                                 :7_5:UnDeeper:
********************* / |?| optional something                                                               :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / PAKA/akapart                                                                     :7_5:UnDeeper:
************************ / $>|                                                                            :7_5:UnDeeper:
************************* / Aka Token                                                                    :7_5:UnDeeper:
Aka Token> IN: ) "in" ( "the form and manner specified  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                    :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                            :7_5:UnDeeper:
PAKA/akapart> IN: ) "in" ( "the form and manner specified  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                     :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                           :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                      :7_5:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "the form and manner specified  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                        :7_5:UnDeeper:
******************** > |>>/base got Nothing                                                                   :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                        :7_5:UnDeeper:
******************* / |>>/recurse                                                                              :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :7_5:UnDeeper:
******************* / |>>/base                                                                                 :7_5:UnDeeper:
******************** / slAKA optional typically                                                               :7_5:UnDeeper:
********************* / |?| optional something                                                               :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / typically                                                                        :7_5:UnDeeper:
************************ / $>|                                                                            :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                      :7_5:UnDeeper:
typically> IN: ) "in" ( "the form and manner specified  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                  :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                     :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                      :7_5:UnDeeper:
slAKA optional typically> IN: ) "in" ( "the form and manner specified  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                      :7_5:UnDeeper:
******************** > |>>/base got Nothing                                                                   :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                        :7_5:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                           :7_5:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                              :7_5:UnDeeper:
slAKA> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slAKA> MATCH (COK): "NOTIFY" ( "the PDPC"
slAKA> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

****************** \ slAKA has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                                  :7_5:UnDeeper:
****************** / undeepers                                                                                  :7_5:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                   :7_5:UnDeeper:
******************* > sameLine: success!                                                                    :7_4:Other "in":
undeepers> IN: ) "in" ( "the form and manner specified  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                               :7_4:Other "in":
pKeyValuesAka> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pKeyValuesAka> MATCH (COK): "NOTIFY" ( "the PDPC" )
pKeyValuesAka> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing),[])

***************** \ pKeyValuesAka has returned ("NOTIFY" :| ["the PDPC"],Nothing)                             :7_4:Other "in":
pParamText(flat) first line: pKeyValues> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "NOTIFY" ( "the PDPC" )
pParamText(flat) first line: pKeyValues> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing),[])

**************** \ pParamText(flat) first line: pKeyValues has returned ("NOTIFY" :| ["the PDPC"],Nothing)     :7_4:Other "in":
**************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                      :7_4:Other "in":
***************** / manyIndentation/leaf?                                                                     :7_4:Other "in":
****************** / sameMany                                                                                :7_4:Other "in":
******************* / pKeyValuesAka                                                                         :7_4:Other "in":
******************** / slAKA                                                                               :7_4:Other "in":
********************* / $*|                                                                               :7_4:Other "in":
********************** / slAKA base                                                                      :7_4:Other "in":
*********************** / slKeyValues                                                                   :7_4:Other "in":
************************ / $*|                                                                         :7_4:Other "in":
************************* / someSL                                                                    :7_4:Other "in":
someSL> IN: "in" ( "the form and manner specified at <…>
someSL> MATCH (COK): "in" ( "the form and manner specified at <…>
someSL> VALUE: ((["in","the form and manner specified at www.pdpc.gov.sg"],1),[])

************************* \ someSL has returned (["in","the form and manner specified at www.pdpc.gov.sg"],1) :8_5:UnDeeper:
$*|> IN: "in" ( "the form and manner specified at <…>
$*|> MATCH (COK): "in" ( "the form and manner specified at <…>
$*|> VALUE: ((["in","the form and manner specified at www.pdpc.gov.sg"],1),[])

************************ \ $*| has returned (["in","the form and manner specified at www.pdpc.gov.sg"],1) :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / |?| optional something                                                       :8_5:UnDeeper:
************************** / |>>/recurse                                                                :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :8_5:UnDeeper:
************************** / |>>/base                                                                   :8_5:UnDeeper:
*************************** / slTypeSig                                                                :8_5:UnDeeper:
**************************** / $>|                                                                    :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                  :8_5:UnDeeper:
slTypeSig> IN: ) "with" ( "a Notification Message" ) "a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=43:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::              :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                 :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                              :8_5:UnDeeper:
************************* > |>>/base got Nothing                                                         :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                              :8_5:UnDeeper:
slKeyValues> IN: "in" ( "the form and manner specified at <…>
slKeyValues> MATCH (COK): "in" ( "the form and manner specified at <…>
slKeyValues> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

*********************** \ slKeyValues has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
slAKA base> IN: "in" ( "the form and manner specified at <…>
slAKA base> MATCH (COK): "in" ( "the form and manner specified at <…>
slAKA base> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

********************** \ slAKA base has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
$*|> IN: "in" ( "the form and manner specified at <…>
$*|> MATCH (COK): "in" ( "the form and manner specified at <…>
$*|> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

********************* \ $*| has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
********************* / |>>/recurse                                                                          :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :8_5:UnDeeper:
********************* / |>>/base                                                                             :8_5:UnDeeper:
********************** / slAKA optional akapart                                                             :8_5:UnDeeper:
*********************** / |?| optional something                                                           :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / PAKA/akapart                                                                 :8_5:UnDeeper:
************************** / $>|                                                                        :8_5:UnDeeper:
*************************** / Aka Token                                                                :8_5:UnDeeper:
Aka Token> IN: ) "with" ( "a Notification Message" ) "a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=43:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :8_5:UnDeeper:
PAKA/akapart> IN: ) "with" ( "a Notification Message" ) "a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=43:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :8_5:UnDeeper:
slAKA optional akapart> IN: ) "with" ( "a Notification Message" ) "a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                    :8_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :8_5:UnDeeper:
********************* / |>>/recurse                                                                          :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :8_5:UnDeeper:
********************* / |>>/base                                                                             :8_5:UnDeeper:
********************** / slAKA optional typically                                                           :8_5:UnDeeper:
*********************** / |?| optional something                                                           :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / typically                                                                    :8_5:UnDeeper:
************************** / $>|                                                                        :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :8_5:UnDeeper:
typically> IN: ) "with" ( "a Notification Message" ) "a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=43:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :8_5:UnDeeper:
slAKA optional typically> IN: ) "with" ( "a Notification Message" ) "a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                                  :8_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :8_5:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                       :8_5:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                          :8_5:UnDeeper:
slAKA> IN: "in" ( "the form and manner specified at <…>
slAKA> MATCH (COK): "in" ( "the form and manner specified at <…>
slAKA> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

******************** \ slAKA has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
******************** / undeepers                                                                              :8_5:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers               :8_5:UnDeeper:
********************* > sameLine: success!                                                                :8_4:Other "with:
undeepers> IN: ) "with" ( "a Notification Message" ) "a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                           :8_4:Other "with:
pKeyValuesAka> IN: "in" ( "the form and manner specified at <…>
pKeyValuesAka> MATCH (COK): "in" ( "the form and manner specified at <…>
pKeyValuesAka> VALUE: (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),[])

******************* \ pKeyValuesAka has returned ("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing) :8_4:Other "with:
******************* / pKeyValuesAka                                                                         :8_4:Other "with:
******************** / slAKA                                                                               :8_4:Other "with:
********************* / $*|                                                                               :8_4:Other "with:
********************** / slAKA base                                                                      :8_4:Other "with:
*********************** / slKeyValues                                                                   :8_4:Other "with:
************************ / $*|                                                                         :8_4:Other "with:
************************* / someSL                                                                    :8_4:Other "with:
someSL> IN: "with" ( "a Notification Message" ) "and <…>
someSL> MATCH (COK): "with" ( "a Notification Message"
someSL> VALUE: ((["with","a Notification Message"],1),[])

************************* \ someSL has returned (["with","a Notification Message"],1)                    :9_5:UnDeeper:
$*|> IN: "with" ( "a Notification Message" ) "and <…>
$*|> MATCH (COK): "with" ( "a Notification Message"
$*|> VALUE: ((["with","a Notification Message"],1),[])

************************ \ $*| has returned (["with","a Notification Message"],1)                         :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / |?| optional something                                                       :9_5:UnDeeper:
************************** / |>>/recurse                                                                :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :9_5:UnDeeper:
************************** / |>>/base                                                                   :9_5:UnDeeper:
*************************** / slTypeSig                                                                :9_5:UnDeeper:
**************************** / $>|                                                                    :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                  :9_5:UnDeeper:
slTypeSig> IN: ) "and" ( ( ( "a list of individuals for <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=47:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::              :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                 :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                              :9_5:UnDeeper:
************************* > |>>/base got Nothing                                                         :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                              :9_5:UnDeeper:
slKeyValues> IN: "with" ( "a Notification Message" ) "and <…>
slKeyValues> MATCH (COK): "with" ( "a Notification Message"
slKeyValues> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

*********************** \ slKeyValues has returned (("with" :| ["a Notification Message"],Nothing),1)      :9_5:UnDeeper:
slAKA base> IN: "with" ( "a Notification Message" ) "and <…>
slAKA base> MATCH (COK): "with" ( "a Notification Message"
slAKA base> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

********************** \ slAKA base has returned (("with" :| ["a Notification Message"],Nothing),1)         :9_5:UnDeeper:
$*|> IN: "with" ( "a Notification Message" ) "and <…>
$*|> MATCH (COK): "with" ( "a Notification Message"
$*|> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

********************* \ $*| has returned (("with" :| ["a Notification Message"],Nothing),1)                  :9_5:UnDeeper:
********************* / |>>/recurse                                                                          :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :9_5:UnDeeper:
********************* / |>>/base                                                                             :9_5:UnDeeper:
********************** / slAKA optional akapart                                                             :9_5:UnDeeper:
*********************** / |?| optional something                                                           :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / PAKA/akapart                                                                 :9_5:UnDeeper:
************************** / $>|                                                                        :9_5:UnDeeper:
*************************** / Aka Token                                                                :9_5:UnDeeper:
Aka Token> IN: ) "and" ( ( ( "a list of individuals for <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=47:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :9_5:UnDeeper:
PAKA/akapart> IN: ) "and" ( ( ( "a list of individuals for <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=47:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :9_5:UnDeeper:
slAKA optional akapart> IN: ) "and" ( ( ( "a list of individuals for <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                    :9_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :9_5:UnDeeper:
********************* / |>>/recurse                                                                          :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :9_5:UnDeeper:
********************* / |>>/base                                                                             :9_5:UnDeeper:
********************** / slAKA optional typically                                                           :9_5:UnDeeper:
*********************** / |?| optional something                                                           :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / typically                                                                    :9_5:UnDeeper:
************************** / $>|                                                                        :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :9_5:UnDeeper:
typically> IN: ) "and" ( ( ( "a list of individuals for <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=47:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :9_5:UnDeeper:
slAKA optional typically> IN: ) "and" ( ( ( "a list of individuals for <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                                  :9_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :9_5:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                       :9_5:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                          :9_5:UnDeeper:
slAKA> IN: "with" ( "a Notification Message" ) "and <…>
slAKA> MATCH (COK): "with" ( "a Notification Message"
slAKA> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

******************** \ slAKA has returned (("with" :| ["a Notification Message"],Nothing),1)                  :9_5:UnDeeper:
******************** / undeepers                                                                              :9_5:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers               :9_5:UnDeeper:
********************* > sameLine: success!                                                                :9_4:Other "and":
undeepers> IN: ) "and" ( ( ( "a list of individuals for <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                           :9_4:Other "and":
pKeyValuesAka> IN: "with" ( "a Notification Message" ) "and <…>
pKeyValuesAka> MATCH (COK): "with" ( "a Notification Message" )
pKeyValuesAka> VALUE: (("with" :| ["a Notification Message"],Nothing),[])

******************* \ pKeyValuesAka has returned ("with" :| ["a Notification Message"],Nothing)             :9_4:Other "and":
******************* / pKeyValuesAka                                                                         :9_4:Other "and":
******************** / slAKA                                                                               :9_4:Other "and":
********************* / $*|                                                                               :9_4:Other "and":
********************** / slAKA base                                                                      :9_4:Other "and":
*********************** / slKeyValues                                                                   :9_4:Other "and":
************************ / $*|                                                                         :9_4:Other "and":
************************* / someSL                                                                    :9_4:Other "and":
someSL> IN: "and" ( ( ( "a list of individuals for w <…>
someSL> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
someSL> VALUE: ((["and","a list of individuals for whom notification waiver is sought"],3),[])

************************* \ someSL has returned (["and","a list of individuals for whom notification waiver is sought"],3) :11_3:UnDeeper:
$*|> IN: "and" ( ( ( "a list of individuals for w <…>
$*|> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
$*|> VALUE: ((["and","a list of individuals for whom notification waiver is sought"],3),[])

************************ \ $*| has returned (["and","a list of individuals for whom notification waiver is sought"],3) :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / |?| optional something                                                   :11_3:UnDeeper:
************************** / |>>/recurse                                                            :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :11_3:UnDeeper:
************************** / |>>/base                                                               :11_3:UnDeeper:
*************************** / slTypeSig                                                            :11_3:UnDeeper:
**************************** / $>|                                                                :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::              :11_3:UnDeeper:
slTypeSig> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=53:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::          :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::             :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                          :11_3:UnDeeper:
************************* > |>>/base got Nothing                                                     :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                          :11_3:UnDeeper:
slKeyValues> IN: "and" ( ( ( "a list of individuals for w <…>
slKeyValues> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slKeyValues> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

*********************** \ slKeyValues has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
slAKA base> IN: "and" ( ( ( "a list of individuals for w <…>
slAKA base> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slAKA base> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

********************** \ slAKA base has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
$*|> IN: "and" ( ( ( "a list of individuals for w <…>
$*|> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
$*|> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

********************* \ $*| has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
********************* / |>>/recurse                                                                      :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :11_3:UnDeeper:
********************* / |>>/base                                                                         :11_3:UnDeeper:
********************** / slAKA optional akapart                                                         :11_3:UnDeeper:
*********************** / |?| optional something                                                       :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / PAKA/akapart                                                             :11_3:UnDeeper:
************************** / $>|                                                                    :11_3:UnDeeper:
*************************** / Aka Token                                                            :11_3:UnDeeper:
Aka Token> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=53:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA            :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                    :11_3:UnDeeper:
PAKA/akapart> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=53:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA             :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                   :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :11_3:UnDeeper:
slAKA optional akapart> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                :11_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :11_3:UnDeeper:
********************* / |>>/recurse                                                                      :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :11_3:UnDeeper:
********************* / |>>/base                                                                         :11_3:UnDeeper:
********************** / slAKA optional typically                                                       :11_3:UnDeeper:
*********************** / |?| optional something                                                       :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / typically                                                                :11_3:UnDeeper:
************************** / $>|                                                                    :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
typically> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=53:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY          :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY             :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :11_3:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                              :11_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :11_3:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                   :11_3:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                      :11_3:UnDeeper:
slAKA> IN: "and" ( ( ( "a list of individuals for w <…>
slAKA> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slAKA> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

******************** \ slAKA has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
******************** / undeepers                                                                          :11_3:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers           :11_3:UnDeeper:
********************* > sameLine: success!                                                                     :11_6:UnDeeper:
undeepers> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                                :11_6:UnDeeper:
pKeyValuesAka> IN: "and" ( ( ( "a list of individuals for w <…>
pKeyValuesAka> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
pKeyValuesAka> VALUE: (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),[])

******************* \ pKeyValuesAka has returned ("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing) :11_6:UnDeeper:
******************* / pKeyValuesAka                                                                              :11_6:UnDeeper:
******************** / slAKA                                                                                    :11_6:UnDeeper:
********************* / $*|                                                                                    :11_6:UnDeeper:
********************** / slAKA base                                                                           :11_6:UnDeeper:
*********************** / slKeyValues                                                                        :11_6:UnDeeper:
************************ / $*|                                                                              :11_6:UnDeeper:
************************* / someSL                                                                         :11_6:UnDeeper:
************************** / pNumAsText                                                                   :11_6:UnDeeper:
pNumAsText> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=56:
pNumAsText> unexpected )
pNumAsText> expecting number

************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :11_6:UnDeeper:
someSL> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=56:
someSL> unexpected )
someSL> expecting other text or number

************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number        :11_6:UnDeeper:
$*|> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=56:
$*|> unexpected )
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number             :11_6:UnDeeper:
slKeyValues> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=56:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

*********************** \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number       :11_6:UnDeeper:
slAKA base> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=56:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number          :11_6:UnDeeper:
$*|> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=56:
$*|> unexpected )
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :11_6:UnDeeper:
slAKA> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=56:
slAKA> unexpected )
slAKA> expecting other text or number

******************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                   :11_6:UnDeeper:
pKeyValuesAka> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=56:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

******************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number             :11_6:UnDeeper:
sameMany> IN: "in" ( "the form and manner specified at <…>
sameMany> MATCH (COK): "in" ( "the form and manner specified at <…>
sameMany> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

****************** \ sameMany has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
manyIndentation/leaf?> IN: "in" ( "the form and manner specified at <…>
manyIndentation/leaf?> MATCH (COK): "in" ( "the form and manner specified at <…>
manyIndentation/leaf?> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

***************** \ manyIndentation/leaf? has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "in" ( "the form and manner specified at <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "in" ( "the form and manner specified at <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

**************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pParamText> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

*************** \ pParamText has returned ("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pAction calling pParamText> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pAction calling pParamText> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pAction calling pParamText> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************** \ pAction calling pParamText has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_6:UnDeeper:
manyIndentation/leaf?> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
manyIndentation/leaf?> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************* \ manyIndentation/leaf? has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_6:UnDeeper:
************* / myindented-UnDeeper                                                                                    :11_6:UnDeeper:
myindented-UnDeeper> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented-UnDeeper has returned UnDeeper                                                                :11_7:UnDeeper:
someIndentation> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someIndentation> MATCH (COK): ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************ \ someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_7:UnDeeper:
manyIndentation/deeper; calling someIndentation> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/deeper; calling someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

*********** \ manyIndentation/deeper; calling someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_7:UnDeeper:
*********** / myindented-UnDeeper                                                                                          :11_7:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented-UnDeeper has returned UnDeeper                                                         :11_2:Hence:
someIndentation> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
someIndentation> MATCH (COK): ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

********** \ someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_2:Hence:
pDoAction/pAction> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
pDoAction/pAction> MATCH (COK): ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
pDoAction/pAction> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

********* \ pDoAction/pAction has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_2:Hence:
********* / WHERE                                                                                                 :11_2:Hence:
WHERE> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=58:
WHERE> unexpected HENCE
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                           :11_2:Hence:
********* / preambleParamText:[Having]                                                                            :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                          :11_2:Hence:
preambleParamText:[Having]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=58:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING                     :11_2:Hence:
********* / preambleParamText:[Given]                                                                             :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                           :11_2:Hence:
preambleParamText:[Given]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=58:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN                       :11_2:Hence:
********* / preambleParamText:[Upon]                                                                              :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: UPON                                            :11_2:Hence:
preambleParamText:[Upon]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=58:
preambleParamText:[Upon]> unexpected HENCE
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected HENCE Expecting: UPON                         :11_2:Hence:
regulative permutation with deontic-temporal> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
regulative permutation with deontic-temporal> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
regulative permutation with deontic-temporal> VALUE: (RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

******** \ regulative permutation with deontic-temporal has returned RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :11_2:Hence:
permutationsReg> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
permutationsReg> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

******* \ permutationsReg has returned RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :11_2:Hence:
******* / pHenceLest-Hence                                                                                          :11_2:Hence:
******** / someIndentation                                                                                          :11_3:GoDeeper:
********* / myindented-GoDeeper                                                                                    :11_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                                :11_4:GoDeeper:
********* / manyIndentation/leaf?                                                                                    :11_4:GoDeeper:
********** / pRegRule                                                                                               :11_4:GoDeeper:
*********** / pRuleLabel                                                                                           :11_4:GoDeeper:
************ / $>|                                                                                                :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting §

************ \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                 :11_4:GoDeeper:
pRuleLabel> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=60:
pRuleLabel> unexpected (
pRuleLabel> expecting §

*********** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                            :11_4:GoDeeper:
*********** / pRegRuleSugary                                                                                       :11_4:GoDeeper:
************ / someDeep                                                                                           :11_4:GoDeeper:
************* / someDeep first part calls base directly                                                          :11_4:GoDeeper:
someDeep first part calls base directly> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=60:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

************* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text   :11_4:GoDeeper:
someDeep> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=60:
someDeep> unexpected (
someDeep> expecting Other text

************ \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                    :11_4:GoDeeper:
pRegRuleSugary> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=60:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting Other text

*********** \ !Unconsumed Error: pRegRuleSugary: Unexpected ( Expecting: Other text                                :11_4:GoDeeper:
*********** / pRegRuleNormal                                                                                       :11_4:GoDeeper:
************ / permutationsReg                                                                                    :11_4:GoDeeper:
************* / regulative permutation with deontic-temporal                                                     :11_4:GoDeeper:
************** / WHERE                                                                                          :11_4:GoDeeper:
WHERE> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=60:
WHERE> unexpected (
WHERE> expecting WHERE

************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                        :11_4:GoDeeper:
************** / preambleParamText:[Having]                                                                     :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting HAVING

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                       :11_4:GoDeeper:
preambleParamText:[Having]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=60:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                  :11_4:GoDeeper:
************** / preambleParamText:[Given]                                                                      :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting GIVEN

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                        :11_4:GoDeeper:
preambleParamText:[Given]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=60:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                    :11_4:GoDeeper:
************** / preambleParamText:[Upon]                                                                       :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting UPON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                         :11_4:GoDeeper:
preambleParamText:[Upon]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=60:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                      :11_4:GoDeeper:
************** / preambleBoolStructR [Unless]                                                                   :11_4:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=60:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                :11_4:GoDeeper:
************** / preambleBoolStructR [When,If]                                                                  :11_4:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=60:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN              :11_4:GoDeeper:
************** / pDT                                                                                            :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting MAY, MUST, or SHANT

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: MUST MAY SHANT                               :11_4:GoDeeper:
pDT> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=60:
pDT> unexpected (
pDT> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: pDT: Unexpected ( Expecting: MUST MAY SHANT                                 :11_4:GoDeeper:
************** / pActor [REvery,RParty,RTokAll]                                                                 :11_4:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=60:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL     :11_4:GoDeeper:
************** / pDoAction/Do                                                                                   :11_4:GoDeeper:
pDoAction/Do> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=60:
pDoAction/Do> unexpected (
pDoAction/Do> expecting DO

************** \ !Unconsumed Error: pDoAction/Do: Unexpected ( Expecting: DO                                    :11_4:GoDeeper:
regulative permutation with deontic-temporal> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=60:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :11_4:GoDeeper:
************* / regulative permutation with deontic-action                                                       :11_4:GoDeeper:
************** / WHERE                                                                                          :11_4:GoDeeper:
WHERE> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=60:
WHERE> unexpected (
WHERE> expecting WHERE

************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                        :11_4:GoDeeper:
************** / preambleParamText:[Having]                                                                     :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting HAVING

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                       :11_4:GoDeeper:
preambleParamText:[Having]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=60:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                  :11_4:GoDeeper:
************** / preambleParamText:[Given]                                                                      :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting GIVEN

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                        :11_4:GoDeeper:
preambleParamText:[Given]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=60:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                    :11_4:GoDeeper:
************** / preambleParamText:[Upon]                                                                       :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting UPON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                         :11_4:GoDeeper:
preambleParamText:[Upon]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=60:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                      :11_4:GoDeeper:
************** / preambleBoolStructR [Unless]                                                                   :11_4:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=60:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                :11_4:GoDeeper:
************** / preambleBoolStructR [When,If]                                                                  :11_4:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=60:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN              :11_4:GoDeeper:
************** / pTemporal/eventually                                                                           :11_4:GoDeeper:
pTemporal/eventually> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=60:
pTemporal/eventually> unexpected (
pTemporal/eventually> expecting EVENTUALLY

************** \ !Unconsumed Error: pTemporal/eventually: Unexpected ( Expecting: EVENTUALLY                    :11_4:GoDeeper:
************** / pTemporal/specifically                                                                         :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting AFTER, BEFORE, BY, or ON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: BEFORE AFTER BY ON                           :11_4:GoDeeper:
pTemporal/specifically> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=60:
pTemporal/specifically> unexpected (
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: pTemporal/specifically: Unexpected ( Expecting: BEFORE AFTER BY ON          :11_4:GoDeeper:
************** / pTemporal/vaguely                                                                              :11_4:GoDeeper:
pTemporal/vaguely> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=60:
pTemporal/vaguely> unexpected (
pTemporal/vaguely> expecting Other text

************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected ( Expecting: Other text                       :11_4:GoDeeper:
************** / pActor [REvery,RParty,RTokAll]                                                                 :11_4:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=60:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL     :11_4:GoDeeper:
************** / pDA                                                                                            :11_4:GoDeeper:
pDA> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=60:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                 :11_4:GoDeeper:
regulative permutation with deontic-action> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=60:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: BEFORE AFTER BY ON GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT EVENTUALLY UNLESS IF WHEN Other text :11_4:GoDeeper:
permutationsReg> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=60:
permutationsReg> unexpected (
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
pRegRuleNormal> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=60:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*********** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
pRegRule> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=60:
pRegRule> unexpected (
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: MUST MAY SHANT § BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO FULFILLED BREACH EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
********** / someDeep                                                                                               :11_4:GoDeeper:
*********** / someDeep first part calls base directly                                                              :11_4:GoDeeper:
someDeep first part calls base directly> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=60:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

*********** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text       :11_4:GoDeeper:
someDeep> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=60:
someDeep> unexpected (
someDeep> expecting Other text

********** \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                        :11_4:GoDeeper:
manyIndentation/leaf?> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=60:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, GOTO, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: MUST MAY SHANT § BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE GOTO EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO FULFILLED BREACH EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
********* / manyIndentation/deeper; calling someIndentation                                                          :11_4:GoDeeper:
********** / someIndentation                                                                                        :11_4:GoDeeper:
*********** / myindented-GoDeeper                                                                                  :11_4:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                             :11_4:Other "the:
*********** / manyIndentation/leaf?                                                                                 :11_4:Other "the:
************ / pRegRule                                                                                            :11_4:Other "the:
************* / pRuleLabel                                                                                        :11_4:Other "the:
************** / $>|                                                                                             :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting §

************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: §                                     :11_4:Other "the:
pRuleLabel> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=61:
pRuleLabel> unexpected "the PDPC"
pRuleLabel> expecting §

************* \ !Unconsumed Error: pRuleLabel: Unexpected "the PDPC" Expecting: §                                :11_4:Other "the:
************* / pRegRuleSugary                                                                                    :11_4:Other "the:
************** / someDeep                                                                                        :11_4:Other "the:
*************** / someDeep first part calls base directly                                                       :11_4:Other "the:
someDeep first part calls base directly> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep first part calls base directly> MATCH (COK): "the PDPC"
someDeep first part calls base directly> VALUE: ("the PDPC",[])

*************** \ someDeep first part calls base directly has returned "the PDPC"                                :11_5:GoDeeper:
*************** / someDeep second part recurses with someIndentation                                             :11_5:GoDeeper:
**************** / someIndentation                                                                              :11_5:GoDeeper:
***************** / myindented-GoDeeper                                                                        :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                   :11_5:May:
***************** / manyIndentation/leaf?                                                                       :11_5:May:
****************** / someDeep                                                                                  :11_5:May:
******************* / someDeep first part calls base directly                                                 :11_5:May:
someDeep first part calls base directly> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=63:
someDeep first part calls base directly> unexpected MAY
someDeep first part calls base directly> expecting Other text

******************* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MAY Expecting: Other text :11_5:May:
someDeep> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=63:
someDeep> unexpected MAY
someDeep> expecting Other text

****************** \ !Unconsumed Error: someDeep: Unexpected MAY Expecting: Other text                         :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=63:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting Other text

***************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: Other text              :11_5:May:
***************** / manyIndentation/deeper; calling someIndentation                                             :11_5:May:
****************** / someIndentation                                                                           :11_5:May:
******************* / myindented-GoDeeper                                                                     :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

******************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                     :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

****************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                           :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

***************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting ( or Other text

**************** \ !Consumed Error: someIndentation: Unexpected MAY Expecting: ( Other text                      :11_5:May:
someDeep second part recurses with someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=63:
someDeep second part recurses with someIndentation> unexpected MAY
someDeep second part recurses with someIndentation> expecting ( or Other text

*************** \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MAY Expecting: ( Other text :11_5:GoDeeper:
*************** > someDeep no luck, returning []                                                                 :11_5:GoDeeper:
someDeep> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep> MATCH (COK): "the PDPC"
someDeep> VALUE: (["the PDPC"],[])

************** \ someDeep has returned ["the PDPC"]                                                               :11_5:GoDeeper:
************** / someIndentation                                                                                  :11_5:GoDeeper:
*************** / myindented-GoDeeper                                                                            :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                       :11_5:May:
*************** / manyIndentation/leaf?                                                                           :11_5:May:
**************** / permutationsReg                                                                               :11_5:May:
***************** / regulative permutation with deontic-temporal                                                :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pDT                                                                                       :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******************* \ $>| has returned DMay                                                                    :11_6:GoDeeper:
******************* / |>| calling $>>                                                                          :11_6:GoDeeper:
******************** / |>>/recurse                                                                            :11_6:GoDeeper:
********************* / |>>/recurse                                                                            :11_7:GoDeeper:
********************** / |>>/recurse                                                                           :11_7:Other "NOT:
|>>/recurse> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=66:
|>>/recurse> unexpected "NOTIFY"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "NOTIFY" Expecting: (                      :11_7:Other "NOT:
********************** / |>>/base                                                                              :11_7:Other "NOT:
*********************** / pTemporal/eventually                                                                :11_7:Other "NOT:
pTemporal/eventually> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=66:
pTemporal/eventually> unexpected "NOTIFY"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "NOTIFY" Expecting: EVENTUALLY  :11_7:Other "NOT:
*********************** / pTemporal/specifically                                                              :11_7:Other "NOT:
************************ / $>|                                                                               :11_7:Other "NOT:
$>|> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=66:
$>|> unexpected "NOTIFY"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON         :11_7:Other "NOT:
pTemporal/specifically> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=66:
pTemporal/specifically> unexpected "NOTIFY"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON :11_7:Other "NOT:
*********************** / pTemporal/vaguely                                                                   :11_7:Other "NOT:
pTemporal/vaguely> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/vaguely> MATCH (COK): "NOTIFY"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "NOTIFY"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "NOTIFY")    :11_8:GoDeeper:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY"))               :11_8:GoDeeper:
|>>/base> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/base> MATCH (COK): "NOTIFY"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0)    :11_8:GoDeeper:
|>>/recurse> IN: ( "NOTIFY" ( "you" ) "with" ( "a list of <…>
|>>/recurse> MATCH (COK): ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1)   :11_8:GoDeeper:
|>>/recurse> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>>/recurse> MATCH (COK): ( ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)     :11_8:GoDeeper:
|>| calling $>>> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>| calling $>>> MATCH (COK): ( ( "NOTIFY"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************* \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)   :11_8:GoDeeper:
******************* / undeepers                                                                                    :11_8:GoDeeper:
******************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :11_8:GoDeeper:
undeepers> IN: ( "you" ) "with" ( "a list of individual <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=67:
undeepers> unexpected (
undeepers> expecting )

******************* \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                      :11_8:GoDeeper:
pDT> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDT> MATCH (CERR): MAY ( ( "NOTIFY"
pDT> ERROR:
pDT> offset=67:
pDT> unexpected (
pDT> expecting )

****************** \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                :11_8:GoDeeper:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pDT                                                                                       :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******************* \ $>| has returned DMay                                                                    :11_6:GoDeeper:
******************* / |>| calling $>>                                                                          :11_6:GoDeeper:
******************** / |>>/recurse                                                                            :11_6:GoDeeper:
********************* / |>>/recurse                                                                            :11_7:GoDeeper:
********************** / |>>/recurse                                                                           :11_7:Other "NOT:
|>>/recurse> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=66:
|>>/recurse> unexpected "NOTIFY"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "NOTIFY" Expecting: (                      :11_7:Other "NOT:
********************** / |>>/base                                                                              :11_7:Other "NOT:
*********************** / pTemporal/eventually                                                                :11_7:Other "NOT:
pTemporal/eventually> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=66:
pTemporal/eventually> unexpected "NOTIFY"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "NOTIFY" Expecting: EVENTUALLY  :11_7:Other "NOT:
*********************** / pTemporal/specifically                                                              :11_7:Other "NOT:
************************ / $>|                                                                               :11_7:Other "NOT:
$>|> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=66:
$>|> unexpected "NOTIFY"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON         :11_7:Other "NOT:
pTemporal/specifically> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=66:
pTemporal/specifically> unexpected "NOTIFY"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON :11_7:Other "NOT:
*********************** / pTemporal/vaguely                                                                   :11_7:Other "NOT:
pTemporal/vaguely> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/vaguely> MATCH (COK): "NOTIFY"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "NOTIFY"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "NOTIFY")    :11_8:GoDeeper:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY"))               :11_8:GoDeeper:
|>>/base> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/base> MATCH (COK): "NOTIFY"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0)    :11_8:GoDeeper:
|>>/recurse> IN: ( "NOTIFY" ( "you" ) "with" ( "a list of <…>
|>>/recurse> MATCH (COK): ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1)   :11_8:GoDeeper:
|>>/recurse> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>>/recurse> MATCH (COK): ( ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)     :11_8:GoDeeper:
|>| calling $>>> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>| calling $>>> MATCH (COK): ( ( "NOTIFY"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************* \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)   :11_8:GoDeeper:
******************* / undeepers                                                                                    :11_8:GoDeeper:
******************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :11_8:GoDeeper:
undeepers> IN: ( "you" ) "with" ( "a list of individual <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=67:
undeepers> unexpected (
undeepers> expecting )

******************* \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                      :11_8:GoDeeper:
pDT> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDT> MATCH (CERR): MAY ( ( "NOTIFY"
pDT> ERROR:
pDT> offset=67:
pDT> unexpected (
pDT> expecting )

****************** \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                :11_8:GoDeeper:
****************** / pDoAction/Do                                                                              :11_5:May:
pDoAction/Do> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=63:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

****************** \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                             :11_5:May:
****************** / pDoAction/Do                                                                              :11_5:May:
pDoAction/Do> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=63:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

****************** \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                             :11_5:May:
regulative permutation with deontic-temporal> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=67:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting )

***************** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: )  :11_5:May:
***************** / regulative permutation with deontic-action                                                  :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pTemporal/eventually                                                                      :11_5:May:
pTemporal/eventually> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=63:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

****************** \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY             :11_5:May:
****************** / pTemporal/specifically                                                                    :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                    :11_5:May:
pTemporal/specifically> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=63:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON   :11_5:May:
****************** / pTemporal/vaguely                                                                         :11_5:May:
pTemporal/vaguely> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=63:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

****************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pTemporal/eventually                                                                      :11_5:May:
pTemporal/eventually> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=63:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

****************** \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY             :11_5:May:
****************** / pTemporal/specifically                                                                    :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                    :11_5:May:
pTemporal/specifically> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=63:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON   :11_5:May:
****************** / pTemporal/vaguely                                                                         :11_5:May:
pTemporal/vaguely> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=63:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

****************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                :11_5:May:
****************** / pDA                                                                                       :11_5:May:
******************* / pAction calling pParamText                                                               :11_6:GoDeeper:
******************** / pParamText                                                                             :11_6:GoDeeper:
********************* / pParamText(flat) first line: pKeyValues                                              :11_6:GoDeeper:
********************** / pKeyValuesAka                                                                      :11_6:GoDeeper:
*********************** / slAKA                                                                            :11_6:GoDeeper:
************************ / $*|                                                                            :11_6:GoDeeper:
************************* / slAKA base                                                                   :11_6:GoDeeper:
************************** / slKeyValues                                                                :11_6:GoDeeper:
*************************** / $*|                                                                      :11_6:GoDeeper:
**************************** / someSL                                                                 :11_6:GoDeeper:
***************************** / pNumAsText                                                           :11_6:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=64:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number        :11_6:GoDeeper:
someSL> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=64:
someSL> unexpected (
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
slKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=64:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

************************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
slAKA base> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=64:
slAKA base> unexpected (
slAKA base> expecting other text or number

************************* \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number  :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
slAKA> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=64:
slAKA> unexpected (
slAKA> expecting other text or number

*********************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
pKeyValuesAka> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=64:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

********************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=64:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********************* \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=64:
pParamText> unexpected (
pParamText> expecting other text or number

******************** \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number            :11_6:GoDeeper:
pAction calling pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=64:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******************* \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pDA> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=64:
pDA> unexpected (
pDA> expecting other text or number

****************** \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                         :11_6:GoDeeper:
****************** / pDA                                                                                       :11_5:May:
******************* / pAction calling pParamText                                                               :11_6:GoDeeper:
******************** / pParamText                                                                             :11_6:GoDeeper:
********************* / pParamText(flat) first line: pKeyValues                                              :11_6:GoDeeper:
********************** / pKeyValuesAka                                                                      :11_6:GoDeeper:
*********************** / slAKA                                                                            :11_6:GoDeeper:
************************ / $*|                                                                            :11_6:GoDeeper:
************************* / slAKA base                                                                   :11_6:GoDeeper:
************************** / slKeyValues                                                                :11_6:GoDeeper:
*************************** / $*|                                                                      :11_6:GoDeeper:
**************************** / someSL                                                                 :11_6:GoDeeper:
***************************** / pNumAsText                                                           :11_6:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=64:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number        :11_6:GoDeeper:
someSL> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=64:
someSL> unexpected (
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
slKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=64:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

************************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
slAKA base> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=64:
slAKA base> unexpected (
slAKA base> expecting other text or number

************************* \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number  :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
slAKA> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=64:
slAKA> unexpected (
slAKA> expecting other text or number

*********************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
pKeyValuesAka> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=64:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

********************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=64:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********************* \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=64:
pParamText> unexpected (
pParamText> expecting other text or number

******************** \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number            :11_6:GoDeeper:
pAction calling pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=64:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******************* \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pDA> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=64:
pDA> unexpected (
pDA> expecting other text or number

****************** \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                         :11_6:GoDeeper:
regulative permutation with deontic-action> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=64:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting other text or number

***************** \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: other text or number :11_5:May:
permutationsReg> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=67:
permutationsReg> unexpected (
permutationsReg> expecting )

**************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: )                                 :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=67:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting )

*************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: )                             :11_5:May:
*************** / manyIndentation/deeper; calling someIndentation                                                 :11_5:May:
**************** / someIndentation                                                                               :11_5:May:
***************** / myindented-GoDeeper                                                                         :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                         :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                               :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

*************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=67:
someIndentation> unexpected (
someIndentation> expecting )

************** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                       :11_5:May:
pRegRuleSugary> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRuleSugary> MATCH (CERR): "the PDPC" (
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=67:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting )

************* \ !Consumed Error: pRegRuleSugary: Unexpected ( Expecting: )                                          :11_5:May:
************* / pRegRuleNormal                                                                                    :11_4:Other "the:
************** / permutationsReg                                                                                 :11_4:Other "the:
*************** / regulative permutation with deontic-temporal                                                  :11_4:Other "the:
**************** / WHERE                                                                                       :11_4:Other "the:
WHERE> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=61:
WHERE> unexpected "the PDPC"
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected "the PDPC" Expecting: WHERE                            :11_4:Other "the:
**************** / preambleParamText:[Having]                                                                  :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: HAVING                           :11_4:Other "the:
preambleParamText:[Having]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=61:
preambleParamText:[Having]> unexpected "the PDPC"
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "the PDPC" Expecting: HAVING      :11_4:Other "the:
**************** / preambleParamText:[Given]                                                                   :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: GIVEN                            :11_4:Other "the:
preambleParamText:[Given]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=61:
preambleParamText:[Given]> unexpected "the PDPC"
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "the PDPC" Expecting: GIVEN        :11_4:Other "the:
**************** / preambleParamText:[Upon]                                                                    :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: UPON                             :11_4:Other "the:
preambleParamText:[Upon]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=61:
preambleParamText:[Upon]> unexpected "the PDPC"
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "the PDPC" Expecting: UPON          :11_4:Other "the:
**************** / preambleBoolStructR [Unless]                                                                :11_4:Other "the:
preambleBoolStructR [Unless]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=61:
preambleBoolStructR [Unless]> unexpected "the PDPC"
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "the PDPC" Expecting: UNLESS    :11_4:Other "the:
**************** / preambleBoolStructR [When,If]                                                               :11_4:Other "the:
preambleBoolStructR [When,If]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=61:
preambleBoolStructR [When,If]> unexpected "the PDPC"
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "the PDPC" Expecting: IF WHEN  :11_4:Other "the:
**************** / pDT                                                                                         :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting MAY, MUST, or SHANT

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: MUST MAY SHANT                   :11_4:Other "the:
pDT> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=61:
pDT> unexpected "the PDPC"
pDT> expecting MAY, MUST, or SHANT

**************** \ !Unconsumed Error: pDT: Unexpected "the PDPC" Expecting: MUST MAY SHANT                     :11_4:Other "the:
**************** / pActor [REvery,RParty,RTokAll]                                                              :11_4:Other "the:
pActor [REvery,RParty,RTokAll]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=61:
pActor [REvery,RParty,RTokAll]> unexpected "the PDPC"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

**************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "the PDPC" Expecting: EVERY PARTY ALL :11_4:Other "the:
**************** / pDoAction/Do                                                                                :11_4:Other "the:
pDoAction/Do> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=61:
pDoAction/Do> unexpected "the PDPC"
pDoAction/Do> expecting DO

**************** \ !Unconsumed Error: pDoAction/Do: Unexpected "the PDPC" Expecting: DO                        :11_4:Other "the:
regulative permutation with deontic-temporal> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=61:
regulative permutation with deontic-temporal> unexpected "the PDPC"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*************** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "the PDPC" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :11_4:Other "the:
*************** / regulative permutation with deontic-action                                                    :11_4:Other "the:
**************** / WHERE                                                                                       :11_4:Other "the:
WHERE> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=61:
WHERE> unexpected "the PDPC"
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected "the PDPC" Expecting: WHERE                            :11_4:Other "the:
**************** / preambleParamText:[Having]                                                                  :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: HAVING                           :11_4:Other "the:
preambleParamText:[Having]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=61:
preambleParamText:[Having]> unexpected "the PDPC"
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "the PDPC" Expecting: HAVING      :11_4:Other "the:
**************** / preambleParamText:[Given]                                                                   :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: GIVEN                            :11_4:Other "the:
preambleParamText:[Given]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=61:
preambleParamText:[Given]> unexpected "the PDPC"
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "the PDPC" Expecting: GIVEN        :11_4:Other "the:
**************** / preambleParamText:[Upon]                                                                    :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: UPON                             :11_4:Other "the:
preambleParamText:[Upon]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=61:
preambleParamText:[Upon]> unexpected "the PDPC"
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "the PDPC" Expecting: UPON          :11_4:Other "the:
**************** / preambleBoolStructR [Unless]                                                                :11_4:Other "the:
preambleBoolStructR [Unless]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=61:
preambleBoolStructR [Unless]> unexpected "the PDPC"
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "the PDPC" Expecting: UNLESS    :11_4:Other "the:
**************** / preambleBoolStructR [When,If]                                                               :11_4:Other "the:
preambleBoolStructR [When,If]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=61:
preambleBoolStructR [When,If]> unexpected "the PDPC"
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "the PDPC" Expecting: IF WHEN  :11_4:Other "the:
**************** / pTemporal/eventually                                                                        :11_4:Other "the:
pTemporal/eventually> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=61:
pTemporal/eventually> unexpected "the PDPC"
pTemporal/eventually> expecting EVENTUALLY

**************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "the PDPC" Expecting: EVENTUALLY        :11_4:Other "the:
**************** / pTemporal/specifically                                                                      :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting AFTER, BEFORE, BY, or ON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: BEFORE AFTER BY ON               :11_4:Other "the:
pTemporal/specifically> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=61:
pTemporal/specifically> unexpected "the PDPC"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

**************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "the PDPC" Expecting: BEFORE AFTER BY ON :11_4:Other "the:
**************** / pTemporal/vaguely                                                                           :11_4:Other "the:
pTemporal/vaguely> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/vaguely> MATCH (COK): "the PDPC"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "the PDPC"),[])

**************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "the PDPC")          :11_5:GoDeeper:
**************** / WHERE                                                                                        :11_5:GoDeeper:
WHERE> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=62:
WHERE> unexpected (
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                      :11_5:GoDeeper:
**************** / preambleParamText:[Having]                                                                   :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                     :11_5:GoDeeper:
preambleParamText:[Having]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=62:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                :11_5:GoDeeper:
**************** / preambleParamText:[Given]                                                                    :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                      :11_5:GoDeeper:
preambleParamText:[Given]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=62:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                  :11_5:GoDeeper:
**************** / preambleParamText:[Upon]                                                                     :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                       :11_5:GoDeeper:
preambleParamText:[Upon]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=62:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                    :11_5:GoDeeper:
**************** / preambleBoolStructR [Unless]                                                                 :11_5:GoDeeper:
preambleBoolStructR [Unless]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=62:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS              :11_5:GoDeeper:
**************** / preambleBoolStructR [When,If]                                                                :11_5:GoDeeper:
preambleBoolStructR [When,If]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=62:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN            :11_5:GoDeeper:
**************** / pActor [REvery,RParty,RTokAll]                                                               :11_5:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=62:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

**************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL   :11_5:GoDeeper:
**************** / pDA                                                                                          :11_5:GoDeeper:
pDA> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=62:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

**************** \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                               :11_5:GoDeeper:
regulative permutation with deontic-action> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
regulative permutation with deontic-action> MATCH (CERR): "the PDPC"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=62:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*************** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_5:GoDeeper:
permutationsReg> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=62:
permutationsReg> unexpected (
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_4:Other "the:
pRegRuleNormal> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=62:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_4:Other "the:
pRegRule> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=67:
pRegRule> unexpected (
pRegRule> expecting ) or §

************ \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § )                                           :11_4:Other "the:
************ / someDeep                                                                                            :11_4:Other "the:
************* / someDeep first part calls base directly                                                           :11_4:Other "the:
someDeep first part calls base directly> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep first part calls base directly> MATCH (COK): "the PDPC"
someDeep first part calls base directly> VALUE: ("the PDPC",[])

************* \ someDeep first part calls base directly has returned "the PDPC"                                    :11_5:GoDeeper:
************* / someDeep second part recurses with someIndentation                                                 :11_5:GoDeeper:
************** / someIndentation                                                                                  :11_5:GoDeeper:
*************** / myindented-GoDeeper                                                                            :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                       :11_5:May:
*************** / manyIndentation/leaf?                                                                           :11_5:May:
**************** / someDeep                                                                                      :11_5:May:
***************** / someDeep first part calls base directly                                                     :11_5:May:
someDeep first part calls base directly> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=63:
someDeep first part calls base directly> unexpected MAY
someDeep first part calls base directly> expecting Other text

***************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MAY Expecting: Other text :11_5:May:
someDeep> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=63:
someDeep> unexpected MAY
someDeep> expecting Other text

**************** \ !Unconsumed Error: someDeep: Unexpected MAY Expecting: Other text                             :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=63:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting Other text

*************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: Other text                  :11_5:May:
*************** / manyIndentation/deeper; calling someIndentation                                                 :11_5:May:
**************** / someIndentation                                                                               :11_5:May:
***************** / myindented-GoDeeper                                                                         :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                         :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                               :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

*************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting ( or Other text

************** \ !Consumed Error: someIndentation: Unexpected MAY Expecting: ( Other text                          :11_5:May:
someDeep second part recurses with someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=63:
someDeep second part recurses with someIndentation> unexpected MAY
someDeep second part recurses with someIndentation> expecting ( or Other text

************* \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MAY Expecting: ( Other text :11_5:GoDeeper:
************* > someDeep no luck, returning []                                                                     :11_5:GoDeeper:
someDeep> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep> MATCH (COK): "the PDPC"
someDeep> VALUE: (["the PDPC"],[])

************ \ someDeep has returned ["the PDPC"]                                                                   :11_5:GoDeeper:
manyIndentation/leaf?> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (RuleAlias ["the PDPC"],[])

*********** \ manyIndentation/leaf? has returned RuleAlias ["the PDPC"]                                              :11_5:GoDeeper:
*********** / myindented-UnDeeper                                                                                    :11_5:GoDeeper:
myindented-UnDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-UnDeeper> MATCH (EERR): <EMPTY>
myindented-UnDeeper> ERROR:
myindented-UnDeeper> offset=62:
myindented-UnDeeper> unexpected (
myindented-UnDeeper> expecting )

*********** \ !Unconsumed Error: myindented-UnDeeper: Unexpected ( Expecting: )                                      :11_5:GoDeeper:
someIndentation> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someIndentation> MATCH (CERR): ( "the PDPC"
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

********** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                              :11_5:GoDeeper:
manyIndentation/deeper; calling someIndentation> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=62:
manyIndentation/deeper; calling someIndentation> unexpected (
manyIndentation/deeper; calling someIndentation> expecting )

********* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected ( Expecting: )            :11_4:GoDeeper:
someIndentation> IN: ( ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

******** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                                :11_4:GoDeeper:
pHenceLest-Hence> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
pHenceLest-Hence> MATCH (CERR): HENCE (
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=62:
pHenceLest-Hence> unexpected (
pHenceLest-Hence> expecting )

******* \ !Consumed Error: pHenceLest-Hence: Unexpected ( Expecting: )                                                 :11_4:GoDeeper:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=62:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting )

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: )                                         :2_2:Must:
****** / manyIndentation/deeper; calling someIndentation                                                             :2_2:Must:
******* / someIndentation                                                                                           :2_2:Must:
******** / myindented-GoDeeper                                                                                     :2_2:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                    :2_2:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                          :2_2:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (            :2_2:Must:
someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

***** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                                   :2_2:Must:
pRegRuleSugary> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRegRuleSugary> MATCH (CERR): "You" (
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=62:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting )

**** \ !Consumed Error: pRegRuleSugary: Unexpected ( Expecting: )                                                      :2_2:Must:
**** / pRegRuleNormal                                                                                                :2_1:Other "You":
***** / permutationsReg                                                                                             :2_1:Other "You":
****** / regulative permutation with deontic-temporal                                                              :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected "You"
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected "You" Expecting: WHERE                                             :2_1:Other "You":
******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: HAVING                                            :2_1:Other "You":
preambleParamText:[Having]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected "You"
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "You" Expecting: HAVING                       :2_1:Other "You":
******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                             :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                         :2_1:Other "You":
******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                              :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                           :2_1:Other "You":
******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected "You"
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "You" Expecting: UNLESS                     :2_1:Other "You":
******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected "You"
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "You" Expecting: IF WHEN                   :2_1:Other "You":
******* / pDT                                                                                                     :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: MUST MAY SHANT                                    :2_1:Other "You":
pDT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected "You"
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected "You" Expecting: MUST MAY SHANT                                      :2_1:Other "You":
******* / pActor [REvery,RParty,RTokAll]                                                                          :2_1:Other "You":
pActor [REvery,RParty,RTokAll]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=4:
pActor [REvery,RParty,RTokAll]> unexpected "You"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "You" Expecting: EVERY PARTY ALL          :2_1:Other "You":
******* / pDoAction/Do                                                                                            :2_1:Other "You":
pDoAction/Do> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=4:
pDoAction/Do> unexpected "You"
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected "You" Expecting: DO                                         :2_1:Other "You":
regulative permutation with deontic-temporal> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=4:
regulative permutation with deontic-temporal> unexpected "You"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "You" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :2_1:Other "You":
****** / regulative permutation with deontic-action                                                                :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected "You"
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected "You" Expecting: WHERE                                             :2_1:Other "You":
******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: HAVING                                            :2_1:Other "You":
preambleParamText:[Having]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected "You"
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "You" Expecting: HAVING                       :2_1:Other "You":
******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                             :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                         :2_1:Other "You":
******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                              :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                           :2_1:Other "You":
******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected "You"
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "You" Expecting: UNLESS                     :2_1:Other "You":
******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected "You"
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "You" Expecting: IF WHEN                   :2_1:Other "You":
******* / pTemporal/eventually                                                                                    :2_1:Other "You":
pTemporal/eventually> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected "You"
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected "You" Expecting: EVENTUALLY                         :2_1:Other "You":
******* / pTemporal/specifically                                                                                  :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: BEFORE AFTER BY ON                                :2_1:Other "You":
pTemporal/specifically> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected "You"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected "You" Expecting: BEFORE AFTER BY ON               :2_1:Other "You":
******* / pTemporal/vaguely                                                                                       :2_1:Other "You":
pTemporal/vaguely> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/vaguely> MATCH (COK): "You"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "You"),[])

******* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "You")                           :2_2:GoDeeper:
******* / WHERE                                                                                                    :2_2:GoDeeper:
WHERE> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=5:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :2_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :2_2:GoDeeper:
preambleParamText:[Having]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=5:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :2_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :2_2:GoDeeper:
preambleParamText:[Given]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=5:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :2_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :2_2:GoDeeper:
preambleParamText:[Upon]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=5:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :2_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :2_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=5:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :2_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :2_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=5:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :2_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :2_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=5:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :2_2:GoDeeper:
******* / pDA                                                                                                      :2_2:GoDeeper:
pDA> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=5:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                           :2_2:GoDeeper:
regulative permutation with deontic-action> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
regulative permutation with deontic-action> MATCH (CERR): "You"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=5:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_2:GoDeeper:
permutationsReg> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=5:
permutationsReg> unexpected (
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_1:Other "You":
pRegRuleNormal> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=5:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_1:Other "You":
pRegRule> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRegRule> MATCH (EERR): §§ ( "Notify PDPC" )
pRegRule> ERROR:
pRegRule> offset=62:
pRegRule> unexpected (
pRegRule> expecting ) or end of input

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: ) end of input                                             :2_1:Other "You":
*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify PDPC"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify PDPC" Expecting: (                                       :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
someSL> MATCH (COK): "Notify PDPC"
someSL> VALUE: ((["Notify PDPC"],0),[])

******** \ someSL has returned (["Notify PDPC"],0)                                                                  :2_2:UnDeeper:
|.| manyLike> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|.| manyLike> MATCH (COK): "Notify PDPC"
|.| manyLike> VALUE: ((["Notify PDPC"],0),[])

******* \ |.| manyLike has returned (["Notify PDPC"],0)                                                              :2_2:UnDeeper:
******* > |>>/base got "Notify PDPC"                                                                                 :2_2:UnDeeper:
|>>/base> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/base> MATCH (COK): "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

****** \ |>>/base has returned ("Notify PDPC",0)                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify PDPC" ) "You" ( MUST ( ( BEFOR <…>
|>>/recurse> MATCH (COK): ( "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

***** \ |>>/recurse has returned ("Notify PDPC",1)                                                                     :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Other "You":
upToNUndeepers/done> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Other "You":
upToNUndeepers/undeeper> IN: ) "You" ( MUST ( ( BEFORE ( 3 ( "days" ) <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Other "You":
pRuleLabel> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify PDPC" )
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / pHornlike/uponLimb                                                                                            :2_1:Other "You":
***** / preambleParamText:[Upon]                                                                                    :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                  :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                               :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                       :2_1:Other "You":
**** / pHornlike/givenLimb                                                                                           :2_1:Other "You":
***** / preambleParamText:[Given]                                                                                   :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                                 :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                             :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                     :2_1:Other "You":
pTypeDefinition> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pTypeDefinition> MATCH (EERR): §§ ( "Notify PDPC" )
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected "You"
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or end of input

*** \ !Unconsumed Error: pTypeDefinition: Unexpected "You" Expecting: GIVEN UPON DEFINE end of input                  :2_1:Other "You":
*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify PDPC"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify PDPC" Expecting: (                                       :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
someSL> MATCH (COK): "Notify PDPC"
someSL> VALUE: ((["Notify PDPC"],0),[])

******** \ someSL has returned (["Notify PDPC"],0)                                                                  :2_2:UnDeeper:
|.| manyLike> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|.| manyLike> MATCH (COK): "Notify PDPC"
|.| manyLike> VALUE: ((["Notify PDPC"],0),[])

******* \ |.| manyLike has returned (["Notify PDPC"],0)                                                              :2_2:UnDeeper:
******* > |>>/base got "Notify PDPC"                                                                                 :2_2:UnDeeper:
|>>/base> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/base> MATCH (COK): "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

****** \ |>>/base has returned ("Notify PDPC",0)                                                                      :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify PDPC" ) "You" ( MUST ( ( BEFOR <…>
|>>/recurse> MATCH (COK): ( "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

***** \ |>>/recurse has returned ("Notify PDPC",1)                                                                     :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:Other "You":
upToNUndeepers/done> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:Other "You":
upToNUndeepers/undeeper> IN: ) "You" ( MUST ( ( BEFORE ( 3 ( "days" ) <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:Other "You":
pRuleLabel> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify PDPC" )
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                              :2_1:Other "You":
**** / calling myindented pNameParens                                                                                :2_1:Other "You":
***** / manyIndentation/leaf?                                                                                       :2_1:Other "You":
****** / pMultiTermAka                                                                                             :2_1:Other "You":
******* / pAKA                                                                                                    :2_1:Other "You":
******** / slAKA                                                                                                 :2_1:Other "You":
********* / $*|                                                                                                 :2_1:Other "You":
********** / slAKA base                                                                                        :2_1:Other "You":
*********** / slMultiTerm                                                                                     :2_1:Other "You":
************ / someSL                                                                                        :2_1:Other "You":
************* / pNumAsText                                                                                    :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                              :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************ \ someSL has returned (["You"],0)                                                                :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*********** \ slMultiTerm has returned (["You"],0)                                                             :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

********** \ slAKA base has returned (["You"],0)                                                                :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

********* \ $*| has returned (["You"],0)                                                                         :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                        :2_2:Must:
********** / |>>/base                                                                                            :2_2:Must:
*********** / slAKA optional akapart                                                                            :2_2:Must:
************ / |?| optional something                                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / PAKA/akapart                                                                                :2_2:Must:
*************** / $>|                                                                                       :2_2:Must:
**************** / Aka Token                                                                               :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

**************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                            :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

*************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                                    :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                             :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                                   :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************ \ |?| optional something has returned (Nothing,0)                                                 :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********** \ slAKA optional akapart has returned (Nothing,0)                                                   :2_2:Must:
*********** > |>>/base got Nothing                                                                              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********** \ |>>/base has returned (Nothing,0)                                                                   :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********* \ |>>/recurse has returned (Nothing,1)                                                                  :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / slAKA optional typically                                                                            :2_2:Must:
*********** / |?| optional something                                                                            :2_2:Must:
************ / |>>/recurse                                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                    :2_2:Must:
************ / |>>/base                                                                                        :2_2:Must:
************* / typically                                                                                     :2_2:Must:
************** / $>|                                                                                         :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                                :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

************* \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                            :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

************ \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                               :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********** \ |?| optional something has returned (Nothing,0)                                                   :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********** \ slAKA optional typically has returned (Nothing,0)                                                   :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
********* > slAKA: proceeding after base and entityalias are retrieved ...                                        :2_2:Must:
********* > pAKA: entityalias = Nothing                                                                           :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

******** \ slAKA has returned (["You"],1)                                                                          :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
pAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (CERR): "You" (
pAKA> ERROR:
pAKA> offset=6:
pAKA> unexpected MUST
pAKA> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: pAKA: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                                 :2_2:Must:
pMultiTermAka> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (CERR): "You" (
pMultiTermAka> ERROR:
pMultiTermAka> offset=6:
pMultiTermAka> unexpected MUST
pMultiTermAka> expecting (, ), AKA, or TYPICALLY

****** \ !Consumed Error: pMultiTermAka: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                          :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, or TYPICALLY

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                :2_1:Other "You":
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Other "You":
****** / someIndentation                                                                                           :2_1:Other "You":
******* / myindented-GoDeeper                                                                                     :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                   :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                         :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (           :2_1:Other "You":
calling myindented pNameParens> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=6:
calling myindented pNameParens> unexpected MUST
calling myindented pNameParens> expecting (, ), AKA, or TYPICALLY

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (         :2_1:Other "You":
pConstitutiveRule> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pConstitutiveRule> MATCH (EERR): §§ ( "Notify PDPC" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=6:
pConstitutiveRule> unexpected MUST
pConstitutiveRule> expecting (, ), AKA, TYPICALLY, or end of input

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( end of input           :2_1:Other "You":
*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
pScenarioRule> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected §§
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected §§ Expecting: SCENARIO                                           :1_1:RuleMarker:
*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify PDPC"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Notify PDPC" Expecting: (                                     :1_2:Other "Noti:
******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** / |.| manyLike                                                                                            :1_2:Other "Noti:
********* / someSL                                                                                                :1_2:Other "Noti:
someSL> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
someSL> MATCH (COK): "Notify PDPC"
someSL> VALUE: ((["Notify PDPC"],0),[])

********* \ someSL has returned (["Notify PDPC"],0)                                                                :2_2:UnDeeper:
|.| manyLike> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|.| manyLike> MATCH (COK): "Notify PDPC"
|.| manyLike> VALUE: ((["Notify PDPC"],0),[])

******** \ |.| manyLike has returned (["Notify PDPC"],0)                                                            :2_2:UnDeeper:
******** > |>>/base got "Notify PDPC"                                                                               :2_2:UnDeeper:
|>>/base> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/base> MATCH (COK): "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

******* \ |>>/base has returned ("Notify PDPC",0)                                                                    :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify PDPC" ) "You" ( MUST ( ( BEFOR <…>
|>>/recurse> MATCH (COK): ( "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

****** \ |>>/recurse has returned ("Notify PDPC",1)                                                                   :2_2:UnDeeper:
****** / upToNUndeepers/undeeper                                                                                      :2_2:UnDeeper:
******* / upToNUndeepers/done                                                                                     :2_1:Other "You":
upToNUndeepers/done> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

******* \ upToNUndeepers/done has returned ((),0)                                                                 :2_1:Other "You":
upToNUndeepers/undeeper> IN: ) "You" ( MUST ( ( BEFORE ( 3 ( "days" ) <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

****** \ upToNUndeepers/undeeper has returned ((),-1)                                                              :2_1:Other "You":
pRuleLabel> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify PDPC" )
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                            :2_1:Other "You":
pSrcRef> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pSrcRef> MATCH (EOK): §§ ( "Notify PDPC" )
pSrcRef> VALUE: ((Just ("\167",2,"Notify PDPC"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify PDPC"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Other "You":
**** / pHornlike / permute                                                                                           :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                             :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                     :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                               :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                           :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                   :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                               :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                           :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                   :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                             :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                     :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
pHornlike / permute> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=6:
pHornlike / permute> unexpected MUST
pHornlike / permute> expecting (, ), AKA, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, TYPICALLY, UPON, or WHEN

**** \ !Unconsumed Error: pHornlike / permute: Unexpected MUST Expecting: GIVEN UPON TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
pHornlike> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pHornlike> MATCH (EERR): §§ ( "Notify PDPC" )
pHornlike> ERROR:
pHornlike> offset=6:
pHornlike> unexpected MUST
pHornlike> expecting (, ), AKA, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, TYPICALLY, UPON, WHEN, or end of input

*** \ !Unconsumed Error: pHornlike: Unexpected MUST Expecting: GIVEN UPON TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( end of input :2_1:Other "You":
*** / pRuleLabel                                                                                                      :1_1:RuleMarker:
**** / $>|                                                                                                           :1_1:RuleMarker:
$>|> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

**** \ $>| has returned RuleMarker 2 "\167"                                                                           :1_2:GoDeeper:
**** / |>>/recurse                                                                                                    :1_2:GoDeeper:
***** / |>>/recurse                                                                                                   :1_2:Other "Noti:
|>>/recurse> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify PDPC"
|>>/recurse> expecting (

***** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify PDPC" Expecting: (                                         :1_2:Other "Noti:
***** / |>>/base                                                                                                      :1_2:Other "Noti:
****** / |.| manyLike                                                                                                :1_2:Other "Noti:
******* / someSL                                                                                                    :1_2:Other "Noti:
someSL> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
someSL> MATCH (COK): "Notify PDPC"
someSL> VALUE: ((["Notify PDPC"],0),[])

******* \ someSL has returned (["Notify PDPC"],0)                                                                    :2_2:UnDeeper:
|.| manyLike> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|.| manyLike> MATCH (COK): "Notify PDPC"
|.| manyLike> VALUE: ((["Notify PDPC"],0),[])

****** \ |.| manyLike has returned (["Notify PDPC"],0)                                                                :2_2:UnDeeper:
****** > |>>/base got "Notify PDPC"                                                                                   :2_2:UnDeeper:
|>>/base> IN: "Notify PDPC" ) "You" ( MUST ( ( BEFORE  <…>
|>>/base> MATCH (COK): "Notify PDPC"
|>>/base> VALUE: (("Notify PDPC",0),[])

***** \ |>>/base has returned ("Notify PDPC",0)                                                                        :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify PDPC" ) "You" ( MUST ( ( BEFOR <…>
|>>/recurse> MATCH (COK): ( "Notify PDPC"
|>>/recurse> VALUE: (("Notify PDPC",1),[])

**** \ |>>/recurse has returned ("Notify PDPC",1)                                                                       :2_2:UnDeeper:
**** / upToNUndeepers/undeeper                                                                                          :2_2:UnDeeper:
***** / upToNUndeepers/done                                                                                         :2_1:Other "You":
upToNUndeepers/done> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

***** \ upToNUndeepers/done has returned ((),0)                                                                     :2_1:Other "You":
upToNUndeepers/undeeper> IN: ) "You" ( MUST ( ( BEFORE ( 3 ( "days" ) <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

**** \ upToNUndeepers/undeeper has returned ((),-1)                                                                  :2_1:Other "You":
pRuleLabel> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify PDPC" )
pRuleLabel> VALUE: (("\167",2,"Notify PDPC"),[])

*** \ pRuleLabel has returned ("\167",2,"Notify PDPC")                                                                :2_1:Other "You":
pRule> IN: §§ ( "Notify PDPC" ) "You" ( MUST ( ( BE <…>
pRule> MATCH (EOK): §§ ( "Notify PDPC" )
pRule> VALUE: (RuleGroup {rlabel = Just ("\167",2,"Notify PDPC"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})},[])

** \ pRule has returned RuleGroup {rlabel = Just ("\167",2,"Notify PDPC"), srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})} :2_1:Other "You":
** / pRule                                                                                                             :2_1:Other "You":
*** / pRegRule                                                                                                        :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: §                                                      :2_1:Other "You":
pRuleLabel> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected "You"
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected "You" Expecting: §                                                 :2_1:Other "You":
**** / pRegRuleSugary                                                                                                :2_1:Other "You":
***** / someDeep                                                                                                    :2_1:Other "You":
****** / someDeep first part calls base directly                                                                   :2_1:Other "You":
someDeep first part calls base directly> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someDeep first part calls base directly> MATCH (COK): "You"
someDeep first part calls base directly> VALUE: ("You",[])

****** \ someDeep first part calls base directly has returned "You"                                                 :2_2:GoDeeper:
****** / someDeep second part recurses with someIndentation                                                         :2_2:GoDeeper:
******* / someIndentation                                                                                          :2_2:GoDeeper:
******** / myindented-GoDeeper                                                                                    :2_2:GoDeeper:
myindented-GoDeeper> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******** \ myindented-GoDeeper has returned GoDeeper                                                               :2_2:Must:
******** / manyIndentation/leaf?                                                                                   :2_2:Must:
********* / someDeep                                                                                              :2_2:Must:
********** / someDeep first part calls base directly                                                             :2_2:Must:
someDeep first part calls base directly> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=6:
someDeep first part calls base directly> unexpected MUST
someDeep first part calls base directly> expecting Other text

********** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MUST Expecting: Other text   :2_2:Must:
someDeep> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=6:
someDeep> unexpected MUST
someDeep> expecting Other text

********* \ !Unconsumed Error: someDeep: Unexpected MUST Expecting: Other text                                    :2_2:Must:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting Other text

******** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: Other text                         :2_2:Must:
******** / manyIndentation/deeper; calling someIndentation                                                         :2_2:Must:
********* / someIndentation                                                                                       :2_2:Must:
********** / myindented-GoDeeper                                                                                 :2_2:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                :2_2:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting (

********* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                      :2_2:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (        :2_2:Must:
someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting ( or Other text

******* \ !Consumed Error: someIndentation: Unexpected MUST Expecting: ( Other text                                 :2_2:Must:
someDeep second part recurses with someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=6:
someDeep second part recurses with someIndentation> unexpected MUST
someDeep second part recurses with someIndentation> expecting ( or Other text

****** \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MUST Expecting: ( Other text :2_2:GoDeeper:
****** > someDeep no luck, returning []                                                                             :2_2:GoDeeper:
someDeep> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someDeep> MATCH (COK): "You"
someDeep> VALUE: (["You"],[])

***** \ someDeep has returned ["You"]                                                                                :2_2:GoDeeper:
***** / someIndentation                                                                                              :2_2:GoDeeper:
****** / myindented-GoDeeper                                                                                        :2_2:GoDeeper:
myindented-GoDeeper> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

****** \ myindented-GoDeeper has returned GoDeeper                                                                   :2_2:Must:
****** / manyIndentation/leaf?                                                                                       :2_2:Must:
******* / permutationsReg                                                                                           :2_2:Must:
******** / regulative permutation with deontic-temporal                                                            :2_2:Must:
********* / WHERE                                                                                                 :2_2:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=6:
WHERE> unexpected MUST
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                            :2_2:Must:
********* / preambleParamText:[Having]                                                                            :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                           :2_2:Must:
preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=6:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                      :2_2:Must:
********* / preambleParamText:[Given]                                                                             :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                            :2_2:Must:
preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=6:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                        :2_2:Must:
********* / preambleParamText:[Upon]                                                                              :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                             :2_2:Must:
preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=6:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                          :2_2:Must:
********* / preambleBoolStructR [Unless]                                                                          :2_2:Must:
preambleBoolStructR [Unless]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=6:
preambleBoolStructR [Unless]> unexpected MUST
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MUST Expecting: UNLESS                    :2_2:Must:
********* / preambleBoolStructR [When,If]                                                                         :2_2:Must:
preambleBoolStructR [When,If]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=6:
preambleBoolStructR [When,If]> unexpected MUST
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MUST Expecting: IF WHEN                  :2_2:Must:
********* / pDT                                                                                                   :2_2:Must:
********** / $>|                                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

********** \ $>| has returned DMust                                                                               :2_3:GoDeeper:
********** / |>| calling $>>                                                                                      :2_3:GoDeeper:
*********** / |>>/recurse                                                                                        :2_3:GoDeeper:
************ / |>>/recurse                                                                                        :2_4:GoDeeper:
************* / |>>/recurse                                                                                       :2_4:Before:
|>>/recurse> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=9:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected BEFORE Expecting: (                                    :2_4:Before:
************* / |>>/base                                                                                          :2_4:Before:
************** / pTemporal/eventually                                                                            :2_4:Before:
pTemporal/eventually> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=9:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

************** \ !Unconsumed Error: pTemporal/eventually: Unexpected BEFORE Expecting: EVENTUALLY                :2_4:Before:
************** / pTemporal/specifically                                                                          :2_4:Before:
*************** / $>|                                                                                           :2_4:Before:
$>|> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

*************** \ $>| has returned Before                                                                        :2_5:GoDeeper:
*************** / |>>/recurse                                                                                    :2_5:GoDeeper:
**************** / |>>/recurse                                                                                   :2_5:TNumber 3:
|>>/recurse> IN: 3 ( "days" ) ) ) ) IF ( ( "it is" ( "an  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=11:
|>>/recurse> unexpected 3
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected 3 Expecting: (                                     :2_5:TNumber 3:
**************** / |>>/base                                                                                      :2_5:TNumber 3:
***************** > |>>/base got Just 3                                                                          :2_6:GoDeeper:
|>>/base> IN: 3 ( "days" ) ) ) ) IF ( ( "it is" ( "an  <…>
|>>/base> MATCH (COK): 3
|>>/base> VALUE: ((Just 3,0),[])

**************** \ |>>/base has returned (Just 3,0)                                                               :2_6:GoDeeper:
|>>/recurse> IN: ( 3 ( "days" ) ) ) ) IF ( ( "it is" ( "a <…>
|>>/recurse> MATCH (COK): ( 3
|>>/recurse> VALUE: ((Just 3,1),[])

*************** \ |>>/recurse has returned (Just 3,1)                                                              :2_6:GoDeeper:
*************** / |>| calling $>>                                                                                  :2_6:GoDeeper:
**************** / |>>/recurse                                                                                    :2_6:GoDeeper:
***************** / |>>/recurse                                                                                   :2_6:Other "days:
|>>/recurse> IN: "days" ) ) ) ) IF ( ( "it is" ( "an NDB" <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=13:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected "days" Expecting: (                                :2_6:Other "days:
***************** / |>>/base                                                                                      :2_6:Other "days:
****************** > |>>/base got "days"                                                                    :3_3:UnDeeper:
|>>/base> IN: "days" ) ) ) ) IF ( ( "it is" ( "an NDB" <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

***************** \ |>>/base has returned ("days",0)                                                         :3_3:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) ) IF ( ( "it is" ( "an ND <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

**************** \ |>>/recurse has returned ("days",1)                                                        :3_3:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) ) IF ( ( "it is" ( "an ND <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

*************** \ |>| calling $>> has returned ("days",1)                                                      :3_3:UnDeeper:
*************** / undeepers                                                                                    :3_3:UnDeeper:
**************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :3_3:UnDeeper:
**************** > sameLine: success!                                                                             :3_5:UnDeeper:
undeepers> IN: ) ) ) ) IF ( ( "it is" ( "an NDB" ) ) )  <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

*************** \ undeepers has returned ()                                                                        :3_5:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 3 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************** \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")              :3_5:UnDeeper:
************** > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                              :3_5:UnDeeper:
|>>/base> IN: BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it i <…>
|>>/base> MATCH (COK): BEFORE ( 3 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

************* \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                   :3_5:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( "it <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

************ \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                  :3_5:UnDeeper:
|>>/recurse> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( " <…>
|>>/recurse> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

*********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :3_5:UnDeeper:
|>| calling $>>> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) IF ( ( " <…>
|>| calling $>>> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                  :3_5:UnDeeper:
********** / undeepers                                                                                                  :3_5:UnDeeper:
*********** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                   :3_5:UnDeeper:
*********** > sameLine: success!                                                                                :3_2:If:
undeepers> IN: ) ) IF ( ( "it is" ( "an NDB" ) ) ) UNLE <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

********** \ undeepers has returned ()                                                                           :3_2:If:
pDT> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pDT> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

********* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                            :3_2:If:
********* / WHERE                                                                                                 :3_2:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=18:
WHERE> unexpected IF
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected IF Expecting: WHERE                                              :3_2:If:
********* / preambleParamText:[Having]                                                                            :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: HAVING                                             :3_2:If:
preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=18:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected IF Expecting: HAVING                        :3_2:If:
********* / preambleParamText:[Given]                                                                             :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: GIVEN                                              :3_2:If:
preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=18:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected IF Expecting: GIVEN                          :3_2:If:
********* / preambleParamText:[Upon]                                                                              :3_2:If:
********** / $>|                                                                                                 :3_2:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=18:
$>|> unexpected IF
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected IF Expecting: UPON                                               :3_2:If:
preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=18:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected IF Expecting: UPON                            :3_2:If:
********* / preambleBoolStructR [Unless]                                                                          :3_2:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=18:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected IF Expecting: UNLESS                      :3_2:If:
********* / preambleBoolStructR [When,If]                                                                         :3_2:If:
********** / pBSR                                                                                                 :3_3:GoDeeper:
*********** / ppp inner                                                                                          :3_3:GoDeeper:
************ / expression                                                                                       :3_3:GoDeeper:
************* / termIndent p                                                                                   :3_3:GoDeeper:
************** / term p/1a:label ends directly above next line                                                :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/1b:label ends to the left of line below, with EOL                                     :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/1c:label ends to the right of line below                                              :3_3:GoDeeper:
*************** > |<|                                                                                        :3_3:GoDeeper:
*************** > |<* starting                                                                               :3_3:GoDeeper:
*************** / $*|                                                                                        :3_3:GoDeeper:
**************** / someSL                                                                                   :3_3:GoDeeper:
***************** / pNumAsText                                                                             :3_3:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :3_3:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :3_3:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :3_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :3_3:GoDeeper:
**************** / someIndentation                                                                          :3_3:GoDeeper:
***************** / myindented-GoDeeper                                                                    :3_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                :3_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :3_4:GoDeeper:
****************** / ppp inner                                                                              :3_4:GoDeeper:
******************* / expression                                                                           :3_4:GoDeeper:
******************** / termIndent p                                                                       :3_4:GoDeeper:
********************* / term p/1a:label ends directly above next line                                    :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=20:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/1b:label ends to the left of line below, with EOL                         :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=20:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/1c:label ends to the right of line below                                  :3_4:GoDeeper:
********************** > |<|                                                                            :3_4:GoDeeper:
********************** > |<* starting                                                                   :3_4:GoDeeper:
********************** / $*|                                                                            :3_4:GoDeeper:
*********************** / someSL                                                                       :3_4:GoDeeper:
************************ / pNumAsText                                                                 :3_4:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=20:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :3_4:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=20:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :3_4:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=20:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :3_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=20:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :3_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :3_4:GoDeeper:
*********************** / someIndentation                                                              :3_4:GoDeeper:
************************ / myindented-GoDeeper                                                        :3_4:GoDeeper:
myindented-GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented-GoDeeper has returned GoDeeper                                   :3_4:Other "it i:
************************ / manyIndentation/leaf?                                                       :3_4:Other "it i:
************************* / ppp inner                                                                 :3_4:Other "it i:
************************** / expression                                                              :3_4:Other "it i:
*************************** / termIndent p                                                          :3_4:Other "it i:
**************************** / term p/1a:label ends directly above next line                       :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
****************************** / pNumAsText                                                     :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (CERR): "it is" ( "an NDB"
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1a:label ends directly above next line> MATCH (CERR): "it is" ( "an NDB"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=24:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL            :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                          :4_3:UnDeeper:
***************************** / matching EOL                                                     :4_3:UnDeeper:
matching EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=24:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "it is" ( "an NDB"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=24:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                     :3_4:Other "it i:
***************************** > |<|                                                               :3_4:Other "it i:
***************************** > |<* starting                                                      :3_4:Other "it i:
***************************** / $*|                                                               :3_4:Other "it i:
****************************** / someSL                                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

****************************** \ someSL has returned (["it is","an NDB"],1)                     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                          :4_3:UnDeeper:
***************************** / |<*/parent                                                       :4_3:UnDeeper:
****************************** > |<*/recurse                                                    :4_3:UnDeeper:
****************************** / ppp inner                                                   :4_2:Unless:
******************************* / expression                                                :4_2:Unless:
******************************** / termIndent p                                            :4_2:Unless:
********************************* / term p/1a:label ends directly above next line         :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1a:label ends directly above next line> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=27:
term p/1a:label ends directly above next line> unexpected UNLESS
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/1b:label ends to the left of line below, with EOL :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1b:label ends to the left of line below, with EOL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=27:
term p/1b:label ends to the left of line below, with EOL> unexpected UNLESS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/1c:label ends to the right of line below       :4_2:Unless:
********************************** > |<|                                                 :4_2:Unless:
********************************** > |<* starting                                        :4_2:Unless:
********************************** / $*|                                                 :4_2:Unless:
*********************************** / someSL                                            :4_2:Unless:
************************************ / pNumAsText                                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/1c:label ends to the right of line below> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
********************************* / term p/notLabelTerm                                   :4_2:Unless:
********************************** / term p/2:someIndentation expr p                     :4_2:Unless:
*********************************** / someIndentation                                   :4_2:Unless:
************************************ / myindented-GoDeeper                             :4_2:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=27:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: ( :4_2:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=27:
someIndentation> unexpected UNLESS
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: ( :4_2:Unless:
term p/2:someIndentation expr p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=27:
term p/2:someIndentation expr p> unexpected UNLESS
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected UNLESS Expecting: ( :4_2:Unless:
********************************** / term p/3:plain p                                    :4_2:Unless:
*********************************** / pRelPred                                          :4_2:Unless:
************************************ / slRelPred                                       :4_2:Unless:
************************************* / nested simpleHorn                             :4_2:Unless:
************************************** > |^|                                         :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPConstraint                                  :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=27:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPBoolStructR                                 :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slMultiTerm                               :4_2:Unless:
**************************************** / someSL                                  :4_2:Unless:
***************************************** / pNumAsText                            :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=27:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
************************************* / RPMT                                          :4_2:Unless:
************************************** / $*|                                         :4_2:Unless:
*************************************** / slAKA                                     :4_2:Unless:
**************************************** / $*|                                     :4_2:Unless:
***************************************** / slAKA base                            :4_2:Unless:
****************************************** / slMultiTerm                         :4_2:Unless:
******************************************* / someSL                            :4_2:Unless:
******************************************** / pNumAsText                      :4_2:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=27:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :4_2:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=27:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=27:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=27:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=27:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=27:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=27:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=27:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/3:plain p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=27:
term p/3:plain p> unexpected UNLESS
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected UNLESS Expecting: other text or number :4_2:Unless:
term p/notLabelTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=27:
term p/notLabelTerm> unexpected UNLESS
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected UNLESS Expecting: ( term :4_2:Unless:
termIndent p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=27:
termIndent p> unexpected UNLESS
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected UNLESS Expecting: ( other text or number term :4_2:Unless:
expression> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=27:
expression> unexpected UNLESS
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected UNLESS Expecting: expression :4_2:Unless:
ppp inner> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=27:
ppp inner> unexpected UNLESS
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected UNLESS Expecting: expression :4_2:Unless:
****************************** / withPrePost                                                 :4_2:Unless:
******************************* > |<* starting                                              :4_2:Unless:
******************************* / $*|                                                       :4_2:Unless:
******************************** / pre part                                                :4_2:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
withPrePost> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=27:
withPrePost> unexpected UNLESS
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
****************************** / $*|                                                         :4_2:Unless:
******************************* / pre part                                                  :4_2:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=27:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=27:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :4_2:Unless:
****************************** / |<*/base                                                       :4_3:UnDeeper:
******************************* / ppp inner                                                    :4_3:UnDeeper:
******************************** / expression                                                 :4_3:UnDeeper:
********************************* / termIndent p                                             :4_3:UnDeeper:
********************************** / term p/1a:label ends directly above next line          :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=24:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/1b:label ends to the left of line below, with EOL :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=24:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/1c:label ends to the right of line below        :4_3:UnDeeper:
*********************************** > |<|                                                  :4_3:UnDeeper:
*********************************** > |<* starting                                         :4_3:UnDeeper:
*********************************** / $*|                                                  :4_3:UnDeeper:
************************************ / someSL                                             :4_3:UnDeeper:
************************************* / pNumAsText                                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=24:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
********************************** / term p/notLabelTerm                                    :4_3:UnDeeper:
*********************************** / term p/2:someIndentation expr p                      :4_3:UnDeeper:
************************************ / someIndentation                                    :4_3:UnDeeper:
************************************* / myindented-GoDeeper                              :4_3:UnDeeper:
myindented-GoDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=24:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_3:UnDeeper:
someIndentation> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=24:
someIndentation> unexpected )
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=24:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / term p/3:plain p                                     :4_3:UnDeeper:
************************************ / pRelPred                                           :4_3:UnDeeper:
************************************* / slRelPred                                        :4_3:UnDeeper:
************************************** / nested simpleHorn                              :4_3:UnDeeper:
*************************************** > |^|                                          :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
nested simpleHorn> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=24:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPConstraint                                   :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPConstraint> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPBoolStructR                                  :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slMultiTerm                                :4_3:UnDeeper:
***************************************** / someSL                                   :4_3:UnDeeper:
****************************************** / pNumAsText                             :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPBoolStructR> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
************************************** / RPMT                                           :4_3:UnDeeper:
*************************************** / $*|                                          :4_3:UnDeeper:
**************************************** / slAKA                                      :4_3:UnDeeper:
***************************************** / $*|                                      :4_3:UnDeeper:
****************************************** / slAKA base                             :4_3:UnDeeper:
******************************************* / slMultiTerm                          :4_3:UnDeeper:
******************************************** / someSL                             :4_3:UnDeeper:
********************************************* / pNumAsText                       :4_3:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_3:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=24:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slAKA> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
RPMT> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=24:
RPMT> unexpected )
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
slRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=24:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
pRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=24:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/3:plain p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=24:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_3:UnDeeper:
term p/notLabelTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=24:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_3:UnDeeper:
termIndent p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=24:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_3:UnDeeper:
expression> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=24:
expression> unexpected )
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_3:UnDeeper:
ppp inner> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=24:
ppp inner> unexpected )
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_3:UnDeeper:
******************************* / withPrePost                                                  :4_3:UnDeeper:
******************************** > |<* starting                                               :4_3:UnDeeper:
******************************** / $*|                                                        :4_3:UnDeeper:
********************************* / pre part                                                 :4_3:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=24:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
withPrePost> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=24:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
******************************* / $*|                                                          :4_3:UnDeeper:
******************************** / pre part                                                   :4_3:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=24:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_3:UnDeeper:
|<*/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=24:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_3:UnDeeper:
|<*/parent> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=27:
|<*/parent> unexpected UNLESS
|<*/parent> expecting (, ), Other text, or expression

***************************** \ !Unconsumed Error: |<*/parent: Unexpected UNLESS Expecting: ( ( ) Other text expression :4_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "it is" ( "an NDB"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=27:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: ( ( ( ) Other text expression :4_3:UnDeeper:
**************************** / term p/notLabelTerm                                                 :3_4:Other "it i:
***************************** / term p/2:someIndentation expr p                                   :3_4:Other "it i:
****************************** / someIndentation                                                 :3_4:Other "it i:
******************************* / myindented-GoDeeper                                           :3_4:Other "it i:
myindented-GoDeeper> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=21:
myindented-GoDeeper> unexpected "it is"
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "it is" Expecting: ( :3_4:Other "it i:
someIndentation> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=21:
someIndentation> unexpected "it is"
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected "it is" Expecting: ( :3_4:Other "it i:
term p/2:someIndentation expr p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=21:
term p/2:someIndentation expr p> unexpected "it is"
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "it is" Expecting: ( :3_4:Other "it i:
***************************** / term p/3:plain p                                                  :3_4:Other "it i:
****************************** / pRelPred                                                        :3_4:Other "it i:
******************************* / slRelPred                                                     :3_4:Other "it i:
******************************** / nested simpleHorn                                           :3_4:Other "it i:
********************************* > |^|                                                       :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |^| deeps                                                :4_3:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

********************************* \ |^| deeps has returned ([(),(),()],-3)                :4_2:Unless:
nested simpleHorn> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
nested simpleHorn> MATCH (CERR): "it is" ( "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=27:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

******************************** \ !Consumed Error: nested simpleHorn: Unexpected UNLESS Expecting: MEANS ) :4_2:Unless:
******************************** / RPConstraint                                                :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |>| calling $>>                                          :4_3:UnDeeper:
********************************** / |>>/recurse                                            :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
********************************** / |>>/base                                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPConstraint> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPConstraint> MATCH (CERR): "it is" ( "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=24:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
******************************** / RPBoolStructR                                               :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slMultiTerm                                             :3_4:Other "it i:
*********************************** / someSL                                                :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ someSL has returned (["it is","an NDB"],1)           :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slMultiTerm has returned (["it is","an NDB"],1)        :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
********************************* / |>| calling $>>                                          :4_3:UnDeeper:
********************************** / |>>/recurse                                            :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
********************************** / |>>/base                                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_3:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=24:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
RPBoolStructR> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPBoolStructR> MATCH (CERR): "it is" ( "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=24:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_3:UnDeeper:
******************************** / RPMT                                                        :3_4:Other "it i:
********************************* / $*|                                                       :3_4:Other "it i:
********************************** / slAKA                                                   :3_4:Other "it i:
*********************************** / $*|                                                   :3_4:Other "it i:
************************************ / slAKA base                                          :3_4:Other "it i:
************************************* / slMultiTerm                                       :3_4:Other "it i:
************************************** / someSL                                          :3_4:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************************** \ someSL has returned (["it is","an NDB"],1)     :4_3:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

************************************* \ slMultiTerm has returned (["it is","an NDB"],1)  :4_3:UnDeeper:
slAKA base> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA base> MATCH (COK): "it is" ( "an NDB"
slAKA base> VALUE: ((["it is","an NDB"],1),[])

************************************ \ slAKA base has returned (["it is","an NDB"],1)     :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ $*| has returned (["it is","an NDB"],1)              :4_3:UnDeeper:
*********************************** / |>>/recurse                                          :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / |>>/base                                             :4_3:UnDeeper:
************************************ / slAKA optional akapart                             :4_3:UnDeeper:
************************************* / |?| optional something                           :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
************************************** / |>>/base                                       :4_3:UnDeeper:
*************************************** / PAKA/akapart                                 :4_3:UnDeeper:
**************************************** / $>|                                        :4_3:UnDeeper:
***************************************** / Aka Token                                :4_3:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=24:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_3:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected )
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_3:UnDeeper:
PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=24:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_3:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :4_3:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)    :4_3:UnDeeper:
************************************ > |>>/base got Nothing                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :4_3:UnDeeper:
*********************************** / |>>/recurse                                          :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
*********************************** / |>>/base                                             :4_3:UnDeeper:
************************************ / slAKA optional typically                           :4_3:UnDeeper:
************************************* / |?| optional something                           :4_3:UnDeeper:
************************************** / |>>/recurse                                    :4_3:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=24:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_3:UnDeeper:
************************************** / |>>/base                                       :4_3:UnDeeper:
*************************************** / typically                                    :4_3:UnDeeper:
**************************************** / $>|                                        :4_3:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=24:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=24:
typically> unexpected )
typically> expecting TYPICALLY

*************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=24:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_3:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :4_3:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)  :4_3:UnDeeper:
************************************ > |>>/base got Nothing                               :4_3:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :4_3:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :4_3:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                          :4_3:UnDeeper:
slAKA> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA> MATCH (COK): "it is" ( "an NDB"
slAKA> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slAKA has returned (["it is","an NDB"],1)              :4_3:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                  :4_3:UnDeeper:
RPMT> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPMT> MATCH (COK): "it is" ( "an NDB"
RPMT> VALUE: ((RPMT ["it is","an NDB"],1),[])

******************************** \ RPMT has returned (RPMT ["it is","an NDB"],1)              :4_3:UnDeeper:
slRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slRelPred> MATCH (COK): "it is" ( "an NDB"
slRelPred> VALUE: ((RPMT ["it is","an NDB"],1),[])

******************************* \ slRelPred has returned (RPMT ["it is","an NDB"],1)           :4_3:UnDeeper:
******************************* / undeepers                                                    :4_3:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :4_3:UnDeeper:
******************************** > sameLine: success!                                           :4_4:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                      :4_4:UnDeeper:
pRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
pRelPred> MATCH (COK): "it is" ( "an NDB" )
pRelPred> VALUE: (RPMT ["it is","an NDB"],[])

****************************** \ pRelPred has returned RPMT ["it is","an NDB"]                    :4_4:UnDeeper:
term p/3:plain p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/3:plain p> MATCH (COK): "it is" ( "an NDB" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])     :4_4:UnDeeper:
term p/notLabelTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/notLabelTerm> MATCH (COK): "it is" ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])    :4_4:UnDeeper:
termIndent p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
termIndent p> MATCH (COK): "it is" ( "an NDB" )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])             :4_4:UnDeeper:
*************************** / binary(Or)                                                             :4_4:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=25:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_4:UnDeeper:
*************************** / binary(And)                                                            :4_4:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=25:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_4:UnDeeper:
*************************** / binary(SetLess)                                                        :4_4:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=25:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_4:UnDeeper:
*************************** / binary(SetPlus)                                                        :4_4:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=25:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_4:UnDeeper:
expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                 :4_4:UnDeeper:
ppp inner> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
ppp inner> MATCH (COK): "it is" ( "an NDB" )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_4:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])          :4_4:UnDeeper:
************************ / myindented-UnDeeper                                                          :4_4:UnDeeper:
myindented-UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented-UnDeeper has returned UnDeeper                                      :4_5:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_5:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])      :4_5:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                    :4_5:UnDeeper:
termIndent p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
termIndent p> MATCH (COK): ( "it is" ( "an NDB" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                             :4_5:UnDeeper:
******************** / binary(Or)                                                                             :4_5:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=26:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_5:UnDeeper:
******************** / binary(And)                                                                            :4_5:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=26:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_5:UnDeeper:
******************** / binary(SetLess)                                                                        :4_5:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=26:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_5:UnDeeper:
******************** / binary(SetPlus)                                                                        :4_5:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=26:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_5:UnDeeper:
expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************* \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                 :4_5:UnDeeper:
ppp inner> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
ppp inner> MATCH (COK): ( "it is" ( "an NDB" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

****************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                    :4_5:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                          :4_5:UnDeeper:
***************** / myindented-UnDeeper                                                                          :4_5:UnDeeper:
myindented-UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented-UnDeeper has returned UnDeeper                                             :4_2:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                           :4_2:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])             :4_2:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                           :4_2:Unless:
termIndent p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
termIndent p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************* \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                    :4_2:Unless:
************* / binary(Or)                                                                                    :4_2:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=27:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected UNLESS Expecting: OR                                :4_2:Unless:
************* / binary(And)                                                                                   :4_2:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=27:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected UNLESS Expecting: AND                              :4_2:Unless:
************* / binary(SetLess)                                                                               :4_2:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=27:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected UNLESS Expecting: LESS                         :4_2:Unless:
************* / binary(SetPlus)                                                                               :4_2:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=27:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected UNLESS Expecting: PLUS                         :4_2:Unless:
expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************ \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                        :4_2:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                           :4_2:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

********** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                    :4_2:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

********* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                        :4_2:Unless:
********* / preambleBoolStructR [When,If]                                                                         :4_2:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=27:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

********* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected UNLESS Expecting: IF WHEN                :4_2:Unless:
********* / WHERE                                                                                                 :4_2:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=27:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected UNLESS Expecting: WHERE                                          :4_2:Unless:
********* / preambleParamText:[Having]                                                                            :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: HAVING                                         :4_2:Unless:
preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=27:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UNLESS Expecting: HAVING                    :4_2:Unless:
********* / preambleParamText:[Given]                                                                             :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                          :4_2:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=27:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                      :4_2:Unless:
********* / preambleParamText:[Upon]                                                                              :4_2:Unless:
********** / $>|                                                                                                 :4_2:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=27:
$>|> unexpected UNLESS
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                           :4_2:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=27:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                        :4_2:Unless:
********* / preambleBoolStructR [Unless]                                                                          :4_2:Unless:
********** / pBSR                                                                                                 :4_3:GoDeeper:
*********** / ppp inner                                                                                          :4_3:GoDeeper:
************ / expression                                                                                       :4_3:GoDeeper:
************* / termIndent p                                                                                   :4_3:GoDeeper:
************** / term p/1a:label ends directly above next line                                                :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=28:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/1b:label ends to the left of line below, with EOL                                     :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=28:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/1c:label ends to the right of line below                                              :4_3:GoDeeper:
*************** > |<|                                                                                        :4_3:GoDeeper:
*************** > |<* starting                                                                               :4_3:GoDeeper:
*************** / $*|                                                                                        :4_3:GoDeeper:
**************** / someSL                                                                                   :4_3:GoDeeper:
***************** / pNumAsText                                                                             :4_3:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=28:
pNumAsText> unexpected (
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                          :4_3:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=28:
someSL> unexpected (
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                  :4_3:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=28:
$*|> unexpected (
$*|> expecting other text or number

*************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                       :4_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=28:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_3:GoDeeper:
************** / term p/notLabelTerm                                                                          :4_3:GoDeeper:
*************** / term p/2:someIndentation expr p                                                            :4_3:GoDeeper:
**************** / someIndentation                                                                          :4_3:GoDeeper:
***************** / myindented-GoDeeper                                                                    :4_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                :4_4:GoDeeper:
***************** / manyIndentation/leaf?                                                                    :4_4:GoDeeper:
****************** / ppp inner                                                                              :4_4:GoDeeper:
******************* / expression                                                                           :4_4:GoDeeper:
******************** / termIndent p                                                                       :4_4:GoDeeper:
********************* / term p/1a:label ends directly above next line                                    :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=29:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/1b:label ends to the left of line below, with EOL                         :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=29:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/1c:label ends to the right of line below                                  :4_4:GoDeeper:
********************** > |<|                                                                            :4_4:GoDeeper:
********************** > |<* starting                                                                   :4_4:GoDeeper:
********************** / $*|                                                                            :4_4:GoDeeper:
*********************** / someSL                                                                       :4_4:GoDeeper:
************************ / pNumAsText                                                                 :4_4:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=29:
pNumAsText> unexpected (
pNumAsText> expecting number

************************ \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number              :4_4:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=29:
someSL> unexpected (
someSL> expecting other text or number

*********************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number      :4_4:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=29:
$*|> unexpected (
$*|> expecting other text or number

********************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :4_4:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=29:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :4_4:GoDeeper:
********************* / term p/notLabelTerm                                                              :4_4:GoDeeper:
********************** / term p/2:someIndentation expr p                                                :4_4:GoDeeper:
*********************** / someIndentation                                                              :4_4:GoDeeper:
************************ / myindented-GoDeeper                                                        :4_4:GoDeeper:
myindented-GoDeeper> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************************ \ myindented-GoDeeper has returned GoDeeper                                   :4_4:Other "you:
************************ / manyIndentation/leaf?                                                       :4_4:Other "you:
************************* / ppp inner                                                                 :4_4:Other "you:
************************** / expression                                                              :4_4:Other "you:
*************************** / termIndent p                                                          :4_4:Other "you:
**************************** / term p/1a:label ends directly above next line                       :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
****************************** / pNumAsText                                                     :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number  :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (CERR): "you are a Public Agency"
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or other text or number

***************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :6_3:UnDeeper:
term p/1a:label ends directly above next line> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1a:label ends directly above next line> MATCH (CERR): "you are a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=31:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

**************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :6_3:UnDeeper:
**************************** / term p/1b:label ends to the left of line below, with EOL            :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)                 :6_3:UnDeeper:
***************************** / matching EOL                                                     :6_3:UnDeeper:
matching EOL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=31:
matching EOL> unexpected )
matching EOL> expecting EOL

***************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL     :6_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "you are a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=31:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

**************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :6_3:UnDeeper:
**************************** / term p/1c:label ends to the right of line below                     :4_4:Other "you:
***************************** > |<|                                                               :4_4:Other "you:
***************************** > |<* starting                                                      :4_4:Other "you:
***************************** / $*|                                                               :4_4:Other "you:
****************************** / someSL                                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

****************************** \ someSL has returned (["you are a Public Agency"],0)            :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

***************************** \ $*| has returned (["you are a Public Agency"],0)                 :6_3:UnDeeper:
***************************** / |<*/parent                                                       :6_3:UnDeeper:
****************************** > |<*/recurse                                                    :6_3:UnDeeper:
****************************** / ppp inner                                                   :6_2:Do:
******************************* / expression                                                :6_2:Do:
******************************** / termIndent p                                            :6_2:Do:
********************************* / term p/1a:label ends directly above next line         :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1a:label ends directly above next line> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=33:
term p/1a:label ends directly above next line> unexpected DO
term p/1a:label ends directly above next line> expecting other text or number

********************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/1b:label ends to the left of line below, with EOL :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1b:label ends to the left of line below, with EOL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=33:
term p/1b:label ends to the left of line below, with EOL> unexpected DO
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/1c:label ends to the right of line below       :6_2:Do:
********************************** > |<|                                                 :6_2:Do:
********************************** > |<* starting                                        :6_2:Do:
********************************** / $*|                                                 :6_2:Do:
*********************************** / someSL                                            :6_2:Do:
************************************ / pNumAsText                                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

************************************ \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

*********************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
term p/1c:label ends to the right of line below> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=33:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting other text or number

********************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: other text or number :6_2:Do:
********************************* / term p/notLabelTerm                                   :6_2:Do:
********************************** / term p/2:someIndentation expr p                     :6_2:Do:
*********************************** / someIndentation                                   :6_2:Do:
************************************ / myindented-GoDeeper                             :6_2:Do:
myindented-GoDeeper> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=33:
myindented-GoDeeper> unexpected DO
myindented-GoDeeper> expecting (

************************************ \ !Unconsumed Error: myindented-GoDeeper: Unexpected DO Expecting: ( :6_2:Do:
someIndentation> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=33:
someIndentation> unexpected DO
someIndentation> expecting (

*********************************** \ !Unconsumed Error: someIndentation: Unexpected DO Expecting: ( :6_2:Do:
term p/2:someIndentation expr p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=33:
term p/2:someIndentation expr p> unexpected DO
term p/2:someIndentation expr p> expecting (

********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected DO Expecting: ( :6_2:Do:
********************************** / term p/3:plain p                                    :6_2:Do:
*********************************** / pRelPred                                          :6_2:Do:
************************************ / slRelPred                                       :6_2:Do:
************************************* / nested simpleHorn                             :6_2:Do:
************************************** > |^|                                         :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
nested simpleHorn> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting other text or number

************************************* \ !Unconsumed Error: nested simpleHorn: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPConstraint                                  :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPConstraint> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=33:
RPConstraint> unexpected DO
RPConstraint> expecting other text or number

************************************* \ !Unconsumed Error: RPConstraint: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPBoolStructR                                 :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slMultiTerm                               :6_2:Do:
**************************************** / someSL                                  :6_2:Do:
***************************************** / pNumAsText                            :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPBoolStructR> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=33:
RPBoolStructR> unexpected DO
RPBoolStructR> expecting other text or number

************************************* \ !Unconsumed Error: RPBoolStructR: Unexpected DO Expecting: other text or number :6_2:Do:
************************************* / RPMT                                          :6_2:Do:
************************************** / $*|                                         :6_2:Do:
*************************************** / slAKA                                     :6_2:Do:
**************************************** / $*|                                     :6_2:Do:
***************************************** / slAKA base                            :6_2:Do:
****************************************** / slMultiTerm                         :6_2:Do:
******************************************* / someSL                            :6_2:Do:
******************************************** / pNumAsText                      :6_2:Do:
pNumAsText> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=33:
pNumAsText> unexpected DO
pNumAsText> expecting number

******************************************** \ !Unconsumed Error: pNumAsText: Unexpected DO Expecting: number :6_2:Do:
someSL> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=33:
someSL> unexpected DO
someSL> expecting other text or number

******************************************* \ !Unconsumed Error: someSL: Unexpected DO Expecting: other text or number :6_2:Do:
slMultiTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=33:
slMultiTerm> unexpected DO
slMultiTerm> expecting other text or number

****************************************** \ !Unconsumed Error: slMultiTerm: Unexpected DO Expecting: other text or number :6_2:Do:
slAKA base> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=33:
slAKA base> unexpected DO
slAKA base> expecting other text or number

***************************************** \ !Unconsumed Error: slAKA base: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

**************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
slAKA> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=33:
slAKA> unexpected DO
slAKA> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA: Unexpected DO Expecting: other text or number :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: other text or number :6_2:Do:
RPMT> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=33:
RPMT> unexpected DO
RPMT> expecting other text or number

************************************* \ !Unconsumed Error: RPMT: Unexpected DO Expecting: other text or number :6_2:Do:
slRelPred> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=33:
slRelPred> unexpected DO
slRelPred> expecting other text or number

************************************ \ !Unconsumed Error: slRelPred: Unexpected DO Expecting: other text or number :6_2:Do:
pRelPred> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=33:
pRelPred> unexpected DO
pRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: pRelPred: Unexpected DO Expecting: other text or number :6_2:Do:
term p/3:plain p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=33:
term p/3:plain p> unexpected DO
term p/3:plain p> expecting other text or number

********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected DO Expecting: other text or number :6_2:Do:
term p/notLabelTerm> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=33:
term p/notLabelTerm> unexpected DO
term p/notLabelTerm> expecting ( or term

********************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected DO Expecting: ( term :6_2:Do:
termIndent p> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=33:
termIndent p> unexpected DO
termIndent p> expecting (, other text or number, or term

******************************** \ !Unconsumed Error: termIndent p: Unexpected DO Expecting: ( other text or number term :6_2:Do:
expression> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=33:
expression> unexpected DO
expression> expecting expression

******************************* \ !Unconsumed Error: expression: Unexpected DO Expecting: expression :6_2:Do:
ppp inner> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=33:
ppp inner> unexpected DO
ppp inner> expecting expression

****************************** \ !Unconsumed Error: ppp inner: Unexpected DO Expecting: expression :6_2:Do:
****************************** / withPrePost                                                 :6_2:Do:
******************************* > |<* starting                                              :6_2:Do:
******************************* / $*|                                                       :6_2:Do:
******************************** / pre part                                                :6_2:Do:
pre part> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=33:
pre part> unexpected DO
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text :6_2:Do:
withPrePost> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=33:
withPrePost> unexpected DO
withPrePost> expecting ( or Other text

****************************** \ !Unconsumed Error: withPrePost: Unexpected DO Expecting: ( Other text :6_2:Do:
****************************** / $*|                                                         :6_2:Do:
******************************* / pre part                                                  :6_2:Do:
pre part> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=33:
pre part> unexpected DO
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected DO Expecting: ( Other text :6_2:Do:
$*|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=33:
$*|> unexpected DO
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected DO Expecting: ( Other text :6_2:Do:
****************************** / |<*/base                                                       :6_3:UnDeeper:
******************************* / ppp inner                                                    :6_3:UnDeeper:
******************************** / expression                                                 :6_3:UnDeeper:
********************************* / termIndent p                                             :6_3:UnDeeper:
********************************** / term p/1a:label ends directly above next line          :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=31:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

********************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/1b:label ends to the left of line below, with EOL :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=31:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/1c:label ends to the right of line below        :6_3:UnDeeper:
*********************************** > |<|                                                  :6_3:UnDeeper:
*********************************** > |<* starting                                         :6_3:UnDeeper:
*********************************** / $*|                                                  :6_3:UnDeeper:
************************************ / someSL                                             :6_3:UnDeeper:
************************************* / pNumAsText                                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=31:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

********************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
********************************** / term p/notLabelTerm                                    :6_3:UnDeeper:
*********************************** / term p/2:someIndentation expr p                      :6_3:UnDeeper:
************************************ / someIndentation                                    :6_3:UnDeeper:
************************************* / myindented-GoDeeper                              :6_3:UnDeeper:
myindented-GoDeeper> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=31:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

************************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :6_3:UnDeeper:
someIndentation> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=31:
someIndentation> unexpected )
someIndentation> expecting (

************************************ \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :6_3:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=31:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

*********************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / term p/3:plain p                                     :6_3:UnDeeper:
************************************ / pRelPred                                           :6_3:UnDeeper:
************************************* / slRelPred                                        :6_3:UnDeeper:
************************************** / nested simpleHorn                              :6_3:UnDeeper:
*************************************** > |^|                                          :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
nested simpleHorn> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=31:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPConstraint                                   :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPConstraint> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPBoolStructR                                  :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slMultiTerm                                :6_3:UnDeeper:
***************************************** / someSL                                   :6_3:UnDeeper:
****************************************** / pNumAsText                             :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPBoolStructR> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
************************************** / RPMT                                           :6_3:UnDeeper:
*************************************** / $*|                                          :6_3:UnDeeper:
**************************************** / slAKA                                      :6_3:UnDeeper:
***************************************** / $*|                                      :6_3:UnDeeper:
****************************************** / slAKA base                             :6_3:UnDeeper:
******************************************* / slMultiTerm                          :6_3:UnDeeper:
******************************************** / someSL                             :6_3:UnDeeper:
********************************************* / pNumAsText                       :6_3:UnDeeper:
pNumAsText> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=31:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :6_3:UnDeeper:
someSL> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=31:
someSL> unexpected )
someSL> expecting other text or number

******************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slMultiTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=31:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

******************************************* \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slAKA base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=31:
slAKA base> unexpected )
slAKA base> expecting other text or number

****************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

***************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slAKA> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=31:
slAKA> unexpected )
slAKA> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
RPMT> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=31:
RPMT> unexpected )
RPMT> expecting other text or number

************************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
slRelPred> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=31:
slRelPred> unexpected )
slRelPred> expecting other text or number

************************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
pRelPred> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=31:
pRelPred> unexpected )
pRelPred> expecting other text or number

************************************ \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/3:plain p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=31:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

*********************************** \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :6_3:UnDeeper:
term p/notLabelTerm> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=31:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

********************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :6_3:UnDeeper:
termIndent p> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=31:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

********************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :6_3:UnDeeper:
expression> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=31:
expression> unexpected )
expression> expecting expression

******************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :6_3:UnDeeper:
ppp inner> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=31:
ppp inner> unexpected )
ppp inner> expecting expression

******************************* \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :6_3:UnDeeper:
******************************* / withPrePost                                                  :6_3:UnDeeper:
******************************** > |<* starting                                               :6_3:UnDeeper:
******************************** / $*|                                                        :6_3:UnDeeper:
********************************* / pre part                                                 :6_3:UnDeeper:
pre part> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected )
pre part> expecting ( or Other text

********************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or Other text

******************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
withPrePost> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=31:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

******************************* \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
******************************* / $*|                                                          :6_3:UnDeeper:
******************************** / pre part                                                   :6_3:UnDeeper:
pre part> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=31:
pre part> unexpected )
pre part> expecting ( or Other text

******************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
$*|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=31:
$*|> unexpected )
$*|> expecting ( or Other text

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :6_3:UnDeeper:
|<*/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=31:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

****************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :6_3:UnDeeper:
|<*/parent> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=33:
|<*/parent> unexpected DO
|<*/parent> expecting (, ), Other text, or expression

***************************** \ !Unconsumed Error: |<*/parent: Unexpected DO Expecting: ( ( ) Other text expression :6_3:UnDeeper:
term p/1c:label ends to the right of line below> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "you are a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=33:
term p/1c:label ends to the right of line below> unexpected DO
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

**************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected DO Expecting: ( ( ( ) Other text expression :6_3:UnDeeper:
**************************** / term p/notLabelTerm                                                 :4_4:Other "you:
***************************** / term p/2:someIndentation expr p                                   :4_4:Other "you:
****************************** / someIndentation                                                 :4_4:Other "you:
******************************* / myindented-GoDeeper                                           :4_4:Other "you:
myindented-GoDeeper> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=30:
myindented-GoDeeper> unexpected "you are a Public Agency"
myindented-GoDeeper> expecting (

******************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
someIndentation> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=30:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

****************************** \ !Unconsumed Error: someIndentation: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=30:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

***************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "you are a Public Agency" Expecting: ( :4_4:Other "you:
***************************** / term p/3:plain p                                                  :4_4:Other "you:
****************************** / pRelPred                                                        :4_4:Other "you:
******************************* / slRelPred                                                     :4_4:Other "you:
******************************** / nested simpleHorn                                           :4_4:Other "you:
********************************* > |^|                                                       :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |^| deeps                                                :6_3:UnDeeper:
|^| deeps> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

********************************* \ |^| deeps has returned ([(),()],-2)                   :6_2:Do:
nested simpleHorn> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=33:
nested simpleHorn> unexpected DO
nested simpleHorn> expecting ) or MEANS

******************************** \ !Consumed Error: nested simpleHorn: Unexpected DO Expecting: MEANS ) :6_2:Do:
******************************** / RPConstraint                                                :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>| calling $>>                                          :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
********************************** / |>>/base                                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_3:UnDeeper:
|>| calling $>>> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
RPConstraint> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=31:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
******************************** / RPBoolStructR                                               :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slMultiTerm                                             :4_4:Other "you:
*********************************** / someSL                                                :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ someSL has returned (["you are a Public Agency"],0)  :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
********************************* / |>| calling $>>                                          :6_3:UnDeeper:
********************************** / |>>/recurse                                            :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
********************************** / |>>/base                                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :6_3:UnDeeper:
|>| calling $>>> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=31:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
RPBoolStructR> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=31:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :6_3:UnDeeper:
******************************** / RPMT                                                        :4_4:Other "you:
********************************* / $*|                                                       :4_4:Other "you:
********************************** / slAKA                                                   :4_4:Other "you:
*********************************** / $*|                                                   :4_4:Other "you:
************************************ / slAKA base                                          :4_4:Other "you:
************************************* / slMultiTerm                                       :4_4:Other "you:
************************************** / someSL                                          :4_4:Other "you:
someSL> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************** \ someSL has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

************************************* \ slMultiTerm has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ slAKA base has returned (["you are a Public Agency"],0) :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ $*| has returned (["you are a Public Agency"],0)     :6_3:UnDeeper:
*********************************** / |>>/recurse                                          :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / |>>/base                                             :6_3:UnDeeper:
************************************ / slAKA optional akapart                             :6_3:UnDeeper:
************************************* / |?| optional something                           :6_3:UnDeeper:
************************************** / |>>/recurse                                    :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
************************************** / |>>/base                                       :6_3:UnDeeper:
*************************************** / PAKA/akapart                                 :6_3:UnDeeper:
**************************************** / $>|                                        :6_3:UnDeeper:
***************************************** / Aka Token                                :6_3:UnDeeper:
Aka Token> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=31:
Aka Token> unexpected )
Aka Token> expecting AKA

***************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :6_3:UnDeeper:
$>|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected )
$>|> expecting AKA

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :6_3:UnDeeper:
PAKA/akapart> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=31:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*************************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :6_3:UnDeeper:
|?| optional something> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :6_3:UnDeeper:
slAKA optional akapart> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional akapart has returned (Nothing,0)    :6_3:UnDeeper:
************************************ > |>>/base got Nothing                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :6_3:UnDeeper:
*********************************** / |>>/recurse                                          :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

*********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
*********************************** / |>>/base                                             :6_3:UnDeeper:
************************************ / slAKA optional typically                           :6_3:UnDeeper:
************************************* / |?| optional something                           :6_3:UnDeeper:
************************************** / |>>/recurse                                    :6_3:UnDeeper:
|>>/recurse> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=31:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :6_3:UnDeeper:
************************************** / |>>/base                                       :6_3:UnDeeper:
*************************************** / typically                                    :6_3:UnDeeper:
**************************************** / $>|                                        :6_3:UnDeeper:
$>|> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=31:
$>|> unexpected )
$>|> expecting TYPICALLY

**************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
typically> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=31:
typically> unexpected )
typically> expecting TYPICALLY

*************************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=31:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :6_3:UnDeeper:
|?| optional something> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************************* \ |?| optional something has returned (Nothing,0)  :6_3:UnDeeper:
slAKA optional typically> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************************************ \ slAKA optional typically has returned (Nothing,0)  :6_3:UnDeeper:
************************************ > |>>/base got Nothing                               :6_3:UnDeeper:
|>>/base> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

*********************************** \ |>>/base has returned (Nothing,0)                    :6_3:UnDeeper:
*********************************** > slAKA: proceeding after base and entityalias are retrieved ... :6_3:UnDeeper:
*********************************** > pAKA: entityalias = Nothing                          :6_3:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA has returned (["you are a Public Agency"],0)     :6_3:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)         :6_3:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

******************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)     :6_3:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

******************************* \ slRelPred has returned (RPMT ["you are a Public Agency"],0)  :6_3:UnDeeper:
******************************* / undeepers                                                    :6_3:UnDeeper:
******************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :6_3:UnDeeper:
******************************** > sameLine: success!                                         :6_3:UnDeeper:
undeepers> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

******************************* \ undeepers has returned ()                                    :6_3:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

****************************** \ pRelPred has returned RPMT ["you are a Public Agency"]         :6_3:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
termIndent p> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
termIndent p> MATCH (COK): "you are a Public Agency"
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])  :6_3:UnDeeper:
*************************** / binary(Or)                                                           :6_3:UnDeeper:
binary(Or)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=31:
binary(Or)> unexpected )
binary(Or)> expecting OR

*************************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR            :6_3:UnDeeper:
*************************** / binary(And)                                                          :6_3:UnDeeper:
binary(And)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=31:
binary(And)> unexpected )
binary(And)> expecting AND

*************************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND          :6_3:UnDeeper:
*************************** / binary(SetLess)                                                      :6_3:UnDeeper:
binary(SetLess)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=31:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*************************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS     :6_3:UnDeeper:
*************************** / binary(SetPlus)                                                      :6_3:UnDeeper:
binary(SetPlus)> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=31:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*************************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS     :6_3:UnDeeper:
expression> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])      :6_3:UnDeeper:
ppp inner> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
ppp inner> MATCH (COK): "you are a Public Agency"
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_3:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) DO ( ( "NO <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_3:UnDeeper:
************************ / myindented-UnDeeper                                                        :6_3:UnDeeper:
myindented-UnDeeper> IN: ) ) DO ( ( "NOTIFY" ( "the PDPC" ) "in"  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************************ \ myindented-UnDeeper has returned UnDeeper                                    :6_4:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :6_4:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])         :6_4:UnDeeper:
termIndent p> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
termIndent p> MATCH (COK): ( "you are a Public Agency" )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_4:UnDeeper:
******************** / binary(Or)                                                                           :6_4:UnDeeper:
binary(Or)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=32:
binary(Or)> unexpected )
binary(Or)> expecting OR

******************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                            :6_4:UnDeeper:
******************** / binary(And)                                                                          :6_4:UnDeeper:
binary(And)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=32:
binary(And)> unexpected )
binary(And)> expecting AND

******************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                          :6_4:UnDeeper:
******************** / binary(SetLess)                                                                      :6_4:UnDeeper:
binary(SetLess)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=32:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

******************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                     :6_4:UnDeeper:
******************** / binary(SetPlus)                                                                      :6_4:UnDeeper:
binary(SetPlus)> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=32:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

******************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                     :6_4:UnDeeper:
expression> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                      :6_4:UnDeeper:
ppp inner> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
ppp inner> MATCH (COK): ( "you are a Public Agency" )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                         :6_4:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) DO ( ( " <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])               :6_4:UnDeeper:
***************** / myindented-UnDeeper                                                                        :6_4:UnDeeper:
myindented-UnDeeper> IN: ) DO ( ( "NOTIFY" ( "the PDPC" ) "in" (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

***************** \ myindented-UnDeeper has returned UnDeeper                                             :6_2:Do:
someIndentation> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])    :6_2:Do:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                  :6_2:Do:
termIndent p> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
termIndent p> MATCH (COK): ( ( "you are a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                           :6_2:Do:
************* / binary(Or)                                                                                    :6_2:Do:
binary(Or)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=33:
binary(Or)> unexpected DO
binary(Or)> expecting OR

************* \ !Unconsumed Error: binary(Or): Unexpected DO Expecting: OR                                    :6_2:Do:
************* / binary(And)                                                                                   :6_2:Do:
binary(And)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=33:
binary(And)> unexpected DO
binary(And)> expecting AND

************* \ !Unconsumed Error: binary(And): Unexpected DO Expecting: AND                                  :6_2:Do:
************* / binary(SetLess)                                                                               :6_2:Do:
binary(SetLess)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=33:
binary(SetLess)> unexpected DO
binary(SetLess)> expecting LESS

************* \ !Unconsumed Error: binary(SetLess): Unexpected DO Expecting: LESS                             :6_2:Do:
************* / binary(SetPlus)                                                                               :6_2:Do:
binary(SetPlus)> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=33:
binary(SetPlus)> unexpected DO
binary(SetPlus)> expecting PLUS

************* \ !Unconsumed Error: binary(SetPlus): Unexpected DO Expecting: PLUS                             :6_2:Do:
expression> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                               :6_2:Do:
ppp inner> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                                  :6_2:Do:
pBSR> IN: ( ( "you are a Public Agency" ) ) DO ( ( <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

********** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                           :6_2:Do:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

********* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))            :6_2:Do:
********* / preambleBoolStructR [Unless]                                                                          :6_2:Do:
preambleBoolStructR [Unless]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=33:
preambleBoolStructR [Unless]> unexpected DO
preambleBoolStructR [Unless]> expecting UNLESS

********* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected DO Expecting: UNLESS                      :6_2:Do:
********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected DO
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                              :6_2:Do:
********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                             :6_2:Do:
preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                        :6_2:Do:
********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                              :6_2:Do:
preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                          :6_2:Do:
********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                               :6_2:Do:
preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                            :6_2:Do:
********* / WHERE                                                                                                 :6_2:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=33:
WHERE> unexpected DO
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                              :6_2:Do:
********* / preambleParamText:[Having]                                                                            :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                             :6_2:Do:
preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=33:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                        :6_2:Do:
********* / preambleParamText:[Given]                                                                             :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                              :6_2:Do:
preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=33:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                          :6_2:Do:
********* / preambleParamText:[Upon]                                                                              :6_2:Do:
********** / $>|                                                                                                 :6_2:Do:
$>|> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=33:
$>|> unexpected DO
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                               :6_2:Do:
preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=33:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                            :6_2:Do:
********* / pDoAction/Do                                                                                          :6_2:Do:
pDoAction/Do> IN: DO ( ( "NOTIFY" ( "the PDPC" ) "in" ( "t <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

********* \ pDoAction/Do has returned Do                                                                           :6_3:GoDeeper:
********* / pDoAction/pAction                                                                                      :6_3:GoDeeper:
********** / someIndentation                                                                                      :6_3:GoDeeper:
*********** / myindented-GoDeeper                                                                                :6_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                            :6_4:GoDeeper:
*********** / manyIndentation/leaf?                                                                                :6_4:GoDeeper:
************ / pAction calling pParamText                                                                         :6_4:GoDeeper:
************* / pParamText                                                                                       :6_4:GoDeeper:
************** / pParamText(flat) first line: pKeyValues                                                        :6_4:GoDeeper:
*************** / pKeyValuesAka                                                                                :6_4:GoDeeper:
**************** / slAKA                                                                                      :6_4:GoDeeper:
***************** / $*|                                                                                      :6_4:GoDeeper:
****************** / slAKA base                                                                             :6_4:GoDeeper:
******************* / slKeyValues                                                                          :6_4:GoDeeper:
******************** / $*|                                                                                :6_4:GoDeeper:
********************* / someSL                                                                           :6_4:GoDeeper:
********************** / pNumAsText                                                                     :6_4:GoDeeper:
pNumAsText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=35:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                  :6_4:GoDeeper:
someSL> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=35:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number          :6_4:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
slKeyValues> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=35:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

******************* \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number         :6_4:GoDeeper:
slAKA base> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=35:
slAKA base> unexpected (
slAKA base> expecting other text or number

****************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number            :6_4:GoDeeper:
$*|> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=35:
$*|> unexpected (
$*|> expecting other text or number

***************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                     :6_4:GoDeeper:
slAKA> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=35:
slAKA> unexpected (
slAKA> expecting other text or number

**************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                     :6_4:GoDeeper:
pKeyValuesAka> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=35:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=35:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

************** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :6_4:GoDeeper:
pParamText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=35:
pParamText> unexpected (
pParamText> expecting other text or number

************* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                      :6_4:GoDeeper:
pAction calling pParamText> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=35:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

************ \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number        :6_4:GoDeeper:
manyIndentation/leaf?> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=35:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting other text or number

*********** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: other text or number               :6_4:GoDeeper:
*********** / manyIndentation/deeper; calling someIndentation                                                      :6_4:GoDeeper:
************ / someIndentation                                                                                    :6_4:GoDeeper:
************* / myindented-GoDeeper                                                                              :6_4:GoDeeper:
myindented-GoDeeper> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented-GoDeeper has returned GoDeeper                                                         :6_4:Other "NOTI:
************* / manyIndentation/leaf?                                                                             :6_4:Other "NOTI:
************** / pAction calling pParamText                                                                      :6_4:Other "NOTI:
*************** / pParamText                                                                                    :6_4:Other "NOTI:
**************** / pParamText(flat) first line: pKeyValues                                                     :6_4:Other "NOTI:
***************** / pKeyValuesAka                                                                             :6_4:Other "NOTI:
****************** / slAKA                                                                                   :6_4:Other "NOTI:
******************* / $*|                                                                                   :6_4:Other "NOTI:
******************** / slAKA base                                                                          :6_4:Other "NOTI:
********************* / slKeyValues                                                                       :6_4:Other "NOTI:
********************** / $*|                                                                             :6_4:Other "NOTI:
*********************** / someSL                                                                        :6_4:Other "NOTI:
someSL> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
someSL> MATCH (COK): "NOTIFY" ( "the PDPC"
someSL> VALUE: ((["NOTIFY","the PDPC"],1),[])

*********************** \ someSL has returned (["NOTIFY","the PDPC"],1)                                    :7_5:UnDeeper:
$*|> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
$*|> MATCH (COK): "NOTIFY" ( "the PDPC"
$*|> VALUE: ((["NOTIFY","the PDPC"],1),[])

********************** \ $*| has returned (["NOTIFY","the PDPC"],1)                                         :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / |?| optional something                                                           :7_5:UnDeeper:
************************ / |>>/recurse                                                                    :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :7_5:UnDeeper:
************************ / |>>/base                                                                       :7_5:UnDeeper:
************************* / slTypeSig                                                                    :7_5:UnDeeper:
************************** / $>|                                                                        :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting :: or IS

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                      :7_5:UnDeeper:
slTypeSig> IN: ) "in" ( "the form and manner specified  <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=39:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

************************* \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::                  :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                     :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :7_5:UnDeeper:
*********************** > |>>/base got Nothing                                                             :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************** \ |>>/base has returned (Nothing,0)                                                  :7_5:UnDeeper:
slKeyValues> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slKeyValues> MATCH (COK): "NOTIFY" ( "the PDPC"
slKeyValues> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

********************* \ slKeyValues has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                      :7_5:UnDeeper:
slAKA base> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slAKA base> MATCH (COK): "NOTIFY" ( "the PDPC"
slAKA base> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

******************** \ slAKA base has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                         :7_5:UnDeeper:
$*|> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
$*|> MATCH (COK): "NOTIFY" ( "the PDPC"
$*|> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

******************* \ $*| has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                                  :7_5:UnDeeper:
******************* / |>>/recurse                                                                              :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :7_5:UnDeeper:
******************* / |>>/base                                                                                 :7_5:UnDeeper:
******************** / slAKA optional akapart                                                                 :7_5:UnDeeper:
********************* / |?| optional something                                                               :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / PAKA/akapart                                                                     :7_5:UnDeeper:
************************ / $>|                                                                            :7_5:UnDeeper:
************************* / Aka Token                                                                    :7_5:UnDeeper:
Aka Token> IN: ) "in" ( "the form and manner specified  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=39:
Aka Token> unexpected )
Aka Token> expecting AKA

************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                    :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting AKA

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                            :7_5:UnDeeper:
PAKA/akapart> IN: ) "in" ( "the form and manner specified  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=39:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                     :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting AKA

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                           :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                      :7_5:UnDeeper:
slAKA optional akapart> IN: ) "in" ( "the form and manner specified  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************** \ slAKA optional akapart has returned (Nothing,0)                                        :7_5:UnDeeper:
******************** > |>>/base got Nothing                                                                   :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                        :7_5:UnDeeper:
******************* / |>>/recurse                                                                              :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :7_5:UnDeeper:
******************* / |>>/base                                                                                 :7_5:UnDeeper:
******************** / slAKA optional typically                                                               :7_5:UnDeeper:
********************* / |?| optional something                                                               :7_5:UnDeeper:
********************** / |>>/recurse                                                                        :7_5:UnDeeper:
|>>/recurse> IN: ) "in" ( "the form and manner specified  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=39:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                          :7_5:UnDeeper:
********************** / |>>/base                                                                           :7_5:UnDeeper:
*********************** / typically                                                                        :7_5:UnDeeper:
************************ / $>|                                                                            :7_5:UnDeeper:
$>|> IN: ) "in" ( "the form and manner specified  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=39:
$>|> unexpected )
$>|> expecting TYPICALLY

************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                      :7_5:UnDeeper:
typically> IN: ) "in" ( "the form and manner specified  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=39:
typically> unexpected )
typically> expecting TYPICALLY

*********************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                  :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=39:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                     :7_5:UnDeeper:
|?| optional something> IN: ) "in" ( "the form and manner specified  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************* \ |?| optional something has returned (Nothing,0)                                      :7_5:UnDeeper:
slAKA optional typically> IN: ) "in" ( "the form and manner specified  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************** \ slAKA optional typically has returned (Nothing,0)                                      :7_5:UnDeeper:
******************** > |>>/base got Nothing                                                                   :7_5:UnDeeper:
|>>/base> IN: ) "in" ( "the form and manner specified  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************* \ |>>/base has returned (Nothing,0)                                                        :7_5:UnDeeper:
******************* > slAKA: proceeding after base and entityalias are retrieved ...                           :7_5:UnDeeper:
******************* > pAKA: entityalias = Nothing                                                              :7_5:UnDeeper:
slAKA> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
slAKA> MATCH (COK): "NOTIFY" ( "the PDPC"
slAKA> VALUE: ((("NOTIFY" :| ["the PDPC"],Nothing),1),[])

****************** \ slAKA has returned (("NOTIFY" :| ["the PDPC"],Nothing),1)                                  :7_5:UnDeeper:
****************** / undeepers                                                                                  :7_5:UnDeeper:
******************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                   :7_5:UnDeeper:
******************* > sameLine: success!                                                                    :7_4:Other "in":
undeepers> IN: ) "in" ( "the form and manner specified  <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

****************** \ undeepers has returned ()                                                               :7_4:Other "in":
pKeyValuesAka> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pKeyValuesAka> MATCH (COK): "NOTIFY" ( "the PDPC" )
pKeyValuesAka> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing),[])

***************** \ pKeyValuesAka has returned ("NOTIFY" :| ["the PDPC"],Nothing)                             :7_4:Other "in":
pParamText(flat) first line: pKeyValues> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText(flat) first line: pKeyValues> MATCH (COK): "NOTIFY" ( "the PDPC" )
pParamText(flat) first line: pKeyValues> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing),[])

**************** \ pParamText(flat) first line: pKeyValues has returned ("NOTIFY" :| ["the PDPC"],Nothing)     :7_4:Other "in":
**************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                      :7_4:Other "in":
***************** / manyIndentation/leaf?                                                                     :7_4:Other "in":
****************** / sameMany                                                                                :7_4:Other "in":
******************* / pKeyValuesAka                                                                         :7_4:Other "in":
******************** / slAKA                                                                               :7_4:Other "in":
********************* / $*|                                                                               :7_4:Other "in":
********************** / slAKA base                                                                      :7_4:Other "in":
*********************** / slKeyValues                                                                   :7_4:Other "in":
************************ / $*|                                                                         :7_4:Other "in":
************************* / someSL                                                                    :7_4:Other "in":
someSL> IN: "in" ( "the form and manner specified at <…>
someSL> MATCH (COK): "in" ( "the form and manner specified at <…>
someSL> VALUE: ((["in","the form and manner specified at www.pdpc.gov.sg"],1),[])

************************* \ someSL has returned (["in","the form and manner specified at www.pdpc.gov.sg"],1) :8_5:UnDeeper:
$*|> IN: "in" ( "the form and manner specified at <…>
$*|> MATCH (COK): "in" ( "the form and manner specified at <…>
$*|> VALUE: ((["in","the form and manner specified at www.pdpc.gov.sg"],1),[])

************************ \ $*| has returned (["in","the form and manner specified at www.pdpc.gov.sg"],1) :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / |?| optional something                                                       :8_5:UnDeeper:
************************** / |>>/recurse                                                                :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :8_5:UnDeeper:
************************** / |>>/base                                                                   :8_5:UnDeeper:
*************************** / slTypeSig                                                                :8_5:UnDeeper:
**************************** / $>|                                                                    :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                  :8_5:UnDeeper:
slTypeSig> IN: ) "with" ( "a Notification Message" ) "a <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=43:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::              :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                 :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                              :8_5:UnDeeper:
************************* > |>>/base got Nothing                                                         :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                              :8_5:UnDeeper:
slKeyValues> IN: "in" ( "the form and manner specified at <…>
slKeyValues> MATCH (COK): "in" ( "the form and manner specified at <…>
slKeyValues> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

*********************** \ slKeyValues has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
slAKA base> IN: "in" ( "the form and manner specified at <…>
slAKA base> MATCH (COK): "in" ( "the form and manner specified at <…>
slAKA base> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

********************** \ slAKA base has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
$*|> IN: "in" ( "the form and manner specified at <…>
$*|> MATCH (COK): "in" ( "the form and manner specified at <…>
$*|> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

********************* \ $*| has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
********************* / |>>/recurse                                                                          :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :8_5:UnDeeper:
********************* / |>>/base                                                                             :8_5:UnDeeper:
********************** / slAKA optional akapart                                                             :8_5:UnDeeper:
*********************** / |?| optional something                                                           :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / PAKA/akapart                                                                 :8_5:UnDeeper:
************************** / $>|                                                                        :8_5:UnDeeper:
*************************** / Aka Token                                                                :8_5:UnDeeper:
Aka Token> IN: ) "with" ( "a Notification Message" ) "a <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=43:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :8_5:UnDeeper:
PAKA/akapart> IN: ) "with" ( "a Notification Message" ) "a <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=43:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :8_5:UnDeeper:
slAKA optional akapart> IN: ) "with" ( "a Notification Message" ) "a <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                    :8_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :8_5:UnDeeper:
********************* / |>>/recurse                                                                          :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :8_5:UnDeeper:
********************* / |>>/base                                                                             :8_5:UnDeeper:
********************** / slAKA optional typically                                                           :8_5:UnDeeper:
*********************** / |?| optional something                                                           :8_5:UnDeeper:
************************ / |>>/recurse                                                                    :8_5:UnDeeper:
|>>/recurse> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=43:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :8_5:UnDeeper:
************************ / |>>/base                                                                       :8_5:UnDeeper:
************************* / typically                                                                    :8_5:UnDeeper:
************************** / $>|                                                                        :8_5:UnDeeper:
$>|> IN: ) "with" ( "a Notification Message" ) "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=43:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :8_5:UnDeeper:
typically> IN: ) "with" ( "a Notification Message" ) "a <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=43:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=43:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :8_5:UnDeeper:
|?| optional something> IN: ) "with" ( "a Notification Message" ) "a <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :8_5:UnDeeper:
slAKA optional typically> IN: ) "with" ( "a Notification Message" ) "a <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                                  :8_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :8_5:UnDeeper:
|>>/base> IN: ) "with" ( "a Notification Message" ) "a <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :8_5:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                       :8_5:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                          :8_5:UnDeeper:
slAKA> IN: "in" ( "the form and manner specified at <…>
slAKA> MATCH (COK): "in" ( "the form and manner specified at <…>
slAKA> VALUE: ((("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1),[])

******************** \ slAKA has returned (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),1) :8_5:UnDeeper:
******************** / undeepers                                                                              :8_5:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers               :8_5:UnDeeper:
********************* > sameLine: success!                                                                :8_4:Other "with:
undeepers> IN: ) "with" ( "a Notification Message" ) "a <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                           :8_4:Other "with:
pKeyValuesAka> IN: "in" ( "the form and manner specified at <…>
pKeyValuesAka> MATCH (COK): "in" ( "the form and manner specified at <…>
pKeyValuesAka> VALUE: (("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),[])

******************* \ pKeyValuesAka has returned ("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing) :8_4:Other "with:
******************* / pKeyValuesAka                                                                         :8_4:Other "with:
******************** / slAKA                                                                               :8_4:Other "with:
********************* / $*|                                                                               :8_4:Other "with:
********************** / slAKA base                                                                      :8_4:Other "with:
*********************** / slKeyValues                                                                   :8_4:Other "with:
************************ / $*|                                                                         :8_4:Other "with:
************************* / someSL                                                                    :8_4:Other "with:
someSL> IN: "with" ( "a Notification Message" ) "and <…>
someSL> MATCH (COK): "with" ( "a Notification Message"
someSL> VALUE: ((["with","a Notification Message"],1),[])

************************* \ someSL has returned (["with","a Notification Message"],1)                    :9_5:UnDeeper:
$*|> IN: "with" ( "a Notification Message" ) "and <…>
$*|> MATCH (COK): "with" ( "a Notification Message"
$*|> VALUE: ((["with","a Notification Message"],1),[])

************************ \ $*| has returned (["with","a Notification Message"],1)                         :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / |?| optional something                                                       :9_5:UnDeeper:
************************** / |>>/recurse                                                                :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :9_5:UnDeeper:
************************** / |>>/base                                                                   :9_5:UnDeeper:
*************************** / slTypeSig                                                                :9_5:UnDeeper:
**************************** / $>|                                                                    :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::                  :9_5:UnDeeper:
slTypeSig> IN: ) "and" ( ( ( "a list of individuals for <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=47:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::              :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::                 :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                              :9_5:UnDeeper:
************************* > |>>/base got Nothing                                                         :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                              :9_5:UnDeeper:
slKeyValues> IN: "with" ( "a Notification Message" ) "and <…>
slKeyValues> MATCH (COK): "with" ( "a Notification Message"
slKeyValues> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

*********************** \ slKeyValues has returned (("with" :| ["a Notification Message"],Nothing),1)      :9_5:UnDeeper:
slAKA base> IN: "with" ( "a Notification Message" ) "and <…>
slAKA base> MATCH (COK): "with" ( "a Notification Message"
slAKA base> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

********************** \ slAKA base has returned (("with" :| ["a Notification Message"],Nothing),1)         :9_5:UnDeeper:
$*|> IN: "with" ( "a Notification Message" ) "and <…>
$*|> MATCH (COK): "with" ( "a Notification Message"
$*|> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

********************* \ $*| has returned (("with" :| ["a Notification Message"],Nothing),1)                  :9_5:UnDeeper:
********************* / |>>/recurse                                                                          :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :9_5:UnDeeper:
********************* / |>>/base                                                                             :9_5:UnDeeper:
********************** / slAKA optional akapart                                                             :9_5:UnDeeper:
*********************** / |?| optional something                                                           :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / PAKA/akapart                                                                 :9_5:UnDeeper:
************************** / $>|                                                                        :9_5:UnDeeper:
*************************** / Aka Token                                                                :9_5:UnDeeper:
Aka Token> IN: ) "and" ( ( ( "a list of individuals for <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=47:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                        :9_5:UnDeeper:
PAKA/akapart> IN: ) "and" ( ( ( "a list of individuals for <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=47:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                 :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                       :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :9_5:UnDeeper:
slAKA optional akapart> IN: ) "and" ( ( ( "a list of individuals for <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                    :9_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :9_5:UnDeeper:
********************* / |>>/recurse                                                                          :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                            :9_5:UnDeeper:
********************* / |>>/base                                                                             :9_5:UnDeeper:
********************** / slAKA optional typically                                                           :9_5:UnDeeper:
*********************** / |?| optional something                                                           :9_5:UnDeeper:
************************ / |>>/recurse                                                                    :9_5:UnDeeper:
|>>/recurse> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=47:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                      :9_5:UnDeeper:
************************ / |>>/base                                                                       :9_5:UnDeeper:
************************* / typically                                                                    :9_5:UnDeeper:
************************** / $>|                                                                        :9_5:UnDeeper:
$>|> IN: ) "and" ( ( ( "a list of individuals for <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=47:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                  :9_5:UnDeeper:
typically> IN: ) "and" ( ( ( "a list of individuals for <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=47:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY              :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=47:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                 :9_5:UnDeeper:
|?| optional something> IN: ) "and" ( ( ( "a list of individuals for <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                                  :9_5:UnDeeper:
slAKA optional typically> IN: ) "and" ( ( ( "a list of individuals for <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                                  :9_5:UnDeeper:
********************** > |>>/base got Nothing                                                               :9_5:UnDeeper:
|>>/base> IN: ) "and" ( ( ( "a list of individuals for <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                    :9_5:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                       :9_5:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                          :9_5:UnDeeper:
slAKA> IN: "with" ( "a Notification Message" ) "and <…>
slAKA> MATCH (COK): "with" ( "a Notification Message"
slAKA> VALUE: ((("with" :| ["a Notification Message"],Nothing),1),[])

******************** \ slAKA has returned (("with" :| ["a Notification Message"],Nothing),1)                  :9_5:UnDeeper:
******************** / undeepers                                                                              :9_5:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers               :9_5:UnDeeper:
********************* > sameLine: success!                                                                :9_4:Other "and":
undeepers> IN: ) "and" ( ( ( "a list of individuals for <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                           :9_4:Other "and":
pKeyValuesAka> IN: "with" ( "a Notification Message" ) "and <…>
pKeyValuesAka> MATCH (COK): "with" ( "a Notification Message" )
pKeyValuesAka> VALUE: (("with" :| ["a Notification Message"],Nothing),[])

******************* \ pKeyValuesAka has returned ("with" :| ["a Notification Message"],Nothing)             :9_4:Other "and":
******************* / pKeyValuesAka                                                                         :9_4:Other "and":
******************** / slAKA                                                                               :9_4:Other "and":
********************* / $*|                                                                               :9_4:Other "and":
********************** / slAKA base                                                                      :9_4:Other "and":
*********************** / slKeyValues                                                                   :9_4:Other "and":
************************ / $*|                                                                         :9_4:Other "and":
************************* / someSL                                                                    :9_4:Other "and":
someSL> IN: "and" ( ( ( "a list of individuals for w <…>
someSL> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
someSL> VALUE: ((["and","a list of individuals for whom notification waiver is sought"],3),[])

************************* \ someSL has returned (["and","a list of individuals for whom notification waiver is sought"],3) :11_3:UnDeeper:
$*|> IN: "and" ( ( ( "a list of individuals for w <…>
$*|> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
$*|> VALUE: ((["and","a list of individuals for whom notification waiver is sought"],3),[])

************************ \ $*| has returned (["and","a list of individuals for whom notification waiver is sought"],3) :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / |?| optional something                                                   :11_3:UnDeeper:
************************** / |>>/recurse                                                            :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (              :11_3:UnDeeper:
************************** / |>>/base                                                               :11_3:UnDeeper:
*************************** / slTypeSig                                                            :11_3:UnDeeper:
**************************** / $>|                                                                :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting :: or IS

**************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: IS ::              :11_3:UnDeeper:
slTypeSig> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slTypeSig> MATCH (EERR): <EMPTY>
slTypeSig> ERROR:
slTypeSig> offset=53:
slTypeSig> unexpected )
slTypeSig> expecting :: or IS

*************************** \ !Unconsumed Error: slTypeSig: Unexpected ) Expecting: IS ::          :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting :: or IS

************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS ::             :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************************* \ |?| optional something has returned (Nothing,0)                          :11_3:UnDeeper:
************************* > |>>/base got Nothing                                                     :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************************ \ |>>/base has returned (Nothing,0)                                          :11_3:UnDeeper:
slKeyValues> IN: "and" ( ( ( "a list of individuals for w <…>
slKeyValues> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slKeyValues> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

*********************** \ slKeyValues has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
slAKA base> IN: "and" ( ( ( "a list of individuals for w <…>
slAKA base> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slAKA base> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

********************** \ slAKA base has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
$*|> IN: "and" ( ( ( "a list of individuals for w <…>
$*|> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
$*|> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

********************* \ $*| has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
********************* / |>>/recurse                                                                      :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :11_3:UnDeeper:
********************* / |>>/base                                                                         :11_3:UnDeeper:
********************** / slAKA optional akapart                                                         :11_3:UnDeeper:
*********************** / |?| optional something                                                       :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / PAKA/akapart                                                             :11_3:UnDeeper:
************************** / $>|                                                                    :11_3:UnDeeper:
*************************** / Aka Token                                                            :11_3:UnDeeper:
Aka Token> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=53:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA            :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting AKA

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                    :11_3:UnDeeper:
PAKA/akapart> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=53:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA             :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting AKA

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                   :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :11_3:UnDeeper:
slAKA optional akapart> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************** \ slAKA optional akapart has returned (Nothing,0)                                :11_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :11_3:UnDeeper:
********************* / |>>/recurse                                                                      :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                        :11_3:UnDeeper:
********************* / |>>/base                                                                         :11_3:UnDeeper:
********************** / slAKA optional typically                                                       :11_3:UnDeeper:
*********************** / |?| optional something                                                       :11_3:UnDeeper:
************************ / |>>/recurse                                                                :11_3:UnDeeper:
|>>/recurse> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=53:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                  :11_3:UnDeeper:
************************ / |>>/base                                                                   :11_3:UnDeeper:
************************* / typically                                                                :11_3:UnDeeper:
************************** / $>|                                                                    :11_3:UnDeeper:
$>|> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=53:
$>|> unexpected )
$>|> expecting TYPICALLY

************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY              :11_3:UnDeeper:
typically> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=53:
typically> unexpected )
typically> expecting TYPICALLY

************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY          :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=53:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY             :11_3:UnDeeper:
|?| optional something> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************** \ |?| optional something has returned (Nothing,0)                              :11_3:UnDeeper:
slAKA optional typically> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************** \ slAKA optional typically has returned (Nothing,0)                              :11_3:UnDeeper:
********************** > |>>/base got Nothing                                                           :11_3:UnDeeper:
|>>/base> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************* \ |>>/base has returned (Nothing,0)                                                :11_3:UnDeeper:
********************* > slAKA: proceeding after base and entityalias are retrieved ...                   :11_3:UnDeeper:
********************* > pAKA: entityalias = Nothing                                                      :11_3:UnDeeper:
slAKA> IN: "and" ( ( ( "a list of individuals for w <…>
slAKA> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
slAKA> VALUE: ((("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3),[])

******************** \ slAKA has returned (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),3) :11_3:UnDeeper:
******************** / undeepers                                                                          :11_3:UnDeeper:
********************* > sameLine/undeepers: reached end of line; now need to clear 3 UnDeepers           :11_3:UnDeeper:
********************* > sameLine: success!                                                                     :11_6:UnDeeper:
undeepers> IN: ) ) ) ) ) HENCE ( ( "the PDPC" ( MAY ( ( <…>
undeepers> MATCH (COK): ) ) )
undeepers> VALUE: ((),[])

******************** \ undeepers has returned ()                                                                :11_6:UnDeeper:
pKeyValuesAka> IN: "and" ( ( ( "a list of individuals for w <…>
pKeyValuesAka> MATCH (COK): "and" ( ( ( "a list of individuals for w <…>
pKeyValuesAka> VALUE: (("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing),[])

******************* \ pKeyValuesAka has returned ("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing) :11_6:UnDeeper:
******************* / pKeyValuesAka                                                                              :11_6:UnDeeper:
******************** / slAKA                                                                                    :11_6:UnDeeper:
********************* / $*|                                                                                    :11_6:UnDeeper:
********************** / slAKA base                                                                           :11_6:UnDeeper:
*********************** / slKeyValues                                                                        :11_6:UnDeeper:
************************ / $*|                                                                              :11_6:UnDeeper:
************************* / someSL                                                                         :11_6:UnDeeper:
************************** / pNumAsText                                                                   :11_6:UnDeeper:
pNumAsText> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=56:
pNumAsText> unexpected )
pNumAsText> expecting number

************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number                :11_6:UnDeeper:
someSL> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=56:
someSL> unexpected )
someSL> expecting other text or number

************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number        :11_6:UnDeeper:
$*|> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=56:
$*|> unexpected )
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number             :11_6:UnDeeper:
slKeyValues> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=56:
slKeyValues> unexpected )
slKeyValues> expecting other text or number

*********************** \ !Unconsumed Error: slKeyValues: Unexpected ) Expecting: other text or number       :11_6:UnDeeper:
slAKA base> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=56:
slAKA base> unexpected )
slAKA base> expecting other text or number

********************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number          :11_6:UnDeeper:
$*|> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=56:
$*|> unexpected )
$*|> expecting other text or number

********************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number                   :11_6:UnDeeper:
slAKA> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=56:
slAKA> unexpected )
slAKA> expecting other text or number

******************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number                   :11_6:UnDeeper:
pKeyValuesAka> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=56:
pKeyValuesAka> unexpected )
pKeyValuesAka> expecting other text or number

******************* \ !Unconsumed Error: pKeyValuesAka: Unexpected ) Expecting: other text or number             :11_6:UnDeeper:
sameMany> IN: "in" ( "the form and manner specified at <…>
sameMany> MATCH (COK): "in" ( "the form and manner specified at <…>
sameMany> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

****************** \ sameMany has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
manyIndentation/leaf?> IN: "in" ( "the form and manner specified at <…>
manyIndentation/leaf?> MATCH (COK): "in" ( "the form and manner specified at <…>
manyIndentation/leaf?> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

***************** \ manyIndentation/leaf? has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pParamText(flat) subsequent lines: sameMany pKeyValues> IN: "in" ( "the form and manner specified at <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> MATCH (COK): "in" ( "the form and manner specified at <…>
pParamText(flat) subsequent lines: sameMany pKeyValues> VALUE: ([("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

**************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pParamText> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pParamText> VALUE: (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)],[])

*************** \ pParamText has returned ("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)] :11_6:UnDeeper:
pAction calling pParamText> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pAction calling pParamText> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
pAction calling pParamText> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************** \ pAction calling pParamText has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_6:UnDeeper:
manyIndentation/leaf?> IN: "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
manyIndentation/leaf?> MATCH (COK): "NOTIFY" ( "the PDPC" ) "in" ( "the form <…>
manyIndentation/leaf?> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************* \ manyIndentation/leaf? has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_6:UnDeeper:
************* / myindented-UnDeeper                                                                                    :11_6:UnDeeper:
myindented-UnDeeper> IN: ) ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTI <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented-UnDeeper has returned UnDeeper                                                                :11_7:UnDeeper:
someIndentation> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someIndentation> MATCH (COK): ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

************ \ someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_7:UnDeeper:
manyIndentation/deeper; calling someIndentation> IN: ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/deeper; calling someIndentation> MATCH (COK): ( "NOTIFY" ( "the PDPC" ) "in" ( "the fo <…>
manyIndentation/deeper; calling someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

*********** \ manyIndentation/deeper; calling someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_7:UnDeeper:
*********** / myindented-UnDeeper                                                                                          :11_7:UnDeeper:
myindented-UnDeeper> IN: ) HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*********** \ myindented-UnDeeper has returned UnDeeper                                                         :11_2:Hence:
someIndentation> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
someIndentation> MATCH (COK): ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
someIndentation> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

********** \ someIndentation has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_2:Hence:
pDoAction/pAction> IN: ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
pDoAction/pAction> MATCH (COK): ( ( "NOTIFY" ( "the PDPC" ) "in" ( "the  <…>
pDoAction/pAction> VALUE: (Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]),[])

********* \ pDoAction/pAction has returned Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]) :11_2:Hence:
********* / WHERE                                                                                                 :11_2:Hence:
WHERE> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=58:
WHERE> unexpected HENCE
WHERE> expecting WHERE

********* \ !Unconsumed Error: WHERE: Unexpected HENCE Expecting: WHERE                                           :11_2:Hence:
********* / preambleParamText:[Having]                                                                            :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting HAVING

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: HAVING                                          :11_2:Hence:
preambleParamText:[Having]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=58:
preambleParamText:[Having]> unexpected HENCE
preambleParamText:[Having]> expecting HAVING

********* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected HENCE Expecting: HAVING                     :11_2:Hence:
********* / preambleParamText:[Given]                                                                             :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting GIVEN

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: GIVEN                                           :11_2:Hence:
preambleParamText:[Given]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=58:
preambleParamText:[Given]> unexpected HENCE
preambleParamText:[Given]> expecting GIVEN

********* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected HENCE Expecting: GIVEN                       :11_2:Hence:
********* / preambleParamText:[Upon]                                                                              :11_2:Hence:
********** / $>|                                                                                                 :11_2:Hence:
$>|> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=58:
$>|> unexpected HENCE
$>|> expecting UPON

********** \ !Unconsumed Error: $>|: Unexpected HENCE Expecting: UPON                                            :11_2:Hence:
preambleParamText:[Upon]> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=58:
preambleParamText:[Upon]> unexpected HENCE
preambleParamText:[Upon]> expecting UPON

********* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected HENCE Expecting: UPON                         :11_2:Hence:
regulative permutation with deontic-temporal> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
regulative permutation with deontic-temporal> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
regulative permutation with deontic-temporal> VALUE: (RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

******** \ regulative permutation with deontic-temporal has returned RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :11_2:Hence:
permutationsReg> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
permutationsReg> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
permutationsReg> VALUE: (RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []},[])

******* \ permutationsReg has returned RuleBody {rbaction = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), rbpbrs = [(If,Leaf (RPMT ["it is","an NDB"]))], rbpbrneg = [(Unless,Leaf (RPMT ["you are a Public Agency"]))], rbdeon = DMust, rbtemporal = Just (TemporalConstraint TBefore (Just 3) "days"), rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (RParty,Leaf (("You" :| [],Nothing) :| [])), rbwho = Nothing, rbwhere = []} :11_2:Hence:
******* / pHenceLest-Hence                                                                                          :11_2:Hence:
******** / someIndentation                                                                                          :11_3:GoDeeper:
********* / myindented-GoDeeper                                                                                    :11_3:GoDeeper:
myindented-GoDeeper> IN: ( ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                                :11_4:GoDeeper:
********* / manyIndentation/leaf?                                                                                    :11_4:GoDeeper:
********** / pRegRule                                                                                               :11_4:GoDeeper:
*********** / pRuleLabel                                                                                           :11_4:GoDeeper:
************ / $>|                                                                                                :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting §

************ \ !Unconsumed Error: $>|: Unexpected ( Expecting: §                                                 :11_4:GoDeeper:
pRuleLabel> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=60:
pRuleLabel> unexpected (
pRuleLabel> expecting §

*********** \ !Unconsumed Error: pRuleLabel: Unexpected ( Expecting: §                                            :11_4:GoDeeper:
*********** / pRegRuleSugary                                                                                       :11_4:GoDeeper:
************ / someDeep                                                                                           :11_4:GoDeeper:
************* / someDeep first part calls base directly                                                          :11_4:GoDeeper:
someDeep first part calls base directly> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=60:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

************* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text   :11_4:GoDeeper:
someDeep> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=60:
someDeep> unexpected (
someDeep> expecting Other text

************ \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                    :11_4:GoDeeper:
pRegRuleSugary> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=60:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting Other text

*********** \ !Unconsumed Error: pRegRuleSugary: Unexpected ( Expecting: Other text                                :11_4:GoDeeper:
*********** / pRegRuleNormal                                                                                       :11_4:GoDeeper:
************ / permutationsReg                                                                                    :11_4:GoDeeper:
************* / regulative permutation with deontic-temporal                                                     :11_4:GoDeeper:
************** / WHERE                                                                                          :11_4:GoDeeper:
WHERE> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=60:
WHERE> unexpected (
WHERE> expecting WHERE

************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                        :11_4:GoDeeper:
************** / preambleParamText:[Having]                                                                     :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting HAVING

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                       :11_4:GoDeeper:
preambleParamText:[Having]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=60:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                  :11_4:GoDeeper:
************** / preambleParamText:[Given]                                                                      :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting GIVEN

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                        :11_4:GoDeeper:
preambleParamText:[Given]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=60:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                    :11_4:GoDeeper:
************** / preambleParamText:[Upon]                                                                       :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting UPON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                         :11_4:GoDeeper:
preambleParamText:[Upon]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=60:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                      :11_4:GoDeeper:
************** / preambleBoolStructR [Unless]                                                                   :11_4:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=60:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                :11_4:GoDeeper:
************** / preambleBoolStructR [When,If]                                                                  :11_4:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=60:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN              :11_4:GoDeeper:
************** / pDT                                                                                            :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting MAY, MUST, or SHANT

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: MUST MAY SHANT                               :11_4:GoDeeper:
pDT> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=60:
pDT> unexpected (
pDT> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: pDT: Unexpected ( Expecting: MUST MAY SHANT                                 :11_4:GoDeeper:
************** / pActor [REvery,RParty,RTokAll]                                                                 :11_4:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=60:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL     :11_4:GoDeeper:
************** / pDoAction/Do                                                                                   :11_4:GoDeeper:
pDoAction/Do> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=60:
pDoAction/Do> unexpected (
pDoAction/Do> expecting DO

************** \ !Unconsumed Error: pDoAction/Do: Unexpected ( Expecting: DO                                    :11_4:GoDeeper:
regulative permutation with deontic-temporal> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=60:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :11_4:GoDeeper:
************* / regulative permutation with deontic-action                                                       :11_4:GoDeeper:
************** / WHERE                                                                                          :11_4:GoDeeper:
WHERE> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=60:
WHERE> unexpected (
WHERE> expecting WHERE

************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                        :11_4:GoDeeper:
************** / preambleParamText:[Having]                                                                     :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting HAVING

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                       :11_4:GoDeeper:
preambleParamText:[Having]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=60:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                  :11_4:GoDeeper:
************** / preambleParamText:[Given]                                                                      :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting GIVEN

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                        :11_4:GoDeeper:
preambleParamText:[Given]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=60:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                    :11_4:GoDeeper:
************** / preambleParamText:[Upon]                                                                       :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting UPON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                         :11_4:GoDeeper:
preambleParamText:[Upon]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=60:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                      :11_4:GoDeeper:
************** / preambleBoolStructR [Unless]                                                                   :11_4:GoDeeper:
preambleBoolStructR [Unless]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=60:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                :11_4:GoDeeper:
************** / preambleBoolStructR [When,If]                                                                  :11_4:GoDeeper:
preambleBoolStructR [When,If]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=60:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN              :11_4:GoDeeper:
************** / pTemporal/eventually                                                                           :11_4:GoDeeper:
pTemporal/eventually> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=60:
pTemporal/eventually> unexpected (
pTemporal/eventually> expecting EVENTUALLY

************** \ !Unconsumed Error: pTemporal/eventually: Unexpected ( Expecting: EVENTUALLY                    :11_4:GoDeeper:
************** / pTemporal/specifically                                                                         :11_4:GoDeeper:
*************** / $>|                                                                                          :11_4:GoDeeper:
$>|> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=60:
$>|> unexpected (
$>|> expecting AFTER, BEFORE, BY, or ON

*************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: BEFORE AFTER BY ON                           :11_4:GoDeeper:
pTemporal/specifically> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=60:
pTemporal/specifically> unexpected (
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

************** \ !Unconsumed Error: pTemporal/specifically: Unexpected ( Expecting: BEFORE AFTER BY ON          :11_4:GoDeeper:
************** / pTemporal/vaguely                                                                              :11_4:GoDeeper:
pTemporal/vaguely> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=60:
pTemporal/vaguely> unexpected (
pTemporal/vaguely> expecting Other text

************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected ( Expecting: Other text                       :11_4:GoDeeper:
************** / pActor [REvery,RParty,RTokAll]                                                                 :11_4:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=60:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL     :11_4:GoDeeper:
************** / pDA                                                                                            :11_4:GoDeeper:
pDA> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=60:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

************** \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                 :11_4:GoDeeper:
regulative permutation with deontic-action> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=60:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting AFTER, ALL, BEFORE, BY, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: BEFORE AFTER BY ON GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT EVENTUALLY UNLESS IF WHEN Other text :11_4:GoDeeper:
permutationsReg> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=60:
permutationsReg> unexpected (
permutationsReg> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************ \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
pRegRuleNormal> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=60:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting AFTER, ALL, BEFORE, BY, DO, EVENTUALLY, EVERY, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*********** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: MUST MAY SHANT BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
pRegRule> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=60:
pRegRule> unexpected (
pRegRule> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: MUST MAY SHANT § BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO FULFILLED BREACH EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
********** / someDeep                                                                                               :11_4:GoDeeper:
*********** / someDeep first part calls base directly                                                              :11_4:GoDeeper:
someDeep first part calls base directly> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=60:
someDeep first part calls base directly> unexpected (
someDeep first part calls base directly> expecting Other text

*********** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected ( Expecting: Other text       :11_4:GoDeeper:
someDeep> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=60:
someDeep> unexpected (
someDeep> expecting Other text

********** \ !Unconsumed Error: someDeep: Unexpected ( Expecting: Other text                                        :11_4:GoDeeper:
manyIndentation/leaf?> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=60:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting AFTER, ALL, BEFORE, BREACH, BY, DO, EVENTUALLY, EVERY, FULFILLED, GIVEN, GOTO, HAVING, IF, MAY, MUST, ON, Other text, PARTY, SHANT, UNLESS, UPON, WHEN, WHERE, or §

********* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: MUST MAY SHANT § BEFORE AFTER BY ON GIVEN GIVEN HAVING HAVING UPON UPON WHERE WHERE GOTO EVERY PARTY ALL EVERY PARTY ALL MUST MAY SHANT DO FULFILLED BREACH EVENTUALLY UNLESS UNLESS IF WHEN IF WHEN Other text :11_4:GoDeeper:
********* / manyIndentation/deeper; calling someIndentation                                                          :11_4:GoDeeper:
********** / someIndentation                                                                                        :11_4:GoDeeper:
*********** / myindented-GoDeeper                                                                                  :11_4:GoDeeper:
myindented-GoDeeper> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*********** \ myindented-GoDeeper has returned GoDeeper                                                             :11_4:Other "the:
*********** / manyIndentation/leaf?                                                                                 :11_4:Other "the:
************ / pRegRule                                                                                            :11_4:Other "the:
************* / pRuleLabel                                                                                        :11_4:Other "the:
************** / $>|                                                                                             :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting §

************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: §                                     :11_4:Other "the:
pRuleLabel> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=61:
pRuleLabel> unexpected "the PDPC"
pRuleLabel> expecting §

************* \ !Unconsumed Error: pRuleLabel: Unexpected "the PDPC" Expecting: §                                :11_4:Other "the:
************* / pRegRuleSugary                                                                                    :11_4:Other "the:
************** / someDeep                                                                                        :11_4:Other "the:
*************** / someDeep first part calls base directly                                                       :11_4:Other "the:
someDeep first part calls base directly> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep first part calls base directly> MATCH (COK): "the PDPC"
someDeep first part calls base directly> VALUE: ("the PDPC",[])

*************** \ someDeep first part calls base directly has returned "the PDPC"                                :11_5:GoDeeper:
*************** / someDeep second part recurses with someIndentation                                             :11_5:GoDeeper:
**************** / someIndentation                                                                              :11_5:GoDeeper:
***************** / myindented-GoDeeper                                                                        :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

***************** \ myindented-GoDeeper has returned GoDeeper                                                   :11_5:May:
***************** / manyIndentation/leaf?                                                                       :11_5:May:
****************** / someDeep                                                                                  :11_5:May:
******************* / someDeep first part calls base directly                                                 :11_5:May:
someDeep first part calls base directly> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=63:
someDeep first part calls base directly> unexpected MAY
someDeep first part calls base directly> expecting Other text

******************* \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MAY Expecting: Other text :11_5:May:
someDeep> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=63:
someDeep> unexpected MAY
someDeep> expecting Other text

****************** \ !Unconsumed Error: someDeep: Unexpected MAY Expecting: Other text                         :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=63:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting Other text

***************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: Other text              :11_5:May:
***************** / manyIndentation/deeper; calling someIndentation                                             :11_5:May:
****************** / someIndentation                                                                           :11_5:May:
******************* / myindented-GoDeeper                                                                     :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

******************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                     :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

****************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                           :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

***************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting ( or Other text

**************** \ !Consumed Error: someIndentation: Unexpected MAY Expecting: ( Other text                      :11_5:May:
someDeep second part recurses with someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=63:
someDeep second part recurses with someIndentation> unexpected MAY
someDeep second part recurses with someIndentation> expecting ( or Other text

*************** \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MAY Expecting: ( Other text :11_5:GoDeeper:
*************** > someDeep no luck, returning []                                                                 :11_5:GoDeeper:
someDeep> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep> MATCH (COK): "the PDPC"
someDeep> VALUE: (["the PDPC"],[])

************** \ someDeep has returned ["the PDPC"]                                                               :11_5:GoDeeper:
************** / someIndentation                                                                                  :11_5:GoDeeper:
*************** / myindented-GoDeeper                                                                            :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                       :11_5:May:
*************** / manyIndentation/leaf?                                                                           :11_5:May:
**************** / permutationsReg                                                                               :11_5:May:
***************** / regulative permutation with deontic-temporal                                                :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pDT                                                                                       :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******************* \ $>| has returned DMay                                                                    :11_6:GoDeeper:
******************* / |>| calling $>>                                                                          :11_6:GoDeeper:
******************** / |>>/recurse                                                                            :11_6:GoDeeper:
********************* / |>>/recurse                                                                            :11_7:GoDeeper:
********************** / |>>/recurse                                                                           :11_7:Other "NOT:
|>>/recurse> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=66:
|>>/recurse> unexpected "NOTIFY"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "NOTIFY" Expecting: (                      :11_7:Other "NOT:
********************** / |>>/base                                                                              :11_7:Other "NOT:
*********************** / pTemporal/eventually                                                                :11_7:Other "NOT:
pTemporal/eventually> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=66:
pTemporal/eventually> unexpected "NOTIFY"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "NOTIFY" Expecting: EVENTUALLY  :11_7:Other "NOT:
*********************** / pTemporal/specifically                                                              :11_7:Other "NOT:
************************ / $>|                                                                               :11_7:Other "NOT:
$>|> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=66:
$>|> unexpected "NOTIFY"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON         :11_7:Other "NOT:
pTemporal/specifically> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=66:
pTemporal/specifically> unexpected "NOTIFY"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON :11_7:Other "NOT:
*********************** / pTemporal/vaguely                                                                   :11_7:Other "NOT:
pTemporal/vaguely> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/vaguely> MATCH (COK): "NOTIFY"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "NOTIFY"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "NOTIFY")    :11_8:GoDeeper:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY"))               :11_8:GoDeeper:
|>>/base> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/base> MATCH (COK): "NOTIFY"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0)    :11_8:GoDeeper:
|>>/recurse> IN: ( "NOTIFY" ( "you" ) "with" ( "a list of <…>
|>>/recurse> MATCH (COK): ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1)   :11_8:GoDeeper:
|>>/recurse> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>>/recurse> MATCH (COK): ( ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)     :11_8:GoDeeper:
|>| calling $>>> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>| calling $>>> MATCH (COK): ( ( "NOTIFY"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************* \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)   :11_8:GoDeeper:
******************* / undeepers                                                                                    :11_8:GoDeeper:
******************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :11_8:GoDeeper:
undeepers> IN: ( "you" ) "with" ( "a list of individual <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=67:
undeepers> unexpected (
undeepers> expecting )

******************* \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                      :11_8:GoDeeper:
pDT> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDT> MATCH (CERR): MAY ( ( "NOTIFY"
pDT> ERROR:
pDT> offset=67:
pDT> unexpected (
pDT> expecting )

****************** \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                :11_8:GoDeeper:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pDT                                                                                       :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (COK): MAY
$>|> VALUE: (DMay,[])

******************* \ $>| has returned DMay                                                                    :11_6:GoDeeper:
******************* / |>| calling $>>                                                                          :11_6:GoDeeper:
******************** / |>>/recurse                                                                            :11_6:GoDeeper:
********************* / |>>/recurse                                                                            :11_7:GoDeeper:
********************** / |>>/recurse                                                                           :11_7:Other "NOT:
|>>/recurse> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=66:
|>>/recurse> unexpected "NOTIFY"
|>>/recurse> expecting (

********************** \ !Unconsumed Error: |>>/recurse: Unexpected "NOTIFY" Expecting: (                      :11_7:Other "NOT:
********************** / |>>/base                                                                              :11_7:Other "NOT:
*********************** / pTemporal/eventually                                                                :11_7:Other "NOT:
pTemporal/eventually> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=66:
pTemporal/eventually> unexpected "NOTIFY"
pTemporal/eventually> expecting EVENTUALLY

*********************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "NOTIFY" Expecting: EVENTUALLY  :11_7:Other "NOT:
*********************** / pTemporal/specifically                                                              :11_7:Other "NOT:
************************ / $>|                                                                               :11_7:Other "NOT:
$>|> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=66:
$>|> unexpected "NOTIFY"
$>|> expecting AFTER, BEFORE, BY, or ON

************************ \ !Unconsumed Error: $>|: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON         :11_7:Other "NOT:
pTemporal/specifically> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=66:
pTemporal/specifically> unexpected "NOTIFY"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

*********************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "NOTIFY" Expecting: BEFORE AFTER BY ON :11_7:Other "NOT:
*********************** / pTemporal/vaguely                                                                   :11_7:Other "NOT:
pTemporal/vaguely> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
pTemporal/vaguely> MATCH (COK): "NOTIFY"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "NOTIFY"),[])

*********************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "NOTIFY")    :11_8:GoDeeper:
*********************** > |>>/base got Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY"))               :11_8:GoDeeper:
|>>/base> IN: "NOTIFY" ( "you" ) "with" ( "a list of i <…>
|>>/base> MATCH (COK): "NOTIFY"
|>>/base> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0),[])

********************** \ |>>/base has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),0)    :11_8:GoDeeper:
|>>/recurse> IN: ( "NOTIFY" ( "you" ) "with" ( "a list of <…>
|>>/recurse> MATCH (COK): ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1),[])

********************* \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),1)   :11_8:GoDeeper:
|>>/recurse> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>>/recurse> MATCH (COK): ( ( "NOTIFY"
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************** \ |>>/recurse has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)     :11_8:GoDeeper:
|>| calling $>>> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
|>| calling $>>> MATCH (COK): ( ( "NOTIFY"
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2),[])

******************* \ |>| calling $>> has returned (Just (Just (TemporalConstraint TVague (Just 0) "NOTIFY")),2)   :11_8:GoDeeper:
******************* / undeepers                                                                                    :11_8:GoDeeper:
******************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                     :11_8:GoDeeper:
undeepers> IN: ( "you" ) "with" ( "a list of individual <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=67:
undeepers> unexpected (
undeepers> expecting )

******************* \ !Unconsumed Error: undeepers: Unexpected ( Expecting: )                                      :11_8:GoDeeper:
pDT> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDT> MATCH (CERR): MAY ( ( "NOTIFY"
pDT> ERROR:
pDT> offset=67:
pDT> unexpected (
pDT> expecting )

****************** \ !Consumed Error: pDT: Unexpected ( Expecting: )                                                :11_8:GoDeeper:
****************** / pDoAction/Do                                                                              :11_5:May:
pDoAction/Do> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=63:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

****************** \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                             :11_5:May:
****************** / pDoAction/Do                                                                              :11_5:May:
pDoAction/Do> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=63:
pDoAction/Do> unexpected MAY
pDoAction/Do> expecting DO

****************** \ !Unconsumed Error: pDoAction/Do: Unexpected MAY Expecting: DO                             :11_5:May:
regulative permutation with deontic-temporal> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=67:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting )

***************** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: )  :11_5:May:
***************** / regulative permutation with deontic-action                                                  :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pTemporal/eventually                                                                      :11_5:May:
pTemporal/eventually> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=63:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

****************** \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY             :11_5:May:
****************** / pTemporal/specifically                                                                    :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                    :11_5:May:
pTemporal/specifically> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=63:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON   :11_5:May:
****************** / pTemporal/vaguely                                                                         :11_5:May:
pTemporal/vaguely> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=63:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

****************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                :11_5:May:
****************** / WHERE                                                                                     :11_5:May:
WHERE> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=63:
WHERE> unexpected MAY
WHERE> expecting WHERE

****************** \ !Unconsumed Error: WHERE: Unexpected MAY Expecting: WHERE                                 :11_5:May:
****************** / preambleParamText:[Having]                                                                :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting HAVING

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: HAVING                                :11_5:May:
preambleParamText:[Having]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=63:
preambleParamText:[Having]> unexpected MAY
preambleParamText:[Having]> expecting HAVING

****************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MAY Expecting: HAVING           :11_5:May:
****************** / preambleParamText:[Given]                                                                 :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting GIVEN

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: GIVEN                                 :11_5:May:
preambleParamText:[Given]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=63:
preambleParamText:[Given]> unexpected MAY
preambleParamText:[Given]> expecting GIVEN

****************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MAY Expecting: GIVEN             :11_5:May:
****************** / preambleParamText:[Upon]                                                                  :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting UPON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: UPON                                  :11_5:May:
preambleParamText:[Upon]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=63:
preambleParamText:[Upon]> unexpected MAY
preambleParamText:[Upon]> expecting UPON

****************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MAY Expecting: UPON               :11_5:May:
****************** / preambleBoolStructR [Unless]                                                              :11_5:May:
preambleBoolStructR [Unless]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=63:
preambleBoolStructR [Unless]> unexpected MAY
preambleBoolStructR [Unless]> expecting UNLESS

****************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected MAY Expecting: UNLESS         :11_5:May:
****************** / preambleBoolStructR [When,If]                                                             :11_5:May:
preambleBoolStructR [When,If]> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=63:
preambleBoolStructR [When,If]> unexpected MAY
preambleBoolStructR [When,If]> expecting IF or WHEN

****************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected MAY Expecting: IF WHEN       :11_5:May:
****************** / pTemporal/eventually                                                                      :11_5:May:
pTemporal/eventually> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=63:
pTemporal/eventually> unexpected MAY
pTemporal/eventually> expecting EVENTUALLY

****************** \ !Unconsumed Error: pTemporal/eventually: Unexpected MAY Expecting: EVENTUALLY             :11_5:May:
****************** / pTemporal/specifically                                                                    :11_5:May:
******************* / $>|                                                                                     :11_5:May:
$>|> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=63:
$>|> unexpected MAY
$>|> expecting AFTER, BEFORE, BY, or ON

******************* \ !Unconsumed Error: $>|: Unexpected MAY Expecting: BEFORE AFTER BY ON                    :11_5:May:
pTemporal/specifically> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=63:
pTemporal/specifically> unexpected MAY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

****************** \ !Unconsumed Error: pTemporal/specifically: Unexpected MAY Expecting: BEFORE AFTER BY ON   :11_5:May:
****************** / pTemporal/vaguely                                                                         :11_5:May:
pTemporal/vaguely> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=63:
pTemporal/vaguely> unexpected MAY
pTemporal/vaguely> expecting Other text

****************** \ !Unconsumed Error: pTemporal/vaguely: Unexpected MAY Expecting: Other text                :11_5:May:
****************** / pDA                                                                                       :11_5:May:
******************* / pAction calling pParamText                                                               :11_6:GoDeeper:
******************** / pParamText                                                                             :11_6:GoDeeper:
********************* / pParamText(flat) first line: pKeyValues                                              :11_6:GoDeeper:
********************** / pKeyValuesAka                                                                      :11_6:GoDeeper:
*********************** / slAKA                                                                            :11_6:GoDeeper:
************************ / $*|                                                                            :11_6:GoDeeper:
************************* / slAKA base                                                                   :11_6:GoDeeper:
************************** / slKeyValues                                                                :11_6:GoDeeper:
*************************** / $*|                                                                      :11_6:GoDeeper:
**************************** / someSL                                                                 :11_6:GoDeeper:
***************************** / pNumAsText                                                           :11_6:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=64:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number        :11_6:GoDeeper:
someSL> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=64:
someSL> unexpected (
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
slKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=64:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

************************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
slAKA base> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=64:
slAKA base> unexpected (
slAKA base> expecting other text or number

************************* \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number  :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
slAKA> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=64:
slAKA> unexpected (
slAKA> expecting other text or number

*********************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
pKeyValuesAka> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=64:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

********************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=64:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********************* \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=64:
pParamText> unexpected (
pParamText> expecting other text or number

******************** \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number            :11_6:GoDeeper:
pAction calling pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=64:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******************* \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pDA> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=64:
pDA> unexpected (
pDA> expecting other text or number

****************** \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                         :11_6:GoDeeper:
****************** / pDA                                                                                       :11_5:May:
******************* / pAction calling pParamText                                                               :11_6:GoDeeper:
******************** / pParamText                                                                             :11_6:GoDeeper:
********************* / pParamText(flat) first line: pKeyValues                                              :11_6:GoDeeper:
********************** / pKeyValuesAka                                                                      :11_6:GoDeeper:
*********************** / slAKA                                                                            :11_6:GoDeeper:
************************ / $*|                                                                            :11_6:GoDeeper:
************************* / slAKA base                                                                   :11_6:GoDeeper:
************************** / slKeyValues                                                                :11_6:GoDeeper:
*************************** / $*|                                                                      :11_6:GoDeeper:
**************************** / someSL                                                                 :11_6:GoDeeper:
***************************** / pNumAsText                                                           :11_6:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=64:
pNumAsText> unexpected (
pNumAsText> expecting number

***************************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number        :11_6:GoDeeper:
someSL> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=64:
someSL> unexpected (
someSL> expecting other text or number

**************************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

*************************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
slKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=64:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

************************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
slAKA base> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=64:
slAKA base> unexpected (
slAKA base> expecting other text or number

************************* \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number  :11_6:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=64:
$*|> unexpected (
$*|> expecting other text or number

************************ \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
slAKA> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=64:
slAKA> unexpected (
slAKA> expecting other text or number

*********************** \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number           :11_6:GoDeeper:
pKeyValuesAka> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=64:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

********************** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number     :11_6:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=64:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********************* \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=64:
pParamText> unexpected (
pParamText> expecting other text or number

******************** \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number            :11_6:GoDeeper:
pAction calling pParamText> IN: ( ( "NOTIFY" ( "you" ) "with" ( "a list  <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=64:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******************* \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number :11_6:GoDeeper:
pDA> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
pDA> MATCH (CERR): MAY
pDA> ERROR:
pDA> offset=64:
pDA> unexpected (
pDA> expecting other text or number

****************** \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                         :11_6:GoDeeper:
regulative permutation with deontic-action> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
regulative permutation with deontic-action> MATCH (EERR): <EMPTY>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=64:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting other text or number

***************** \ !Unconsumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: other text or number :11_5:May:
permutationsReg> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=67:
permutationsReg> unexpected (
permutationsReg> expecting )

**************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: )                                 :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=67:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting )

*************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: )                             :11_5:May:
*************** / manyIndentation/deeper; calling someIndentation                                                 :11_5:May:
**************** / someIndentation                                                                               :11_5:May:
***************** / myindented-GoDeeper                                                                         :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                         :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                               :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

*************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=67:
someIndentation> unexpected (
someIndentation> expecting )

************** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                       :11_5:May:
pRegRuleSugary> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRuleSugary> MATCH (CERR): "the PDPC" (
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=67:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting )

************* \ !Consumed Error: pRegRuleSugary: Unexpected ( Expecting: )                                          :11_5:May:
************* / pRegRuleNormal                                                                                    :11_4:Other "the:
************** / permutationsReg                                                                                 :11_4:Other "the:
*************** / regulative permutation with deontic-temporal                                                  :11_4:Other "the:
**************** / WHERE                                                                                       :11_4:Other "the:
WHERE> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=61:
WHERE> unexpected "the PDPC"
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected "the PDPC" Expecting: WHERE                            :11_4:Other "the:
**************** / preambleParamText:[Having]                                                                  :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: HAVING                           :11_4:Other "the:
preambleParamText:[Having]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=61:
preambleParamText:[Having]> unexpected "the PDPC"
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "the PDPC" Expecting: HAVING      :11_4:Other "the:
**************** / preambleParamText:[Given]                                                                   :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: GIVEN                            :11_4:Other "the:
preambleParamText:[Given]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=61:
preambleParamText:[Given]> unexpected "the PDPC"
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "the PDPC" Expecting: GIVEN        :11_4:Other "the:
**************** / preambleParamText:[Upon]                                                                    :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: UPON                             :11_4:Other "the:
preambleParamText:[Upon]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=61:
preambleParamText:[Upon]> unexpected "the PDPC"
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "the PDPC" Expecting: UPON          :11_4:Other "the:
**************** / preambleBoolStructR [Unless]                                                                :11_4:Other "the:
preambleBoolStructR [Unless]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=61:
preambleBoolStructR [Unless]> unexpected "the PDPC"
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "the PDPC" Expecting: UNLESS    :11_4:Other "the:
**************** / preambleBoolStructR [When,If]                                                               :11_4:Other "the:
preambleBoolStructR [When,If]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=61:
preambleBoolStructR [When,If]> unexpected "the PDPC"
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "the PDPC" Expecting: IF WHEN  :11_4:Other "the:
**************** / pDT                                                                                         :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting MAY, MUST, or SHANT

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: MUST MAY SHANT                   :11_4:Other "the:
pDT> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=61:
pDT> unexpected "the PDPC"
pDT> expecting MAY, MUST, or SHANT

**************** \ !Unconsumed Error: pDT: Unexpected "the PDPC" Expecting: MUST MAY SHANT                     :11_4:Other "the:
**************** / pActor [REvery,RParty,RTokAll]                                                              :11_4:Other "the:
pActor [REvery,RParty,RTokAll]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=61:
pActor [REvery,RParty,RTokAll]> unexpected "the PDPC"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

**************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "the PDPC" Expecting: EVERY PARTY ALL :11_4:Other "the:
**************** / pDoAction/Do                                                                                :11_4:Other "the:
pDoAction/Do> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=61:
pDoAction/Do> unexpected "the PDPC"
pDoAction/Do> expecting DO

**************** \ !Unconsumed Error: pDoAction/Do: Unexpected "the PDPC" Expecting: DO                        :11_4:Other "the:
regulative permutation with deontic-temporal> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=61:
regulative permutation with deontic-temporal> unexpected "the PDPC"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*************** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "the PDPC" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :11_4:Other "the:
*************** / regulative permutation with deontic-action                                                    :11_4:Other "the:
**************** / WHERE                                                                                       :11_4:Other "the:
WHERE> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=61:
WHERE> unexpected "the PDPC"
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected "the PDPC" Expecting: WHERE                            :11_4:Other "the:
**************** / preambleParamText:[Having]                                                                  :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: HAVING                           :11_4:Other "the:
preambleParamText:[Having]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=61:
preambleParamText:[Having]> unexpected "the PDPC"
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "the PDPC" Expecting: HAVING      :11_4:Other "the:
**************** / preambleParamText:[Given]                                                                   :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: GIVEN                            :11_4:Other "the:
preambleParamText:[Given]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=61:
preambleParamText:[Given]> unexpected "the PDPC"
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "the PDPC" Expecting: GIVEN        :11_4:Other "the:
**************** / preambleParamText:[Upon]                                                                    :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: UPON                             :11_4:Other "the:
preambleParamText:[Upon]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=61:
preambleParamText:[Upon]> unexpected "the PDPC"
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "the PDPC" Expecting: UPON          :11_4:Other "the:
**************** / preambleBoolStructR [Unless]                                                                :11_4:Other "the:
preambleBoolStructR [Unless]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=61:
preambleBoolStructR [Unless]> unexpected "the PDPC"
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "the PDPC" Expecting: UNLESS    :11_4:Other "the:
**************** / preambleBoolStructR [When,If]                                                               :11_4:Other "the:
preambleBoolStructR [When,If]> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=61:
preambleBoolStructR [When,If]> unexpected "the PDPC"
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "the PDPC" Expecting: IF WHEN  :11_4:Other "the:
**************** / pTemporal/eventually                                                                        :11_4:Other "the:
pTemporal/eventually> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=61:
pTemporal/eventually> unexpected "the PDPC"
pTemporal/eventually> expecting EVENTUALLY

**************** \ !Unconsumed Error: pTemporal/eventually: Unexpected "the PDPC" Expecting: EVENTUALLY        :11_4:Other "the:
**************** / pTemporal/specifically                                                                      :11_4:Other "the:
***************** / $>|                                                                                       :11_4:Other "the:
$>|> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=61:
$>|> unexpected "the PDPC"
$>|> expecting AFTER, BEFORE, BY, or ON

***************** \ !Unconsumed Error: $>|: Unexpected "the PDPC" Expecting: BEFORE AFTER BY ON               :11_4:Other "the:
pTemporal/specifically> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=61:
pTemporal/specifically> unexpected "the PDPC"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

**************** \ !Unconsumed Error: pTemporal/specifically: Unexpected "the PDPC" Expecting: BEFORE AFTER BY ON :11_4:Other "the:
**************** / pTemporal/vaguely                                                                           :11_4:Other "the:
pTemporal/vaguely> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pTemporal/vaguely> MATCH (COK): "the PDPC"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "the PDPC"),[])

**************** \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "the PDPC")          :11_5:GoDeeper:
**************** / WHERE                                                                                        :11_5:GoDeeper:
WHERE> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=62:
WHERE> unexpected (
WHERE> expecting WHERE

**************** \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                      :11_5:GoDeeper:
**************** / preambleParamText:[Having]                                                                   :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting HAVING

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                     :11_5:GoDeeper:
preambleParamText:[Having]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=62:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

**************** \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                :11_5:GoDeeper:
**************** / preambleParamText:[Given]                                                                    :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting GIVEN

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                      :11_5:GoDeeper:
preambleParamText:[Given]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=62:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

**************** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                  :11_5:GoDeeper:
**************** / preambleParamText:[Upon]                                                                     :11_5:GoDeeper:
***************** / $>|                                                                                        :11_5:GoDeeper:
$>|> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=62:
$>|> unexpected (
$>|> expecting UPON

***************** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                       :11_5:GoDeeper:
preambleParamText:[Upon]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=62:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

**************** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                    :11_5:GoDeeper:
**************** / preambleBoolStructR [Unless]                                                                 :11_5:GoDeeper:
preambleBoolStructR [Unless]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=62:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

**************** \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS              :11_5:GoDeeper:
**************** / preambleBoolStructR [When,If]                                                                :11_5:GoDeeper:
preambleBoolStructR [When,If]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=62:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

**************** \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN            :11_5:GoDeeper:
**************** / pActor [REvery,RParty,RTokAll]                                                               :11_5:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=62:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

**************** \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL   :11_5:GoDeeper:
**************** / pDA                                                                                          :11_5:GoDeeper:
pDA> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=62:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

**************** \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                               :11_5:GoDeeper:
regulative permutation with deontic-action> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
regulative permutation with deontic-action> MATCH (CERR): "the PDPC"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=62:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

*************** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_5:GoDeeper:
permutationsReg> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=62:
permutationsReg> unexpected (
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_4:Other "the:
pRegRuleNormal> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=62:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

************* \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :11_4:Other "the:
pRegRule> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=67:
pRegRule> unexpected (
pRegRule> expecting ) or §

************ \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § )                                           :11_4:Other "the:
************ / someDeep                                                                                            :11_4:Other "the:
************* / someDeep first part calls base directly                                                           :11_4:Other "the:
someDeep first part calls base directly> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep first part calls base directly> MATCH (COK): "the PDPC"
someDeep first part calls base directly> VALUE: ("the PDPC",[])

************* \ someDeep first part calls base directly has returned "the PDPC"                                    :11_5:GoDeeper:
************* / someDeep second part recurses with someIndentation                                                 :11_5:GoDeeper:
************** / someIndentation                                                                                  :11_5:GoDeeper:
*************** / myindented-GoDeeper                                                                            :11_5:GoDeeper:
myindented-GoDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                       :11_5:May:
*************** / manyIndentation/leaf?                                                                           :11_5:May:
**************** / someDeep                                                                                      :11_5:May:
***************** / someDeep first part calls base directly                                                     :11_5:May:
someDeep first part calls base directly> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=63:
someDeep first part calls base directly> unexpected MAY
someDeep first part calls base directly> expecting Other text

***************** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected MAY Expecting: Other text :11_5:May:
someDeep> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=63:
someDeep> unexpected MAY
someDeep> expecting Other text

**************** \ !Unconsumed Error: someDeep: Unexpected MAY Expecting: Other text                             :11_5:May:
manyIndentation/leaf?> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=63:
manyIndentation/leaf?> unexpected MAY
manyIndentation/leaf?> expecting Other text

*************** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MAY Expecting: Other text                  :11_5:May:
*************** / manyIndentation/deeper; calling someIndentation                                                 :11_5:May:
**************** / someIndentation                                                                               :11_5:May:
***************** / myindented-GoDeeper                                                                         :11_5:May:
myindented-GoDeeper> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=63:
myindented-GoDeeper> unexpected MAY
myindented-GoDeeper> expecting (

***************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MAY Expecting: (                         :11_5:May:
someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting (

**************** \ !Unconsumed Error: someIndentation: Unexpected MAY Expecting: (                               :11_5:May:
manyIndentation/deeper; calling someIndentation> IN: MAY ( ( "NOTIFY" ( "you" ) "with" ( "a l <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=63:
manyIndentation/deeper; calling someIndentation> unexpected MAY
manyIndentation/deeper; calling someIndentation> expecting (

*************** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MAY Expecting: ( :11_5:May:
someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=63:
someIndentation> unexpected MAY
someIndentation> expecting ( or Other text

************** \ !Consumed Error: someIndentation: Unexpected MAY Expecting: ( Other text                          :11_5:May:
someDeep second part recurses with someIndentation> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
someDeep second part recurses with someIndentation> MATCH (EERR): <EMPTY>
someDeep second part recurses with someIndentation> ERROR:
someDeep second part recurses with someIndentation> offset=63:
someDeep second part recurses with someIndentation> unexpected MAY
someDeep second part recurses with someIndentation> expecting ( or Other text

************* \ !Unconsumed Error: someDeep second part recurses with someIndentation: Unexpected MAY Expecting: ( Other text :11_5:GoDeeper:
************* > someDeep no luck, returning []                                                                     :11_5:GoDeeper:
someDeep> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
someDeep> MATCH (COK): "the PDPC"
someDeep> VALUE: (["the PDPC"],[])

************ \ someDeep has returned ["the PDPC"]                                                                   :11_5:GoDeeper:
manyIndentation/leaf?> IN: "the PDPC" ( MAY ( ( "NOTIFY" ( "you" )  <…>
manyIndentation/leaf?> MATCH (COK): "the PDPC"
manyIndentation/leaf?> VALUE: (RuleAlias ["the PDPC"],[])

*********** \ manyIndentation/leaf? has returned RuleAlias ["the PDPC"]                                              :11_5:GoDeeper:
*********** / myindented-UnDeeper                                                                                    :11_5:GoDeeper:
myindented-UnDeeper> IN: ( MAY ( ( "NOTIFY" ( "you" ) "with" ( "a <…>
myindented-UnDeeper> MATCH (EERR): <EMPTY>
myindented-UnDeeper> ERROR:
myindented-UnDeeper> offset=62:
myindented-UnDeeper> unexpected (
myindented-UnDeeper> expecting )

*********** \ !Unconsumed Error: myindented-UnDeeper: Unexpected ( Expecting: )                                      :11_5:GoDeeper:
someIndentation> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
someIndentation> MATCH (CERR): ( "the PDPC"
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

********** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                              :11_5:GoDeeper:
manyIndentation/deeper; calling someIndentation> IN: ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you"  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=62:
manyIndentation/deeper; calling someIndentation> unexpected (
manyIndentation/deeper; calling someIndentation> expecting )

********* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected ( Expecting: )            :11_4:GoDeeper:
someIndentation> IN: ( ( "the PDPC" ( MAY ( ( "NOTIFY" ( "you <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

******** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                                :11_4:GoDeeper:
pHenceLest-Hence> IN: HENCE ( ( "the PDPC" ( MAY ( ( "NOTIFY"  <…>
pHenceLest-Hence> MATCH (CERR): HENCE (
pHenceLest-Hence> ERROR:
pHenceLest-Hence> offset=62:
pHenceLest-Hence> unexpected (
pHenceLest-Hence> expecting )

******* \ !Consumed Error: pHenceLest-Hence: Unexpected ( Expecting: )                                                 :11_4:GoDeeper:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=62:
manyIndentation/leaf?> unexpected (
manyIndentation/leaf?> expecting )

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected ( Expecting: )                                         :2_2:Must:
****** / manyIndentation/deeper; calling someIndentation                                                             :2_2:Must:
******* / someIndentation                                                                                           :2_2:Must:
******** / myindented-GoDeeper                                                                                     :2_2:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=6:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                    :2_2:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=6:
someIndentation> unexpected MUST
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                          :2_2:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=6:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (            :2_2:Must:
someIndentation> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
someIndentation> MATCH (CERR): (
someIndentation> ERROR:
someIndentation> offset=62:
someIndentation> unexpected (
someIndentation> expecting )

***** \ !Consumed Error: someIndentation: Unexpected ( Expecting: )                                                   :2_2:Must:
pRegRuleSugary> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRegRuleSugary> MATCH (CERR): "You" (
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=62:
pRegRuleSugary> unexpected (
pRegRuleSugary> expecting )

**** \ !Consumed Error: pRegRuleSugary: Unexpected ( Expecting: )                                                      :2_2:Must:
**** / pRegRuleNormal                                                                                                :2_1:Other "You":
***** / permutationsReg                                                                                             :2_1:Other "You":
****** / regulative permutation with deontic-temporal                                                              :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected "You"
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected "You" Expecting: WHERE                                             :2_1:Other "You":
******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: HAVING                                            :2_1:Other "You":
preambleParamText:[Having]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected "You"
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "You" Expecting: HAVING                       :2_1:Other "You":
******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                             :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                         :2_1:Other "You":
******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                              :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                           :2_1:Other "You":
******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected "You"
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "You" Expecting: UNLESS                     :2_1:Other "You":
******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected "You"
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "You" Expecting: IF WHEN                   :2_1:Other "You":
******* / pDT                                                                                                     :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: MUST MAY SHANT                                    :2_1:Other "You":
pDT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=4:
pDT> unexpected "You"
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected "You" Expecting: MUST MAY SHANT                                      :2_1:Other "You":
******* / pActor [REvery,RParty,RTokAll]                                                                          :2_1:Other "You":
pActor [REvery,RParty,RTokAll]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=4:
pActor [REvery,RParty,RTokAll]> unexpected "You"
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected "You" Expecting: EVERY PARTY ALL          :2_1:Other "You":
******* / pDoAction/Do                                                                                            :2_1:Other "You":
pDoAction/Do> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pDoAction/Do> MATCH (EERR): <EMPTY>
pDoAction/Do> ERROR:
pDoAction/Do> offset=4:
pDoAction/Do> unexpected "You"
pDoAction/Do> expecting DO

******* \ !Unconsumed Error: pDoAction/Do: Unexpected "You" Expecting: DO                                         :2_1:Other "You":
regulative permutation with deontic-temporal> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
regulative permutation with deontic-temporal> MATCH (EERR): <EMPTY>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=4:
regulative permutation with deontic-temporal> unexpected "You"
regulative permutation with deontic-temporal> expecting ALL, DO, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Unconsumed Error: regulative permutation with deontic-temporal: Unexpected "You" Expecting: MUST MAY SHANT GIVEN HAVING UPON WHERE EVERY PARTY ALL DO UNLESS IF WHEN :2_1:Other "You":
****** / regulative permutation with deontic-action                                                                :2_1:Other "You":
******* / WHERE                                                                                                   :2_1:Other "You":
WHERE> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected "You"
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected "You" Expecting: WHERE                                             :2_1:Other "You":
******* / preambleParamText:[Having]                                                                              :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: HAVING                                            :2_1:Other "You":
preambleParamText:[Having]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected "You"
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected "You" Expecting: HAVING                       :2_1:Other "You":
******* / preambleParamText:[Given]                                                                               :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                             :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                         :2_1:Other "You":
******* / preambleParamText:[Upon]                                                                                :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                              :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                           :2_1:Other "You":
******* / preambleBoolStructR [Unless]                                                                            :2_1:Other "You":
preambleBoolStructR [Unless]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected "You"
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected "You" Expecting: UNLESS                     :2_1:Other "You":
******* / preambleBoolStructR [When,If]                                                                           :2_1:Other "You":
preambleBoolStructR [When,If]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=4:
preambleBoolStructR [When,If]> unexpected "You"
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected "You" Expecting: IF WHEN                   :2_1:Other "You":
******* / pTemporal/eventually                                                                                    :2_1:Other "You":
pTemporal/eventually> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=4:
pTemporal/eventually> unexpected "You"
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected "You" Expecting: EVENTUALLY                         :2_1:Other "You":
******* / pTemporal/specifically                                                                                  :2_1:Other "You":
******** / $>|                                                                                                   :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: BEFORE AFTER BY ON                                :2_1:Other "You":
pTemporal/specifically> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=4:
pTemporal/specifically> unexpected "You"
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected "You" Expecting: BEFORE AFTER BY ON               :2_1:Other "You":
******* / pTemporal/vaguely                                                                                       :2_1:Other "You":
pTemporal/vaguely> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTemporal/vaguely> MATCH (COK): "You"
pTemporal/vaguely> VALUE: (Just (TemporalConstraint TVague (Just 0) "You"),[])

******* \ pTemporal/vaguely has returned Just (TemporalConstraint TVague (Just 0) "You")                           :2_2:GoDeeper:
******* / WHERE                                                                                                    :2_2:GoDeeper:
WHERE> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=5:
WHERE> unexpected (
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected ( Expecting: WHERE                                                  :2_2:GoDeeper:
******* / preambleParamText:[Having]                                                                               :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: HAVING                                                 :2_2:GoDeeper:
preambleParamText:[Having]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=5:
preambleParamText:[Having]> unexpected (
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected ( Expecting: HAVING                            :2_2:GoDeeper:
******* / preambleParamText:[Given]                                                                                :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: GIVEN                                                  :2_2:GoDeeper:
preambleParamText:[Given]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=5:
preambleParamText:[Given]> unexpected (
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected ( Expecting: GIVEN                              :2_2:GoDeeper:
******* / preambleParamText:[Upon]                                                                                 :2_2:GoDeeper:
******** / $>|                                                                                                    :2_2:GoDeeper:
$>|> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=5:
$>|> unexpected (
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected ( Expecting: UPON                                                   :2_2:GoDeeper:
preambleParamText:[Upon]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=5:
preambleParamText:[Upon]> unexpected (
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected ( Expecting: UPON                                :2_2:GoDeeper:
******* / preambleBoolStructR [Unless]                                                                             :2_2:GoDeeper:
preambleBoolStructR [Unless]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=5:
preambleBoolStructR [Unless]> unexpected (
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected ( Expecting: UNLESS                          :2_2:GoDeeper:
******* / preambleBoolStructR [When,If]                                                                            :2_2:GoDeeper:
preambleBoolStructR [When,If]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=5:
preambleBoolStructR [When,If]> unexpected (
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected ( Expecting: IF WHEN                        :2_2:GoDeeper:
******* / pActor [REvery,RParty,RTokAll]                                                                           :2_2:GoDeeper:
pActor [REvery,RParty,RTokAll]> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
pActor [REvery,RParty,RTokAll]> MATCH (EERR): <EMPTY>
pActor [REvery,RParty,RTokAll]> ERROR:
pActor [REvery,RParty,RTokAll]> offset=5:
pActor [REvery,RParty,RTokAll]> unexpected (
pActor [REvery,RParty,RTokAll]> expecting ALL, EVERY, or PARTY

******* \ !Unconsumed Error: pActor [REvery,RParty,RTokAll]: Unexpected ( Expecting: EVERY PARTY ALL               :2_2:GoDeeper:
******* / pDA                                                                                                      :2_2:GoDeeper:
pDA> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
pDA> MATCH (EERR): <EMPTY>
pDA> ERROR:
pDA> offset=5:
pDA> unexpected (
pDA> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDA: Unexpected ( Expecting: MUST MAY SHANT                                           :2_2:GoDeeper:
regulative permutation with deontic-action> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
regulative permutation with deontic-action> MATCH (CERR): "You"
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=5:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_2:GoDeeper:
permutationsReg> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=5:
permutationsReg> unexpected (
permutationsReg> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_1:Other "You":
pRegRuleNormal> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=5:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting ALL, EVERY, GIVEN, HAVING, IF, MAY, MUST, PARTY, SHANT, UNLESS, UPON, WHEN, or WHERE

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: GIVEN HAVING UPON WHERE EVERY PARTY ALL MUST MAY SHANT UNLESS IF WHEN :2_1:Other "You":
pRegRule> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRegRule> MATCH (EERR): <EMPTY>
pRegRule> ERROR:
pRegRule> offset=62:
pRegRule> unexpected (
pRegRule> expecting ) or §

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: § )                                                       :2_1:Other "You":
*** / pTypeDefinition                                                                                                 :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: §                                                      :2_1:Other "You":
pRuleLabel> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected "You"
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected "You" Expecting: §                                                 :2_1:Other "You":
**** / pHornlike/uponLimb                                                                                            :2_1:Other "You":
***** / preambleParamText:[Upon]                                                                                    :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                  :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                               :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                       :2_1:Other "You":
**** / pHornlike/givenLimb                                                                                           :2_1:Other "You":
***** / preambleParamText:[Given]                                                                                   :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                                 :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                             :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                     :2_1:Other "You":
pTypeDefinition> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pTypeDefinition> MATCH (EERR): <EMPTY>
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected "You"
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or §

*** \ !Unconsumed Error: pTypeDefinition: Unexpected "You" Expecting: § GIVEN UPON DEFINE                            :2_1:Other "You":
*** / pConstitutiveRule                                                                                               :2_1:Other "You":
**** / pRuleLabel                                                                                                    :2_1:Other "You":
***** / $>|                                                                                                         :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting §

***** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: §                                                      :2_1:Other "You":
pRuleLabel> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected "You"
pRuleLabel> expecting §

**** \ !Unconsumed Error: pRuleLabel: Unexpected "You" Expecting: §                                                 :2_1:Other "You":
**** / calling myindented pNameParens                                                                                :2_1:Other "You":
***** / manyIndentation/leaf?                                                                                       :2_1:Other "You":
****** / pMultiTermAka                                                                                             :2_1:Other "You":
******* / pAKA                                                                                                    :2_1:Other "You":
******** / slAKA                                                                                                 :2_1:Other "You":
********* / $*|                                                                                                 :2_1:Other "You":
********** / slAKA base                                                                                        :2_1:Other "You":
*********** / slMultiTerm                                                                                     :2_1:Other "You":
************ / someSL                                                                                        :2_1:Other "You":
************* / pNumAsText                                                                                    :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                              :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************ \ someSL has returned (["You"],0)                                                                :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*********** \ slMultiTerm has returned (["You"],0)                                                             :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

********** \ slAKA base has returned (["You"],0)                                                                :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

********* \ $*| has returned (["You"],0)                                                                         :2_2:GoDeeper:
********* / |>>/recurse                                                                                          :2_2:GoDeeper:
********** / |>>/recurse                                                                                         :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                        :2_2:Must:
********** / |>>/base                                                                                            :2_2:Must:
*********** / slAKA optional akapart                                                                            :2_2:Must:
************ / |?| optional something                                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / PAKA/akapart                                                                                :2_2:Must:
*************** / $>|                                                                                       :2_2:Must:
**************** / Aka Token                                                                               :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

**************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                            :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

*************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                                    :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                             :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                                   :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

************ \ |?| optional something has returned (Nothing,0)                                                 :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*********** \ slAKA optional akapart has returned (Nothing,0)                                                   :2_2:Must:
*********** > |>>/base got Nothing                                                                              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********** \ |>>/base has returned (Nothing,0)                                                                   :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

********* \ |>>/recurse has returned (Nothing,1)                                                                  :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / slAKA optional typically                                                                            :2_2:Must:
*********** / |?| optional something                                                                            :2_2:Must:
************ / |>>/recurse                                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************ \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                    :2_2:Must:
************ / |>>/base                                                                                        :2_2:Must:
************* / typically                                                                                     :2_2:Must:
************** / $>|                                                                                         :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                                :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

************* \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                            :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

************ \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                               :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********** \ |?| optional something has returned (Nothing,0)                                                   :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********** \ slAKA optional typically has returned (Nothing,0)                                                   :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
********* > slAKA: proceeding after base and entityalias are retrieved ...                                        :2_2:Must:
********* > pAKA: entityalias = Nothing                                                                           :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

******** \ slAKA has returned (["You"],1)                                                                          :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
pAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (CERR): "You" (
pAKA> ERROR:
pAKA> offset=6:
pAKA> unexpected MUST
pAKA> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: pAKA: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                                 :2_2:Must:
pMultiTermAka> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (CERR): "You" (
pMultiTermAka> ERROR:
pMultiTermAka> offset=6:
pMultiTermAka> unexpected MUST
pMultiTermAka> expecting (, ), AKA, or TYPICALLY

****** \ !Consumed Error: pMultiTermAka: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                          :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, or TYPICALLY

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                :2_1:Other "You":
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:Other "You":
****** / someIndentation                                                                                           :2_1:Other "You":
******* / myindented-GoDeeper                                                                                     :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                   :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                         :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (           :2_1:Other "You":
calling myindented pNameParens> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=6:
calling myindented pNameParens> unexpected MUST
calling myindented pNameParens> expecting (, ), AKA, or TYPICALLY

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (         :2_1:Other "You":
pConstitutiveRule> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pConstitutiveRule> MATCH (EERR): <EMPTY>
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=6:
pConstitutiveRule> unexpected MUST
pConstitutiveRule> expecting (, ), AKA, TYPICALLY, or §

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected MUST Expecting: § TYPICALLY AKA ) ( ( ( (                     :2_1:Other "You":
*** / pScenarioRule                                                                                                   :2_1:Other "You":
pScenarioRule> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=4:
pScenarioRule> unexpected "You"
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected "You" Expecting: SCENARIO                                          :2_1:Other "You":
*** / pHornlike                                                                                                       :2_1:Other "You":
**** / pSrcRef                                                                                                       :2_1:Other "You":
***** / pRuleLabel                                                                                                  :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting §

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: §                                                    :2_1:Other "You":
pRuleLabel> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected "You"
pRuleLabel> expecting §

***** \ !Unconsumed Error: pRuleLabel: Unexpected "You" Expecting: §                                               :2_1:Other "You":
pSrcRef> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pSrcRef> MATCH (EOK): <EMPTY>
pSrcRef> VALUE: ((Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Nothing,Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:Other "You":
**** / pHornlike / permute                                                                                           :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                             :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                     :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                               :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                           :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                   :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/givenLimb                                                                                         :2_1:Other "You":
****** / preambleParamText:[Given]                                                                                 :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: GIVEN                                               :2_1:Other "You":
preambleParamText:[Given]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected "You"
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected "You" Expecting: GIVEN                           :2_1:Other "You":
pHornlike/givenLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected "You"
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected "You" Expecting: GIVEN                                   :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/uponLimb                                                                                          :2_1:Other "You":
****** / preambleParamText:[Upon]                                                                                  :2_1:Other "You":
******* / $>|                                                                                                     :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected "You" Expecting: UPON                                                :2_1:Other "You":
preambleParamText:[Upon]> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected "You"
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected "You" Expecting: UPON                             :2_1:Other "You":
pHornlike/uponLimb> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected "You"
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected "You" Expecting: UPON                                     :2_1:Other "You":
***** / whenCase                                                                                                    :2_1:Other "You":
****** / whenMeansIf                                                                                               :2_1:Other "You":
whenMeansIf> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=4:
whenMeansIf> unexpected "You"
whenMeansIf> expecting IF, MEANS, or WHEN

****** \ !Unconsumed Error: whenMeansIf: Unexpected "You" Expecting: IF WHEN MEANS                                 :2_1:Other "You":
****** / Otherwise                                                                                                 :2_1:Other "You":
Otherwise> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=4:
Otherwise> unexpected "You"
Otherwise> expecting OTHERWISE

****** \ !Unconsumed Error: Otherwise: Unexpected "You" Expecting: OTHERWISE                                       :2_1:Other "You":
whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=4:
whenCase> unexpected "You"
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

***** \ !Unconsumed Error: whenCase: Unexpected "You" Expecting: OTHERWISE IF WHEN MEANS                            :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
***** / pHornlike/ambitious                                                                                         :2_1:Other "You":
****** / $>|                                                                                                       :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: DEFINE DECIDE                                         :2_1:Other "You":
pHornlike/ambitious> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=4:
pHornlike/ambitious> unexpected "You"
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected "You" Expecting: DEFINE DECIDE                           :2_1:Other "You":
***** / pHornlike/someStructure                                                                                     :2_1:Other "You":
****** / manyIndentation/leaf?                                                                                     :2_1:Other "You":
******* / relPredNextlineWhen                                                                                     :2_1:Other "You":
******** / pRelPred optIndentedTuple whenCase                                                                    :2_1:Other "You":
********* / optIndentedTuple                                                                                    :2_1:Other "You":
********** / optIndented                                                                                       :2_1:Other "You":
*********** / pRelPred                                                                                        :2_1:Other "You":
************ / slRelPred                                                                                     :2_1:Other "You":
************* / nested simpleHorn                                                                           :2_1:Other "You":
************** > |^|                                                                                       :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |^| deeps                                                                                  :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

************** \ |^| deeps has returned ([()],1)                                                             :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

************* \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                        :2_2:Must:
************* / RPConstraint                                                                                :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (        :2_2:GoDeeper:
************* / RPBoolStructR                                                                               :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************** \ $*| has returned (["You"],0)                                                               :2_2:GoDeeper:
************** / |>| calling $>>                                                                            :2_2:GoDeeper:
*************** / |>>/recurse                                                                              :2_2:GoDeeper:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==       :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (      :2_2:Must:
*************** / |>>/base                                                                                 :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

*************** \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==           :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == ( :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
************* / RPMT                                                                                        :2_1:Other "You":
************** / $*|                                                                                       :2_1:Other "You":
*************** / slAKA                                                                                   :2_1:Other "You":
**************** / $*|                                                                                   :2_1:Other "You":
***************** / slAKA base                                                                          :2_1:Other "You":
****************** / slMultiTerm                                                                       :2_1:Other "You":
******************* / someSL                                                                          :2_1:Other "You":
******************** / pNumAsText                                                                      :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

******************* \ someSL has returned (["You"],0)                                                  :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

****************** \ slMultiTerm has returned (["You"],0)                                               :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

***************** \ slAKA base has returned (["You"],0)                                                  :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

**************** \ $*| has returned (["You"],0)                                                           :2_2:GoDeeper:
**************** / |>>/recurse                                                                            :2_2:GoDeeper:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / slAKA optional akapart                                                              :2_2:Must:
******************* / |?| optional something                                                            :2_2:Must:
******************** / |>>/recurse                                                                     :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                    :2_2:Must:
******************** / |>>/base                                                                        :2_2:Must:
********************* / PAKA/akapart                                                                  :2_2:Must:
********************** / $>|                                                                         :2_2:Must:
*********************** / Aka Token                                                                 :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

*********************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA              :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

********************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                      :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

********************* \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA               :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

******************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                     :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

******************* \ |?| optional something has returned (Nothing,0)                                   :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

****************** \ slAKA optional akapart has returned (Nothing,0)                                     :2_2:Must:
****************** > |>>/base got Nothing                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

***************** \ |>>/base has returned (Nothing,0)                                                     :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

**************** \ |>>/recurse has returned (Nothing,1)                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / slAKA optional typically                                                              :2_2:Must:
****************** / |?| optional something                                                              :2_2:Must:
******************* / |>>/recurse                                                                       :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

******************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                      :2_2:Must:
******************* / |>>/base                                                                          :2_2:Must:
******************** / typically                                                                       :2_2:Must:
********************* / $>|                                                                           :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

********************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                  :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

******************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY              :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

******************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                 :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

****************** \ |?| optional something has returned (Nothing,0)                                     :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

***************** \ slAKA optional typically has returned (Nothing,0)                                     :2_2:Must:
***************** > |>>/base got Nothing                                                                  :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

**************** \ |>>/base has returned (Nothing,0)                                                       :2_2:Must:
**************** > slAKA: proceeding after base and entityalias are retrieved ...                          :2_2:Must:
**************** > pAKA: entityalias = Nothing                                                             :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

*************** \ slAKA has returned (["You"],1)                                                            :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

************** \ $*| has returned (["You"],1)                                                                :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

************* \ RPMT has returned (RPMT ["You"],1)                                                            :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

************ \ slRelPred has returned (RPMT ["You"],1)                                                         :2_2:Must:
************ / undeepers                                                                                       :2_2:Must:
************* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                        :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

************ \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                      :2_2:Must:
pRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred> MATCH (CERR): "You" (
pRelPred> ERROR:
pRelPred> offset=6:
pRelPred> unexpected MUST
pRelPred> expecting (, ), AKA, or TYPICALLY

*********** \ !Consumed Error: pRelPred: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                     :2_2:Must:
optIndented> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndented> MATCH (CERR): "You" (
optIndented> ERROR:
optIndented> offset=6:
optIndented> unexpected MUST
optIndented> expecting (, ), AKA, or TYPICALLY

********** \ !Consumed Error: optIndented: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                    :2_2:Must:
optIndentedTuple> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
optIndentedTuple> MATCH (CERR): "You" (
optIndentedTuple> ERROR:
optIndentedTuple> offset=6:
optIndentedTuple> unexpected MUST
optIndentedTuple> expecting (, ), AKA, or TYPICALLY

********* \ !Consumed Error: optIndentedTuple: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                 :2_2:Must:
pRelPred optIndentedTuple whenCase> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (CERR): "You" (
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=6:
pRelPred optIndentedTuple whenCase> unexpected MUST
pRelPred optIndentedTuple whenCase> expecting (, ), AKA, or TYPICALLY

******** \ !Consumed Error: pRelPred optIndentedTuple whenCase: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( ( :2_2:Must:
relPredNextlineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredNextlineWhen> MATCH (CERR): "You" (
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=6:
relPredNextlineWhen> unexpected MUST
relPredNextlineWhen> expecting (, ), AKA, or TYPICALLY

******* \ !Consumed Error: relPredNextlineWhen: Unexpected MUST Expecting: TYPICALLY AKA ) ( ( ( (                  :2_2:Must:
******* / relPredSamelineWhen                                                                                     :2_1:Other "You":
******** / $*|                                                                                                   :2_1:Other "You":
********* / slRelPred                                                                                           :2_1:Other "You":
********** / nested simpleHorn                                                                                 :2_1:Other "You":
*********** > |^|                                                                                             :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |^| deeps                                                                                        :2_2:GoDeeper:
|^| deeps> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|^| deeps> MATCH (COK): (
|^| deeps> VALUE: (([()],1),[])

*********** \ |^| deeps has returned ([()],1)                                                                   :2_2:Must:
nested simpleHorn> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
nested simpleHorn> MATCH (CERR): "You" (
nested simpleHorn> ERROR:
nested simpleHorn> offset=6:
nested simpleHorn> unexpected MUST
nested simpleHorn> expecting ( or MEANS

********** \ !Consumed Error: nested simpleHorn: Unexpected MUST Expecting: MEANS (                              :2_2:Must:
********** / RPConstraint                                                                                      :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPConstraint> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPConstraint> MATCH (CERR): "You"
RPConstraint> ERROR:
RPConstraint> offset=6:
RPConstraint> unexpected MUST
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPConstraint: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (              :2_2:GoDeeper:
********** / RPBoolStructR                                                                                     :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slMultiTerm                                                                                   :2_1:Other "You":
************* / someSL                                                                                      :2_1:Other "You":
************** / pNumAsText                                                                                  :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                            :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

************* \ someSL has returned (["You"],0)                                                              :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

************ \ slMultiTerm has returned (["You"],0)                                                           :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

*********** \ $*| has returned (["You"],0)                                                                     :2_2:GoDeeper:
*********** / |>| calling $>>                                                                                  :2_2:GoDeeper:
************ / |>>/recurse                                                                                    :2_2:GoDeeper:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************* \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: IS < <= > >= IN NOT IN ==             :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (CERR): (
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Consumed Error: |>>/recurse: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (            :2_2:Must:
************ / |>>/base                                                                                       :2_2:GoDeeper:
|>>/base> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=5:
|>>/base> unexpected (
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

************ \ !Unconsumed Error: |>>/base: Unexpected ( Expecting: IS < <= > >= IN NOT IN ==                 :2_2:GoDeeper:
|>| calling $>>> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=6:
|>| calling $>>> unexpected MUST
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

*********** \ !Unconsumed Error: |>| calling $>>: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (       :2_2:GoDeeper:
RPBoolStructR> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPBoolStructR> MATCH (CERR): "You"
RPBoolStructR> ERROR:
RPBoolStructR> offset=6:
RPBoolStructR> unexpected MUST
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

********** \ !Consumed Error: RPBoolStructR: Unexpected MUST Expecting: IS < <= > >= IN NOT IN == (             :2_2:GoDeeper:
********** / RPMT                                                                                              :2_1:Other "You":
*********** / $*|                                                                                             :2_1:Other "You":
************ / slAKA                                                                                         :2_1:Other "You":
************* / $*|                                                                                         :2_1:Other "You":
************** / slAKA base                                                                                :2_1:Other "You":
*************** / slMultiTerm                                                                             :2_1:Other "You":
**************** / someSL                                                                                :2_1:Other "You":
***************** / pNumAsText                                                                            :2_2:Must:
pNumAsText> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected MUST
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected MUST Expecting: number                      :2_2:Must:
someSL> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                        :2_2:GoDeeper:
slMultiTerm> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                     :2_2:GoDeeper:
slAKA base> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                        :2_2:GoDeeper:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                 :2_2:GoDeeper:
************* / |>>/recurse                                                                                  :2_2:GoDeeper:
************** / |>>/recurse                                                                                 :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                :2_2:Must:
************** / |>>/base                                                                                    :2_2:Must:
*************** / slAKA optional akapart                                                                    :2_2:Must:
**************** / |?| optional something                                                                  :2_2:Must:
***************** / |>>/recurse                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

***************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                          :2_2:Must:
***************** / |>>/base                                                                              :2_2:Must:
****************** / PAKA/akapart                                                                        :2_2:Must:
******************* / $>|                                                                               :2_2:Must:
******************** / Aka Token                                                                       :2_2:Must:
Aka Token> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=6:
Aka Token> unexpected MUST
Aka Token> expecting AKA

******************** \ !Unconsumed Error: Aka Token: Unexpected MUST Expecting: AKA                    :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting AKA

******************* \ !Unconsumed Error: $>|: Unexpected MUST Expecting: AKA                            :2_2:Must:
PAKA/akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=6:
PAKA/akapart> unexpected MUST
PAKA/akapart> expecting AKA

****************** \ !Unconsumed Error: PAKA/akapart: Unexpected MUST Expecting: AKA                     :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting AKA

***************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: AKA                           :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

**************** \ |?| optional something has returned (Nothing,0)                                         :2_2:Must:
slAKA optional akapart> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

*************** \ slAKA optional akapart has returned (Nothing,0)                                           :2_2:Must:
*************** > |>>/base got Nothing                                                                      :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************** \ |>>/base has returned (Nothing,0)                                                           :2_2:Must:
|>>/recurse> IN: ( MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) I <…>
|>>/recurse> MATCH (COK): (
|>>/recurse> VALUE: ((Nothing,1),[])

************* \ |>>/recurse has returned (Nothing,1)                                                          :2_2:Must:
************* / |>>/recurse                                                                                   :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                  :2_2:Must:
************* / |>>/base                                                                                      :2_2:Must:
************** / slAKA optional typically                                                                    :2_2:Must:
*************** / |?| optional something                                                                    :2_2:Must:
**************** / |>>/recurse                                                                             :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                            :2_2:Must:
**************** / |>>/base                                                                                :2_2:Must:
***************** / typically                                                                             :2_2:Must:
****************** / $>|                                                                                 :2_2:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=6:
$>|> unexpected MUST
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: TYPICALLY                        :2_2:Must:
typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=6:
typically> unexpected MUST
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected MUST Expecting: TYPICALLY                    :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=6:
|>>/base> unexpected MUST
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected MUST Expecting: TYPICALLY                       :2_2:Must:
|?| optional something> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                           :2_2:Must:
slAKA optional typically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                           :2_2:Must:
************** > |>>/base got Nothing                                                                        :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                             :2_2:Must:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                :2_2:Must:
************* > pAKA: entityalias = Nothing                                                                   :2_2:Must:
slAKA> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You" (
slAKA> VALUE: ((["You"],1),[])

************ \ slAKA has returned (["You"],1)                                                                  :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((["You"],1),[])

*********** \ $*| has returned (["You"],1)                                                                      :2_2:Must:
RPMT> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
RPMT> MATCH (COK): "You" (
RPMT> VALUE: ((RPMT ["You"],1),[])

********** \ RPMT has returned (RPMT ["You"],1)                                                                  :2_2:Must:
slRelPred> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slRelPred> MATCH (COK): "You" (
slRelPred> VALUE: ((RPMT ["You"],1),[])

********* \ slRelPred has returned (RPMT ["You"],1)                                                               :2_2:Must:
$*|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You" (
$*|> VALUE: ((RPMT ["You"],1),[])

******** \ $*| has returned (RPMT ["You"],1)                                                                       :2_2:Must:
******** / |>| calling $>>                                                                                         :2_2:Must:
********* / |>>/recurse                                                                                           :2_2:Must:
|>>/recurse> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=6:
|>>/recurse> unexpected MUST
|>>/recurse> expecting (

********* \ !Unconsumed Error: |>>/recurse: Unexpected MUST Expecting: (                                          :2_2:Must:
********* / |>>/base                                                                                              :2_2:Must:
********** / optional whenCase -- but we should still consume GoDeepers before giving up                         :2_2:Must:
*********** / whenCase                                                                                          :2_2:Must:
************ / whenMeansIf                                                                                     :2_2:Must:
whenMeansIf> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenMeansIf> MATCH (EERR): <EMPTY>
whenMeansIf> ERROR:
whenMeansIf> offset=6:
whenMeansIf> unexpected MUST
whenMeansIf> expecting IF, MEANS, or WHEN

************ \ !Unconsumed Error: whenMeansIf: Unexpected MUST Expecting: IF WHEN MEANS                        :2_2:Must:
************ / Otherwise                                                                                       :2_2:Must:
Otherwise> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
Otherwise> MATCH (EERR): <EMPTY>
Otherwise> ERROR:
Otherwise> offset=6:
Otherwise> unexpected MUST
Otherwise> expecting OTHERWISE

************ \ !Unconsumed Error: Otherwise: Unexpected MUST Expecting: OTHERWISE                              :2_2:Must:
whenCase> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
whenCase> MATCH (EERR): <EMPTY>
whenCase> ERROR:
whenCase> offset=6:
whenCase> unexpected MUST
whenCase> expecting IF, MEANS, OTHERWISE, or WHEN

*********** \ !Unconsumed Error: whenCase: Unexpected MUST Expecting: OTHERWISE IF WHEN MEANS                   :2_2:Must:
optional whenCase -- but we should still consume GoDeepers before giving up> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
optional whenCase -- but we should still consume GoDeepers before giving up> MATCH (EOK): <EMPTY>
optional whenCase -- but we should still consume GoDeepers before giving up> VALUE: (Nothing,[])

********** \ optional whenCase -- but we should still consume GoDeepers before giving up has returned Nothing    :2_2:Must:
********** > |>>/base got Nothing                                                                                :2_2:Must:
|>>/base> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********* \ |>>/base has returned (Nothing,0)                                                                     :2_2:Must:
|>| calling $>>> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
|>| calling $>>> MATCH (EOK): <EMPTY>
|>| calling $>>> VALUE: ((Nothing,0),[])

******** \ |>| calling $>> has returned (Nothing,0)                                                                :2_2:Must:
******** / undeepers                                                                                               :2_2:Must:
********* > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers                                :2_2:Must:
undeepers> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) IF  <…>
undeepers> MATCH (EERR): <EMPTY>
undeepers> ERROR:
undeepers> offset=6:
undeepers> unexpected MUST
undeepers> expecting )

******** \ !Unconsumed Error: undeepers: Unexpected MUST Expecting: )                                              :2_2:Must:
relPredSamelineWhen> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
relPredSamelineWhen> MATCH (CERR): "You" (
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=6:
relPredSamelineWhen> unexpected MUST
relPredSamelineWhen> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

******* \ !Consumed Error: relPredSamelineWhen: Unexpected MUST Expecting: TYPICALLY AKA OTHERWISE ) IF WHEN MEANS ( ( ( ( ( :2_2:Must:
manyIndentation/leaf?> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=6:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting (, ), AKA, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
****** / manyIndentation/deeper; calling someIndentation                                                           :2_1:Other "You":
******* / someIndentation                                                                                         :2_1:Other "You":
******** / myindented-GoDeeper                                                                                   :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                 :2_1:Other "You":
someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected "You"
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected "You" Expecting: (                                       :2_1:Other "You":
manyIndentation/deeper; calling someIndentation> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected "You"
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected "You" Expecting: (         :2_1:Other "You":
pHornlike/someStructure> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=6:
pHornlike/someStructure> unexpected MUST
pHornlike/someStructure> expecting (, ), AKA, DECIDE, DEFINE, IF, MEANS, OTHERWISE, TYPICALLY, or WHEN

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected MUST Expecting: TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
pHornlike / permute> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike / permute> MATCH (EERR): <EMPTY>
pHornlike / permute> ERROR:
pHornlike / permute> offset=6:
pHornlike / permute> unexpected MUST
pHornlike / permute> expecting (, ), AKA, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, TYPICALLY, UPON, or WHEN

**** \ !Unconsumed Error: pHornlike / permute: Unexpected MUST Expecting: GIVEN UPON TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
pHornlike> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pHornlike> MATCH (EERR): <EMPTY>
pHornlike> ERROR:
pHornlike> offset=6:
pHornlike> unexpected MUST
pHornlike> expecting (, ), AKA, DECIDE, DEFINE, GIVEN, IF, MEANS, OTHERWISE, TYPICALLY, UPON, WHEN, or §

*** \ !Unconsumed Error: pHornlike: Unexpected MUST Expecting: § GIVEN UPON TYPICALLY TYPICALLY AKA AKA OTHERWISE DEFINE DECIDE ) ) IF WHEN MEANS ( ( ( ( ( ( ( ( ( :2_1:Other "You":
*** / pRuleLabel                                                                                                      :2_1:Other "You":
**** / $>|                                                                                                           :2_1:Other "You":
$>|> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected "You"
$>|> expecting §

**** \ !Unconsumed Error: $>|: Unexpected "You" Expecting: §                                                        :2_1:Other "You":
pRuleLabel> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRuleLabel> MATCH (EERR): <EMPTY>
pRuleLabel> ERROR:
pRuleLabel> offset=4:
pRuleLabel> unexpected "You"
pRuleLabel> expecting §

*** \ !Unconsumed Error: pRuleLabel: Unexpected "You" Expecting: §                                                   :2_1:Other "You":
*** / pRule: unwrapping indentation and recursing                                                                     :2_1:Other "You":
**** / myindented-GoDeeper                                                                                           :2_1:Other "You":
myindented-GoDeeper> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected "You"
myindented-GoDeeper> expecting (

**** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "You" Expecting: (                                         :2_1:Other "You":
pRule: unwrapping indentation and recursing> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRule: unwrapping indentation and recursing> MATCH (EERR): <EMPTY>
pRule: unwrapping indentation and recursing> ERROR:
pRule: unwrapping indentation and recursing> offset=4:
pRule: unwrapping indentation and recursing> unexpected "You"
pRule: unwrapping indentation and recursing> expecting (

*** \ !Unconsumed Error: pRule: unwrapping indentation and recursing: Unexpected "You" Expecting: (                   :2_1:Other "You":
pRule> IN: "You" ( MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pRule> MATCH (EERR): <EMPTY>
pRule> ERROR:
pRule> offset=62:
pRule> unexpected (
pRule> expecting EOL or regulative rule

** \ !Unconsumed Error: pRule: Unexpected ( Expecting: EOL regulative rule                                             :2_1:Other "You":
Loading env

Parser tests
  PDPA
Loaded env
    pdpadbno-5 FAILED [1]

Failures:

  test/Spec.hs:954:7: 
  1) Parser tests, PDPA, pdpadbno-5
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), rkeyword = RParty, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["the PDPC"],Nothing) :| [("in" :| ["the form and manner specified at www.pdpc.gov.sg"],Nothing),("with" :| ["a Notification Message"],Nothing),("and" :| ["a list of individuals for whom notification waiver is sought"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Just (Regulative {subj = Leaf (("the PDPC" :| [],Nothing) :| []), rkeyword = RParty, who = Nothing, cond = Nothing, deontic = DMay, action = Leaf (("NOTIFY" :| ["you"],Nothing) :| [("with" :| ["a list of individuals to exclude from notification"],Nothing)]), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []}), lest = Nothing, rlabel = Just ("\167",2,"Notify PDPC"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [], defaults = [], symtab = []},DefNameAlias {name = ["the PDPC Exclusion List"], detail = ["with","a list of individuals to exclude from notification"], nlhint = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 1, version = Nothing})}]]
       but parsing failed with error:
       2:1:
       unexpected "You"
       expecting EOL, end of input, or standalone rule section heading
       
       §§      Notify PDPC                                                                                                                                                                                           
       ✳ You   MUST                  WITHIN                    3                                     days                                                                                                            
       TRUE    IF            TRUE    it is                     an NDB                                                                                                                                                
               UNLESS        FALSE   you are a Public Agency                                                                                                                                                         
               ➔                     NOTIFY                    the PDPC                                                                                                                                              
                                     in                        the form and manner specified at                                                                                                                      
                                                               www.pdpc.gov.sg                                                                                                                                       
                                     with                      a Notification Message                                                                                                                                
                                     and                                                                    a list of individuals for whom                                                                           
                                                                                                            notification waiver is sought                                                                            
               HENCE                 the PDPC                  MAY                                          NOTIFY                                you                                                                
                                                                                                            with                                  a list of individuals to exclude      AKA   the PDPC Exclusion List
                                                                                                                                                  from notification                                                  
       
       
       Stream:
       §§ ( "Notify PDPC" ) "✳" "You"
           ( MUST
               (
                   ( BEFORE
                       ( 3 ( "days" ) )
                   )
               ) IF
               (
                   ( "it is" ( "an NDB" ) )
               ) UNLESS ( ( "you are a Public Agency" ) ) DO
               (
                   ( "NOTIFY" ( "the PDPC" ) "in" ( "the form and manner specified at www.pdpc.gov.sg" ) "with" ( "a Notification Message" ) "and" ( ( ( "a list of individuals for whom notification waiver is sought" ) ) ) )
               ) HENCE
               (
                   ( "the PDPC"
                       ( MAY
                           (
                               ( "NOTIFY" ( "you" ) "with"
                                   ( "a list of individuals to exclude from notification"
                                       ( AKA ( "the PDPC Exclusion List" ) )
                                   )
                               )
                           )
                       )
                   )
               )
           )

  To rerun use: --match "/Parser tests/PDPA/pdpadbno-5/"

Randomized with seed 1547897600

Finished in 1.0900 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

